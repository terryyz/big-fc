{
  "BigCodeBench/13": {
    "ftplib.FTP": {
      "name": "ftplib.FTP",
      "type": "class",
      "signature": "(host='', user='', passwd='', acct='', timeout=<object object at 0x7f15b7294b10>, source_address=None, *, encoding='utf-8')",
      "chains": {
        "quit": {
          "name": "ftplib.FTP.quit",
          "type": "callable",
          "signature": "(self)"
        },
        "nlst": {
          "name": "ftplib.FTP.nlst",
          "type": "callable",
          "signature": "(self)"
        },
        "cwd": {
          "name": "ftplib.FTP.cwd",
          "type": "callable",
          "signature": "(self, dirname)"
        },
        "login": {
          "name": "ftplib.FTP.login",
          "type": "callable",
          "signature": "(self, user='', passwd='')"
        }
      }
    },
    "downloaded_files.append(filename)": {
      "name": "downloaded_files.append(filename)"
    },
    "os.makedirs": {
      "name": "os.makedirs",
      "type": "callable",
      "signature": "(name)"
    },
    "os.path.exists": {
      "name": "os.path.exists",
      "type": "callable",
      "signature": "(path)"
    },
    "subprocess.call": {
      "name": "subprocess.call",
      "type": "callable",
      "signature": "(*popenargs, **kwargs)"
    }
  },
  "BigCodeBench/15": {
    "csv.reader": {
      "name": "csv.reader",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "open.write(f'\\nError executing command, exited with code {ret_code}')": {
      "name": "open.write(f'\\nError executing command, exited with code {ret_code}')"
    },
    "os.makedirs": {
      "name": "os.makedirs",
      "type": "callable",
      "signature": "(name)"
    },
    "os.path.exists": {
      "name": "os.path.exists",
      "type": "callable",
      "signature": "(path)"
    },
    "output_files.append(output_file)": {
      "name": "output_files.append(output_file)"
    },
    "subprocess.STDOUT": {
      "name": "subprocess.STDOUT",
      "type": "constant",
      "signature": null,
      "value": "-2"
    },
    "subprocess.call": {
      "name": "subprocess.call",
      "type": "callable",
      "signature": "(*popenargs, **kwargs)"
    }
  },
  "BigCodeBench/17": {
    "proc.name()": {
      "name": "proc.name()"
    },
    "proc.terminate()": {
      "name": "proc.terminate()"
    },
    "psutil.process_iter": {
      "name": "psutil.process_iter",
      "type": "callable",
      "signature": "()"
    },
    "time.sleep": {
      "name": "time.sleep",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    }
  },
  "BigCodeBench/19": {
    "zipfile.ZipFile": {
      "name": "zipfile.ZipFile",
      "type": "class",
      "signature": "(file, mode='r', compression=0, allowZip64=True, compresslevel=None, *, strict_timestamps=True)",
      "chains": {
        "write": {
          "name": "zipfile.ZipFile.write",
          "type": "callable",
          "signature": "(self, filename, arcname=None)"
        }
      }
    },
    "glob.glob": {
      "name": "glob.glob",
      "type": "callable",
      "signature": "(pathname)"
    },
    "os.path.isfile": {
      "name": "os.path.isfile",
      "type": "callable",
      "signature": "(path)"
    },
    "os.path.basename": {
      "name": "os.path.basename",
      "type": "callable",
      "signature": "(p)"
    },
    "os.path.exists": {
      "name": "os.path.exists",
      "type": "callable",
      "signature": "(path)"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    }
  },
  "BigCodeBench/34": {
    "matplotlib.pyplot.axis": {
      "name": "matplotlib.pyplot.axis",
      "type": "callable",
      "signature": "(arg=None)"
    },
    "matplotlib.pyplot.imshow": {
      "name": "matplotlib.pyplot.imshow",
      "type": "callable",
      "signature": "(X)"
    },
    "matplotlib.pyplot.figure": {
      "name": "matplotlib.pyplot.figure",
      "type": "callable",
      "signature": "(figsize=None, **kwargs)"
    },
    "re.sub": {
      "name": "re.sub",
      "type": "callable",
      "signature": "(pattern, repl, string)"
    },
    "re.sub.strip": {
      "name": "re.sub.strip",
      "type": "callable",
      "signature": "()"
    }
  },
  "BigCodeBench/37": {
    "pandas.Series.sort_values": {
      "name": "pandas.Series.sort_values",
      "type": "callable",
      "signature": "(self, *, axis: 'Axis' = 0, ascending: 'bool | int | Sequence[bool] | Sequence[int]' = True, inplace: 'bool' = False, kind: 'str' = 'quicksort', na_position: 'str' = 'last', ignore_index: 'bool' = False, key: 'ValueKeyFunc' = None) -> 'Series | None'",
      "chains": {
        "index": {
          "name": "pandas.Series.sort_values.index",
          "type": "callable",
          "signature": "(self, *, axis: 'Axis' = 0, ascending: 'bool | int | Sequence[bool] | Sequence[int]' = True, inplace: 'bool' = False, kind: 'str' = 'quicksort', na_position: 'str' = 'last', ignore_index: 'bool' = False, key: 'ValueKeyFunc' = None) -> 'Series | None'"
        }
      }
    },
    "RandomForestClassifier(random_state=42).fit(X, y).feature_importances_": {
      "name": "RandomForestClassifier(random_state=42).fit(X, y).feature_importances_"
    },
    "df.drop(target_column, axis=1)": {
      "name": "df.drop(target_column, axis=1)"
    },
    "df.drop(target_column, axis=1).columns": {
      "name": "df.drop(target_column, axis=1).columns"
    },
    "matplotlib.pyplot.figure": {
      "name": "matplotlib.pyplot.figure",
      "type": "callable",
      "signature": "(figsize=None, **kwargs)"
    },
    "seaborn.barplot": {
      "name": "seaborn.barplot",
      "type": "callable",
      "signature": "(x=None, y=None, **kwargs)"
    },
    "seaborn.barplot.set_ylabel": {
      "name": "seaborn.barplot.set_ylabel",
      "type": "callable",
      "signature": "(data=None)"
    },
    "seaborn.barplot.set_xlabel": {
      "name": "seaborn.barplot.set_xlabel",
      "type": "callable",
      "signature": "(data=None)"
    },
    "seaborn.barplot.set_title": {
      "name": "seaborn.barplot.set_title",
      "type": "callable",
      "signature": "(data=None)"
    },
    "sklearn.ensemble.RandomForestClassifier": {
      "name": "sklearn.ensemble.RandomForestClassifier",
      "type": "class",
      "signature": "(random_state=None)"
    }
  },
  "BigCodeBench/82": {
    "flask.Flask": {
      "name": "flask.Flask",
      "type": "class",
      "signature": "(import_name: 'str', static_url_path: 'str | None' = None, static_folder: 'str | os.PathLike[str] | None' = 'static', static_host: 'str | None' = None, host_matching: 'bool' = False, subdomain_matching: 'bool' = False, template_folder: 'str | os.PathLike[str] | None' = 'templates', instance_path: 'str | None' = None, instance_relative_config: 'bool' = False, root_path: 'str | None' = None)",
      "chains": {
        "config": {
          "name": "flask.Flask.config",
          "type": "class",
          "signature": "(import_name: 'str', static_url_path: 'str | None' = None, static_folder: 'str | os.PathLike[str] | None' = 'static', static_host: 'str | None' = None, host_matching: 'bool' = False, subdomain_matching: 'bool' = False, template_folder: 'str | os.PathLike[str] | None' = 'templates', instance_path: 'str | None' = None, instance_relative_config: 'bool' = False, root_path: 'str | None' = None)"
        },
        "route": {
          "name": "flask.Flask.route",
          "type": "callable",
          "signature": "(self, rule: 'str')"
        }
      }
    },
    "flask_login.UserMixin": {
      "name": "flask_login.UserMixin",
      "type": "class",
      "signature": "()",
      "chains": {
        "id": {
          "name": "flask_login.UserMixin.id",
          "type": "class",
          "signature": "()"
        },
        "password_hash": {
          "name": "flask_login.UserMixin.password_hash",
          "type": "class",
          "signature": "()"
        }
      }
    },
    "flask_login.LoginManager": {
      "name": "flask_login.LoginManager",
      "type": "class",
      "signature": "(app=None, add_context_processor=True)",
      "chains": {
        "user_loader": {
          "name": "flask_login.LoginManager.user_loader",
          "type": "callable",
          "signature": "(self, callback)"
        },
        "init_app": {
          "name": "flask_login.LoginManager.init_app",
          "type": "callable",
          "signature": "(self, app)"
        }
      }
    },
    "LoginForm().password": {
      "name": "LoginForm().password"
    },
    "LoginForm().username": {
      "name": "LoginForm().username"
    },
    "LoginForm().password.data": {
      "name": "LoginForm().password.data"
    },
    "LoginForm().username.data": {
      "name": "LoginForm().username.data"
    },
    "LoginForm().validate_on_submit()": {
      "name": "LoginForm().validate_on_submit()"
    },
    "flask.url_for": {
      "name": "flask.url_for",
      "type": "callable",
      "signature": "(endpoint: 'str')"
    },
    "flask.redirect": {
      "name": "flask.redirect",
      "type": "callable",
      "signature": "(location: 'str')"
    },
    "flask.render_template": {
      "name": "flask.render_template",
      "type": "callable",
      "signature": "(template_name_or_list: 'str | Template | list[str | Template]')"
    },
    "flask_login.logout_user": {
      "name": "flask_login.logout_user",
      "type": "callable",
      "signature": "()"
    },
    "flask_login.current_user.id": {
      "name": "flask_login.current_user.id",
      "type": "callable",
      "signature": "(self, *args, **kwargs)"
    },
    "flask_login.login_user": {
      "name": "flask_login.login_user",
      "type": "callable",
      "signature": "(user)"
    },
    "werkzeug.security.generate_password_hash": {
      "name": "werkzeug.security.generate_password_hash",
      "type": "callable",
      "signature": "(password: 'str')"
    },
    "werkzeug.security.check_password_hash": {
      "name": "werkzeug.security.check_password_hash",
      "type": "callable",
      "signature": "(pwhash: 'str', password: 'str') -> 'bool)"
    },
    "wtforms.validators.DataRequired": {
      "name": "wtforms.validators.DataRequired",
      "type": "class",
      "signature": "()"
    },
    "wtforms.validators.Length": {
      "name": "wtforms.validators.Length",
      "type": "class",
      "signature": "(min=-1, max=-1)"
    }
  },
  "BigCodeBench/89": {
    "column_data.reshape(-1, 1)": {
      "name": "column_data.reshape(-1, 1)"
    },
    "matplotlib.pyplot.show": {
      "name": "matplotlib.pyplot.show",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplot": {
      "name": "matplotlib.pyplot.subplot",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "matplotlib.pyplot.figure": {
      "name": "matplotlib.pyplot.figure",
      "type": "callable",
      "signature": "(figsize=None, **kwargs)"
    },
    "matplotlib.pyplot.title": {
      "name": "matplotlib.pyplot.title",
      "type": "callable",
      "signature": "(label)"
    },
    "matplotlib.pyplot.scatter": {
      "name": "matplotlib.pyplot.scatter",
      "type": "callable",
      "signature": "(x, y)"
    },
    "numpy.copy": {
      "name": "numpy.copy",
      "type": "callable",
      "signature": "(a)"
    },
    "numpy.where": {
      "name": "numpy.where",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.delete": {
      "name": "numpy.delete",
      "type": "callable",
      "signature": "(arr, obj, axis=None)"
    },
    "numpy.abs": {
      "name": "numpy.abs",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "scipy.stats.zscore": {
      "name": "scipy.stats.zscore",
      "type": "callable",
      "signature": "(a)"
    },
    "sklearn.preprocessing.StandardScaler": {
      "name": "sklearn.preprocessing.StandardScaler",
      "type": "class",
      "signature": "()"
    },
    "sklearn.preprocessing.StandardScaler.fit_transform": {
      "name": "sklearn.preprocessing.StandardScaler.fit_transform",
      "type": "callable",
      "signature": "(self, X)"
    }
  },
  "BigCodeBench/92": {
    "data.iloc": {
      "name": "data.iloc"
    },
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].legend": {
      "name": "matplotlib.pyplot.subplots[1].legend",
      "type": "method",
      "signature": "(*args, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_ylabel": {
      "name": "matplotlib.pyplot.subplots[1].set_ylabel",
      "type": "method",
      "signature": "(ylabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_xlabel": {
      "name": "matplotlib.pyplot.subplots[1].set_xlabel",
      "type": "method",
      "signature": "(xlabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_title": {
      "name": "matplotlib.pyplot.subplots[1].set_title",
      "type": "method",
      "signature": "(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].scatter": {
      "name": "matplotlib.pyplot.subplots[1].scatter",
      "type": "method",
      "signature": "(x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, *, edgecolors=None, plotnonfinite=False, data=None, **kwargs)"
    },
    "sklearn.cluster.KMeans": {
      "name": "sklearn.cluster.KMeans",
      "type": "class",
      "signature": "(n_clusters=8)"
    },
    "sklearn.cluster.KMeans.cluster_centers_": {
      "name": "sklearn.cluster.KMeans.cluster_centers_",
      "type": "class",
      "signature": "(n_clusters=8, *, init='k-means++', n_init='warn', max_iter=300, tol=0.0001, verbose=0, random_state=None, copy_x=True, algorithm='lloyd')"
    },
    "sklearn.cluster.KMeans.fit_predict": {
      "name": "sklearn.cluster.KMeans.fit_predict",
      "type": "callable",
      "signature": "(self, X)"
    }
  },
  "BigCodeBench/93": {
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].scatter": {
      "name": "matplotlib.pyplot.subplots[1].scatter",
      "type": "method",
      "signature": "(x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, *, edgecolors=None, plotnonfinite=False, data=None, **kwargs)"
    },
    "numpy.random.seed": {
      "name": "numpy.random.seed",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "sklearn.decomposition.PCA": {
      "name": "sklearn.decomposition.PCA",
      "type": "class",
      "signature": "(n_components=None)"
    },
    "sklearn.decomposition.PCA.fit_transform": {
      "name": "sklearn.decomposition.PCA.fit_transform",
      "type": "callable",
      "signature": "(self, X)"
    }
  },
  "BigCodeBench/99": {
    "matplotlib.pyplot.rc": {
      "name": "matplotlib.pyplot.rc",
      "type": "callable",
      "signature": "(group, **kwargs)"
    },
    "seaborn.pairplot": {
      "name": "seaborn.pairplot",
      "type": "callable",
      "signature": "(data, hue=None, vars=None)"
    },
    "seaborn.pairplot.fig": {
      "name": "seaborn.pairplot.fig",
      "type": "callable",
      "signature": "(data, *, hue=None, hue_order=None, palette=None, vars=None, x_vars=None, y_vars=None, kind='scatter', diag_kind='auto', markers=None, height=2.5, aspect=1, corner=False, dropna=False, plot_kws=None, diag_kws=None, grid_kws=None, size=None)"
    },
    "seaborn.pairplot.fig.suptitle": {
      "name": "seaborn.pairplot.fig.suptitle",
      "type": "callable",
      "signature": "(data)"
    },
    "sklearn.datasets.load_iris": {
      "name": "sklearn.datasets.load_iris",
      "type": "callable",
      "signature": "()"
    },
    "sklearn.datasets.load_iris.data": {
      "name": "sklearn.datasets.load_iris.data",
      "type": "callable",
      "signature": "(*, return_X_y=False, as_frame=False)"
    },
    "sklearn.datasets.load_iris.target": {
      "name": "sklearn.datasets.load_iris.target",
      "type": "callable",
      "signature": "(*, return_X_y=False, as_frame=False)"
    },
    "sklearn.datasets.load_iris.feature_names": {
      "name": "sklearn.datasets.load_iris.feature_names",
      "type": "callable",
      "signature": "(*, return_X_y=False, as_frame=False)"
    }
  },
  "BigCodeBench/100": {
    "datetime.datetime": {
      "name": "datetime.datetime",
      "type": "class",
      "signature": "(self, /, *args, **kwargs)",
      "chains": {
        "now": {
          "name": "datetime.datetime.now",
          "type": "callable",
          "signature": "()"
        }
      }
    },
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].legend": {
      "name": "matplotlib.pyplot.subplots[1].legend",
      "type": "method",
      "signature": "(*args, **kwargs)"
    },
    "matplotlib.pyplot.rc": {
      "name": "matplotlib.pyplot.rc",
      "type": "callable",
      "signature": "(group, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_xlabel": {
      "name": "matplotlib.pyplot.subplots[1].set_xlabel",
      "type": "method",
      "signature": "(xlabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_ylabel": {
      "name": "matplotlib.pyplot.subplots[1].set_ylabel",
      "type": "method",
      "signature": "(ylabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_title": {
      "name": "matplotlib.pyplot.subplots[1].set_title",
      "type": "method",
      "signature": "(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].plot": {
      "name": "matplotlib.pyplot.subplots[1].plot",
      "type": "method",
      "signature": "(*args, scalex=True, scaley=True, data=None, **kwargs)"
    },
    "pandas.date_range": {
      "name": "pandas.date_range",
      "type": "callable",
      "signature": "(end=None, periods=None, **kwargs) -> 'DatetimeIndex)"
    },
    "random.seed": {
      "name": "random.seed",
      "type": "callable",
      "signature": "(a=None)"
    },
    "random.randint": {
      "name": "random.randint",
      "type": "callable",
      "signature": "(a, b)"
    }
  },
  "BigCodeBench/101": {
    "pandas.DataFrame": {
      "name": "pandas.DataFrame",
      "type": "class",
      "signature": "(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'None'",
      "chains": {
        "corr": {
          "name": "pandas.DataFrame.corr",
          "type": "callable",
          "signature": "(self)"
        }
      }
    },
    "matplotlib.pyplot.rc": {
      "name": "matplotlib.pyplot.rc",
      "type": "callable",
      "signature": "(group, **kwargs)"
    },
    "matplotlib.pyplot.figure": {
      "name": "matplotlib.pyplot.figure",
      "type": "callable",
      "signature": "(figsize=None, **kwargs)"
    },
    "numpy.hstack": {
      "name": "numpy.hstack",
      "type": "callable",
      "signature": "(tup)"
    },
    "pandas.read_csv": {
      "name": "pandas.read_csv",
      "type": "callable",
      "signature": "(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', sep: 'str | None | lib.NoDefault' = <no_default>, header: \"int | Sequence[int] | None | Literal['infer']\" = 'infer', skiprows=None)"
    },
    "pandas.read_csv.values": {
      "name": "pandas.read_csv.values",
      "type": "callable",
      "signature": "(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: \"int | Sequence[int] | None | Literal['infer']\" = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace: 'bool' = False, skiprows=None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: \"Literal['high', 'legacy'] | None\" = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'"
    },
    "seaborn.set_theme": {
      "name": "seaborn.set_theme",
      "type": "callable",
      "signature": "(style='darkgrid')"
    },
    "seaborn.heatmap": {
      "name": "seaborn.heatmap",
      "type": "callable",
      "signature": "(data, annot=None, **kwargs)"
    }
  },
  "BigCodeBench/108": {
    "df.columns": {
      "name": "df.columns"
    },
    "df.set_index('date').set_index('date')": {
      "name": "df.set_index('date').set_index('date')"
    },
    "df.asfreq(freq, method='pad').plot(y='value')": {
      "name": "df.asfreq(freq, method='pad').plot(y='value')"
    },
    "df.asfreq(freq, method='pad').asfreq(freq, method='pad')": {
      "name": "df.asfreq(freq, method='pad').asfreq(freq, method='pad')"
    },
    "matplotlib.pyplot.ylabel": {
      "name": "matplotlib.pyplot.ylabel",
      "type": "callable",
      "signature": "(ylabel)"
    },
    "matplotlib.pyplot.title": {
      "name": "matplotlib.pyplot.title",
      "type": "callable",
      "signature": "(label)"
    },
    "pandas.to_numeric": {
      "name": "pandas.to_numeric",
      "type": "callable",
      "signature": "(arg, errors: 'DateTimeErrorChoices' = 'raise')"
    },
    "statsmodels.tsa.seasonal.seasonal_decompose": {
      "name": "statsmodels.tsa.seasonal.seasonal_decompose",
      "type": "callable",
      "signature": "(x, model='additive')"
    }
  },
  "BigCodeBench/120": {
    "random.seed": {
      "name": "random.seed",
      "type": "callable",
      "signature": "(a=None)"
    },
    "random.randint": {
      "name": "random.randint",
      "type": "callable",
      "signature": "(a, b)"
    }
  },
  "BigCodeBench/123": {
    "glob.glob": {
      "name": "glob.glob",
      "type": "callable",
      "signature": "(pathname)"
    },
    "my_list.append(12)": {
      "name": "my_list.append(12)"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    },
    "pandas.read_csv": {
      "name": "pandas.read_csv",
      "type": "callable",
      "signature": "(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]')"
    },
    "pandas.concat": {
      "name": "pandas.concat",
      "type": "callable",
      "signature": "(objs: 'Iterable[NDFrame] | Mapping[HashableT, ignore_index: 'bool' = False)"
    }
  },
  "BigCodeBench/124": {
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].set_xlabel": {
      "name": "matplotlib.pyplot.subplots[1].set_xlabel",
      "type": "method",
      "signature": "(xlabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_ylabel": {
      "name": "matplotlib.pyplot.subplots[1].set_ylabel",
      "type": "method",
      "signature": "(ylabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].hist": {
      "name": "matplotlib.pyplot.subplots[1].hist",
      "type": "method",
      "signature": "(x, bins=None, range=None, density=False, weights=None, cumulative=False, bottom=None, histtype='bar', align='mid', orientation='vertical', rwidth=None, log=False, color=None, label=None, stacked=False, *, data=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_title": {
      "name": "matplotlib.pyplot.subplots[1].set_title",
      "type": "method",
      "signature": "(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)"
    },
    "my_list.append(12)": {
      "name": "my_list.append(12)"
    },
    "random.seed": {
      "name": "random.seed",
      "type": "callable",
      "signature": "(a=None)"
    },
    "random.randint": {
      "name": "random.randint",
      "type": "callable",
      "signature": "(a, b)"
    },
    "time.time": {
      "name": "time.time",
      "type": "callable",
      "signature": "()"
    }
  },
  "BigCodeBench/129": {
    "bs4.BeautifulSoup": {
      "name": "bs4.BeautifulSoup",
      "type": "class",
      "signature": "(markup='', features=None, builder=None, parse_only=None, from_encoding=None, exclude_encodings=None, element_classes=None, **kwargs)",
      "chains": {
        "find": {
          "name": "bs4.BeautifulSoup.find",
          "type": "callable",
          "signature": "(self, name=None)"
        }
      }
    },
    "data.append(cols)": {
      "name": "data.append(cols)"
    },
    "ele.text": {
      "name": "ele.text"
    },
    "ele.text.strip()": {
      "name": "ele.text.strip()"
    },
    "requests.get": {
      "name": "requests.get",
      "type": "callable",
      "signature": "(url)"
    },
    "requests.get.text": {
      "name": "requests.get.text",
      "type": "callable",
      "signature": "(url, params=None, **kwargs)"
    },
    "requests.get.raise_for_status": {
      "name": "requests.get.raise_for_status",
      "type": "callable",
      "signature": "()"
    },
    "row.find_all('td')": {
      "name": "row.find_all('td')"
    },
    "soup.find('table').find_all('tr')": {
      "name": "soup.find('table').find_all('tr')"
    },
    "soup.find('table').find_all('th')": {
      "name": "soup.find('table').find_all('th')"
    },
    "th.text": {
      "name": "th.text"
    },
    "th.text.strip()": {
      "name": "th.text.strip()"
    }
  },
  "BigCodeBench/139": {
    "axes.append(ax)": {
      "name": "axes.append(ax)"
    },
    "df.empty": {
      "name": "df.empty"
    },
    "df.select_dtypes(include=np.number)": {
      "name": "df.select_dtypes(include=np.number)"
    },
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].set_xlabel": {
      "name": "matplotlib.pyplot.subplots[1].set_xlabel",
      "type": "method",
      "signature": "(xlabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_ylabel": {
      "name": "matplotlib.pyplot.subplots[1].set_ylabel",
      "type": "method",
      "signature": "(ylabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "numeric_cols.size": {
      "name": "numeric_cols.size"
    }
  },
  "BigCodeBench/147": {
    "socket.socket": {
      "name": "socket.socket",
      "type": "class",
      "signature": "(family=-1, type=-1, proto=-1, fileno=None)",
      "chains": {
        "close": {
          "name": "socket.socket.close",
          "type": "callable",
          "signature": "(self)"
        },
        "settimeout": {
          "name": "socket.socket.settimeout",
          "type": "callable",
          "signature": "(*args, **kwargs)"
        },
        "connect": {
          "name": "socket.socket.connect",
          "type": "callable",
          "signature": "(*args, **kwargs)"
        }
      }
    },
    "threading.Thread": {
      "name": "threading.Thread",
      "type": "class",
      "signature": "(group=None, target=None, name=None, args=(), kwargs=None, *, daemon=None)",
      "chains": {
        "join": {
          "name": "threading.Thread.join",
          "type": "callable",
          "signature": "(self)"
        },
        "start": {
          "name": "threading.Thread.start",
          "type": "callable",
          "signature": "(self)"
        }
      }
    },
    "socket.AF_INET": {
      "name": "socket.AF_INET",
      "type": "constant",
      "signature": null,
      "value": "AddressFamily.AF_INET"
    },
    "socket.SOCK_STREAM": {
      "name": "socket.SOCK_STREAM",
      "type": "constant",
      "signature": null,
      "value": "SocketKind.SOCK_STREAM"
    },
    "threads.append(thread)": {
      "name": "threads.append(thread)"
    }
  },
  "BigCodeBench/161": {
    "datetime.datetime": {
      "name": "datetime.datetime",
      "type": "class",
      "signature": "(self, /, *args, **kwargs)",
      "chains": {
        "strptime": {
          "name": "datetime.datetime.strptime",
          "type": "callable",
          "signature": "(*args, **kwargs)"
        }
      }
    },
    "pandas.DataFrame": {
      "name": "pandas.DataFrame",
      "type": "class",
      "signature": "(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'None'",
      "chains": {
        "to_csv": {
          "name": "pandas.DataFrame.to_csv",
          "type": "callable",
          "signature": "(self, path_or_buf: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, index: 'bool_t' = True)"
        }
      }
    },
    "line.strip().strip()": {
      "name": "line.strip().strip()"
    },
    "match.groups[2].strip": {
      "name": "match.groups[2].strip"
    },
    "parsed_data.append([log_type, timestamp, message.strip()])": {
      "name": "parsed_data.append([log_type, timestamp, message.strip()])"
    },
    "re.match": {
      "name": "re.match",
      "type": "callable",
      "signature": "(pattern, string)"
    },
    "re.match.groups": {
      "name": "re.match.groups",
      "type": "callable",
      "signature": "()"
    }
  },
  "BigCodeBench/162": {
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].set_ylabel": {
      "name": "matplotlib.pyplot.subplots[1].set_ylabel",
      "type": "method",
      "signature": "(ylabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_xlabel": {
      "name": "matplotlib.pyplot.subplots[1].set_xlabel",
      "type": "method",
      "signature": "(xlabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_title": {
      "name": "matplotlib.pyplot.subplots[1].set_title",
      "type": "method",
      "signature": "(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].hist": {
      "name": "matplotlib.pyplot.subplots[1].hist",
      "type": "method",
      "signature": "(x, bins=None, range=None, density=False, weights=None, cumulative=False, bottom=None, histtype='bar', align='mid', orientation='vertical', rwidth=None, log=False, color=None, label=None, stacked=False, *, data=None, **kwargs)"
    },
    "numpy.arange": {
      "name": "numpy.arange",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "re.split": {
      "name": "re.split",
      "type": "callable",
      "signature": "(pattern, string)"
    }
  },
  "BigCodeBench/177": {
    "df.columns": {
      "name": "df.columns"
    },
    "interesting_articles.empty": {
      "name": "interesting_articles.empty"
    },
    "nltk.word_tokenize": {
      "name": "nltk.word_tokenize",
      "type": "callable",
      "signature": "(text)"
    },
    "re.IGNORECASE": {
      "name": "re.IGNORECASE",
      "type": "constant",
      "signature": null,
      "value": "re.IGNORECASE"
    },
    "re.compile": {
      "name": "re.compile",
      "type": "callable",
      "signature": "(pattern, flags=0)"
    },
    "re.compile.search": {
      "name": "re.compile.search",
      "type": "callable",
      "signature": "(pattern)"
    }
  },
  "BigCodeBench/184": {
    "' '.join((word for word in text.split() if word not in STOPWORDS)).split()": {
      "name": "' '.join((word for word in text.split() if word not in STOPWORDS)).split()"
    },
    "re.sub": {
      "name": "re.sub",
      "type": "callable",
      "signature": "(pattern, repl, string)"
    },
    "sklearn.feature_extraction.text.CountVectorizer": {
      "name": "sklearn.feature_extraction.text.CountVectorizer",
      "type": "class",
      "signature": "()"
    },
    "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out": {
      "name": "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out",
      "type": "callable",
      "signature": "(self)"
    },
    "sklearn.feature_extraction.text.CountVectorizer.fit_transform": {
      "name": "sklearn.feature_extraction.text.CountVectorizer.fit_transform",
      "type": "callable",
      "signature": "(self, raw_documents)"
    },
    "text.lower().lower()": {
      "name": "text.lower().lower()"
    },
    "vectorizer.fit_transform(dataframe[text_column]).toarray()": {
      "name": "vectorizer.fit_transform(dataframe[text_column]).toarray()"
    }
  },
  "BigCodeBench/187": {
    "numpy.random.uniform": {
      "name": "numpy.random.uniform",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "shapely.geometry.Point": {
      "name": "shapely.geometry.Point",
      "type": "class",
      "signature": "(*args)"
    }
  },
  "BigCodeBench/199": {
    "pytz.timezone": {
      "name": "pytz.timezone",
      "type": "callable",
      "signature": "(zone)"
    },
    "random.seed": {
      "name": "random.seed",
      "type": "callable",
      "signature": "(a=None)"
    },
    "random.randint": {
      "name": "random.randint",
      "type": "callable",
      "signature": "(a, b)"
    },
    "report_data.append([city, city_time.strftime('%Y-%m-%d %H:%M:%S %Z'), weather])": {
      "name": "report_data.append([city, city_time.strftime('%Y-%m-%d %H:%M:%S %Z'), weather])"
    },
    "utc_datetime.astimezone(city_tz)": {
      "name": "utc_datetime.astimezone(city_tz)"
    },
    "utc_datetime.astimezone.strftime('%Y-%m-%d %H:%M:%S %Z')": {
      "name": "utc_datetime.astimezone.strftime('%Y-%m-%d %H:%M:%S %Z')"
    }
  },
  "BigCodeBench/208": {
    "matplotlib.pyplot.gca": {
      "name": "matplotlib.pyplot.gca",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.plot": {
      "name": "matplotlib.pyplot.plot",
      "type": "callable",
      "signature": "(*args)"
    },
    "matplotlib.pyplot.title": {
      "name": "matplotlib.pyplot.title",
      "type": "callable",
      "signature": "(label)"
    },
    "matplotlib.pyplot.figure": {
      "name": "matplotlib.pyplot.figure",
      "type": "callable",
      "signature": "(figsize=None, **kwargs)"
    },
    "numpy.cumsum": {
      "name": "numpy.cumsum",
      "type": "callable",
      "signature": "(a)"
    },
    "numpy.random.seed": {
      "name": "numpy.random.seed",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.random.choice": {
      "name": "numpy.random.choice",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    }
  },
  "BigCodeBench/211": {
    "zipfile.ZipFile": {
      "name": "zipfile.ZipFile",
      "type": "class",
      "signature": "(file, mode='r', compression=0, allowZip64=True, compresslevel=None, *, strict_timestamps=True)",
      "chains": {
        "extractall": {
          "name": "zipfile.ZipFile.extractall",
          "type": "callable",
          "signature": "(self, path=None)"
        }
      }
    },
    "open.write(response.content)": {
      "name": "open.write(response.content)"
    },
    "os.path.basename": {
      "name": "os.path.basename",
      "type": "callable",
      "signature": "(p)"
    },
    "os.listdir": {
      "name": "os.listdir",
      "type": "callable",
      "signature": "(path=None)"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    },
    "requests.get": {
      "name": "requests.get",
      "type": "callable",
      "signature": "(url, **kwargs)"
    },
    "requests.get.content": {
      "name": "requests.get.content",
      "type": "callable",
      "signature": "(url, params=None, **kwargs)"
    }
  },
  "BigCodeBench/214": {
    "cv2.COLOR_BGR2RGB": {
      "name": "cv2.COLOR_BGR2RGB",
      "type": "constant",
      "signature": null,
      "value": "4"
    },
    "cv2.cvtColor": {
      "name": "cv2.cvtColor",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].set_title": {
      "name": "matplotlib.pyplot.subplots[1].set_title",
      "type": "method",
      "signature": "(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].imshow": {
      "name": "matplotlib.pyplot.subplots[1].imshow",
      "type": "method",
      "signature": "(X, cmap=None, norm=None, *, aspect=None, interpolation=None, alpha=None, vmin=None, vmax=None, origin=None, extent=None, interpolation_stage=None, filternorm=True, filterrad=4.0, resample=None, url=None, data=None, **kwargs)"
    },
    "numpy.random.seed": {
      "name": "numpy.random.seed",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.zeros": {
      "name": "numpy.zeros",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "random.seed": {
      "name": "random.seed",
      "type": "callable",
      "signature": "(a=None)"
    },
    "random.randint": {
      "name": "random.randint",
      "type": "callable",
      "signature": "(a, b)"
    }
  },
  "BigCodeBench/227": {
    "librosa.stft": {
      "name": "librosa.stft",
      "type": "callable",
      "signature": "(y: numpy.ndarray)"
    },
    "librosa.amplitude_to_db": {
      "name": "librosa.amplitude_to_db",
      "type": "callable",
      "signature": "(S: numpy.ndarray, ref: Union[float)"
    },
    "librosa.display.specshow": {
      "name": "librosa.display.specshow",
      "type": "callable",
      "signature": "(data: 'np.ndarray', x_axis: 'Optional[str]' = None, y_axis: 'Optional[str]' = None, sr: 'float' = 22050)"
    },
    "matplotlib.pyplot.gcf": {
      "name": "matplotlib.pyplot.gcf",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.title": {
      "name": "matplotlib.pyplot.title",
      "type": "callable",
      "signature": "(label)"
    },
    "matplotlib.pyplot.colorbar": {
      "name": "matplotlib.pyplot.colorbar",
      "type": "callable",
      "signature": "(**kwargs)"
    },
    "numpy.max": {
      "name": "numpy.max",
      "type": "callable",
      "signature": "(a)"
    },
    "numpy.array": {
      "name": "numpy.array",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.mean": {
      "name": "numpy.mean",
      "type": "callable",
      "signature": "(a)"
    },
    "numpy.sqrt": {
      "name": "numpy.sqrt",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.abs": {
      "name": "numpy.abs",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.log10": {
      "name": "numpy.log10",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "os.path.isfile": {
      "name": "os.path.isfile",
      "type": "callable",
      "signature": "(path)"
    },
    "soundfile.read": {
      "name": "soundfile.read",
      "type": "callable",
      "signature": "(file)"
    }
  },
  "BigCodeBench/239": {
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.close": {
      "name": "matplotlib.pyplot.close",
      "type": "callable",
      "signature": "(fig=None)"
    },
    "matplotlib.pyplot.subplots[1].legend": {
      "name": "matplotlib.pyplot.subplots[1].legend",
      "type": "method",
      "signature": "(*args, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].get_xlim": {
      "name": "matplotlib.pyplot.subplots[1].get_xlim",
      "type": "method",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].set_title": {
      "name": "matplotlib.pyplot.subplots[1].set_title",
      "type": "method",
      "signature": "(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].plot": {
      "name": "matplotlib.pyplot.subplots[1].plot",
      "type": "method",
      "signature": "(*args, scalex=True, scaley=True, data=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].hist": {
      "name": "matplotlib.pyplot.subplots[1].hist",
      "type": "method",
      "signature": "(x, bins=None, range=None, density=False, weights=None, cumulative=False, bottom=None, histtype='bar', align='mid', orientation='vertical', rwidth=None, log=False, color=None, label=None, stacked=False, *, data=None, **kwargs)"
    },
    "numpy.min": {
      "name": "numpy.min",
      "type": "callable",
      "signature": "(a)"
    },
    "numpy.std": {
      "name": "numpy.std",
      "type": "callable",
      "signature": "(a)"
    },
    "numpy.max": {
      "name": "numpy.max",
      "type": "callable",
      "signature": "(a)"
    },
    "numpy.mean": {
      "name": "numpy.mean",
      "type": "callable",
      "signature": "(a)"
    },
    "numpy.linspace": {
      "name": "numpy.linspace",
      "type": "callable",
      "signature": "(start, stop, num=50)"
    },
    "numpy.array": {
      "name": "numpy.array",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "scipy.stats.norm": {
      "name": "scipy.stats.norm",
      "type": "callable",
      "signature": "(*args, **kwds)"
    },
    "scipy.stats.norm.pdf": {
      "name": "scipy.stats.norm.pdf",
      "type": "callable",
      "signature": "(x, *args, **kwds)"
    }
  },
  "BigCodeBench/241": {
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].legend": {
      "name": "matplotlib.pyplot.subplots[1].legend",
      "type": "method",
      "signature": "(*args, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].plot": {
      "name": "matplotlib.pyplot.subplots[1].plot",
      "type": "method",
      "signature": "(*args, scalex=True, scaley=True, data=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_title": {
      "name": "matplotlib.pyplot.subplots[1].set_title",
      "type": "method",
      "signature": "(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)"
    },
    "numpy.array": {
      "name": "numpy.array",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.array.size": {
      "name": "numpy.array.size",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "sklearn.preprocessing.normalize": {
      "name": "sklearn.preprocessing.normalize",
      "type": "callable",
      "signature": "(X)"
    }
  },
  "BigCodeBench/267": {
    "data.values()": {
      "name": "data.values()"
    },
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "(**fig_kw)"
    },
    "matplotlib.pyplot.subplots[1].plot": {
      "name": "matplotlib.pyplot.subplots[1].plot",
      "type": "method",
      "signature": "(*args, scalex=True, scaley=True, data=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_xlabel": {
      "name": "matplotlib.pyplot.subplots[1].set_xlabel",
      "type": "method",
      "signature": "(xlabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_title": {
      "name": "matplotlib.pyplot.subplots[1].set_title",
      "type": "method",
      "signature": "(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_ylabel": {
      "name": "matplotlib.pyplot.subplots[1].set_ylabel",
      "type": "method",
      "signature": "(ylabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "numpy.pi": {
      "name": "numpy.pi",
      "type": "constant",
      "signature": null,
      "value": "3.141592653589793"
    },
    "numpy.abs": {
      "name": "numpy.abs",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.outer": {
      "name": "numpy.outer",
      "type": "callable",
      "signature": "(a, b)"
    },
    "numpy.array": {
      "name": "numpy.array",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.sin": {
      "name": "numpy.sin",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.linspace": {
      "name": "numpy.linspace",
      "type": "callable",
      "signature": "(start, stop, num=50, endpoint=True)"
    },
    "scipy.fftpack.fft": {
      "name": "scipy.fftpack.fft",
      "type": "callable",
      "signature": "(x)"
    }
  },
  "BigCodeBench/273": {
    "cgi.parse_header": {
      "name": "cgi.parse_header",
      "type": "callable",
      "signature": "(line)"
    },
    "http.server.BaseHTTPRequestHandler": {
      "name": "http.server.BaseHTTPRequestHandler",
      "type": "class",
      "signature": "(request, client_address, server)"
    },
    "http.server.BaseHTTPRequestHandler.wfile": {
      "name": "http.server.BaseHTTPRequestHandler.wfile",
      "type": "class",
      "signature": "(request, client_address, server)"
    },
    "http.server.BaseHTTPRequestHandler.rfile": {
      "name": "http.server.BaseHTTPRequestHandler.rfile",
      "type": "class",
      "signature": "(request, client_address, server)"
    },
    "http.server.BaseHTTPRequestHandler.headers": {
      "name": "http.server.BaseHTTPRequestHandler.headers",
      "type": "class",
      "signature": "(request, client_address, server)"
    },
    "http.server.BaseHTTPRequestHandler.end_headers": {
      "name": "http.server.BaseHTTPRequestHandler.end_headers",
      "type": "callable",
      "signature": "(self)"
    },
    "http.server.BaseHTTPRequestHandler.rfile.read": {
      "name": "http.server.BaseHTTPRequestHandler.rfile.read",
      "type": "class",
      "signature": "(request)"
    },
    "http.server.BaseHTTPRequestHandler.send_response": {
      "name": "http.server.BaseHTTPRequestHandler.send_response",
      "type": "callable",
      "signature": "(self, code)"
    },
    "http.server.BaseHTTPRequestHandler.wfile.write": {
      "name": "http.server.BaseHTTPRequestHandler.wfile.write",
      "type": "class",
      "signature": "(request)"
    },
    "http.server.BaseHTTPRequestHandler.headers.get": {
      "name": "http.server.BaseHTTPRequestHandler.headers.get",
      "type": "class",
      "signature": "(request)"
    },
    "http.server.BaseHTTPRequestHandler.send_error": {
      "name": "http.server.BaseHTTPRequestHandler.send_error",
      "type": "callable",
      "signature": "(self, code, message=None)"
    },
    "http.server.BaseHTTPRequestHandler.send_header": {
      "name": "http.server.BaseHTTPRequestHandler.send_header",
      "type": "callable",
      "signature": "(self, keyword, value)"
    },
    "json.dumps": {
      "name": "json.dumps",
      "type": "callable",
      "signature": "(obj)"
    },
    "json.loads": {
      "name": "json.loads",
      "type": "callable",
      "signature": "(s)"
    }
  },
  "BigCodeBench/274": {
    "smtplib.SMTP": {
      "name": "smtplib.SMTP",
      "type": "class",
      "signature": "(host='', port=0, local_hostname=None, timeout=<object object at 0x7f15b7294b10>, source_address=None)",
      "chains": {
        "starttls": {
          "name": "smtplib.SMTP.starttls",
          "type": "callable",
          "signature": "(self)"
        },
        "login": {
          "name": "smtplib.SMTP.login",
          "type": "callable",
          "signature": "(self, user, password)"
        },
        "sendmail": {
          "name": "smtplib.SMTP.sendmail",
          "type": "callable",
          "signature": "(self, from_addr, to_addrs, msg)"
        }
      }
    },
    "cgi.parse_header": {
      "name": "cgi.parse_header",
      "type": "callable",
      "signature": "(line)"
    },
    "email.mime.text.MIMEText": {
      "name": "email.mime.text.MIMEText",
      "type": "class",
      "signature": "(_text)"
    },
    "email.mime.text.MIMEText.as_string": {
      "name": "email.mime.text.MIMEText.as_string",
      "type": "callable",
      "signature": "(self)"
    },
    "http.server.BaseHTTPRequestHandler": {
      "name": "http.server.BaseHTTPRequestHandler",
      "type": "class",
      "signature": "(request, client_address, server)"
    },
    "http.server.BaseHTTPRequestHandler.rfile": {
      "name": "http.server.BaseHTTPRequestHandler.rfile",
      "type": "class",
      "signature": "(request, client_address, server)"
    },
    "http.server.BaseHTTPRequestHandler.headers": {
      "name": "http.server.BaseHTTPRequestHandler.headers",
      "type": "class",
      "signature": "(request, client_address, server)"
    },
    "http.server.BaseHTTPRequestHandler.end_headers": {
      "name": "http.server.BaseHTTPRequestHandler.end_headers",
      "type": "callable",
      "signature": "(self)"
    },
    "http.server.BaseHTTPRequestHandler.send_response": {
      "name": "http.server.BaseHTTPRequestHandler.send_response",
      "type": "callable",
      "signature": "(self, code)"
    },
    "http.server.BaseHTTPRequestHandler.rfile.read": {
      "name": "http.server.BaseHTTPRequestHandler.rfile.read",
      "type": "class",
      "signature": "(request)"
    },
    "http.server.BaseHTTPRequestHandler.headers.get": {
      "name": "http.server.BaseHTTPRequestHandler.headers.get",
      "type": "class",
      "signature": "(request)"
    },
    "json.loads": {
      "name": "json.loads",
      "type": "callable",
      "signature": "(s)"
    }
  },
  "BigCodeBench/287": {
    "collections.Counter": {
      "name": "collections.Counter",
      "type": "class",
      "signature": "(iterable=None, /, **kwds)",
      "chains": {
        "update": {
          "name": "collections.Counter.update",
          "type": "callable",
          "signature": "(self, iterable=None)"
        }
      }
    },
    "file_name.endswith('.txt')": {
      "name": "file_name.endswith('.txt')"
    },
    "json.dump": {
      "name": "json.dump",
      "type": "callable",
      "signature": "(obj, fp)"
    },
    "open.read()": {
      "name": "open.read()"
    },
    "os.listdir": {
      "name": "os.listdir",
      "type": "callable",
      "signature": "(path=None)"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    }
  },
  "BigCodeBench/302": {
    "df.index": {
      "name": "df.index"
    },
    "matplotlib.pyplot.figure": {
      "name": "matplotlib.pyplot.figure",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.title": {
      "name": "matplotlib.pyplot.title",
      "type": "callable",
      "signature": "(label)"
    },
    "pandas.to_datetime": {
      "name": "pandas.to_datetime",
      "type": "callable",
      "signature": "(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible')"
    },
    "pandas.concat": {
      "name": "pandas.concat",
      "type": "callable",
      "signature": "(objs: 'Iterable[NDFrame] | Mapping[HashableT, axis: 'Axis' = 0)"
    },
    "pandas.concat.iloc": {
      "name": "pandas.concat.iloc",
      "type": "callable",
      "signature": "(objs: 'Iterable[NDFrame] | Mapping[HashableT, NDFrame]', *, axis: 'Axis' = 0, join: 'str' = 'outer', ignore_index: 'bool' = False, keys=None, levels=None, names=None, verify_integrity: 'bool' = False, sort: 'bool' = False, copy: 'bool | None' = None) -> 'DataFrame | Series'"
    },
    "seaborn.heatmap": {
      "name": "seaborn.heatmap",
      "type": "callable",
      "signature": "(data, cmap=None, annot=None, **kwargs)"
    }
  },
  "BigCodeBench/308": {
    "pandas.DataFrame": {
      "name": "pandas.DataFrame",
      "type": "class",
      "signature": "(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'None'",
      "chains": {
        "loc": {
          "name": "pandas.DataFrame.loc",
          "type": "constant",
          "signature": null,
          "value": "<property object at 0x7f1508f022f0>"
        },
        "apply": {
          "name": "pandas.DataFrame.apply",
          "type": "callable",
          "signature": "(self, func: 'AggFuncType', axis: 'Axis' = 0, **kwargs)"
        }
      }
    },
    "random.randint": {
      "name": "random.randint",
      "type": "callable",
      "signature": "(a, b)"
    },
    "statistics.mean": {
      "name": "statistics.mean",
      "type": "callable",
      "signature": "(data)"
    }
  },
  "BigCodeBench/310": {
    "csv.writer": {
      "name": "csv.writer",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "csv.writer.writerows": {
      "name": "csv.writer.writerows",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "csv.writer.writerow": {
      "name": "csv.writer.writerow",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "os.getcwd": {
      "name": "os.getcwd",
      "type": "callable",
      "signature": "()"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    },
    "random.randint": {
      "name": "random.randint",
      "type": "callable",
      "signature": "(a, b)"
    },
    "statistics.mean": {
      "name": "statistics.mean",
      "type": "callable",
      "signature": "(data)"
    }
  },
  "BigCodeBench/313": {
    "datetime.datetime": {
      "name": "datetime.datetime",
      "type": "class",
      "signature": "(self, /, *args, **kwargs)",
      "chains": {
        "now": {
          "name": "datetime.datetime.now",
          "type": "callable",
          "signature": "()"
        }
      }
    },
    "filename.split('.')": {
      "name": "filename.split('.')"
    },
    "open.read()": {
      "name": "open.read()"
    },
    "os.listdir": {
      "name": "os.listdir",
      "type": "callable",
      "signature": "(path=None)"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    },
    "os.makedirs": {
      "name": "os.makedirs",
      "type": "callable",
      "signature": "(name)"
    },
    "os.path.exists": {
      "name": "os.path.exists",
      "type": "callable",
      "signature": "(path)"
    },
    "re.search": {
      "name": "re.search",
      "type": "callable",
      "signature": "(pattern, string)"
    },
    "re.search.group": {
      "name": "re.search.group",
      "type": "callable",
      "signature": "(pattern)"
    },
    "shutil.move": {
      "name": "shutil.move",
      "type": "callable",
      "signature": "(src, dst)"
    }
  },
  "BigCodeBench/324": {
    "subprocess.Popen": {
      "name": "subprocess.Popen",
      "type": "class",
      "signature": "(args, bufsize=-1, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=True, shell=False, cwd=None, env=None, universal_newlines=None, startupinfo=None, creationflags=0, restore_signals=True, start_new_session=False, pass_fds=(), *, user=None, group=None, extra_groups=None, encoding=None, errors=None, text=None, umask=-1, pipesize=-1)",
      "chains": {
        "poll": {
          "name": "subprocess.Popen.poll",
          "type": "callable",
          "signature": "(self)"
        }
      }
    },
    "exit_codes.append(process.poll())": {
      "name": "exit_codes.append(process.poll())"
    },
    "thread.join()": {
      "name": "thread.join()"
    },
    "thread.start()": {
      "name": "thread.start()"
    },
    "time.sleep": {
      "name": "time.sleep",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    }
  },
  "BigCodeBench/326": {
    "subprocess.Popen": {
      "name": "subprocess.Popen",
      "type": "class",
      "signature": "(args, bufsize=-1, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=True, shell=False, cwd=None, env=None, universal_newlines=None, startupinfo=None, creationflags=0, restore_signals=True, start_new_session=False, pass_fds=(), *, user=None, group=None, extra_groups=None, encoding=None, errors=None, text=None, umask=-1, pipesize=-1)",
      "chains": {
        "wait": {
          "name": "subprocess.Popen.wait",
          "type": "callable",
          "signature": "(self)"
        }
      }
    },
    "glob.glob": {
      "name": "glob.glob",
      "type": "callable",
      "signature": "(pathname)"
    },
    "os.path.basename": {
      "name": "os.path.basename",
      "type": "callable",
      "signature": "(p)"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    },
    "results.append((os.path.basename(file_path), None))": {
      "name": "results.append((os.path.basename(file_path), None))"
    },
    "results.append((os.path.basename(file_path), exit_code))": {
      "name": "results.append((os.path.basename(file_path), exit_code))"
    },
    "sys.stderr": {
      "name": "sys.stderr",
      "type": "constant",
      "signature": null,
      "value": "<_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>"
    }
  },
  "BigCodeBench/341": {
    "df.empty": {
      "name": "df.empty"
    },
    "df.columns": {
      "name": "df.columns"
    },
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "(nrows=1, ncols=1, **fig_kw)"
    },
    "pandas.api.types.is_numeric_dtype": {
      "name": "pandas.api.types.is_numeric_dtype",
      "type": "callable",
      "signature": "(arr_or_dtype) -> 'bool)"
    },
    "seaborn.boxplot": {
      "name": "seaborn.boxplot",
      "type": "callable",
      "signature": "(x=None, ax=None, **kwargs)"
    },
    "seaborn.countplot": {
      "name": "seaborn.countplot",
      "type": "callable",
      "signature": "(x=None, ax=None, **kwargs)"
    },
    "seaborn.stripplot": {
      "name": "seaborn.stripplot",
      "type": "callable",
      "signature": "(x=None, jitter=True, ax=None, **kwargs)"
    }
  },
  "BigCodeBench/346": {
    "subprocess.Popen": {
      "name": "subprocess.Popen",
      "type": "class",
      "signature": "(args, bufsize=-1, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=True, shell=False, cwd=None, env=None, universal_newlines=None, startupinfo=None, creationflags=0, restore_signals=True, start_new_session=False, pass_fds=(), *, user=None, group=None, extra_groups=None, encoding=None, errors=None, text=None, umask=-1, pipesize=-1)",
      "chains": {
        "args": {
          "name": "subprocess.Popen.args",
          "type": "class",
          "signature": "(args, bufsize=-1, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=True, shell=False, cwd=None, env=None, universal_newlines=None, startupinfo=None, creationflags=0, restore_signals=True, start_new_session=False, pass_fds=(), *, user=None, group=None, extra_groups=None, encoding=None, errors=None, text=None, umask=-1, pipesize=-1)"
        },
        "poll": {
          "name": "subprocess.Popen.poll",
          "type": "callable",
          "signature": "(self)"
        },
        "returncode": {
          "name": "subprocess.Popen.returncode",
          "type": "class",
          "signature": "(args, bufsize=-1, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=True, shell=False, cwd=None, env=None, universal_newlines=None, startupinfo=None, creationflags=0, restore_signals=True, start_new_session=False, pass_fds=(), *, user=None, group=None, extra_groups=None, encoding=None, errors=None, text=None, umask=-1, pipesize=-1)"
        },
        "communicate": {
          "name": "subprocess.Popen.communicate",
          "type": "callable",
          "signature": "(self)"
        }
      }
    },
    "os.path.isfile": {
      "name": "os.path.isfile",
      "type": "callable",
      "signature": "(path)"
    },
    "subprocess.PIPE": {
      "name": "subprocess.PIPE",
      "type": "constant",
      "signature": null,
      "value": "-1"
    },
    "sys.executable": {
      "name": "sys.executable",
      "type": "constant",
      "signature": null,
      "value": "/home/terryz1/do28/terryz1/apieval/miniconda/bin/python"
    },
    "time.sleep": {
      "name": "time.sleep",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    }
  },
  "BigCodeBench/360": {
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].set_ylabel": {
      "name": "matplotlib.pyplot.subplots[1].set_ylabel",
      "type": "method",
      "signature": "(ylabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_xlabel": {
      "name": "matplotlib.pyplot.subplots[1].set_xlabel",
      "type": "method",
      "signature": "(xlabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].bar": {
      "name": "matplotlib.pyplot.subplots[1].bar",
      "type": "method",
      "signature": "(x, height, width=0.8, bottom=None, *, align='center', data=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_title": {
      "name": "matplotlib.pyplot.subplots[1].set_title",
      "type": "method",
      "signature": "(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)"
    },
    "numpy.std": {
      "name": "numpy.std",
      "type": "callable",
      "signature": "(a)"
    },
    "numpy.mean": {
      "name": "numpy.mean",
      "type": "callable",
      "signature": "(a)"
    },
    "os.path.exists": {
      "name": "os.path.exists",
      "type": "callable",
      "signature": "(path)"
    },
    "pandas.read_excel": {
      "name": "pandas.read_excel",
      "type": "callable",
      "signature": "(io, sheet_name: 'str | int | list[IntStrT] | None' = 0)"
    },
    "pandas.read_excel.columns": {
      "name": "pandas.read_excel.columns",
      "type": "callable",
      "signature": "(io, sheet_name: 'str | int | list[IntStrT] | None' = 0, *, header: 'int | Sequence[int] | None' = 0, names: 'list[str] | None' = None, index_col: 'int | Sequence[int] | None' = None, usecols: 'int | str | Sequence[int] | Sequence[str] | Callable[[str], bool] | None' = None, dtype: 'DtypeArg | None' = None, engine: \"Literal['xlrd', 'openpyxl', 'odf', 'pyxlsb'] | None\" = None, converters: 'dict[str, Callable] | dict[int, Callable] | None' = None, true_values: 'Iterable[Hashable] | None' = None, false_values: 'Iterable[Hashable] | None' = None, skiprows: 'Sequence[int] | int | Callable[[int], object] | None' = None, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, parse_dates: 'list | dict | bool' = False, date_parser: 'Callable | lib.NoDefault' = <no_default>, date_format: 'dict[Hashable, str] | str | None' = None, thousands: 'str | None' = None, decimal: 'str' = '.', comment: 'str | None' = None, skipfooter: 'int' = 0, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | dict[IntStrT, DataFrame]'"
    }
  },
  "BigCodeBench/367": {
    "activity.strftime('%A')": {
      "name": "activity.strftime('%A')"
    },
    "matplotlib.pyplot.figure": {
      "name": "matplotlib.pyplot.figure",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].bar": {
      "name": "matplotlib.pyplot.subplots[1].bar",
      "type": "method",
      "signature": "(x, height, width=0.8, bottom=None, *, align='center', data=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_title": {
      "name": "matplotlib.pyplot.subplots[1].set_title",
      "type": "method",
      "signature": "(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_xlabel": {
      "name": "matplotlib.pyplot.subplots[1].set_xlabel",
      "type": "method",
      "signature": "(xlabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_ylabel": {
      "name": "matplotlib.pyplot.subplots[1].set_ylabel",
      "type": "method",
      "signature": "(ylabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    }
  },
  "BigCodeBench/368": {
    "os.listdir": {
      "name": "os.listdir",
      "type": "callable",
      "signature": "(path=None)"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    },
    "random.seed": {
      "name": "random.seed",
      "type": "callable",
      "signature": "(a=None)"
    },
    "random.choice": {
      "name": "random.choice",
      "type": "callable",
      "signature": "(seq)"
    },
    "shutil.move": {
      "name": "shutil.move",
      "type": "callable",
      "signature": "(src, dst)"
    }
  },
  "BigCodeBench/374": {
    "cell.value": {
      "name": "cell.value"
    },
    "glob.glob": {
      "name": "glob.glob",
      "type": "callable",
      "signature": "(pathname)"
    },
    "openpyxl.load_workbook": {
      "name": "openpyxl.load_workbook",
      "type": "callable",
      "signature": "(filename)"
    },
    "openpyxl.load_workbook.sheetnames": {
      "name": "openpyxl.load_workbook.sheetnames",
      "type": "callable",
      "signature": "(filename, read_only=False, keep_vba=False, data_only=False, keep_links=True, rich_text=False)"
    },
    "openpyxl.load_workbook.save": {
      "name": "openpyxl.load_workbook.save",
      "type": "callable",
      "signature": "(filename)"
    },
    "os.path.isdir": {
      "name": "os.path.isdir",
      "type": "callable",
      "signature": "(s)"
    },
    "regex.sub": {
      "name": "regex.sub",
      "type": "callable",
      "signature": "(pattern, repl, string)"
    }
  },
  "BigCodeBench/399": {
    "math.pi": {
      "name": "math.pi",
      "type": "constant",
      "signature": null,
      "value": "3.141592653589793"
    },
    "matplotlib.pyplot.figure": {
      "name": "matplotlib.pyplot.figure",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].legend": {
      "name": "matplotlib.pyplot.subplots[1].legend",
      "type": "method",
      "signature": "(*args, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].plot": {
      "name": "matplotlib.pyplot.subplots[1].plot",
      "type": "method",
      "signature": "(*args, scalex=True, scaley=True, data=None, **kwargs)"
    },
    "numpy.cos": {
      "name": "numpy.cos",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.sin": {
      "name": "numpy.sin",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.linspace": {
      "name": "numpy.linspace",
      "type": "callable",
      "signature": "(start, stop, num=50)"
    }
  },
  "BigCodeBench/401": {
    "flask.Flask": {
      "name": "flask.Flask",
      "type": "class",
      "signature": "(import_name: 'str', static_url_path: 'str | None' = None, static_folder: 'str | os.PathLike[str] | None' = 'static', static_host: 'str | None' = None, host_matching: 'bool' = False, subdomain_matching: 'bool' = False, template_folder: 'str | os.PathLike[str] | None' = 'templates', instance_path: 'str | None' = None, instance_relative_config: 'bool' = False, root_path: 'str | None' = None)",
      "chains": {
        "config": {
          "name": "flask.Flask.config",
          "type": "class",
          "signature": "(import_name: 'str', static_url_path: 'str | None' = None, static_folder: 'str | os.PathLike[str] | None' = 'static', static_host: 'str | None' = None, host_matching: 'bool' = False, subdomain_matching: 'bool' = False, template_folder: 'str | os.PathLike[str] | None' = 'templates', instance_path: 'str | None' = None, instance_relative_config: 'bool' = False, root_path: 'str | None' = None)"
        }
      }
    },
    "os.getenv": {
      "name": "os.getenv",
      "type": "callable",
      "signature": "(key, default=None)"
    }
  },
  "BigCodeBench/409": {
    "numpy.std": {
      "name": "numpy.std",
      "type": "callable",
      "signature": "(a)"
    },
    "numpy.mean": {
      "name": "numpy.mean",
      "type": "callable",
      "signature": "(a)"
    },
    "numpy.median": {
      "name": "numpy.median",
      "type": "callable",
      "signature": "(a)"
    },
    "os.path.exists": {
      "name": "os.path.exists",
      "type": "callable",
      "signature": "(path)"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    },
    "pandas.read_excel": {
      "name": "pandas.read_excel",
      "type": "callable",
      "signature": "(io)"
    },
    "pandas.read_excel.columns": {
      "name": "pandas.read_excel.columns",
      "type": "callable",
      "signature": "(io, sheet_name: 'str | int | list[IntStrT] | None' = 0, *, header: 'int | Sequence[int] | None' = 0, names: 'list[str] | None' = None, index_col: 'int | Sequence[int] | None' = None, usecols: 'int | str | Sequence[int] | Sequence[str] | Callable[[str], bool] | None' = None, dtype: 'DtypeArg | None' = None, engine: \"Literal['xlrd', 'openpyxl', 'odf', 'pyxlsb'] | None\" = None, converters: 'dict[str, Callable] | dict[int, Callable] | None' = None, true_values: 'Iterable[Hashable] | None' = None, false_values: 'Iterable[Hashable] | None' = None, skiprows: 'Sequence[int] | int | Callable[[int], object] | None' = None, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, parse_dates: 'list | dict | bool' = False, date_parser: 'Callable | lib.NoDefault' = <no_default>, date_format: 'dict[Hashable, str] | str | None' = None, thousands: 'str | None' = None, decimal: 'str' = '.', comment: 'str | None' = None, skipfooter: 'int' = 0, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | dict[IntStrT, DataFrame]'"
    }
  },
  "BigCodeBench/417": {
    "keras.optimizers.SGD": {
      "name": "keras.optimizers.SGD",
      "type": "class",
      "signature": "(learning_rate=0.01, **kwargs)"
    },
    "keras.layers.Dense": {
      "name": "keras.layers.Dense",
      "type": "class",
      "signature": "(units, activation=None, **kwargs)"
    },
    "keras.models.Sequential": {
      "name": "keras.models.Sequential",
      "type": "class",
      "signature": "(layers=None)"
    },
    "keras.models.Sequential.compile": {
      "name": "keras.models.Sequential.compile",
      "type": "callable",
      "signature": "(self, optimizer='rmsprop', loss=None, **kwargs)"
    },
    "keras.models.Sequential.fit": {
      "name": "keras.models.Sequential.fit",
      "type": "callable",
      "signature": "(self, x=None, y=None, batch_size=None, epochs=1, verbose='auto', validation_data=None)"
    },
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].set_ylabel": {
      "name": "matplotlib.pyplot.subplots[1].set_ylabel",
      "type": "method",
      "signature": "(ylabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_xlabel": {
      "name": "matplotlib.pyplot.subplots[1].set_xlabel",
      "type": "method",
      "signature": "(xlabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_title": {
      "name": "matplotlib.pyplot.subplots[1].set_title",
      "type": "method",
      "signature": "(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].legend": {
      "name": "matplotlib.pyplot.subplots[1].legend",
      "type": "method",
      "signature": "(*args, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].plot": {
      "name": "matplotlib.pyplot.subplots[1].plot",
      "type": "method",
      "signature": "(*args, scalex=True, scaley=True, data=None, **kwargs)"
    },
    "sklearn.model_selection.train_test_split": {
      "name": "sklearn.model_selection.train_test_split",
      "type": "callable",
      "signature": "(*arrays, test_size=None)"
    }
  },
  "BigCodeBench/418": {
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].legend": {
      "name": "matplotlib.pyplot.subplots[1].legend",
      "type": "method",
      "signature": "(*args, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_title": {
      "name": "matplotlib.pyplot.subplots[1].set_title",
      "type": "method",
      "signature": "(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].plot": {
      "name": "matplotlib.pyplot.subplots[1].plot",
      "type": "method",
      "signature": "(*args, scalex=True, scaley=True, data=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_ylabel": {
      "name": "matplotlib.pyplot.subplots[1].set_ylabel",
      "type": "method",
      "signature": "(ylabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_xlabel": {
      "name": "matplotlib.pyplot.subplots[1].set_xlabel",
      "type": "method",
      "signature": "(xlabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "sklearn.metrics.auc": {
      "name": "sklearn.metrics.auc",
      "type": "callable",
      "signature": "(x, y)"
    },
    "sklearn.metrics.roc_curve": {
      "name": "sklearn.metrics.roc_curve",
      "type": "callable",
      "signature": "(y_true, y_score)"
    },
    "sklearn.model_selection.train_test_split": {
      "name": "sklearn.model_selection.train_test_split",
      "type": "callable",
      "signature": "(*arrays, test_size=None)"
    },
    "tensorflow.keras.optimizers.SGD": {
      "name": "tensorflow.keras.optimizers.SGD",
      "type": "class",
      "signature": "(learning_rate=0.01, **kwargs)"
    },
    "tensorflow.keras.layers.Dense": {
      "name": "tensorflow.keras.layers.Dense",
      "type": "class",
      "signature": "(units, activation=None, **kwargs)"
    },
    "tensorflow.keras.Sequential": {
      "name": "tensorflow.keras.Sequential",
      "type": "class",
      "signature": "(layers=None)"
    },
    "tensorflow.keras.Sequential.predict": {
      "name": "tensorflow.keras.Sequential.predict",
      "type": "callable",
      "signature": "(self, x, verbose='auto')"
    },
    "tensorflow.keras.Sequential.fit": {
      "name": "tensorflow.keras.Sequential.fit",
      "type": "callable",
      "signature": "(self, x=None, y=None, batch_size=None, epochs=1, verbose='auto')"
    },
    "tensorflow.keras.Sequential.compile": {
      "name": "tensorflow.keras.Sequential.compile",
      "type": "callable",
      "signature": "(self, optimizer='rmsprop', loss=None, **kwargs)"
    }
  },
  "BigCodeBench/424": {
    "cv2.imread": {
      "name": "cv2.imread",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "cv2.imread.shape": {
      "name": "cv2.imread.shape",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "cv2.imread.copy": {
      "name": "cv2.imread.copy",
      "type": "callable",
      "signature": "()"
    },
    "cv2.imread.reshape": {
      "name": "cv2.imread.reshape",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "cv2.imwrite": {
      "name": "cv2.imwrite",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.array": {
      "name": "numpy.array",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.stack": {
      "name": "numpy.stack",
      "type": "callable",
      "signature": "(arrays, axis=0)"
    },
    "numpy.where": {
      "name": "numpy.where",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "os.path.exists": {
      "name": "os.path.exists",
      "type": "callable",
      "signature": "(path)"
    },
    "segmented_image.reshape(img.shape).astype('uint8').reshape(img.shape)": {
      "name": "segmented_image.reshape(img.shape).astype('uint8').reshape(img.shape)"
    },
    "sklearn.cluster.KMeans": {
      "name": "sklearn.cluster.KMeans",
      "type": "class",
      "signature": "(n_clusters=8, random_state=None)"
    },
    "sklearn.cluster.KMeans.labels_": {
      "name": "sklearn.cluster.KMeans.labels_",
      "type": "class",
      "signature": "(n_clusters=8, *, init='k-means++', n_init='warn', max_iter=300, tol=0.0001, verbose=0, random_state=None, copy_x=True, algorithm='lloyd')"
    },
    "sklearn.cluster.KMeans.fit": {
      "name": "sklearn.cluster.KMeans.fit",
      "type": "callable",
      "signature": "(self, X)"
    },
    "sklearn.cluster.KMeans.cluster_centers_": {
      "name": "sklearn.cluster.KMeans.cluster_centers_",
      "type": "class",
      "signature": "(n_clusters=8, *, init='k-means++', n_init='warn', max_iter=300, tol=0.0001, verbose=0, random_state=None, copy_x=True, algorithm='lloyd')"
    },
    "sklearn.cluster.KMeans.labels_.reshape": {
      "name": "sklearn.cluster.KMeans.labels_.reshape",
      "type": "class",
      "signature": "(n_clusters=8)"
    }
  },
  "BigCodeBench/443": {
    "T.shape": {
      "name": "T.shape"
    },
    "matplotlib.pyplot.Axes": {
      "name": "matplotlib.pyplot.Axes",
      "type": "class",
      "signature": "(fig, *args, facecolor=None, frameon=True, sharex=None, sharey=None, label='', xscale=None, yscale=None, box_aspect=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].set_title": {
      "name": "matplotlib.pyplot.subplots[1].set_title",
      "type": "method",
      "signature": "(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].scatter": {
      "name": "matplotlib.pyplot.subplots[1].scatter",
      "type": "method",
      "signature": "(x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, *, edgecolors=None, plotnonfinite=False, data=None, **kwargs)"
    },
    "numpy.tensordot": {
      "name": "numpy.tensordot",
      "type": "callable",
      "signature": "(a, b, axes=2)"
    },
    "numpy.tensordot.swapaxes.reshape": {
      "name": "numpy.tensordot.swapaxes.reshape",
      "type": "callable",
      "signature": "(a, b)"
    },
    "sklearn.cluster.KMeans": {
      "name": "sklearn.cluster.KMeans",
      "type": "class",
      "signature": "(n_clusters=8, n_init='warn', random_state=None)"
    },
    "sklearn.cluster.KMeans.fit_predict": {
      "name": "sklearn.cluster.KMeans.fit_predict",
      "type": "callable",
      "signature": "(self, X)"
    }
  },
  "BigCodeBench/445": {
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "numpy.random.seed": {
      "name": "numpy.random.seed",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.random.normal": {
      "name": "numpy.random.normal",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "points.shape": {
      "name": "points.shape"
    },
    "scipy.spatial.Voronoi": {
      "name": "scipy.spatial.Voronoi",
      "type": "class",
      "signature": "(points)"
    },
    "scipy.spatial.voronoi_plot_2d": {
      "name": "scipy.spatial.voronoi_plot_2d",
      "type": "callable",
      "signature": "(vor, ax=None, **kw)"
    }
  },
  "BigCodeBench/454": {
    "files_moved.append(dest_file_path)": {
      "name": "files_moved.append(dest_file_path)"
    },
    "glob.glob": {
      "name": "glob.glob",
      "type": "callable",
      "signature": "(pathname)"
    },
    "os.path.basename": {
      "name": "os.path.basename",
      "type": "callable",
      "signature": "(p)"
    },
    "os.path.exists": {
      "name": "os.path.exists",
      "type": "callable",
      "signature": "(path)"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    },
    "shutil.move": {
      "name": "shutil.move",
      "type": "callable",
      "signature": "(src, dst)"
    }
  },
  "BigCodeBench/458": {
    "pandas.DataFrame": {
      "name": "pandas.DataFrame",
      "type": "class",
      "signature": "(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'None'",
      "chains": {
        "columns": {
          "name": "pandas.DataFrame.columns",
          "type": "constant",
          "signature": null,
          "value": "<pandas._libs.properties.AxisProperty object at 0x7f15084ad7b0>"
        }
      }
    },
    "json.loads": {
      "name": "json.loads",
      "type": "callable",
      "signature": "(s)"
    },
    "json.loads.items": {
      "name": "json.loads.items",
      "type": "callable",
      "signature": "()"
    },
    "json.loads.values": {
      "name": "json.loads.values",
      "type": "callable",
      "signature": "()"
    },
    "pandas.to_numeric": {
      "name": "pandas.to_numeric",
      "type": "callable",
      "signature": "(arg, errors: 'DateTimeErrorChoices' = 'raise')"
    },
    "pandas.to_numeric.isnull": {
      "name": "pandas.to_numeric.isnull",
      "type": "callable",
      "signature": "()"
    },
    "re.compile": {
      "name": "re.compile",
      "type": "callable",
      "signature": "(pattern)"
    },
    "re.compile.match": {
      "name": "re.compile.match",
      "type": "callable",
      "signature": "(pattern)"
    }
  },
  "BigCodeBench/461": {
    "psutil.Process": {
      "name": "psutil.Process",
      "type": "class",
      "signature": "(pid=None)",
      "chains": {
        "is_running": {
          "name": "psutil.Process.is_running",
          "type": "callable",
          "signature": "(self)"
        },
        "memory_info": {
          "name": "psutil.Process.memory_info",
          "type": "callable",
          "signature": "(self)"
        },
        "cpu_percent": {
          "name": "psutil.Process.cpu_percent",
          "type": "callable",
          "signature": "(self, interval=None)"
        }
      }
    },
    "subprocess.Popen": {
      "name": "subprocess.Popen",
      "type": "class",
      "signature": "(args, bufsize=-1, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=True, shell=False, cwd=None, env=None, universal_newlines=None, startupinfo=None, creationflags=0, restore_signals=True, start_new_session=False, pass_fds=(), *, user=None, group=None, extra_groups=None, encoding=None, errors=None, text=None, umask=-1, pipesize=-1)",
      "chains": {
        "pid": {
          "name": "subprocess.Popen.pid",
          "type": "class",
          "signature": "(args, bufsize=-1, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=True, shell=False, cwd=None, env=None, universal_newlines=None, startupinfo=None, creationflags=0, restore_signals=True, start_new_session=False, pass_fds=(), *, user=None, group=None, extra_groups=None, encoding=None, errors=None, text=None, umask=-1, pipesize=-1)"
        },
        "wait": {
          "name": "subprocess.Popen.wait",
          "type": "callable",
          "signature": "(self)"
        },
        "poll": {
          "name": "subprocess.Popen.poll",
          "type": "callable",
          "signature": "(self)"
        },
        "terminate": {
          "name": "subprocess.Popen.terminate",
          "type": "callable",
          "signature": "(self)"
        }
      }
    },
    "os.path.exists": {
      "name": "os.path.exists",
      "type": "callable",
      "signature": "(path)"
    },
    "time.time": {
      "name": "time.time",
      "type": "callable",
      "signature": "()"
    },
    "time.sleep": {
      "name": "time.sleep",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    }
  },
  "BigCodeBench/477": {
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].scatter": {
      "name": "matplotlib.pyplot.subplots[1].scatter",
      "type": "method",
      "signature": "(x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, *, edgecolors=None, plotnonfinite=False, data=None, **kwargs)"
    },
    "numpy.random.rand": {
      "name": "numpy.random.rand",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.random.seed": {
      "name": "numpy.random.seed",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.array": {
      "name": "numpy.array",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.random.shuffle": {
      "name": "numpy.random.shuffle",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.random.choice": {
      "name": "numpy.random.choice",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.concatenate": {
      "name": "numpy.concatenate",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    }
  },
  "BigCodeBench/486": {
    "datetime.datetime": {
      "name": "datetime.datetime",
      "type": "class",
      "signature": "(self, /, *args, **kwargs)",
      "chains": {
        "fromtimestamp": {
          "name": "datetime.datetime.fromtimestamp",
          "type": "callable",
          "signature": "(*args, **kwargs)"
        }
      }
    },
    "pandas.DataFrame": {
      "name": "pandas.DataFrame",
      "type": "class",
      "signature": "(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'None'",
      "chains": {
        "loc": {
          "name": "pandas.DataFrame.loc",
          "type": "constant",
          "signature": null,
          "value": "<property object at 0x7f1508f022f0>"
        },
        "plot": {
          "name": "pandas.DataFrame.plot",
          "type": "class",
          "signature": "()"
        }
      }
    },
    "df.plot(x='Time', y='Value').set_ylabel('Value')": {
      "name": "df.plot(x='Time', y='Value').set_ylabel('Value')"
    },
    "numpy.random.seed": {
      "name": "numpy.random.seed",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.arange": {
      "name": "numpy.arange",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.random.normal": {
      "name": "numpy.random.normal",
      "type": "callable",
      "signature": "(**kwargs)"
    }
  },
  "BigCodeBench/492": {
    "datetime.datetime": {
      "name": "datetime.datetime",
      "type": "class",
      "signature": "(self, /, *args, **kwargs)",
      "chains": {
        "now": {
          "name": "datetime.datetime.now",
          "type": "callable",
          "signature": "()"
        },
        "fromtimestamp": {
          "name": "datetime.datetime.fromtimestamp",
          "type": "callable",
          "signature": "(*args, **kwargs)"
        }
      }
    },
    "pandas.date_range": {
      "name": "pandas.date_range",
      "type": "callable",
      "signature": "(start=None, end=None, freq=None, **kwargs) -> 'DatetimeIndex)"
    },
    "random.randint": {
      "name": "random.randint",
      "type": "callable",
      "signature": "(a, b)"
    },
    "random.seed": {
      "name": "random.seed",
      "type": "callable",
      "signature": "(a=None)"
    },
    "sales_data.append([product, date, sales])": {
      "name": "sales_data.append([product, date, sales])"
    }
  },
  "BigCodeBench/501": {
    "book.add_sheet(sheet_name).write(0, col_index, col)": {
      "name": "book.add_sheet(sheet_name).write(0, col_index, col)"
    },
    "book.add_sheet(sheet_name).write(row_index + 1, col_index, row[col])": {
      "name": "book.add_sheet(sheet_name).write(row_index + 1, col_index, row[col])"
    },
    "os.path.abspath": {
      "name": "os.path.abspath",
      "type": "callable",
      "signature": "(path)"
    },
    "pandas.read_json": {
      "name": "pandas.read_json",
      "type": "callable",
      "signature": "(path_or_buf: 'FilePath | ReadBuffer[str] | ReadBuffer[bytes]')"
    },
    "pandas.read_json.empty": {
      "name": "pandas.read_json.empty",
      "type": "callable",
      "signature": "(path_or_buf: 'FilePath | ReadBuffer[str] | ReadBuffer[bytes]', *, orient: 'str | None' = None, typ: \"Literal['frame', 'series']\" = 'frame', dtype: 'DtypeArg | None' = None, convert_axes=None, convert_dates: 'bool | list[str]' = True, keep_default_dates: 'bool' = True, precise_float: 'bool' = False, date_unit: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', lines: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', nrows: 'int | None' = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>, engine: 'JSONEngine' = 'ujson') -> 'DataFrame | Series | JsonReader'"
    },
    "pandas.read_json.columns": {
      "name": "pandas.read_json.columns",
      "type": "callable",
      "signature": "(path_or_buf: 'FilePath | ReadBuffer[str] | ReadBuffer[bytes]', *, orient: 'str | None' = None, typ: \"Literal['frame', 'series']\" = 'frame', dtype: 'DtypeArg | None' = None, convert_axes=None, convert_dates: 'bool | list[str]' = True, keep_default_dates: 'bool' = True, precise_float: 'bool' = False, date_unit: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', lines: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', nrows: 'int | None' = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>, engine: 'JSONEngine' = 'ujson') -> 'DataFrame | Series | JsonReader'"
    },
    "pandas.read_json.iterrows": {
      "name": "pandas.read_json.iterrows",
      "type": "callable",
      "signature": "()"
    }
  },
  "BigCodeBench/502": {
    "datetime.datetime": {
      "name": "datetime.datetime",
      "type": "class",
      "signature": "(self, /, *args, **kwargs)",
      "chains": {
        "now": {
          "name": "datetime.datetime.now",
          "type": "callable",
          "signature": "()"
        }
      }
    },
    "data.append([date, activity, duration])": {
      "name": "data.append([date, activity, duration])"
    },
    "random.randint": {
      "name": "random.randint",
      "type": "callable",
      "signature": "(a, b)"
    },
    "random.seed": {
      "name": "random.seed",
      "type": "callable",
      "signature": "(a=None)"
    },
    "seaborn.lineplot": {
      "name": "seaborn.lineplot",
      "type": "callable",
      "signature": "(data=None, x=None, y=None, hue=None, **kwargs)"
    }
  },
  "BigCodeBench/503": {
    "datetime.datetime": {
      "name": "datetime.datetime",
      "type": "class",
      "signature": "(self, /, *args, **kwargs)",
      "chains": {
        "now": {
          "name": "datetime.datetime.now",
          "type": "callable",
          "signature": "()"
        }
      }
    },
    "numpy.random.seed": {
      "name": "numpy.random.seed",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.random.rand": {
      "name": "numpy.random.rand",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "pandas.date_range": {
      "name": "pandas.date_range",
      "type": "callable",
      "signature": "(end=None, periods=None, **kwargs) -> 'DatetimeIndex)"
    }
  },
  "BigCodeBench/509": {
    "csv.reader": {
      "name": "csv.reader",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "data.append([i + 1, status, content])": {
      "name": "data.append([i + 1, status, content])"
    },
    "difflib.ndiff": {
      "name": "difflib.ndiff",
      "type": "callable",
      "signature": "(a, b)"
    }
  },
  "BigCodeBench/511": {
    "pandas.DataFrame": {
      "name": "pandas.DataFrame",
      "type": "class",
      "signature": "(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'None'",
      "chains": {
        "empty": {
          "name": "pandas.DataFrame.empty",
          "type": "constant",
          "signature": null,
          "value": "<property object at 0x7f15084faa20>"
        }
      }
    },
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].set_title": {
      "name": "matplotlib.pyplot.subplots[1].set_title",
      "type": "method",
      "signature": "(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].pie": {
      "name": "matplotlib.pyplot.subplots[1].pie",
      "type": "method",
      "signature": "(x, explode=None, labels=None, colors=None, autopct=None, pctdistance=0.6, shadow=False, labeldistance=1.1, startangle=0, radius=1, counterclock=True, wedgeprops=None, textprops=None, center=(0, 0), frame=False, rotatelabels=False, *, normalize=True, hatch=None, data=None)"
    },
    "numpy.nan": {
      "name": "numpy.nan",
      "type": "constant",
      "signature": null,
      "value": "nan"
    },
    "numpy.max": {
      "name": "numpy.max",
      "type": "callable",
      "signature": "(a)"
    },
    "numpy.min": {
      "name": "numpy.min",
      "type": "callable",
      "signature": "(a)"
    },
    "numpy.sum": {
      "name": "numpy.sum",
      "type": "callable",
      "signature": "(a)"
    },
    "numpy.mean": {
      "name": "numpy.mean",
      "type": "callable",
      "signature": "(a)"
    }
  },
  "BigCodeBench/513": {
    "pandas.DataFrame": {
      "name": "pandas.DataFrame",
      "type": "class",
      "signature": "(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'None'",
      "chains": {
        "plot": {
          "name": "pandas.DataFrame.plot",
          "type": "class",
          "signature": "(data) -> 'None'"
        }
      }
    },
    "pandas.DataFrame.plot": {
      "name": "pandas.DataFrame.plot",
      "type": "class",
      "signature": "(data) -> 'None'",
      "chains": {
        "line": {
          "name": "pandas.DataFrame.plot.line",
          "type": "callable",
          "signature": "(self, x=None, y=None, **kwargs) -> 'PlotAccessor)"
        }
      }
    },
    "df.plot.line(x='Date', y=column).set_ylabel(column)": {
      "name": "df.plot.line(x='Date', y=column).set_ylabel(column)"
    },
    "matplotlib.pyplot.title": {
      "name": "matplotlib.pyplot.title",
      "type": "callable",
      "signature": "(label)"
    },
    "numpy.max": {
      "name": "numpy.max",
      "type": "callable",
      "signature": "(a)"
    },
    "numpy.min": {
      "name": "numpy.min",
      "type": "callable",
      "signature": "(a)"
    },
    "numpy.sum": {
      "name": "numpy.sum",
      "type": "callable",
      "signature": "(a)"
    },
    "numpy.mean": {
      "name": "numpy.mean",
      "type": "callable",
      "signature": "(a)"
    }
  },
  "BigCodeBench/526": {
    "collections.defaultdict": {
      "name": "collections.defaultdict",
      "type": "class",
      "signature": "(self, /, *args, **kwargs)",
      "chains": {
        "items": {
          "name": "collections.defaultdict.items",
          "type": "callable",
          "signature": "()"
        }
      }
    },
    "d.keys()": {
      "name": "d.keys()"
    },
    "d.get(key, np.nan)": {
      "name": "d.get(key, np.nan)"
    },
    "json.load": {
      "name": "json.load",
      "type": "callable",
      "signature": "(fp)"
    },
    "numpy.nan": {
      "name": "numpy.nan",
      "type": "constant",
      "signature": null,
      "value": "nan"
    },
    "numpy.nanmean": {
      "name": "numpy.nanmean",
      "type": "callable",
      "signature": "(a)"
    },
    "numpy.nanmedian": {
      "name": "numpy.nanmedian",
      "type": "callable",
      "signature": "(a)"
    }
  },
  "BigCodeBench/528": {
    "collections.Counter": {
      "name": "collections.Counter",
      "type": "class",
      "signature": "(iterable=None, /, **kwds)",
      "chains": {
        "keys": {
          "name": "collections.Counter.keys",
          "type": "callable",
          "signature": "()"
        },
        "values": {
          "name": "collections.Counter.values",
          "type": "callable",
          "signature": "()"
        }
      }
    },
    "pandas.DataFrame": {
      "name": "pandas.DataFrame",
      "type": "class",
      "signature": "(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'None'",
      "chains": {
        "plot": {
          "name": "pandas.DataFrame.plot",
          "type": "class",
          "signature": "()"
        }
      }
    },
    "csv.reader": {
      "name": "csv.reader",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "df.plot(kind='bar', legend=False, title='Duplicate Entries').set_ylabel('Count')": {
      "name": "df.plot(kind='bar', legend=False, title='Duplicate Entries').set_ylabel('Count')"
    },
    "file_path.strip().strip()": {
      "name": "file_path.strip().strip()"
    },
    "file_path.strip().lower()": {
      "name": "file_path.strip().lower()"
    },
    "list(reader).count(row)": {
      "name": "list(reader).count(row)"
    },
    "matplotlib.pyplot.tight_layout": {
      "name": "matplotlib.pyplot.tight_layout",
      "type": "callable",
      "signature": "()"
    }
  },
  "BigCodeBench/530": {
    "df.empty": {
      "name": "df.empty"
    },
    "matplotlib.pyplot.Axes": {
      "name": "matplotlib.pyplot.Axes",
      "type": "class",
      "signature": "(fig, *args, facecolor=None, frameon=True, sharex=None, sharey=None, label='', xscale=None, yscale=None, box_aspect=None, **kwargs)"
    },
    "matplotlib.pyplot.xlabel": {
      "name": "matplotlib.pyplot.xlabel",
      "type": "callable",
      "signature": "(xlabel)"
    },
    "matplotlib.pyplot.ylabel": {
      "name": "matplotlib.pyplot.ylabel",
      "type": "callable",
      "signature": "(ylabel)"
    },
    "matplotlib.pyplot.title": {
      "name": "matplotlib.pyplot.title",
      "type": "callable",
      "signature": "(label)"
    },
    "numpy.floor": {
      "name": "numpy.floor",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.arange": {
      "name": "numpy.arange",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "seaborn.histplot": {
      "name": "seaborn.histplot",
      "type": "callable",
      "signature": "(data=None, bins='auto', **kwargs)"
    }
  },
  "BigCodeBench/532": {
    "df.empty": {
      "name": "df.empty"
    },
    "matplotlib.pyplot.xlim": {
      "name": "matplotlib.pyplot.xlim",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].set_xlabel": {
      "name": "matplotlib.pyplot.subplots[1].set_xlabel",
      "type": "method",
      "signature": "(xlabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_ylabel": {
      "name": "matplotlib.pyplot.subplots[1].set_ylabel",
      "type": "method",
      "signature": "(ylabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_title": {
      "name": "matplotlib.pyplot.subplots[1].set_title",
      "type": "method",
      "signature": "(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].plot": {
      "name": "matplotlib.pyplot.subplots[1].plot",
      "type": "method",
      "signature": "(*args, scalex=True, scaley=True, data=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].hist": {
      "name": "matplotlib.pyplot.subplots[1].hist",
      "type": "method",
      "signature": "(x, bins=None, range=None, density=False, weights=None, cumulative=False, bottom=None, histtype='bar', align='mid', orientation='vertical', rwidth=None, log=False, color=None, label=None, stacked=False, *, data=None, **kwargs)"
    },
    "numpy.linspace": {
      "name": "numpy.linspace",
      "type": "callable",
      "signature": "(start, stop, num=50)"
    },
    "scipy.stats.norm.pdf": {
      "name": "scipy.stats.norm.pdf",
      "type": "callable",
      "signature": "(x, *args, **kwds)"
    },
    "scipy.stats.norm.fit": {
      "name": "scipy.stats.norm.fit",
      "type": "callable",
      "signature": "(*args, **kwds)"
    }
  },
  "BigCodeBench/553": {
    "pandas.DataFrame": {
      "name": "pandas.DataFrame",
      "type": "class",
      "signature": "(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'None'",
      "chains": {
        "plot": {
          "name": "pandas.DataFrame.plot",
          "type": "class",
          "signature": "()"
        }
      }
    },
    "matplotlib.pyplot.show": {
      "name": "matplotlib.pyplot.show",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.close": {
      "name": "matplotlib.pyplot.close",
      "type": "callable",
      "signature": "(fig=None)"
    },
    "numpy.random.seed": {
      "name": "numpy.random.seed",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.random.randn": {
      "name": "numpy.random.randn",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    }
  },
  "BigCodeBench/560": {
    "datetime.datetime": {
      "name": "datetime.datetime",
      "type": "class",
      "signature": "(self, /, *args, **kwargs)",
      "chains": {
        "strptime": {
          "name": "datetime.datetime.strptime",
          "type": "callable",
          "signature": "(*args, **kwargs)"
        }
      }
    },
    "d.split('-')": {
      "name": "d.split('-')"
    },
    "d.rsplit('-', 1)": {
      "name": "d.rsplit('-', 1)"
    },
    "data.strip()": {
      "name": "data.strip()"
    },
    "data.split(',')": {
      "name": "data.split(',')"
    },
    "df.set_index('Month').index": {
      "name": "df.set_index('Month').index"
    },
    "df.set_index('Month').set_index('Month')": {
      "name": "df.set_index('Month').set_index('Month')"
    },
    "matplotlib.pyplot.close": {
      "name": "matplotlib.pyplot.close",
      "type": "callable",
      "signature": "(fig=None)"
    },
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "(**fig_kw)"
    },
    "matplotlib.pyplot.xticks": {
      "name": "matplotlib.pyplot.xticks",
      "type": "callable",
      "signature": "(**kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_ylabel": {
      "name": "matplotlib.pyplot.subplots[1].set_ylabel",
      "type": "method",
      "signature": "(ylabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_xlabel": {
      "name": "matplotlib.pyplot.subplots[1].set_xlabel",
      "type": "method",
      "signature": "(xlabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].bar": {
      "name": "matplotlib.pyplot.subplots[1].bar",
      "type": "method",
      "signature": "(x, height, width=0.8, bottom=None, *, align='center', data=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_title": {
      "name": "matplotlib.pyplot.subplots[1].set_title",
      "type": "method",
      "signature": "(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)"
    }
  },
  "BigCodeBench/567": {
    "data.split('-').split('-')": {
      "name": "data.split('-').split('-')"
    },
    "matplotlib.pyplot.gca": {
      "name": "matplotlib.pyplot.gca",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.show": {
      "name": "matplotlib.pyplot.show",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.figure": {
      "name": "matplotlib.pyplot.figure",
      "type": "callable",
      "signature": "(figsize=None, **kwargs)"
    },
    "matplotlib.pyplot.gca.set_xlabel": {
      "name": "matplotlib.pyplot.gca.set_xlabel",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.gca.set_ylabel": {
      "name": "matplotlib.pyplot.gca.set_ylabel",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.gca.set_title": {
      "name": "matplotlib.pyplot.gca.set_title",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.gca.set_xticks": {
      "name": "matplotlib.pyplot.gca.set_xticks",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.gca.hist": {
      "name": "matplotlib.pyplot.gca.hist",
      "type": "callable",
      "signature": "()"
    },
    "numpy.arange": {
      "name": "numpy.arange",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    }
  },
  "BigCodeBench/574": {
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].legend": {
      "name": "matplotlib.pyplot.subplots[1].legend",
      "type": "method",
      "signature": "(*args, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_xlabel": {
      "name": "matplotlib.pyplot.subplots[1].set_xlabel",
      "type": "method",
      "signature": "(xlabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_ylabel": {
      "name": "matplotlib.pyplot.subplots[1].set_ylabel",
      "type": "method",
      "signature": "(ylabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].plot": {
      "name": "matplotlib.pyplot.subplots[1].plot",
      "type": "method",
      "signature": "(*args, scalex=True, scaley=True, data=None, **kwargs)"
    },
    "numpy.pi": {
      "name": "numpy.pi",
      "type": "constant",
      "signature": null,
      "value": "3.141592653589793"
    },
    "numpy.sin": {
      "name": "numpy.sin",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.random.rand": {
      "name": "numpy.random.rand",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.linspace": {
      "name": "numpy.linspace",
      "type": "callable",
      "signature": "(start, stop, num=50)"
    },
    "scipy.optimize.curve_fit": {
      "name": "scipy.optimize.curve_fit",
      "type": "callable",
      "signature": "(f, xdata, ydata, p0=None, **kwargs)"
    }
  },
  "BigCodeBench/579": {
    "collections.Counter": {
      "name": "collections.Counter",
      "type": "class",
      "signature": "(iterable=None, /, **kwds)",
      "chains": {
        "most_common": {
          "name": "collections.Counter.most_common",
          "type": "callable",
          "signature": "(self, n=None)"
        }
      }
    },
    "csv.reader": {
      "name": "csv.reader",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].bar": {
      "name": "matplotlib.pyplot.subplots[1].bar",
      "type": "method",
      "signature": "(x, height, width=0.8, bottom=None, *, align='center', data=None, **kwargs)"
    },
    "unicodedata.normalize": {
      "name": "unicodedata.normalize",
      "type": "callable",
      "signature": "(form, unistr)"
    },
    "words.append(normalized_word)": {
      "name": "words.append(normalized_word)"
    }
  },
  "BigCodeBench/582": {
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].get_xlim": {
      "name": "matplotlib.pyplot.subplots[1].get_xlim",
      "type": "method",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].plot": {
      "name": "matplotlib.pyplot.subplots[1].plot",
      "type": "method",
      "signature": "(*args, scalex=True, scaley=True, data=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].hist": {
      "name": "matplotlib.pyplot.subplots[1].hist",
      "type": "method",
      "signature": "(x, bins=None, range=None, density=False, weights=None, cumulative=False, bottom=None, histtype='bar', align='mid', orientation='vertical', rwidth=None, log=False, color=None, label=None, stacked=False, *, data=None, **kwargs)"
    },
    "numpy.random.randn": {
      "name": "numpy.random.randn",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.linspace": {
      "name": "numpy.linspace",
      "type": "callable",
      "signature": "(start, stop, num=50)"
    },
    "numpy.histogram_bin_edges": {
      "name": "numpy.histogram_bin_edges",
      "type": "callable",
      "signature": "(a, bins=10)"
    },
    "scipy.stats.norm": {
      "name": "scipy.stats.norm",
      "type": "callable",
      "signature": "(*args, **kwds)"
    },
    "scipy.stats.norm.fit": {
      "name": "scipy.stats.norm.fit",
      "type": "callable",
      "signature": "(*args, **kwds)"
    },
    "scipy.stats.norm.pdf": {
      "name": "scipy.stats.norm.pdf",
      "type": "callable",
      "signature": "(x, *args, **kwds)"
    }
  },
  "BigCodeBench/583": {
    "Crypto.Cipher.AES.MODE_EAX": {
      "name": "Crypto.Cipher.AES.MODE_EAX",
      "type": "constant",
      "signature": null,
      "value": "9"
    },
    "Crypto.Random.get_random_bytes": {
      "name": "Crypto.Random.get_random_bytes",
      "type": "callable",
      "signature": "(size)"
    },
    "Crypto.Cipher.AES.new": {
      "name": "Crypto.Cipher.AES.new",
      "type": "callable",
      "signature": "(key, mode)"
    },
    "Crypto.Cipher.AES.new.nonce": {
      "name": "Crypto.Cipher.AES.new.nonce",
      "type": "callable",
      "signature": "(key, mode, *args, **kwargs)"
    },
    "Crypto.Cipher.AES.new.encrypt_and_digest": {
      "name": "Crypto.Cipher.AES.new.encrypt_and_digest",
      "type": "callable",
      "signature": "(key)"
    },
    "base64.b64encode": {
      "name": "base64.b64encode",
      "type": "callable",
      "signature": "(s)"
    },
    "open.write(priv_key_encrypted)": {
      "name": "open.write(priv_key_encrypted)"
    },
    "os.urandom": {
      "name": "os.urandom",
      "type": "callable",
      "signature": "(size)"
    },
    "rsa.newkeys": {
      "name": "rsa.newkeys",
      "type": "callable",
      "signature": "(nbits: int)"
    },
    "rsa.newkeys[1].save_pkcs1": {
      "name": "rsa.newkeys[1].save_pkcs1"
    }
  },
  "BigCodeBench/587": {
    "base64.b64encode": {
      "name": "base64.b64encode",
      "type": "callable",
      "signature": "(s)"
    },
    "cipher.encryptor().finalize()": {
      "name": "cipher.encryptor().finalize()"
    },
    "cipher.encryptor().update(padded_data)": {
      "name": "cipher.encryptor().update(padded_data)"
    },
    "cryptography.hazmat.backends.default_backend": {
      "name": "cryptography.hazmat.backends.default_backend",
      "type": "callable",
      "signature": "()"
    },
    "cryptography.hazmat.primitives.padding.PKCS7": {
      "name": "cryptography.hazmat.primitives.padding.PKCS7",
      "type": "class",
      "signature": "(block_size: int)"
    },
    "cryptography.hazmat.primitives.ciphers.modes.CBC": {
      "name": "cryptography.hazmat.primitives.ciphers.modes.CBC",
      "type": "class",
      "signature": "(initialization_vector: bytes)"
    },
    "cryptography.hazmat.primitives.ciphers.algorithms.AES": {
      "name": "cryptography.hazmat.primitives.ciphers.algorithms.AES",
      "type": "class",
      "signature": "(key: bytes)"
    },
    "cryptography.hazmat.primitives.padding.PKCS7.padder.finalize": {
      "name": "cryptography.hazmat.primitives.padding.PKCS7.padder.finalize",
      "type": "callable",
      "signature": "()"
    },
    "cryptography.hazmat.primitives.padding.PKCS7.padder.update": {
      "name": "cryptography.hazmat.primitives.padding.PKCS7.padder.update",
      "type": "callable",
      "signature": "(self) -> cryptography.hazmat.primitives.padding.PaddingContex)"
    },
    "cryptography.hazmat.primitives.ciphers.Cipher": {
      "name": "cryptography.hazmat.primitives.ciphers.Cipher",
      "type": "class",
      "signature": "(algorithm: cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm, mode: +Mode, backend: Any = None)"
    },
    "cryptography.hazmat.primitives.ciphers.Cipher.encryptor": {
      "name": "cryptography.hazmat.primitives.ciphers.Cipher.encryptor",
      "type": "callable",
      "signature": "(self)"
    },
    "open.read()": {
      "name": "open.read()"
    },
    "open.write(encrypted_data)": {
      "name": "open.write(encrypted_data)"
    },
    "open.write(b64encode(encrypted_aes_key))": {
      "name": "open.write(b64encode(encrypted_aes_key))"
    },
    "os.urandom": {
      "name": "os.urandom",
      "type": "callable",
      "signature": "(size)"
    },
    "rsa.newkeys": {
      "name": "rsa.newkeys",
      "type": "callable",
      "signature": "(nbits: int)"
    },
    "rsa.encrypt": {
      "name": "rsa.encrypt",
      "type": "callable",
      "signature": "(message: bytes, pub_key: rsa.key.PublicKey) -> byte)"
    }
  },
  "BigCodeBench/590": {
    "datetime.datetime": {
      "name": "datetime.datetime",
      "type": "class",
      "signature": "(self, /, *args, **kwargs)",
      "chains": {
        "now": {
          "name": "datetime.datetime.now",
          "type": "callable",
          "signature": "()"
        }
      }
    },
    "a.text": {
      "name": "a.text"
    },
    "a.get('href')": {
      "name": "a.get('href')"
    },
    "urllib.error.URLError": {
      "name": "urllib.error.URLError",
      "type": "class",
      "signature": "(reason)"
    },
    "urllib.request.urlopen": {
      "name": "urllib.request.urlopen",
      "type": "callable",
      "signature": "(url)"
    },
    "urllib.request.urlopen.read": {
      "name": "urllib.request.urlopen.read",
      "type": "callable",
      "signature": "()"
    }
  },
  "BigCodeBench/592": {
    "datetime.datetime": {
      "name": "datetime.datetime",
      "type": "class",
      "signature": "(self, /, *args, **kwargs)",
      "chains": {
        "now": {
          "name": "datetime.datetime.now",
          "type": "callable",
          "signature": "()"
        }
      }
    },
    "csv.writer": {
      "name": "csv.writer",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "csv.writer.writerows": {
      "name": "csv.writer.writerows",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "data.append(row)": {
      "name": "data.append(row)"
    },
    "os.makedirs": {
      "name": "os.makedirs",
      "type": "callable",
      "signature": "(name)"
    },
    "os.path.exists": {
      "name": "os.path.exists",
      "type": "callable",
      "signature": "(path)"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    },
    "random.randint": {
      "name": "random.randint",
      "type": "callable",
      "signature": "(a, b)"
    }
  },
  "BigCodeBench/593": {
    "datetime.datetime": {
      "name": "datetime.datetime",
      "type": "class",
      "signature": "(self, /, *args, **kwargs)",
      "chains": {
        "now": {
          "name": "datetime.datetime.now",
          "type": "callable",
          "signature": "()"
        }
      }
    },
    "csv.writer": {
      "name": "csv.writer",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "csv.writer.writerows": {
      "name": "csv.writer.writerows",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "data.append(row)": {
      "name": "data.append(row)"
    },
    "matplotlib.pyplot.show": {
      "name": "matplotlib.pyplot.show",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.tight_layout": {
      "name": "matplotlib.pyplot.tight_layout",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.xlabel": {
      "name": "matplotlib.pyplot.xlabel",
      "type": "callable",
      "signature": "(xlabel)"
    },
    "matplotlib.pyplot.ylabel": {
      "name": "matplotlib.pyplot.ylabel",
      "type": "callable",
      "signature": "(ylabel)"
    },
    "os.makedirs": {
      "name": "os.makedirs",
      "type": "callable",
      "signature": "(name)"
    },
    "os.path.exists": {
      "name": "os.path.exists",
      "type": "callable",
      "signature": "(path)"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    },
    "pandas.read_csv": {
      "name": "pandas.read_csv",
      "type": "callable",
      "signature": "(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]')"
    },
    "pandas.read_csv.empty": {
      "name": "pandas.read_csv.empty",
      "type": "callable",
      "signature": "(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: \"int | Sequence[int] | None | Literal['infer']\" = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace: 'bool' = False, skiprows=None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: \"Literal['high', 'legacy'] | None\" = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'"
    },
    "pandas.read_csv.plot": {
      "name": "pandas.read_csv.plot",
      "type": "callable",
      "signature": "()"
    },
    "random.randint": {
      "name": "random.randint",
      "type": "callable",
      "signature": "(a, b)"
    }
  },
  "BigCodeBench/594": {
    "datetime.datetime": {
      "name": "datetime.datetime",
      "type": "class",
      "signature": "(self, /, *args, **kwargs)",
      "chains": {
        "now": {
          "name": "datetime.datetime.now",
          "type": "callable",
          "signature": "()"
        }
      }
    },
    "csv.writer": {
      "name": "csv.writer",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "csv.writer.writerows": {
      "name": "csv.writer.writerows",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "data.append(row)": {
      "name": "data.append(row)"
    },
    "os.makedirs": {
      "name": "os.makedirs",
      "type": "callable",
      "signature": "(name)"
    },
    "os.path.exists": {
      "name": "os.path.exists",
      "type": "callable",
      "signature": "(path)"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    },
    "random.randint": {
      "name": "random.randint",
      "type": "callable",
      "signature": "(a, b)"
    },
    "shutil.copy": {
      "name": "shutil.copy",
      "type": "callable",
      "signature": "(src, dst)"
    }
  },
  "BigCodeBench/618": {
    "match_results.append([team, team_goals, penalty_cost])": {
      "name": "match_results.append([team, team_goals, penalty_cost])"
    },
    "matplotlib.pyplot.close": {
      "name": "matplotlib.pyplot.close",
      "type": "callable",
      "signature": "()"
    },
    "random.randint": {
      "name": "random.randint",
      "type": "callable",
      "signature": "(a, b)"
    },
    "seaborn.barplot": {
      "name": "seaborn.barplot",
      "type": "callable",
      "signature": "(data=None, x=None, y=None, palette=None, **kwargs)"
    }
  },
  "BigCodeBench/636": {
    "pandas.DataFrame": {
      "name": "pandas.DataFrame",
      "type": "class",
      "signature": "(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'None'",
      "chains": {
        "astype": {
          "name": "pandas.DataFrame.astype",
          "type": "callable",
          "signature": "(self: 'NDFrameT')"
        }
      }
    },
    "counts.plot(kind='bar').set_title('Non-Zero Value Counts')": {
      "name": "counts.plot(kind='bar').set_title('Non-Zero Value Counts')"
    },
    "df.astype(bool).sum(axis=0).plot(kind='bar')": {
      "name": "df.astype(bool).sum(axis=0).plot(kind='bar')"
    },
    "matplotlib.pyplot.gca": {
      "name": "matplotlib.pyplot.gca",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.close": {
      "name": "matplotlib.pyplot.close",
      "type": "callable",
      "signature": "(fig=None)"
    },
    "matplotlib.pyplot.gca.set_title": {
      "name": "matplotlib.pyplot.gca.set_title",
      "type": "callable",
      "signature": "()"
    },
    "numpy.random.randint": {
      "name": "numpy.random.randint",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    }
  },
  "BigCodeBench/637": {
    "pandas.DataFrame": {
      "name": "pandas.DataFrame",
      "type": "class",
      "signature": "(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'None'",
      "chains": {
        "mean": {
          "name": "pandas.DataFrame.mean",
          "type": "callable",
          "signature": "(self)"
        }
      }
    },
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].legend": {
      "name": "matplotlib.pyplot.subplots[1].legend",
      "type": "method",
      "signature": "(*args, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_title": {
      "name": "matplotlib.pyplot.subplots[1].set_title",
      "type": "method",
      "signature": "(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)"
    },
    "numpy.random.randint": {
      "name": "numpy.random.randint",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "random.sample": {
      "name": "random.sample",
      "type": "callable",
      "signature": "(population, k)"
    }
  },
  "BigCodeBench/654": {
    "indices.size": {
      "name": "indices.size"
    },
    "matplotlib.pyplot.gca": {
      "name": "matplotlib.pyplot.gca",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.show": {
      "name": "matplotlib.pyplot.show",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.legend": {
      "name": "matplotlib.pyplot.legend",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.figure": {
      "name": "matplotlib.pyplot.figure",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.plot": {
      "name": "matplotlib.pyplot.plot",
      "type": "callable",
      "signature": "(*args, scalex=True, scaley=True, **kwargs)"
    },
    "numpy.exp": {
      "name": "numpy.exp",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.arange": {
      "name": "numpy.arange",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.where": {
      "name": "numpy.where",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.linspace": {
      "name": "numpy.linspace",
      "type": "callable",
      "signature": "(start, stop, num=50)"
    },
    "scipy.optimize.curve_fit": {
      "name": "scipy.optimize.curve_fit",
      "type": "callable",
      "signature": "(f, xdata, ydata, p0=None, **kwargs)"
    }
  },
  "BigCodeBench/655": {
    "NMF(n_components=num_topics, random_state=1).fit(tfidf).components_": {
      "name": "NMF(n_components=num_topics, random_state=1).fit(tfidf).components_"
    },
    "nltk.corpus.stopwords": {
      "name": "nltk.corpus.stopwords",
      "type": "constant",
      "signature": null,
      "value": "<WordListCorpusReader in '.../corpora/stopwords' (not loaded yet)>"
    },
    "nltk.download": {
      "name": "nltk.download",
      "type": "callable",
      "signature": "(info_or_id=None)"
    },
    "nltk.corpus.stopwords.words": {
      "name": "nltk.corpus.stopwords.words",
      "type": "callable",
      "signature": "(fileids=None)"
    },
    "re.compile": {
      "name": "re.compile",
      "type": "callable",
      "signature": "(pattern)"
    },
    "re.compile.sub": {
      "name": "re.compile.sub",
      "type": "callable",
      "signature": "(pattern, flags=0)"
    },
    "sklearn.decomposition.NMF": {
      "name": "sklearn.decomposition.NMF",
      "type": "class",
      "signature": "(n_components=None, random_state=None)"
    },
    "sklearn.feature_extraction.text.TfidfVectorizer": {
      "name": "sklearn.feature_extraction.text.TfidfVectorizer",
      "type": "class",
      "signature": "(stop_words=None, max_df=1.0, min_df=1)"
    },
    "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names": {
      "name": "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names",
      "type": "class",
      "signature": "()"
    },
    "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out": {
      "name": "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out",
      "type": "callable",
      "signature": "(self)"
    },
    "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform": {
      "name": "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform",
      "type": "callable",
      "signature": "(self, raw_documents)"
    },
    "text.split()": {
      "name": "text.split()"
    },
    "topic.argsort()": {
      "name": "topic.argsort()"
    },
    "topics.append(topic_keywords)": {
      "name": "topics.append(topic_keywords)"
    }
  },
  "BigCodeBench/657": {
    "gensim.models.Word2Vec": {
      "name": "gensim.models.Word2Vec",
      "type": "class",
      "signature": "(sentences=None, vector_size=100, window=5, min_count=5, workers=3)"
    },
    "nltk.corpus.stopwords": {
      "name": "nltk.corpus.stopwords",
      "type": "constant",
      "signature": null,
      "value": "<WordListCorpusReader in '/home/terryz1/nltk_data/corpora/stopwords'>"
    },
    "nltk.corpus.stopwords.words": {
      "name": "nltk.corpus.stopwords.words",
      "type": "callable",
      "signature": "(fileids=None)"
    },
    "re.compile": {
      "name": "re.compile",
      "type": "callable",
      "signature": "(pattern)"
    },
    "re.compile.sub": {
      "name": "re.compile.sub",
      "type": "callable",
      "signature": "(pattern, flags=0)"
    },
    "text.split()": {
      "name": "text.split()"
    }
  },
  "BigCodeBench/678": {
    "filename.endswith('.json')": {
      "name": "filename.endswith('.json')"
    },
    "json.load": {
      "name": "json.load",
      "type": "callable",
      "signature": "(fp)"
    },
    "os.listdir": {
      "name": "os.listdir",
      "type": "callable",
      "signature": "(path=None)"
    },
    "os.makedirs": {
      "name": "os.makedirs",
      "type": "callable",
      "signature": "(name)"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    },
    "os.path.exists": {
      "name": "os.path.exists",
      "type": "callable",
      "signature": "(path)"
    },
    "pandas.concat": {
      "name": "pandas.concat",
      "type": "callable",
      "signature": "(objs: 'Iterable[NDFrame] | Mapping[HashableT)"
    },
    "shutil.move": {
      "name": "shutil.move",
      "type": "callable",
      "signature": "(src, dst)"
    }
  },
  "BigCodeBench/720": {
    "datetime.datetime": {
      "name": "datetime.datetime",
      "type": "class",
      "signature": "(self, /, *args, **kwargs)",
      "chains": {
        "now": {
          "name": "datetime.datetime.now",
          "type": "callable",
          "signature": "()"
        }
      }
    },
    "csv.writer": {
      "name": "csv.writer",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "csv.writer.writerow": {
      "name": "csv.writer.writerow",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "os.path.isfile": {
      "name": "os.path.isfile",
      "type": "callable",
      "signature": "(path)"
    },
    "os.path.dirname": {
      "name": "os.path.dirname",
      "type": "callable",
      "signature": "(p)"
    },
    "os.makedirs": {
      "name": "os.makedirs",
      "type": "callable",
      "signature": "(name, exist_ok=False)"
    },
    "random.uniform": {
      "name": "random.uniform",
      "type": "callable",
      "signature": "(a, b)"
    }
  },
  "BigCodeBench/723": {
    "bs4.BeautifulSoup": {
      "name": "bs4.BeautifulSoup",
      "type": "class",
      "signature": "(markup='', features=None, builder=None, parse_only=None, from_encoding=None, exclude_encodings=None, element_classes=None, **kwargs)",
      "chains": {
        "find": {
          "name": "bs4.BeautifulSoup.find",
          "type": "callable",
          "signature": "(self, name=None, attrs={}, **kwargs)"
        }
      }
    },
    "csv.writer": {
      "name": "csv.writer",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "csv.writer.writerows": {
      "name": "csv.writer.writerows",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "data.append(row)": {
      "name": "data.append(row)"
    },
    "os.remove": {
      "name": "os.remove",
      "type": "callable",
      "signature": "(path)"
    },
    "os.path.exists": {
      "name": "os.path.exists",
      "type": "callable",
      "signature": "(path)"
    },
    "soup.find('table', attrs={'class': 'data-table'}).find_all('tr')": {
      "name": "soup.find('table', attrs={'class': 'data-table'}).find_all('tr')"
    },
    "tr.text": {
      "name": "tr.text"
    },
    "tr.find_all('td')": {
      "name": "tr.find_all('td')"
    },
    "urllib.request.urlopen": {
      "name": "urllib.request.urlopen",
      "type": "callable",
      "signature": "(url)"
    }
  },
  "BigCodeBench/752": {
    "LinearRegression().fit(X_train, y_train).score(X_test, y_test)": {
      "name": "LinearRegression().fit(X_train, y_train).score(X_test, y_test)"
    },
    "data.empty": {
      "name": "data.empty"
    },
    "data.dtypes": {
      "name": "data.dtypes"
    },
    "data.columns": {
      "name": "data.columns"
    },
    "data.drop(columns=[target_column])": {
      "name": "data.drop(columns=[target_column])"
    },
    "numpy.issubdtype": {
      "name": "numpy.issubdtype",
      "type": "callable",
      "signature": "(arg1, arg2)"
    },
    "sklearn.linear_model.LinearRegression": {
      "name": "sklearn.linear_model.LinearRegression",
      "type": "class",
      "signature": "()"
    },
    "sklearn.model_selection.train_test_split": {
      "name": "sklearn.model_selection.train_test_split",
      "type": "callable",
      "signature": "(*arrays, test_size=None, random_state=None)"
    }
  },
  "BigCodeBench/760": {
    "datetime.datetime": {
      "name": "datetime.datetime",
      "type": "class",
      "signature": "(self, /, *args, **kwargs)",
      "chains": {
        "datetime": {
          "name": "datetime.datetime.datetime",
          "type": "class",
          "signature": "(self, /, *args, **kwargs)"
        }
      }
    },
    "codecs.encode": {
      "name": "codecs.encode",
      "type": "callable",
      "signature": "(obj, encoding='utf-8')"
    },
    "data.append([i, name, dob, email])": {
      "name": "data.append([i, name, dob, email])"
    },
    "name.lower()": {
      "name": "name.lower()"
    },
    "numpy.random.seed": {
      "name": "numpy.random.seed",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.random.randint": {
      "name": "numpy.random.randint",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.random.choice": {
      "name": "numpy.random.choice",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "re.sub": {
      "name": "re.sub",
      "type": "callable",
      "signature": "(pattern, repl, string)"
    }
  },
  "BigCodeBench/763": {
    "collections.defaultdict": {
      "name": "collections.defaultdict",
      "type": "class",
      "signature": "(self, /, *args, **kwargs)",
      "chains": {
        "items": {
          "name": "collections.defaultdict.items",
          "type": "callable",
          "signature": "()"
        }
      }
    },
    "csv.DictWriter": {
      "name": "csv.DictWriter",
      "type": "class",
      "signature": "(f, fieldnames, restval='', extrasaction='raise', dialect='excel', *args, **kwds)",
      "chains": {
        "writeheader": {
          "name": "csv.DictWriter.writeheader",
          "type": "callable",
          "signature": "(self)"
        },
        "writerow": {
          "name": "csv.DictWriter.writerow",
          "type": "callable",
          "signature": "(self, rowdict)"
        }
      }
    },
    "d.items()": {
      "name": "d.items()"
    },
    "json.load": {
      "name": "json.load",
      "type": "callable",
      "signature": "(fp)"
    },
    "numpy.mean": {
      "name": "numpy.mean",
      "type": "callable",
      "signature": "(a)"
    },
    "numpy.median": {
      "name": "numpy.median",
      "type": "callable",
      "signature": "(a)"
    },
    "result.items()": {
      "name": "result.items()"
    }
  },
  "BigCodeBench/765": {
    "copied_files.append(str(target_file))": {
      "name": "copied_files.append(str(target_file))"
    },
    "kwargs.items()": {
      "name": "kwargs.items()"
    },
    "os.path.isfile": {
      "name": "os.path.isfile",
      "type": "callable",
      "signature": "(path)"
    },
    "os.makedirs": {
      "name": "os.makedirs",
      "type": "callable",
      "signature": "(name)"
    },
    "os.path.exists": {
      "name": "os.path.exists",
      "type": "callable",
      "signature": "(path)"
    },
    "shutil.copyfile": {
      "name": "shutil.copyfile",
      "type": "callable",
      "signature": "(src, dst)"
    }
  },
  "BigCodeBench/771": {
    "csv.reader": {
      "name": "csv.reader",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "csv.writer": {
      "name": "csv.writer",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "csv.writer.writerows": {
      "name": "csv.writer.writerows",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "file_pattern.match(filename).group(1)": {
      "name": "file_pattern.match(filename).group(1)"
    },
    "new_files.append(new_filename)": {
      "name": "new_files.append(new_filename)"
    },
    "os.listdir": {
      "name": "os.listdir",
      "type": "callable",
      "signature": "(path=None)"
    },
    "re.compile": {
      "name": "re.compile",
      "type": "callable",
      "signature": "(pattern)"
    },
    "re.compile.match": {
      "name": "re.compile.match",
      "type": "callable",
      "signature": "(pattern)"
    }
  },
  "BigCodeBench/777": {
    "zipfile.ZipFile": {
      "name": "zipfile.ZipFile",
      "type": "class",
      "signature": "(file, mode='r', compression=0, allowZip64=True, compresslevel=None, *, strict_timestamps=True)",
      "chains": {
        "extractall": {
          "name": "zipfile.ZipFile.extractall",
          "type": "callable",
          "signature": "(self, path=None)"
        }
      }
    },
    "extracted_dirs.append(extract_path)": {
      "name": "extracted_dirs.append(extract_path)"
    },
    "os.listdir": {
      "name": "os.listdir",
      "type": "callable",
      "signature": "(path=None)"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    },
    "os.makedirs": {
      "name": "os.makedirs",
      "type": "callable",
      "signature": "(name, exist_ok=False)"
    },
    "re.match": {
      "name": "re.match",
      "type": "callable",
      "signature": "(pattern, string)"
    },
    "re.match.group": {
      "name": "re.match.group",
      "type": "callable",
      "signature": "(pattern)"
    }
  },
  "BigCodeBench/785": {
    "glob.glob": {
      "name": "glob.glob",
      "type": "callable",
      "signature": "(pathname)"
    },
    "os.remove": {
      "name": "os.remove",
      "type": "callable",
      "signature": "(path)"
    },
    "os.makedirs": {
      "name": "os.makedirs",
      "type": "callable",
      "signature": "(name)"
    },
    "os.path.exists": {
      "name": "os.path.exists",
      "type": "callable",
      "signature": "(path)"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    },
    "subprocess.run": {
      "name": "subprocess.run",
      "type": "callable",
      "signature": "(*popenargs)"
    }
  },
  "BigCodeBench/800": {
    "csv.writer": {
      "name": "csv.writer",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "csv.writer.writerows": {
      "name": "csv.writer.writerows",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "goals.items()": {
      "name": "goals.items()"
    },
    "os.path.exists": {
      "name": "os.path.exists",
      "type": "callable",
      "signature": "(path)"
    },
    "penalties.items()": {
      "name": "penalties.items()"
    },
    "row.get('goals', 0)": {
      "name": "row.get('goals', 0)"
    },
    "row.get('penalties', 0)": {
      "name": "row.get('penalties', 0)"
    }
  },
  "BigCodeBench/826": {
    "os.listdir": {
      "name": "os.listdir",
      "type": "callable",
      "signature": "(path=None)"
    },
    "os.makedirs": {
      "name": "os.makedirs",
      "type": "callable",
      "signature": "(name)"
    },
    "os.path.exists": {
      "name": "os.path.exists",
      "type": "callable",
      "signature": "(path)"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    },
    "re.match": {
      "name": "re.match",
      "type": "callable",
      "signature": "(pattern, string)"
    },
    "shutil.move": {
      "name": "shutil.move",
      "type": "callable",
      "signature": "(src, dst)"
    }
  },
  "BigCodeBench/845": {
    "collections.Counter": {
      "name": "collections.Counter",
      "type": "class",
      "signature": "(iterable=None, /, **kwds)",
      "chains": {
        "keys": {
          "name": "collections.Counter.keys",
          "type": "callable",
          "signature": "()"
        }
      }
    },
    "ALPHANUMERIC.sub(' ', text1).lower().split()": {
      "name": "ALPHANUMERIC.sub(' ', text1).lower().split()"
    },
    "ALPHANUMERIC.sub(' ', text2).lower().split()": {
      "name": "ALPHANUMERIC.sub(' ', text2).lower().split()"
    },
    "Levenshtein.ratio": {
      "name": "Levenshtein.ratio",
      "type": "callable",
      "signature": "(s1, s2)"
    },
    "numpy.sqrt": {
      "name": "numpy.sqrt",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "re.compile": {
      "name": "re.compile",
      "type": "callable",
      "signature": "(pattern)"
    },
    "re.compile.sub": {
      "name": "re.compile.sub",
      "type": "callable",
      "signature": "(pattern, flags=0)"
    }
  },
  "BigCodeBench/854": {
    "functools.reduce": {
      "name": "functools.reduce",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "math.factorial": {
      "name": "math.factorial",
      "type": "callable",
      "signature": "(x)"
    }
  },
  "BigCodeBench/857": {
    "glob.glob": {
      "name": "glob.glob",
      "type": "callable",
      "signature": "(pathname)"
    },
    "os.path.basename": {
      "name": "os.path.basename",
      "type": "callable",
      "signature": "(p)"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    },
    "shutil.move": {
      "name": "shutil.move",
      "type": "callable",
      "signature": "(src, dst)"
    },
    "time.sleep": {
      "name": "time.sleep",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "transferred_files.append(os.path.basename(src_file))": {
      "name": "transferred_files.append(os.path.basename(src_file))"
    },
    "warnings.simplefilter": {
      "name": "warnings.simplefilter",
      "type": "callable",
      "signature": "(action)"
    },
    "warnings.warn": {
      "name": "warnings.warn",
      "type": "callable",
      "signature": "(message)"
    }
  },
  "BigCodeBench/865": {
    "numpy.array": {
      "name": "numpy.array",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "scipy.stats.zscore": {
      "name": "scipy.stats.zscore",
      "type": "callable",
      "signature": "(a)"
    },
    "sklearn.preprocessing.MinMaxScaler": {
      "name": "sklearn.preprocessing.MinMaxScaler",
      "type": "class",
      "signature": "()"
    },
    "sklearn.preprocessing.MinMaxScaler.fit_transform": {
      "name": "sklearn.preprocessing.MinMaxScaler.fit_transform",
      "type": "callable",
      "signature": "(self, X)"
    }
  },
  "BigCodeBench/870": {
    "mean_values.append(np.nan)": {
      "name": "mean_values.append(np.nan)"
    },
    "mean_values.append(np.nanmean(numeric_values))": {
      "name": "mean_values.append(np.nanmean(numeric_values))"
    },
    "numpy.nan": {
      "name": "numpy.nan",
      "type": "constant",
      "signature": null,
      "value": "nan"
    },
    "numpy.nanmean": {
      "name": "numpy.nanmean",
      "type": "callable",
      "signature": "(a)"
    }
  },
  "BigCodeBench/879": {
    "data.empty": {
      "name": "data.empty"
    },
    "numpy.issubdtype": {
      "name": "numpy.issubdtype",
      "type": "callable",
      "signature": "(arg1, arg2)"
    },
    "pandas.crosstab": {
      "name": "pandas.crosstab",
      "type": "callable",
      "signature": "(index, columns)"
    },
    "scipy.stats.chi2_contingency": {
      "name": "scipy.stats.chi2_contingency",
      "type": "callable",
      "signature": "(observed)"
    }
  },
  "BigCodeBench/897": {
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].set_ylabel": {
      "name": "matplotlib.pyplot.subplots[1].set_ylabel",
      "type": "method",
      "signature": "(ylabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_xlabel": {
      "name": "matplotlib.pyplot.subplots[1].set_xlabel",
      "type": "method",
      "signature": "(xlabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_title": {
      "name": "matplotlib.pyplot.subplots[1].set_title",
      "type": "method",
      "signature": "(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].hist": {
      "name": "matplotlib.pyplot.subplots[1].hist",
      "type": "method",
      "signature": "(x, bins=None, range=None, density=False, weights=None, cumulative=False, bottom=None, histtype='bar', align='mid', orientation='vertical', rwidth=None, log=False, color=None, label=None, stacked=False, *, data=None, **kwargs)"
    },
    "numpy.arange": {
      "name": "numpy.arange",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.bincount": {
      "name": "numpy.bincount",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "random.seed": {
      "name": "random.seed",
      "type": "callable",
      "signature": "(a=None)"
    },
    "random.choice": {
      "name": "random.choice",
      "type": "callable",
      "signature": "(seq)"
    }
  },
  "BigCodeBench/906": {
    "zipfile.ZipFile": {
      "name": "zipfile.ZipFile",
      "type": "class",
      "signature": "(file, mode='r', compression=0, allowZip64=True, compresslevel=None, *, strict_timestamps=True)",
      "chains": {
        "write": {
          "name": "zipfile.ZipFile.write",
          "type": "callable",
          "signature": "(self, filename, arcname=None)"
        }
      }
    },
    "os.path.splitext": {
      "name": "os.path.splitext",
      "type": "callable",
      "signature": "(p)"
    },
    "os.listdir": {
      "name": "os.listdir",
      "type": "callable",
      "signature": "(path=None)"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    },
    "os.makedirs": {
      "name": "os.makedirs",
      "type": "callable",
      "signature": "(name, exist_ok=False)"
    },
    "re.search": {
      "name": "re.search",
      "type": "callable",
      "signature": "(pattern, string)"
    },
    "shutil.move": {
      "name": "shutil.move",
      "type": "callable",
      "signature": "(src, dst)"
    }
  },
  "BigCodeBench/914": {
    "pandas.Timestamp": {
      "name": "pandas.Timestamp",
      "type": "class",
      "signature": "(ts_input=<object object at 0x7f151063a370>, year=None, month=None, day=None, hour=None, minute=None, second=None, microsecond=None, tzinfo=None, *, nanosecond=None, tz=None, unit=None, fold=None)",
      "chains": {
        "timestamp": {
          "name": "pandas.Timestamp.timestamp",
          "type": "callable",
          "signature": "(*args, **kwargs)"
        }
      }
    },
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].scatter": {
      "name": "matplotlib.pyplot.subplots[1].scatter",
      "type": "method",
      "signature": "(x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, *, edgecolors=None, plotnonfinite=False, data=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].plot": {
      "name": "matplotlib.pyplot.subplots[1].plot",
      "type": "method",
      "signature": "(*args, scalex=True, scaley=True, data=None, **kwargs)"
    },
    "numpy.array": {
      "name": "numpy.array",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "pandas.to_datetime": {
      "name": "pandas.to_datetime",
      "type": "callable",
      "signature": "(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible')"
    },
    "sklearn.linear_model.LinearRegression": {
      "name": "sklearn.linear_model.LinearRegression",
      "type": "class",
      "signature": "()"
    },
    "sklearn.linear_model.LinearRegression.fit": {
      "name": "sklearn.linear_model.LinearRegression.fit",
      "type": "callable",
      "signature": "(self, X, y)"
    },
    "sklearn.linear_model.LinearRegression.predict": {
      "name": "sklearn.linear_model.LinearRegression.predict",
      "type": "callable",
      "signature": "(self, X)"
    }
  },
  "BigCodeBench/915": {
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "(**fig_kw)"
    },
    "matplotlib.pyplot.subplots[1].legend": {
      "name": "matplotlib.pyplot.subplots[1].legend",
      "type": "method",
      "signature": "(*args, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_xlabel": {
      "name": "matplotlib.pyplot.subplots[1].set_xlabel",
      "type": "method",
      "signature": "(xlabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_ylabel": {
      "name": "matplotlib.pyplot.subplots[1].set_ylabel",
      "type": "method",
      "signature": "(ylabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_title": {
      "name": "matplotlib.pyplot.subplots[1].set_title",
      "type": "method",
      "signature": "(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].plot": {
      "name": "matplotlib.pyplot.subplots[1].plot",
      "type": "method",
      "signature": "(*args, scalex=True, scaley=True, data=None, **kwargs)"
    },
    "numpy.abs": {
      "name": "numpy.abs",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "scipy.stats.zscore": {
      "name": "scipy.stats.zscore",
      "type": "callable",
      "signature": "(a)"
    }
  },
  "BigCodeBench/916": {
    "matplotlib.pyplot.close": {
      "name": "matplotlib.pyplot.close",
      "type": "callable",
      "signature": "(fig=None)"
    },
    "matplotlib.pyplot.tight_layout": {
      "name": "matplotlib.pyplot.tight_layout",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "(nrows=1, ncols=1, **fig_kw)"
    },
    "seaborn.boxplot": {
      "name": "seaborn.boxplot",
      "type": "callable",
      "signature": "(x=None, ax=None, **kwargs)"
    },
    "seaborn.histplot": {
      "name": "seaborn.histplot",
      "type": "callable",
      "signature": "(data=None, kde=False, ax=None, **kwargs)"
    },
    "seaborn.boxplot.set_title": {
      "name": "seaborn.boxplot.set_title",
      "type": "callable",
      "signature": "(data=None)"
    },
    "seaborn.histplot.set_title": {
      "name": "seaborn.histplot.set_title",
      "type": "callable",
      "signature": "(data=None)"
    }
  },
  "BigCodeBench/917": {
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].legend": {
      "name": "matplotlib.pyplot.subplots[1].legend",
      "type": "method",
      "signature": "(*args, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].plot": {
      "name": "matplotlib.pyplot.subplots[1].plot",
      "type": "method",
      "signature": "(*args, scalex=True, scaley=True, data=None, **kwargs)"
    },
    "model_fit.forecast(steps=7).tolist()": {
      "name": "model_fit.forecast(steps=7).tolist()"
    },
    "pandas.date_range": {
      "name": "pandas.date_range",
      "type": "callable",
      "signature": "(start=None, periods=None, **kwargs) -> 'DatetimeIndex)"
    },
    "statsmodels.tsa.arima.model.ARIMA": {
      "name": "statsmodels.tsa.arima.model.ARIMA",
      "type": "class",
      "signature": "(endog, order=(0)"
    },
    "statsmodels.tsa.arima.model.ARIMA.fit": {
      "name": "statsmodels.tsa.arima.model.ARIMA.fit",
      "type": "callable",
      "signature": "(self)"
    },
    "typing.List": {
      "name": "typing.List",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "typing.Tuple": {
      "name": "typing.Tuple",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    }
  },
  "BigCodeBench/928": {
    "collections.Counter": {
      "name": "collections.Counter",
      "type": "class",
      "signature": "(iterable=None, /, **kwds)",
      "chains": {
        "get": {
          "name": "collections.Counter.get",
          "type": "callable",
          "signature": "(self, key, default=None)"
        }
      }
    },
    "string.ascii_lowercase": {
      "name": "string.ascii_lowercase",
      "type": "constant",
      "signature": null,
      "value": "abcdefghijklmnopqrstuvwxyz"
    }
  },
  "BigCodeBench/942": {
    "pandas.DataFrame": {
      "name": "pandas.DataFrame",
      "type": "class",
      "signature": "(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'None'",
      "chains": {
        "pivot": {
          "name": "pandas.DataFrame.pivot",
          "type": "callable",
          "signature": "(self, columns, index=typing.Literal[<no_default>], values=typing.Literal[<no_default>]) -> 'DataFrame)"
        }
      }
    },
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "(**fig_kw)"
    },
    "matplotlib.pyplot.subplots[1].grid": {
      "name": "matplotlib.pyplot.subplots[1].grid",
      "type": "method",
      "signature": "(visible=None, which='major', axis='both', **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_title": {
      "name": "matplotlib.pyplot.subplots[1].set_title",
      "type": "method",
      "signature": "(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)"
    },
    "numpy.random.seed": {
      "name": "numpy.random.seed",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.random.randint": {
      "name": "numpy.random.randint",
      "type": "callable",
      "signature": "(**kwargs)"
    },
    "pandas.date_range": {
      "name": "pandas.date_range",
      "type": "callable",
      "signature": "(start=None, periods=None, freq=None, **kwargs) -> 'DatetimeIndex)"
    },
    "report_data.append([date, category, sales])": {
      "name": "report_data.append([date, category, sales])"
    }
  },
  "BigCodeBench/945": {
    "numpy.arange": {
      "name": "numpy.arange",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "numpy.random.randint": {
      "name": "numpy.random.randint",
      "type": "callable",
      "signature": "(**kwargs)"
    },
    "pandas.date_range": {
      "name": "pandas.date_range",
      "type": "callable",
      "signature": "(start=None, periods=None, freq=None, **kwargs) -> 'DatetimeIndex)"
    },
    "sklearn.linear_model.LinearRegression": {
      "name": "sklearn.linear_model.LinearRegression",
      "type": "class",
      "signature": "()"
    },
    "sklearn.linear_model.LinearRegression.fit": {
      "name": "sklearn.linear_model.LinearRegression.fit",
      "type": "callable",
      "signature": "(self, X, y)"
    },
    "sklearn.linear_model.LinearRegression.predict": {
      "name": "sklearn.linear_model.LinearRegression.predict",
      "type": "callable",
      "signature": "(self, X)"
    }
  },
  "BigCodeBench/952": {
    "datetime.datetime": {
      "name": "datetime.datetime",
      "type": "class",
      "signature": "(self, /, *args, **kwargs)",
      "chains": {
        "today": {
          "name": "datetime.datetime.today",
          "type": "callable",
          "signature": "()"
        }
      }
    },
    "assignment_data.append([task_name, employee, due_date])": {
      "name": "assignment_data.append([task_name, employee, due_date])"
    },
    "random.seed": {
      "name": "random.seed",
      "type": "callable",
      "signature": "(a=None)"
    },
    "random.choice": {
      "name": "random.choice",
      "type": "callable",
      "signature": "(seq)"
    }
  },
  "BigCodeBench/955": {
    "collections.Counter": {
      "name": "collections.Counter",
      "type": "class",
      "signature": "(iterable=None, /, **kwds)",
      "chains": {
        "items": {
          "name": "collections.Counter.items",
          "type": "callable",
          "signature": "()"
        }
      }
    },
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].set_xticks": {
      "name": "matplotlib.pyplot.subplots[1].set_xticks",
      "type": "method",
      "signature": "(ticks, labels=None, *, minor=False, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_xticklabels": {
      "name": "matplotlib.pyplot.subplots[1].set_xticklabels",
      "type": "method",
      "signature": "(labels, *, minor=False, fontdict=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].bar": {
      "name": "matplotlib.pyplot.subplots[1].bar",
      "type": "method",
      "signature": "(x, height, width=0.8, bottom=None, *, align='center', data=None, **kwargs)"
    },
    "numpy.arange": {
      "name": "numpy.arange",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "re.IGNORECASE": {
      "name": "re.IGNORECASE",
      "type": "constant",
      "signature": null,
      "value": "re.IGNORECASE"
    },
    "re.sub": {
      "name": "re.sub",
      "type": "callable",
      "signature": "(pattern, repl, string, flags=0)"
    },
    "re.sub.split": {
      "name": "re.sub.split",
      "type": "callable",
      "signature": "()"
    },
    "word.replace(' ', '_')": {
      "name": "word.replace(' ', '_')"
    }
  },
  "BigCodeBench/963": {
    "zipfile.ZipFile": {
      "name": "zipfile.ZipFile",
      "type": "class",
      "signature": "(file, mode='r', compression=0, allowZip64=True, compresslevel=None, *, strict_timestamps=True)",
      "chains": {
        "write": {
          "name": "zipfile.ZipFile.write",
          "type": "callable",
          "signature": "(self, filename, arcname=None)"
        }
      }
    },
    "glob.glob": {
      "name": "glob.glob",
      "type": "callable",
      "signature": "(pathname, recursive=False)"
    },
    "os.path.abspath": {
      "name": "os.path.abspath",
      "type": "callable",
      "signature": "(path)"
    },
    "os.path.exists": {
      "name": "os.path.exists",
      "type": "callable",
      "signature": "(path)"
    },
    "os.makedirs": {
      "name": "os.makedirs",
      "type": "callable",
      "signature": "(name, exist_ok=False)"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    },
    "zip_name.strip()": {
      "name": "zip_name.strip()"
    }
  },
  "BigCodeBench/964": {
    "pandas.DataFrame": {
      "name": "pandas.DataFrame",
      "type": "class",
      "signature": "(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'None'",
      "chains": {
        "to_csv": {
          "name": "pandas.DataFrame.to_csv",
          "type": "callable",
          "signature": "(self, path_or_buf: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, index: 'bool_t' = True)"
        }
      }
    },
    "docx.Document": {
      "name": "docx.Document",
      "type": "callable",
      "signature": "(docx: 'str | IO[bytes] | None' = None)"
    },
    "docx.Document.paragraphs": {
      "name": "docx.Document.paragraphs",
      "type": "callable",
      "signature": "(docx: 'str | IO[bytes] | None' = None)"
    },
    "open.readlines()": {
      "name": "open.readlines()"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    },
    "os.walk": {
      "name": "os.walk",
      "type": "callable",
      "signature": "(top)"
    },
    "os.path.exists": {
      "name": "os.path.exists",
      "type": "callable",
      "signature": "(path)"
    },
    "os.makedirs": {
      "name": "os.makedirs",
      "type": "callable",
      "signature": "(name, exist_ok=False)"
    },
    "p.text": {
      "name": "p.text"
    },
    "pandas.read_csv": {
      "name": "pandas.read_csv",
      "type": "callable",
      "signature": "(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]')"
    },
    "pandas.read_excel": {
      "name": "pandas.read_excel",
      "type": "callable",
      "signature": "(io, engine: \"Literal['xlrd')"
    }
  },
  "BigCodeBench/969": {
    "df.empty": {
      "name": "df.empty"
    },
    "df.shape": {
      "name": "df.shape"
    },
    "df.columns": {
      "name": "df.columns"
    },
    "df.isnull()": {
      "name": "df.isnull()"
    },
    "df.cumsum()": {
      "name": "df.cumsum()"
    },
    "df.select_dtypes(include=np.number)": {
      "name": "df.select_dtypes(include=np.number)"
    },
    "sklearn.preprocessing.MinMaxScaler": {
      "name": "sklearn.preprocessing.MinMaxScaler",
      "type": "class",
      "signature": "()"
    },
    "sklearn.preprocessing.MinMaxScaler.fit_transform": {
      "name": "sklearn.preprocessing.MinMaxScaler.fit_transform",
      "type": "callable",
      "signature": "(self, X)"
    }
  },
  "BigCodeBench/971": {
    "datetime.timezone": {
      "name": "datetime.timezone",
      "type": "class",
      "signature": "(self, /, *args, **kwargs)",
      "chains": {
        "utc": {
          "name": "datetime.timezone.utc",
          "type": "constant",
          "signature": null,
          "value": "UTC"
        }
      }
    },
    "datetime.datetime": {
      "name": "datetime.datetime",
      "type": "class",
      "signature": "(self, /, *args, **kwargs)",
      "chains": {
        "fromtimestamp": {
          "name": "datetime.datetime.fromtimestamp",
          "type": "callable",
          "signature": "(*args, **kwargs)"
        }
      }
    },
    "entry.name": {
      "name": "entry.name"
    },
    "entry.path": {
      "name": "entry.path"
    },
    "entry.is_file()": {
      "name": "entry.is_file()"
    },
    "file_details.append((entry.name, file_size, creation_time, modification_time))": {
      "name": "file_details.append((entry.name, file_size, creation_time, modification_time))"
    },
    "os.stat": {
      "name": "os.stat",
      "type": "callable",
      "signature": "(path)"
    },
    "os.scandir": {
      "name": "os.scandir",
      "type": "callable",
      "signature": "(path=None)"
    },
    "os.stat.st_size": {
      "name": "os.stat.st_size",
      "type": "callable",
      "signature": "(path, *, dir_fd=None, follow_symlinks=True)"
    },
    "os.stat.st_mtime": {
      "name": "os.stat.st_mtime",
      "type": "callable",
      "signature": "(path, *, dir_fd=None, follow_symlinks=True)"
    },
    "os.stat.st_ctime": {
      "name": "os.stat.st_ctime",
      "type": "callable",
      "signature": "(path, *, dir_fd=None, follow_symlinks=True)"
    }
  },
  "BigCodeBench/985": {
    "pandas.DataFrame": {
      "name": "pandas.DataFrame",
      "type": "class",
      "signature": "(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'None'",
      "chains": {
        "to_csv": {
          "name": "pandas.DataFrame.to_csv",
          "type": "callable",
          "signature": "(self, path_or_buf: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, index: 'bool_t' = True)"
        }
      }
    },
    "data.get('Countries').items()": {
      "name": "data.get('Countries').items()"
    },
    "json.loads": {
      "name": "json.loads",
      "type": "callable",
      "signature": "(s)"
    },
    "json.loads.get": {
      "name": "json.loads.get",
      "type": "callable",
      "signature": "(s)"
    },
    "math.floor": {
      "name": "math.floor",
      "type": "callable",
      "signature": "(x)"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    },
    "os.makedirs": {
      "name": "os.makedirs",
      "type": "callable",
      "signature": "(name, exist_ok=False)"
    }
  },
  "BigCodeBench/988": {
    "os.listdir": {
      "name": "os.listdir",
      "type": "callable",
      "signature": "(path=None)"
    },
    "os.path.isdir": {
      "name": "os.path.isdir",
      "type": "callable",
      "signature": "(s)"
    },
    "os.path.exists": {
      "name": "os.path.exists",
      "type": "callable",
      "signature": "(path)"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    },
    "predicate_functions.items()": {
      "name": "predicate_functions.items()"
    },
    "re.search": {
      "name": "re.search",
      "type": "callable",
      "signature": "(pattern, string)"
    },
    "x.stem": {
      "name": "x.stem"
    },
    "x.name": {
      "name": "x.name"
    },
    "x.is_dir()": {
      "name": "x.is_dir()"
    },
    "x.is_file()": {
      "name": "x.is_file()"
    }
  },
  "BigCodeBench/990": {
    "base64.b64encode": {
      "name": "base64.b64encode",
      "type": "callable",
      "signature": "(s)"
    },
    "binascii.hexlify": {
      "name": "binascii.hexlify",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "bytes.fromhex(hex_string)": {
      "name": "bytes.fromhex(hex_string)"
    },
    "bytes.fromhex.decode('utf-8').encode()": {
      "name": "bytes.fromhex.decode('utf-8').encode()"
    },
    "bytes.fromhex.decode('utf-8').encode('ascii')": {
      "name": "bytes.fromhex.decode('utf-8').encode('ascii')"
    },
    "bytes.fromhex.decode('utf-8').encode('utf-8')": {
      "name": "bytes.fromhex.decode('utf-8').encode('utf-8')"
    },
    "bytes.fromhex.decode('utf-8').encode('utf-32')": {
      "name": "bytes.fromhex.decode('utf-8').encode('utf-32')"
    },
    "bytes.fromhex.decode('utf-8').encode('utf-16')": {
      "name": "bytes.fromhex.decode('utf-8').encode('utf-16')"
    },
    "codecs.encode": {
      "name": "codecs.encode",
      "type": "callable",
      "signature": "(obj, encoding='utf-8')"
    },
    "urllib.parse.quote": {
      "name": "urllib.parse.quote",
      "type": "callable",
      "signature": "(string)"
    }
  },
  "BigCodeBench/998": {
    "hashlib.md5": {
      "name": "hashlib.md5",
      "type": "callable",
      "signature": "()"
    },
    "hashlib.md5.hexdigest": {
      "name": "hashlib.md5.hexdigest",
      "type": "callable",
      "signature": "()"
    },
    "hashlib.md5.update": {
      "name": "hashlib.md5.update",
      "type": "callable",
      "signature": "(string=b'')"
    },
    "open.read(4096)": {
      "name": "open.read(4096)"
    },
    "os.remove": {
      "name": "os.remove",
      "type": "callable",
      "signature": "(path)"
    },
    "tarfile.open.extractall": {
      "name": "tarfile.open.extractall",
      "type": "callable",
      "signature": "()"
    },
    "tarfile.open": {
      "name": "tarfile.open",
      "type": "callable",
      "signature": "(name=None, mode='r')"
    },
    "urllib.request.urlretrieve": {
      "name": "urllib.request.urlretrieve",
      "type": "callable",
      "signature": "(url, filename=None)"
    }
  },
  "BigCodeBench/999": {
    "csv.DictReader": {
      "name": "csv.DictReader",
      "type": "class",
      "signature": "(f, fieldnames=None, restkey=None, restval=None, dialect='excel', *args, **kwds)",
      "chains": {
        "fieldnames": {
          "name": "csv.DictReader.fieldnames",
          "type": "constant",
          "signature": null,
          "value": "<property object at 0x7f15b69cb6a0>"
        }
      }
    },
    "os.remove": {
      "name": "os.remove",
      "type": "callable",
      "signature": "(path)"
    },
    "urllib.request.urlretrieve": {
      "name": "urllib.request.urlretrieve",
      "type": "callable",
      "signature": "(url, filename=None)"
    }
  },
  "BigCodeBench/1003": {
    "child.tag": {
      "name": "child.tag"
    },
    "child.text": {
      "name": "child.text"
    },
    "data.append(data_item)": {
      "name": "data.append(data_item)"
    },
    "lxml.etree.XML": {
      "name": "lxml.etree.XML",
      "type": "callable",
      "signature": "(text)"
    },
    "lxml.etree.XMLSyntaxError": {
      "name": "lxml.etree.XMLSyntaxError",
      "type": "class",
      "signature": "(message, code, line, column, filename=None)"
    },
    "lxml.etree.XML.findall": {
      "name": "lxml.etree.XML.findall",
      "type": "callable",
      "signature": "(text)"
    },
    "urllib.request.urlopen": {
      "name": "urllib.request.urlopen",
      "type": "callable",
      "signature": "(url)"
    },
    "urllib.request.urlopen.read": {
      "name": "urllib.request.urlopen.read",
      "type": "callable",
      "signature": "()"
    }
  },
  "BigCodeBench/1004": {
    "collections.Counter": {
      "name": "collections.Counter",
      "type": "class",
      "signature": "(iterable=None, /, **kwds)",
      "chains": {
        "most_common": {
          "name": "collections.Counter.most_common",
          "type": "callable",
          "signature": "(self, n=None)"
        }
      }
    },
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].set_xlabel": {
      "name": "matplotlib.pyplot.subplots[1].set_xlabel",
      "type": "method",
      "signature": "(xlabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_ylabel": {
      "name": "matplotlib.pyplot.subplots[1].set_ylabel",
      "type": "method",
      "signature": "(ylabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].set_title": {
      "name": "matplotlib.pyplot.subplots[1].set_title",
      "type": "method",
      "signature": "(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)"
    },
    "matplotlib.pyplot.subplots[1].bar": {
      "name": "matplotlib.pyplot.subplots[1].bar",
      "type": "method",
      "signature": "(x, height, width=0.8, bottom=None, *, align='center', data=None, **kwargs)"
    },
    "re.findall": {
      "name": "re.findall",
      "type": "callable",
      "signature": "(pattern, string)"
    },
    "urllib.request.urlopen": {
      "name": "urllib.request.urlopen",
      "type": "callable",
      "signature": "(url)"
    },
    "urllib.request.urlopen.read": {
      "name": "urllib.request.urlopen.read",
      "type": "callable",
      "signature": "()"
    }
  },
  "BigCodeBench/1006": {
    "zipfile.ZipFile": {
      "name": "zipfile.ZipFile",
      "type": "class",
      "signature": "(file, mode='r', compression=0, allowZip64=True, compresslevel=None, *, strict_timestamps=True)",
      "chains": {
        "extractall": {
          "name": "zipfile.ZipFile.extractall",
          "type": "callable",
          "signature": "(self, path=None)"
        }
      }
    },
    "open.write(response.content)": {
      "name": "open.write(response.content)"
    },
    "os.path.basename": {
      "name": "os.path.basename",
      "type": "callable",
      "signature": "(p)"
    },
    "os.makedirs": {
      "name": "os.makedirs",
      "type": "callable",
      "signature": "(name)"
    },
    "os.path.splitext": {
      "name": "os.path.splitext",
      "type": "callable",
      "signature": "(p)"
    },
    "os.path.exists": {
      "name": "os.path.exists",
      "type": "callable",
      "signature": "(path)"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    },
    "requests.get": {
      "name": "requests.get",
      "type": "callable",
      "signature": "(url, **kwargs)"
    },
    "requests.get.content": {
      "name": "requests.get.content",
      "type": "callable",
      "signature": "(url, params=None, **kwargs)"
    },
    "requests.get.headers": {
      "name": "requests.get.headers",
      "type": "callable",
      "signature": "(url, params=None, **kwargs)"
    },
    "requests.get.raise_for_status": {
      "name": "requests.get.raise_for_status",
      "type": "callable",
      "signature": "()"
    },
    "requests.get.headers.get": {
      "name": "requests.get.headers.get",
      "type": "callable",
      "signature": "(url, params=None)"
    }
  },
  "BigCodeBench/1008": {
    "bs4.BeautifulSoup": {
      "name": "bs4.BeautifulSoup",
      "type": "class",
      "signature": "(markup='', features=None, builder=None, parse_only=None, from_encoding=None, exclude_encodings=None, element_classes=None, **kwargs)",
      "chains": {
        "find": {
          "name": "bs4.BeautifulSoup.find",
          "type": "callable",
          "signature": "(self, name=None, attrs={})"
        }
      }
    },
    "pandas.read_html": {
      "name": "pandas.read_html",
      "type": "callable",
      "signature": "(io: 'FilePath | ReadBuffer[str]')"
    },
    "requests.get": {
      "name": "requests.get",
      "type": "callable",
      "signature": "(url, **kwargs)"
    },
    "requests.exceptions.HTTPError": {
      "name": "requests.exceptions.HTTPError",
      "type": "class",
      "signature": "(*args, **kwargs)"
    },
    "requests.get.text": {
      "name": "requests.get.text",
      "type": "callable",
      "signature": "(url, params=None, **kwargs)"
    },
    "requests.get.raise_for_status": {
      "name": "requests.get.raise_for_status",
      "type": "callable",
      "signature": "()"
    },
    "soup.find('table', {'id': table_id}).find_all('tr')": {
      "name": "soup.find('table', {'id': table_id}).find_all('tr')"
    }
  },
  "BigCodeBench/1012": {
    "zipfile.ZipFile": {
      "name": "zipfile.ZipFile",
      "type": "class",
      "signature": "(file, mode='r', compression=0, allowZip64=True, compresslevel=None, *, strict_timestamps=True)",
      "chains": {
        "extractall": {
          "name": "zipfile.ZipFile.extractall",
          "type": "callable",
          "signature": "(self, path=None)"
        }
      }
    },
    "file.name": {
      "name": "file.name"
    },
    "filepath.parent": {
      "name": "filepath.parent"
    },
    "filepath.parent.mkdir(parents=True, exist_ok=True)": {
      "name": "filepath.parent.mkdir(parents=True, exist_ok=True)"
    },
    "open.write(data)": {
      "name": "open.write(data)"
    },
    "requests.exceptions.RequestException": {
      "name": "requests.exceptions.RequestException",
      "type": "class",
      "signature": "(*args, **kwargs)"
    },
    "requests.get": {
      "name": "requests.get",
      "type": "callable",
      "signature": "(url, **kwargs)"
    },
    "requests.get.status_code": {
      "name": "requests.get.status_code",
      "type": "callable",
      "signature": "(url, params=None, **kwargs)"
    },
    "requests.get.iter_content": {
      "name": "requests.get.iter_content",
      "type": "callable",
      "signature": "()"
    },
    "zip_dir.iterdir()": {
      "name": "zip_dir.iterdir()"
    },
    "zip_dir.mkdir(parents=True, exist_ok=True)": {
      "name": "zip_dir.mkdir(parents=True, exist_ok=True)"
    }
  },
  "BigCodeBench/1013": {
    "bs4.BeautifulSoup": {
      "name": "bs4.BeautifulSoup",
      "type": "class",
      "signature": "(markup='', features=None, builder=None, parse_only=None, from_encoding=None, exclude_encodings=None, element_classes=None, **kwargs)",
      "chains": {
        "find_all": {
          "name": "bs4.BeautifulSoup.find_all",
          "type": "callable",
          "signature": "(self, name=None, **kwargs)"
        }
      }
    },
    "csv.writer": {
      "name": "csv.writer",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "csv.writer.writerow": {
      "name": "csv.writer.writerow",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "requests.get": {
      "name": "requests.get",
      "type": "callable",
      "signature": "(url)"
    },
    "requests.get.text": {
      "name": "requests.get.text",
      "type": "callable",
      "signature": "(url, params=None, **kwargs)"
    },
    "urllib.parse.urljoin": {
      "name": "urllib.parse.urljoin",
      "type": "callable",
      "signature": "(base, url)"
    }
  },
  "BigCodeBench/1015": {
    "pandas.DataFrame": {
      "name": "pandas.DataFrame",
      "type": "class",
      "signature": "(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'None'",
      "chains": {
        "empty": {
          "name": "pandas.DataFrame.empty",
          "type": "constant",
          "signature": null,
          "value": "<property object at 0x7f15084faa20>"
        },
        "to_sql": {
          "name": "pandas.DataFrame.to_sql",
          "type": "callable",
          "signature": "(self, name: 'str', con, if_exists: \"Literal['fail', index: 'bool_t' = True)"
        }
      }
    },
    "cell.text_content()": {
      "name": "cell.text_content()"
    },
    "lxml.html.fromstring": {
      "name": "lxml.html.fromstring",
      "type": "callable",
      "signature": "(html)"
    },
    "lxml.html.fromstring.xpath": {
      "name": "lxml.html.fromstring.xpath",
      "type": "callable",
      "signature": "(html)"
    },
    "open.read()": {
      "name": "open.read()"
    },
    "requests.get": {
      "name": "requests.get",
      "type": "callable",
      "signature": "(url, **kwargs)"
    },
    "requests.get.content": {
      "name": "requests.get.content",
      "type": "callable",
      "signature": "(url, params=None, **kwargs)"
    },
    "requests.get.raise_for_status": {
      "name": "requests.get.raise_for_status",
      "type": "callable",
      "signature": "()"
    },
    "row.xpath('.//td')": {
      "name": "row.xpath('.//td')"
    },
    "sqlite3.connect": {
      "name": "sqlite3.connect",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "sqlite3.connect.close": {
      "name": "sqlite3.connect.close",
      "type": "callable",
      "signature": "()"
    },
    "webpage_url.startswith('file://')": {
      "name": "webpage_url.startswith('file://')"
    }
  },
  "BigCodeBench/1019": {
    "PIL.Image.open.info": {
      "name": "PIL.Image.open.info",
      "type": "callable",
      "signature": "(fp, mode='r', formats=None) -> 'Image'"
    },
    "PIL.Image.open": {
      "name": "PIL.Image.open",
      "type": "callable",
      "signature": "(fp)"
    },
    "PIL.Image.open.info.get": {
      "name": "PIL.Image.open.info.get",
      "type": "callable",
      "signature": "(fp, mode='r')"
    },
    "codecs.decode": {
      "name": "codecs.decode",
      "type": "callable",
      "signature": "(obj, encoding='utf-8')"
    },
    "pytesseract.image_to_string": {
      "name": "pytesseract.image_to_string",
      "type": "callable",
      "signature": "(image)"
    },
    "pytesseract.image_to_string.encode": {
      "name": "pytesseract.image_to_string.encode",
      "type": "callable",
      "signature": "(image)"
    }
  },
  "BigCodeBench/1020": {
    "chardet.detect": {
      "name": "chardet.detect",
      "type": "callable",
      "signature": "(byte_str: Union[bytes)"
    },
    "content.decode(from_encoding).decode(from_encoding)": {
      "name": "content.decode(from_encoding).decode(from_encoding)"
    },
    "content.decode(detected_encoding).decode(detected_encoding)": {
      "name": "content.decode(detected_encoding).decode(detected_encoding)"
    },
    "content.encode(to_encoding).decode(to_encoding).encode(to_encoding)": {
      "name": "content.encode(to_encoding).decode(to_encoding).encode(to_encoding)"
    },
    "json.loads": {
      "name": "json.loads",
      "type": "callable",
      "signature": "(s)"
    },
    "requests.get": {
      "name": "requests.get",
      "type": "callable",
      "signature": "(url, **kwargs)"
    },
    "requests.get.content": {
      "name": "requests.get.content",
      "type": "callable",
      "signature": "(url, params=None, **kwargs)"
    }
  },
  "BigCodeBench/1022": {
    "datetime.datetime": {
      "name": "datetime.datetime",
      "type": "class",
      "signature": "(self, /, *args, **kwargs)",
      "chains": {
        "now": {
          "name": "datetime.datetime.now",
          "type": "callable",
          "signature": "()"
        }
      }
    },
    "df.sort_values(by=column_name).sort_values(by=column_name)": {
      "name": "df.sort_values(by=column_name).sort_values(by=column_name)"
    },
    "os.path.isfile": {
      "name": "os.path.isfile",
      "type": "callable",
      "signature": "(path)"
    },
    "pandas.read_csv": {
      "name": "pandas.read_csv",
      "type": "callable",
      "signature": "(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]')"
    },
    "pandas.read_csv.columns": {
      "name": "pandas.read_csv.columns",
      "type": "callable",
      "signature": "(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: \"int | Sequence[int] | None | Literal['infer']\" = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace: 'bool' = False, skiprows=None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: \"Literal['high', 'legacy'] | None\" = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'"
    },
    "pandas.to_datetime": {
      "name": "pandas.to_datetime",
      "type": "callable",
      "signature": "(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', format: 'str | None' = None)"
    }
  },
  "BigCodeBench/1039": {
    "ssl.SSLContext": {
      "name": "ssl.SSLContext",
      "type": "class",
      "signature": "(protocol=None, *args, **kwargs)",
      "chains": {
        "wrap_socket": {
          "name": "ssl.SSLContext.wrap_socket",
          "type": "callable",
          "signature": "(self, sock, server_side=False)"
        },
        "load_cert_chain": {
          "name": "ssl.SSLContext.load_cert_chain",
          "type": "callable",
          "signature": "(self, certfile, keyfile=None)"
        }
      }
    },
    "context.wrap_socket(client_socket, server_side=True).close()": {
      "name": "context.wrap_socket(client_socket, server_side=True).close()"
    },
    "context.wrap_socket(client_socket, server_side=True).recv(buffer_size)": {
      "name": "context.wrap_socket(client_socket, server_side=True).recv(buffer_size)"
    },
    "context.wrap_socket(client_socket, server_side=True).send(response.encode('utf-8'))": {
      "name": "context.wrap_socket(client_socket, server_side=True).send(response.encode('utf-8'))"
    },
    "hashlib.sha256": {
      "name": "hashlib.sha256",
      "type": "callable",
      "signature": "()"
    },
    "hashlib.sha256.hexdigest": {
      "name": "hashlib.sha256.hexdigest",
      "type": "callable",
      "signature": "()"
    },
    "hashlib.sha256.update": {
      "name": "hashlib.sha256.update",
      "type": "callable",
      "signature": "(string=b'')"
    },
    "open.read(4096)": {
      "name": "open.read(4096)"
    },
    "os.path.exists": {
      "name": "os.path.exists",
      "type": "callable",
      "signature": "(path)"
    },
    "sha256_hash.hexdigest().encode('utf-8')": {
      "name": "sha256_hash.hexdigest().encode('utf-8')"
    },
    "ssl.PROTOCOL_TLS_SERVER": {
      "name": "ssl.PROTOCOL_TLS_SERVER",
      "type": "constant",
      "signature": null,
      "value": "_SSLMethod.PROTOCOL_TLS_SERVER"
    }
  },
  "BigCodeBench/1040": {
    "datetime.datetime": {
      "name": "datetime.datetime",
      "type": "class",
      "signature": "(self, /, *args, **kwargs)",
      "chains": {
        "now": {
          "name": "datetime.datetime.now",
          "type": "callable",
          "signature": "()"
        }
      }
    },
    "socket.socket": {
      "name": "socket.socket",
      "type": "class",
      "signature": "(family=-1, type=-1, proto=-1, fileno=None)",
      "chains": {
        "close": {
          "name": "socket.socket.close",
          "type": "callable",
          "signature": "(self)"
        },
        "listen": {
          "name": "socket.socket.listen",
          "type": "callable",
          "signature": "(*args, **kwargs)"
        },
        "setblocking": {
          "name": "socket.socket.setblocking",
          "type": "callable",
          "signature": "(*args, **kwargs)"
        },
        "bind": {
          "name": "socket.socket.bind",
          "type": "callable",
          "signature": "(*args, **kwargs)"
        }
      }
    },
    "inputs.remove(s)": {
      "name": "inputs.remove(s)"
    },
    "inputs.append(connection)": {
      "name": "inputs.append(connection)"
    },
    "message_queues[s].get_nowait.encode": {
      "name": "message_queues[s].get_nowait.encode"
    },
    "outputs.remove(s)": {
      "name": "outputs.remove(s)"
    },
    "outputs.append(s)": {
      "name": "outputs.append(s)"
    },
    "s.close()": {
      "name": "s.close()"
    },
    "s.accept()": {
      "name": "s.accept()"
    },
    "s.recv(buffer_size)": {
      "name": "s.recv(buffer_size)"
    },
    "s.recv.decode()": {
      "name": "s.recv.decode()"
    },
    "s.accept[0].setblocking": {
      "name": "s.accept[0].setblocking"
    },
    "s.sendall(next_msg.encode('utf-8'))": {
      "name": "s.sendall(next_msg.encode('utf-8'))"
    },
    "select.select": {
      "name": "select.select",
      "type": "callable",
      "signature": "(rlist, wlist, xlist, timeout=None)"
    },
    "socket.AF_INET": {
      "name": "socket.AF_INET",
      "type": "constant",
      "signature": null,
      "value": "AddressFamily.AF_INET"
    },
    "socket.SOCK_STREAM": {
      "name": "socket.SOCK_STREAM",
      "type": "constant",
      "signature": null,
      "value": "SocketKind.SOCK_STREAM"
    }
  },
  "BigCodeBench/1042": {
    "smtplib.SMTP": {
      "name": "smtplib.SMTP",
      "type": "class",
      "signature": "(host='', port=0, local_hostname=None, timeout=<object object at 0x7f15b7294b10>, source_address=None)",
      "chains": {
        "starttls": {
          "name": "smtplib.SMTP.starttls",
          "type": "callable",
          "signature": "(self)"
        },
        "send_message": {
          "name": "smtplib.SMTP.send_message",
          "type": "callable",
          "signature": "(self, msg)"
        },
        "login": {
          "name": "smtplib.SMTP.login",
          "type": "callable",
          "signature": "(self, user, password)"
        }
      }
    },
    "client_socket.close()": {
      "name": "client_socket.close()"
    },
    "client_socket.recv(BUFFER_SIZE)": {
      "name": "client_socket.recv(BUFFER_SIZE)"
    },
    "client_socket.send(response.encode('utf-8'))": {
      "name": "client_socket.send(response.encode('utf-8'))"
    },
    "email.message.EmailMessage": {
      "name": "email.message.EmailMessage",
      "type": "class",
      "signature": "()"
    },
    "email.message.EmailMessage.set_content": {
      "name": "email.message.EmailMessage.set_content",
      "type": "callable",
      "signature": "(self, *args)"
    },
    "getpass.getpass": {
      "name": "getpass.getpass",
      "type": "callable",
      "signature": "(prompt='Password: ')"
    },
    "response.encode('utf-8')": {
      "name": "response.encode('utf-8')"
    }
  },
  "BigCodeBench/1053": {
    "pandas.DataFrame": {
      "name": "pandas.DataFrame",
      "type": "class",
      "signature": "(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'None'",
      "chains": {
        "plot": {
          "name": "pandas.DataFrame.plot",
          "type": "class",
          "signature": "(data) -> 'None'"
        }
      }
    },
    "pandas.DataFrame.plot": {
      "name": "pandas.DataFrame.plot",
      "type": "class",
      "signature": "(data) -> 'None'",
      "chains": {
        "bar": {
          "name": "pandas.DataFrame.plot.bar",
          "type": "callable",
          "signature": "(self, x=None, y=None, **kwargs) -> 'PlotAccessor)"
        }
      }
    },
    "matplotlib.pyplot.close": {
      "name": "matplotlib.pyplot.close",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.savefig": {
      "name": "matplotlib.pyplot.savefig",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    },
    "pandas.read_csv": {
      "name": "pandas.read_csv",
      "type": "callable",
      "signature": "(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', header: \"int | Sequence[int] | None | Literal['infer']\" = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, usecols=None)"
    },
    "sklearn.feature_extraction.text.CountVectorizer": {
      "name": "sklearn.feature_extraction.text.CountVectorizer",
      "type": "class",
      "signature": "(stop_words=None)"
    },
    "sklearn.feature_extraction.text.CountVectorizer.vocabulary_": {
      "name": "sklearn.feature_extraction.text.CountVectorizer.vocabulary_",
      "type": "class",
      "signature": "(*, input='content', encoding='utf-8', decode_error='strict', strip_accents=None, lowercase=True, preprocessor=None, tokenizer=None, stop_words=None, token_pattern='(?u)\\\\b\\\\w\\\\w+\\\\b', ngram_range=(1, 1), analyzer='word', max_df=1.0, min_df=1, max_features=None, vocabulary=None, binary=False, dtype=<class 'numpy.int64'>)"
    },
    "sklearn.feature_extraction.text.CountVectorizer.vocabulary_.items": {
      "name": "sklearn.feature_extraction.text.CountVectorizer.vocabulary_.items",
      "type": "class",
      "signature": "()"
    },
    "sklearn.feature_extraction.text.CountVectorizer.fit_transform": {
      "name": "sklearn.feature_extraction.text.CountVectorizer.fit_transform",
      "type": "callable",
      "signature": "(self, raw_documents)"
    },
    "vectorizer.fit_transform(df['Text'].dropna()).sum(axis=0)": {
      "name": "vectorizer.fit_transform(df['Text'].dropna()).sum(axis=0)"
    }
  },
  "BigCodeBench/1057": {
    "numpy.array": {
      "name": "numpy.array",
      "type": "callable",
      "signature": "(*args, **kwargs)"
    }
  },
  "BigCodeBench/1077": {
    "datetime.datetime": {
      "name": "datetime.datetime",
      "type": "class",
      "signature": "(self, /, *args, **kwargs)",
      "chains": {
        "strptime": {
          "name": "datetime.datetime.strptime",
          "type": "callable",
          "signature": "(*args, **kwargs)"
        }
      }
    },
    "numpy.mean": {
      "name": "numpy.mean",
      "type": "callable",
      "signature": "(a)"
    },
    "pytz.UTC": {
      "name": "pytz.UTC",
      "type": "constant",
      "signature": null,
      "value": "UTC"
    },
    "pytz.timezone": {
      "name": "pytz.timezone",
      "type": "callable",
      "signature": "(zone)"
    }
  },
  "BigCodeBench/1085": {
    "collections.Counter": {
      "name": "collections.Counter",
      "type": "class",
      "signature": "(iterable=None, /, **kwds)",
      "chains": {
        "most_common": {
          "name": "collections.Counter.most_common",
          "type": "callable",
          "signature": "(self, n=None)"
        }
      }
    },
    "matplotlib.pyplot.subplots": {
      "name": "matplotlib.pyplot.subplots",
      "type": "callable",
      "signature": "()"
    },
    "matplotlib.pyplot.subplots[1].bar": {
      "name": "matplotlib.pyplot.subplots[1].bar",
      "type": "method",
      "signature": "(x, height, width=0.8, bottom=None, *, align='center', data=None, **kwargs)"
    },
    "re.sub": {
      "name": "re.sub",
      "type": "callable",
      "signature": "(pattern, repl, string)"
    },
    "re.sub.lower.split": {
      "name": "re.sub.lower.split",
      "type": "callable",
      "signature": "()"
    }
  },
  "BigCodeBench/1124": {
    "bs4.BeautifulSoup": {
      "name": "bs4.BeautifulSoup",
      "type": "class",
      "signature": "(markup='', features=None, builder=None, parse_only=None, from_encoding=None, exclude_encodings=None, element_classes=None, **kwargs)",
      "chains": {
        "title": {
          "name": "bs4.BeautifulSoup.title",
          "type": "class",
          "signature": "(markup='', features=None, builder=None, parse_only=None, from_encoding=None, exclude_encodings=None, element_classes=None, **kwargs)"
        }
      }
    },
    "re.search": {
      "name": "re.search",
      "type": "callable",
      "signature": "(pattern, string)"
    },
    "re.search.group": {
      "name": "re.search.group",
      "type": "callable",
      "signature": "()"
    },
    "requests.get": {
      "name": "requests.get",
      "type": "callable",
      "signature": "(url, **kwargs)"
    },
    "requests.get.text": {
      "name": "requests.get.text",
      "type": "callable",
      "signature": "(url, params=None, **kwargs)"
    },
    "requests.get.raise_for_status": {
      "name": "requests.get.raise_for_status",
      "type": "callable",
      "signature": "()"
    },
    "title.string": {
      "name": "title.string"
    },
    "urllib.parse.urlparse": {
      "name": "urllib.parse.urlparse",
      "type": "callable",
      "signature": "(url)"
    }
  },
  "BigCodeBench/1129": {
    "datetime.datetime": {
      "name": "datetime.datetime",
      "type": "class",
      "signature": "(self, /, *args, **kwargs)",
      "chains": {
        "now": {
          "name": "datetime.datetime.now",
          "type": "callable",
          "signature": "()"
        }
      }
    },
    "json.loads": {
      "name": "json.loads",
      "type": "callable",
      "signature": "(s)"
    },
    "open.write(response.content)": {
      "name": "open.write(response.content)"
    },
    "os.getcwd": {
      "name": "os.getcwd",
      "type": "callable",
      "signature": "()"
    },
    "os.path.join": {
      "name": "os.path.join",
      "type": "callable",
      "signature": "(a, *p)"
    },
    "requests.get": {
      "name": "requests.get",
      "type": "callable",
      "signature": "(url)"
    },
    "requests.get.content": {
      "name": "requests.get.content",
      "type": "callable",
      "signature": "(url, params=None, **kwargs)"
    }
  },
  "BigCodeBench/1137": {
    "bs4.BeautifulSoup": {
      "name": "bs4.BeautifulSoup",
      "type": "class",
      "signature": "(markup='', features=None, builder=None, parse_only=None, from_encoding=None, exclude_encodings=None, element_classes=None, **kwargs)",
      "chains": {
        "get_text": {
          "name": "bs4.BeautifulSoup.get_text",
          "type": "callable",
          "signature": "(self)"
        }
      }
    },
    "json.dump": {
      "name": "json.dump",
      "type": "callable",
      "signature": "(obj, fp)"
    },
    "open.read()": {
      "name": "open.read()"
    },
    "re.findall": {
      "name": "re.findall",
      "type": "callable",
      "signature": "(pattern, string)"
    },
    "requests.get": {
      "name": "requests.get",
      "type": "callable",
      "signature": "(url, **kwargs)"
    },
    "requests.get.text": {
      "name": "requests.get.text",
      "type": "callable",
      "signature": "(url, params=None, **kwargs)"
    },
    "url.startswith('file://')": {
      "name": "url.startswith('file://')"
    }
  }
}