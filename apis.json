{
    "BigCodeBench/13": [
        "downloaded_files.append(filename)",
        "ftplib.FTP.quit()",
        "ftplib.FTP.nlst()",
        "ftplib.FTP(ftp_server)",
        "ftplib.FTP.cwd(ftp_dir)",
        "ftplib.FTP.login(ftp_user, ftp_password)",
        "os.path",
        "os.makedirs(download_dir)",
        "os.path.exists(download_dir)",
        "subprocess.call(command, shell=True)"
    ],
    "BigCodeBench/15": [
        "csv.reader(f)",
        "open.write(f'\\nError executing command, exited with code {ret_code}')",
        "os.path",
        "os.makedirs(output_dir_path)",
        "os.path.exists(output_dir_path)",
        "os.path.exists(commands_file_path)",
        "output_files.append(output_file)",
        "subprocess.STDOUT",
        "subprocess.call(command, shell=True, stdout=f, stderr=subprocess.STDOUT)"
    ],
    "BigCodeBench/17": [
        "proc.name()",
        "proc.terminate()",
        "psutil.process_iter()",
        "subprocess.Popen(process_name)",
        "time.sleep(5)"
    ],
    "BigCodeBench/19": [
        "glob.glob(os.path.join(directory, '*'))",
        "os.path",
        "os.path.isfile(f)",
        "os.path.basename(file)",
        "os.path.exists(directory)",
        "os.path.join(directory, '*')",
        "os.path.join(directory, 'files.zip')",
        "zipfile.ZipFile(zip_file_path, 'w')",
        "zipfile.ZipFile.write(file, os.path.basename(file))"
    ],
    "BigCodeBench/34": [
        "matplotlib.pyplot.axis('off')",
        "matplotlib.pyplot.imshow(wordcloud)",
        "matplotlib.pyplot.figure(figsize=(10, 5))",
        "re.sub.strip()",
        "re.sub('http[s]?://\\\\S+', '', text)",
        "wordcloud.WordCloud()"
    ],
    "BigCodeBench/37": [
        "RandomForestClassifier(random_state=42).fit.feature_importances_",
        "df.drop.columns",
        "df.drop(target_column, axis=1)",
        "matplotlib.pyplot.figure(figsize=(10, 5))",
        "pd.Series(model.feature_importances_, index=X.columns)",
        "pd.Series(model.feature_importances_, index=X.columns).sort_values.index",
        "seaborn.barplot.set_ylabel('Features')",
        "seaborn.barplot(x=feature_imp, y=feature_imp.index)",
        "seaborn.barplot.set_xlabel('Feature Importance Score')",
        "seaborn.barplot.set_title('Visualizing Important Features')",
        "sklearn.ensemble.RandomForestClassifier(random_state=42)"
    ],
    "BigCodeBench/82": [
        "LoginForm.password",
        "LoginForm.username",
        "LoginForm.username.data",
        "LoginForm.password.data",
        "LoginForm.validate_on_submit()",
        "flask.Flask.config",
        "flask.url_for('login')",
        "flask.url_for('protected')",
        "flask.Flask.route('/logout')",
        "flask.Flask.route('/protected')",
        "flask.redirect(url_for('login'))",
        "flask.redirect(url_for('protected'))",
        "flask.render_template('login.html', form=form)",
        "flask.Flask.route('/login', methods=['GET', 'POST'])",
        "flask.Flask(__name__, template_folder=template_folder)",
        "flask_login.UserMixin.id",
        "flask_login.logout_user()",
        "flask_login.LoginManager()",
        "flask_login.current_user.id",
        "flask_login.login_user(user)",
        "flask_login.UserMixin.password_hash",
        "flask_login.LoginManager.user_loader",
        "flask_login.LoginManager.init_app(app)",
        "werkzeug.security.generate_password_hash(password)",
        "werkzeug.security.check_password_hash(self.password_hash, password)",
        "wtforms.SubmitField('Log In')",
        "wtforms.validators.DataRequired()",
        "wtforms.validators.Length(min=4, max=25)",
        "wtforms.validators.Length(min=8, max=80)",
        "wtforms.StringField('Username', validators=[DataRequired(), Length(min=4, max=25)])",
        "wtforms.PasswordField('Password', validators=[DataRequired(), Length(min=8, max=80)])"
    ],
    "BigCodeBench/89": [
        "column_data.reshape(-1, 1)",
        "matplotlib.pyplot.show()",
        "matplotlib.pyplot.subplot(1, 2, 1)",
        "matplotlib.pyplot.subplot(1, 2, 2)",
        "matplotlib.pyplot.figure(figsize=(10, 5))",
        "matplotlib.pyplot.title('Data with Outliers')",
        "matplotlib.pyplot.title('Data without Outliers')",
        "matplotlib.pyplot.scatter(data_copy[:, 0], data_copy[:, 1])",
        "matplotlib.pyplot.scatter(data_without_outliers[:, 0], data_without_outliers[:, 1])",
        "numpy.copy(data)",
        "numpy.where(z_scores > outlier_z_score)",
        "numpy.delete(data_copy, outliers, axis=0)",
        "numpy.abs(stats.zscore(standardized_data))",
        "scipy.stats.zscore(standardized_data)",
        "sklearn.preprocessing.StandardScaler()",
        "sklearn.preprocessing.StandardScaler.fit_transform(column_data.reshape(-1, 1))"
    ],
    "BigCodeBench/92": [
        "data.iloc",
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].legend()",
        "matplotlib.pyplot.subplots[1].set_ylabel('Feature 2')",
        "matplotlib.pyplot.subplots[1].set_xlabel('Feature 1')",
        "matplotlib.pyplot.subplots[1].set_title('K-Means Clustering')",
        "matplotlib.pyplot.subplots[1].scatter(centroids[:, 0], centroids[:, 1], marker='x', s=200, c='red', label='Centroids')",
        "matplotlib.pyplot.subplots[1].scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels, cmap='viridis', alpha=0.6, label='Data points')",
        "pandas.DataFrame",
        "sklearn.cluster.KMeans.cluster_centers_",
        "sklearn.cluster.KMeans.fit_predict(data)",
        "sklearn.cluster.KMeans(n_clusters=n_clusters)"
    ],
    "BigCodeBench/93": [
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].scatter(transformed_data[:, 0], transformed_data[:, 1])",
        "numpy.random",
        "numpy.random.seed(42)",
        "pandas.DataFrame(transformed_data, columns=[f'PC{i + 1}' for i in range(n_components)])",
        "sklearn.decomposition.PCA.fit_transform(data)",
        "sklearn.decomposition.PCA(n_components=n_components)"
    ],
    "BigCodeBench/99": [
        "matplotlib.pyplot.rc('font', family='Arial')",
        "pandas.DataFrame(data=iris.data, columns=iris.feature_names)",
        "seaborn.pairplot.fig",
        "seaborn.pairplot(iris_df, hue='species', vars=iris.feature_names)",
        "seaborn.pairplot.fig.suptitle('Iris Dataset Pair Plot', fontsize=16)",
        "sklearn.datasets.load_iris()",
        "sklearn.datasets.load_iris.data",
        "sklearn.datasets.load_iris.target",
        "sklearn.datasets.load_iris.feature_names"
    ],
    "BigCodeBench/100": [
        "datetime.datetime.now()",
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].legend()",
        "matplotlib.pyplot.rc('font', family='Arial')",
        "matplotlib.pyplot.subplots[1].set_xlabel('Date')",
        "matplotlib.pyplot.subplots[1].set_ylabel('Value')",
        "matplotlib.pyplot.subplots[1].set_title('Random Time Series Data')",
        "matplotlib.pyplot.subplots[1].plot(dates, values, label='Value over Time')",
        "pandas.date_range(end=datetime.now(), periods=30)",
        "random.seed(seed)",
        "random.randint(0, 100)"
    ],
    "BigCodeBench/101": [
        "matplotlib.pyplot.rc('font', None=font)",
        "matplotlib.pyplot.figure(figsize=(10, 8))",
        "numpy.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])",
        "pandas.read_csv.values",
        "pandas.DataFrame.corr()",
        "pandas.DataFrame(data=data, columns=columns)",
        "pandas.read_csv(data_url, sep='\\\\s+', skiprows=22, header=None)",
        "seaborn.set_theme(style='white')",
        "seaborn.heatmap(corr, annot=True)"
    ],
    "BigCodeBench/108": [
        "df.columns",
        "df.asfreq.plot(y='value')",
        "df.set_index.set_index('date')",
        "df.asfreq.asfreq(freq, method='pad')",
        "matplotlib.pyplot.ylabel('Value')",
        "matplotlib.pyplot.title('Time Series Decomposition')",
        "pandas.DataFrame",
        "pandas.to_numeric(df['value'], errors='coerce')",
        "statsmodels.tsa.seasonal.seasonal_decompose(df['value'], model=decomposition_model)"
    ],
    "BigCodeBench/120": [
        "datetime.datetime",
        "datetime.datetime(2020, 1, 1)",
        "datetime.datetime(2020, 12, 31)",
        "datetime.timedelta(days=randint(0, num_days))",
        "pandas.Series([start_date + timedelta(days=randint(0, num_days)) for _ in range(num_days)])",
        "random.seed(seed)",
        "random.randint(0, num_days)"
    ],
    "BigCodeBench/123": [
        "glob.glob(os.path.join(file_dir, '*' + file_ext))",
        "my_list.append(12)",
        "os.path",
        "os.path.join(file_dir, '*' + file_ext)",
        "pandas.read_csv(file)",
        "pandas.concat(data_frames, ignore_index=True)"
    ],
    "BigCodeBench/124": [
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].set_xlabel('Number')",
        "matplotlib.pyplot.subplots[1].set_ylabel('Frequency')",
        "matplotlib.pyplot.subplots[1].hist(random_list, bins=20)",
        "matplotlib.pyplot.subplots[1].set_title('Histogram of Random Numbers')",
        "my_list.append(12)",
        "random.seed(seed)",
        "random.randint(1, 100)",
        "time.time()"
    ],
    "BigCodeBench/129": [
        "bs4.BeautifulSoup.find('table')",
        "bs4.BeautifulSoup(response.text, 'html.parser')",
        "data.append(cols)",
        "ele.text",
        "ele.text.strip()",
        "pandas.DataFrame(data, columns=headers if headers else None)",
        "requests.get.text",
        "requests.get(url)",
        "requests.HTTPError",
        "requests.ConnectionError",
        "requests.get.raise_for_status()",
        "requests.HTTPError(f'HTTP error occurred: {e}')",
        "row.find_all('td')",
        "soup.find.find_all('tr')",
        "soup.find.find_all('th')",
        "th.text",
        "th.text.strip()"
    ],
    "BigCodeBench/139": [
        "axes.append(ax)",
        "df.empty",
        "df.select_dtypes(include=np.number)",
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].set_xlabel('Value')",
        "matplotlib.pyplot.subplots[1].set_ylabel('Frequency')",
        "numeric_cols.size",
        "numpy.number",
        "pandas.DataFrame"
    ],
    "BigCodeBench/147": [
        "ipaddress.IPv4Network(ip_range)",
        "socket.error",
        "socket.AF_INET",
        "socket.SOCK_STREAM",
        "socket.socket.close()",
        "socket.socket.settimeout(1)",
        "socket.socket.connect((str(ip), port))",
        "socket.socket(socket.AF_INET, socket.SOCK_STREAM)",
        "threading.Thread.join()",
        "threading.Thread.start()",
        "threading.Thread(target=check_port, args=(ip,))",
        "threads.append(thread)"
    ],
    "BigCodeBench/161": [
        "datetime.datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')",
        "line.strip.strip()",
        "match.groups[2].strip()",
        "pandas.DataFrame.to_csv(output_csv_path, index=False)",
        "pandas.DataFrame(parsed_data, columns=['Type', 'Timestamp', 'Message'])",
        "parsed_data.append([log_type, timestamp, message.strip()])",
        "re.match.groups()",
        "re.match(log_pattern, line)"
    ],
    "BigCodeBench/162": [
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].set_ylabel('Frequency')",
        "matplotlib.pyplot.subplots[1].set_xlabel('Word Length')",
        "matplotlib.pyplot.subplots[1].set_title('Distribution of Word Lengths')",
        "matplotlib.pyplot.subplots[1].hist(word_lengths, bins=bins, rwidth=rwidth)",
        "numpy.arange(max(word_lengths) + 2)",
        "re.split('\\\\W+', text)"
    ],
    "BigCodeBench/177": [
        "df.columns",
        "interesting_articles.empty",
        "nltk.word_tokenize(content)",
        "re.IGNORECASE",
        "re.compile.search(x)",
        "re.compile('(like|what)', re.IGNORECASE)"
    ],
    "BigCodeBench/184": [
        "' '.join.split()",
        "pandas.DataFrame(vectorized_data.toarray(), columns=vectorizer.get_feature_names_out())",
        "re.sub('\\\\d+', '', text)",
        "re.sub('\\\\W+', ' ', text)",
        "sklearn.feature_extraction.text.CountVectorizer()",
        "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out()",
        "sklearn.feature_extraction.text.CountVectorizer.fit_transform(dataframe[text_column])",
        "text.lower.lower()",
        "vectorizer.fit_transform.toarray()"
    ],
    "BigCodeBench/187": [
        "geopandas.GeoDataFrame(data, geometry='Coordinates')",
        "numpy.random",
        "numpy.random.uniform(lat_min, lat_max)",
        "numpy.random.uniform(lon_min, lon_max)",
        "shapely.geometry.Point(np.random.uniform(lon_min, lon_max), np.random.uniform(lat_min, lat_max))"
    ],
    "BigCodeBench/199": [
        "datetime.datetime",
        "pandas.DataFrame(report_data, columns=['City', 'Local Time', 'Weather Condition'])",
        "pytz.timezone(timezones[city])",
        "random.seed(seed)",
        "random.randint(0, len(weather_conditions) - 1)",
        "report_data.append([city, city_time.strftime('%Y-%m-%d %H:%M:%S %Z'), weather])",
        "utc_datetime.astimezone(city_tz)",
        "utc_datetime.astimezone.strftime('%Y-%m-%d %H:%M:%S %Z')"
    ],
    "BigCodeBench/208": [
        "matplotlib.pyplot.gca()",
        "matplotlib.pyplot.plot(walk)",
        "matplotlib.pyplot.title('Random Walk')",
        "matplotlib.pyplot.figure(figsize=(10, 6))",
        "numpy.random",
        "numpy.cumsum(steps)",
        "numpy.random.seed(seed)",
        "numpy.random.choice([-1, 1], size=elements)",
        "pandas.Series(walk)"
    ],
    "BigCodeBench/211": [
        "open.write(response.content)",
        "os.path",
        "os.path.basename(url)",
        "os.listdir(destination_directory)",
        "os.path.join(destination_directory, filename)",
        "requests.get.content",
        "requests.get(url, headers=headers)",
        "zipfile.ZipFile(zip_path, 'r')",
        "zipfile.ZipFile.extractall(destination_directory)"
    ],
    "BigCodeBench/214": [
        "cv2.COLOR_BGR2RGB",
        "cv2.cvtColor(image, cv2.COLOR_BGR2RGB)",
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].set_title('Random RGB Image')",
        "matplotlib.pyplot.subplots[1].imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))",
        "numpy.uint8",
        "numpy.random",
        "numpy.random.seed(seed)",
        "numpy.zeros(image_size, dtype=np.uint8)",
        "random.seed(seed)",
        "random.randint(range_low, range_high)"
    ],
    "BigCodeBench/227": [
        "librosa.display",
        "librosa.stft(matrix)",
        "librosa.amplitude_to_db(np.abs(librosa.stft(matrix)), ref=np.max)",
        "librosa.display.specshow(D, sr=samplerate, x_axis='time', y_axis='log')",
        "matplotlib.pyplot.gcf()",
        "matplotlib.pyplot.title('Spectrogram')",
        "matplotlib.pyplot.colorbar(format='%+2.0f dB')",
        "numpy.max",
        "numpy.array(L)",
        "numpy.max(matrix)",
        "numpy.mean(data ** 2)",
        "numpy.sqrt(np.mean(data ** 2))",
        "numpy.abs(librosa.stft(matrix))",
        "numpy.log10(np.sqrt(np.mean(data ** 2)))",
        "os.path",
        "os.path.isfile(audio_file)",
        "soundfile.read(audio_file)"
    ],
    "BigCodeBench/239": [
        "matplotlib.pyplot.close(fig)",
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].legend()",
        "matplotlib.pyplot.subplots[1].get_xlim()",
        "matplotlib.pyplot.subplots[1].set_title('Histogram with PDF')",
        "matplotlib.pyplot.subplots[1].plot(x, p, 'k', linewidth=2, label='PDF')",
        "matplotlib.pyplot.subplots[1].hist(arr, density=True, alpha=0.6, bins='auto', label='Histogram')",
        "numpy.max(arr)",
        "numpy.std(arr)",
        "numpy.min(arr)",
        "numpy.mean(arr)",
        "numpy.linspace(xmin, xmax, 100)",
        "numpy.array([b for (a, b) in original])",
        "scipy.stats.norm",
        "scipy.stats.norm.pdf(x, computed_stats['mean'], computed_stats['std'])"
    ],
    "BigCodeBench/241": [
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].legend()",
        "matplotlib.pyplot.subplots[1].plot(arr, label='Original')",
        "matplotlib.pyplot.subplots[1].plot(norm_arr, label='Normalized')",
        "matplotlib.pyplot.subplots[1].set_title('Original vs. Normalized Data')",
        "numpy.array.size",
        "numpy.array([b for (a, b) in original])",
        "sklearn.preprocessing.normalize([arr])"
    ],
    "BigCodeBench/267": [
        "data.values()",
        "matplotlib.pyplot.subplots(figsize=(12, 6))",
        "matplotlib.pyplot.subplots[1].plot(np.abs(fft))",
        "matplotlib.pyplot.subplots[1].set_xlabel('Frequency [Hz]')",
        "matplotlib.pyplot.subplots[1].set_title('FFT of the Signal')",
        "matplotlib.pyplot.subplots[1].set_ylabel('Frequency Spectrum Magnitude')",
        "numpy.pi",
        "numpy.abs(fft)",
        "numpy.outer(time, signal)",
        "numpy.array(list(data.values()))",
        "numpy.sin(np.outer(time, signal) * np.pi)",
        "numpy.linspace(0, 2, 2 * sample_rate, False)",
        "scipy.fftpack.fft(signal)"
    ],
    "BigCodeBench/273": [
        "cgi.parse_header(self.headers.get('content-type'))",
        "http.server",
        "http.server.BaseHTTPRequestHandler",
        "http.server.BaseHTTPRequestHandler.rfile",
        "http.server.BaseHTTPRequestHandler.wfile",
        "http.server.BaseHTTPRequestHandler.headers",
        "http.server.BaseHTTPRequestHandler.end_headers()",
        "http.server.BaseHTTPRequestHandler.send_response(200)",
        "http.server.BaseHTTPRequestHandler.rfile.read(length)",
        "http.server.BaseHTTPRequestHandler.wfile.write(response)",
        "http.server.BaseHTTPRequestHandler.headers.get('content-type')",
        "http.server.BaseHTTPRequestHandler.headers.get('content-length')",
        "http.server.BaseHTTPRequestHandler.send_error(400, 'Invalid JSON')",
        "http.server.BaseHTTPRequestHandler.send_error(400, 'No data key in request')",
        "http.server.BaseHTTPRequestHandler.send_header('content-type', 'application/json')",
        "http.server.BaseHTTPRequestHandler.send_error(400, 'Content-Type header is not application/json')",
        "json.JSONDecodeError",
        "json.dumps(SUCCESS_RESPONSE)",
        "json.loads(self.rfile.read(length))"
    ],
    "BigCodeBench/274": [
        "cgi.parse_header(self.headers.get('content-type'))",
        "email.mime.text.MIMEText.as_string()",
        "email.mime.text.MIMEText(email_data['message'])",
        "http.server",
        "http.server.BaseHTTPRequestHandler",
        "http.server.BaseHTTPRequestHandler.rfile",
        "http.server.BaseHTTPRequestHandler.headers",
        "http.server.BaseHTTPRequestHandler.end_headers()",
        "http.server.BaseHTTPRequestHandler.send_response(200)",
        "http.server.BaseHTTPRequestHandler.send_response(400)",
        "http.server.BaseHTTPRequestHandler.send_response(535)",
        "http.server.BaseHTTPRequestHandler.rfile.read(length)",
        "http.server.BaseHTTPRequestHandler.headers.get('content-type')",
        "http.server.BaseHTTPRequestHandler.headers.get('content-length')",
        "json.JSONDecodeError",
        "json.loads(self.rfile.read(length))",
        "smtplib.SMTP.starttls()",
        "smtplib.SMTPAuthenticationError",
        "smtplib.SMTP(smtp_server, smtp_port)",
        "smtplib.SMTP.login(smtp_username, smtp_password)",
        "smtplib.SMTP.sendmail(smtp_username, [email_data['to']], msg.as_string())"
    ],
    "BigCodeBench/287": [
        "collections.Counter()",
        "collections.Counter.update(words)",
        "file_name.endswith('.txt')",
        "json.dump(dict(word_counts), file)",
        "open.read()",
        "os.path",
        "os.listdir(directory)",
        "os.path.join(directory, file_name)"
    ],
    "BigCodeBench/302": [
        "df.index",
        "matplotlib.pyplot.figure()",
        "matplotlib.pyplot.title('Correlation Heatmap')",
        "pandas.Series",
        "pandas.DataFrame",
        "pandas.concat.iloc",
        "pandas.to_datetime(df['Date'])",
        "pandas.concat([df['Date'], df['Value'].apply(pd.Series)], axis=1)",
        "seaborn.heatmap(corr_df, annot=True, cmap='coolwarm')"
    ],
    "BigCodeBench/308": [
        "pandas.DataFrame.loc",
        "pandas.DataFrame.apply(mean)",
        "pandas.DataFrame.apply(mean, axis=1)",
        "pandas.DataFrame(report_data, index=STUDENTS)",
        "random.randint(0, 100)",
        "statistics.mean"
    ],
    "BigCodeBench/310": [
        "csv.writer(file)",
        "csv.writer.writerows(data)",
        "csv.writer.writerow(COLUMNS)",
        "csv.writer.writerow(averages)",
        "os.path",
        "os.getcwd()",
        "os.path.join(os.getcwd(), filename)",
        "random.randint(20, 50)",
        "random.randint(50, 100)",
        "random.randint(150, 200)",
        "statistics.mean([row[2] for row in data])",
        "statistics.mean([row[1] for row in data])",
        "statistics.mean([row[3] for row in data])"
    ],
    "BigCodeBench/313": [
        "datetime.datetime.now()",
        "filename.split('.')",
        "open.read()",
        "os.path",
        "os.listdir(directory)",
        "os.path.join(directory, filename)",
        "os.path.join(directory, subdirectory)",
        "os.makedirs(os.path.join(directory, subdirectory))",
        "os.path.join(directory, subdirectory, new_filename)",
        "os.path.exists(os.path.join(directory, subdirectory))",
        "re.search.group(1)",
        "re.search('(.*?)\\\\[.*?\\\\]', content)",
        "shutil.move(os.path.join(directory, filename), os.path.join(directory, subdirectory, new_filename))"
    ],
    "BigCodeBench/324": [
        "exit_codes.append(process.poll())",
        "subprocess.Popen.poll()",
        "subprocess.Popen(file_path)",
        "thread.join()",
        "thread.start()",
        "threading.Thread(target=execute_file, args=(file,))",
        "time.sleep(1)"
    ],
    "BigCodeBench/326": [
        "glob.glob(os.path.join(directory_path, '*.bat'))",
        "os.path",
        "os.path.basename(file_path)",
        "os.path.join(directory_path, '*.bat')",
        "results.append((os.path.basename(file_path), None))",
        "results.append((os.path.basename(file_path), exit_code))",
        "subprocess.Popen.wait()",
        "subprocess.Popen(file_path, shell=True)",
        "sys.stderr"
    ],
    "BigCodeBench/341": [
        "df.empty",
        "df.columns",
        "matplotlib.pyplot.subplots(nrows=2, ncols=1)",
        "pandas.api",
        "pandas.api.types",
        "pandas.DataFrame",
        "pandas.api.types.is_numeric_dtype(df[col])",
        "seaborn.boxplot(x=df[col], ax=axes[1])",
        "seaborn.countplot(x=df[col], ax=axes[0])",
        "seaborn.stripplot(x=df[col], ax=axes[1], jitter=True)"
    ],
    "BigCodeBench/346": [
        "os.path",
        "os.path.isfile(script_path)",
        "subprocess.PIPE",
        "subprocess.Popen.args",
        "subprocess.Popen.poll()",
        "subprocess.Popen.returncode",
        "subprocess.Popen.communicate()",
        "subprocess.CalledProcessError(process.returncode, process.args)",
        "subprocess.Popen([sys.executable, script_path, *args], stderr=subprocess.PIPE, stdout=subprocess.PIPE)",
        "sys.executable",
        "time.sleep(1)"
    ],
    "BigCodeBench/360": [
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].set_ylabel('Values')",
        "matplotlib.pyplot.subplots[1].set_xlabel('Columns')",
        "matplotlib.pyplot.subplots[1].bar(column, mean, yerr=std)",
        "matplotlib.pyplot.subplots[1].set_title('Mean and Standard Deviation')",
        "numpy.std(df[column])",
        "numpy.mean(df[column])",
        "os.path",
        "os.path.exists(file_location)",
        "pandas.read_excel.columns",
        "pandas.read_excel(file_location, sheet_name=sheet_name)"
    ],
    "BigCodeBench/367": [
        "activity.strftime('%A')",
        "collections.defaultdict(int)",
        "datetime.datetime",
        "matplotlib.pyplot.figure()",
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].bar(days, counts)",
        "matplotlib.pyplot.subplots[1].set_title('Weekly Activity')",
        "matplotlib.pyplot.subplots[1].set_xlabel('Day of the Week')",
        "matplotlib.pyplot.subplots[1].set_ylabel('Number of Activities')"
    ],
    "BigCodeBench/368": [
        "os.path",
        "os.listdir(src_dir)",
        "os.path.join(src_dir, file_name)",
        "os.path.join(dest_dir, file_name)",
        "random.seed(seed)",
        "random.choice(files)",
        "shutil.move(src_file, dest_file)"
    ],
    "BigCodeBench/374": [
        "cell.value",
        "glob.glob(directory_path + '/*.xlsx')",
        "openpyxl.load_workbook.sheetnames",
        "openpyxl.load_workbook.save(xlsx_file)",
        "openpyxl.load_workbook(filename=xlsx_file)",
        "os.path",
        "os.path.isdir(directory_path)",
        "regex.sub('(?<=(^|[^\\\\\\\\])(\\\\\\\\\\\\\\\\)*)\"', '\\\\\"', cell.value)"
    ],
    "BigCodeBench/399": [
        "math.pi",
        "matplotlib.pyplot.figure()",
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].legend()",
        "matplotlib.pyplot.subplots[1].plot(x, y_sin, label='sin')",
        "matplotlib.pyplot.subplots[1].plot(x, y_cos, label='cos')",
        "numpy.sin(frequency * x)",
        "numpy.cos(frequency * x)",
        "numpy.linspace(0, 2 * math.pi, sample_size)"
    ],
    "BigCodeBench/401": [
        "flask.Flask.config",
        "flask.Flask(app_name)",
        "flask_mail.Mail(app)",
        "os.getenv('MAIL_PORT', 25)",
        "os.getenv('MAIL_USE_TLS', False)",
        "os.getenv('MAIL_PASSWORD', None)",
        "os.getenv('MAIL_USERNAME', None)",
        "os.getenv('MAIL_SERVER', 'localhost')"
    ],
    "BigCodeBench/409": [
        "numpy.std(df[column_name])",
        "numpy.mean(df[column_name])",
        "numpy.median(df[column_name])",
        "os.path",
        "os.path.exists(excel_file)",
        "os.path.join(excel_file_path, file_name)",
        "pandas.read_excel.columns",
        "pandas.read_excel(excel_file)"
    ],
    "BigCodeBench/417": [
        "keras.optimizers.SGD(learning_rate=0.1)",
        "keras.layers.Dense(input_dim=2, units=1, activation='sigmoid')",
        "keras.models.Sequential([Dense(input_dim=2, units=1, activation='sigmoid')])",
        "keras.models.Sequential.compile(loss='binary_crossentropy', optimizer=SGD(learning_rate=0.1))",
        "keras.models.Sequential.fit(X_train, Y_train, epochs=200, batch_size=1, verbose=0, validation_data=(X_test, Y_test))",
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].set_ylabel('Loss')",
        "matplotlib.pyplot.subplots[1].set_xlabel('Epoch')",
        "matplotlib.pyplot.subplots[1].set_title('Model loss')",
        "matplotlib.pyplot.subplots[1].legend(['Train', 'Test'], loc='upper left')",
        "matplotlib.pyplot.subplots[1].plot(history.history['loss'], label='Train Loss')",
        "matplotlib.pyplot.subplots[1].plot(history.history['val_loss'], label='Validation Loss')",
        "model.fit.history",
        "sklearn.model_selection.train_test_split(X, Y, test_size=0.25)"
    ],
    "BigCodeBench/418": [
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].legend(loc='best')",
        "matplotlib.pyplot.subplots[1].set_title('ROC curve')",
        "matplotlib.pyplot.subplots[1].plot([0, 1], [0, 1], 'k--')",
        "matplotlib.pyplot.subplots[1].set_ylabel('True positive rate')",
        "matplotlib.pyplot.subplots[1].set_xlabel('False positive rate')",
        "matplotlib.pyplot.subplots[1].plot(fpr, tpr, label='AUC = {:.3f}'.format(auc_score))",
        "sklearn.metrics.auc(fpr, tpr)",
        "sklearn.metrics.roc_curve(Y_test, Y_pred)",
        "sklearn.model_selection.train_test_split(X, Y, test_size=0.3)",
        "tensorflow.keras.layers",
        "tensorflow.keras.optimizers",
        "tensorflow.keras.optimizers.SGD(learning_rate=0.1)",
        "tensorflow.keras.Sequential.predict(X_test, verbose=0)",
        "tensorflow.keras.layers.Dense(input_dim=2, units=1, activation='sigmoid')",
        "tensorflow.keras.Sequential.fit(X_train, Y_train, epochs=200, batch_size=1, verbose=0)",
        "tensorflow.keras.Sequential([keras.layers.Dense(input_dim=2, units=1, activation='sigmoid')])",
        "tensorflow.keras.Sequential.compile(loss='binary_crossentropy', optimizer=keras.optimizers.SGD(learning_rate=0.1))"
    ],
    "BigCodeBench/424": [
        "cv2.imread.shape",
        "cv2.imread.copy()",
        "cv2.imread(image_path)",
        "cv2.imread.reshape(-1, 3)",
        "cv2.imwrite(f'cluster_{i + 1}.jpg', cluster_img)",
        "numpy.uint8",
        "numpy.array(img)",
        "numpy.array(segmented_image)",
        "numpy.stack([mask] * 3, axis=-1)",
        "numpy.array([255, 255, 255], dtype=np.uint8)",
        "numpy.where(np.stack([mask] * 3, axis=-1), segmented_image, np.array([255, 255, 255], dtype=np.uint8))",
        "os.path",
        "os.path.exists(image_path)",
        "segmented_image.reshape(img.shape).astype.reshape(img.shape)",
        "sklearn.cluster.KMeans.labels_",
        "sklearn.cluster.KMeans.fit(pixels)",
        "sklearn.cluster.KMeans.cluster_centers_",
        "sklearn.cluster.KMeans.labels_.reshape(img.shape[:2])",
        "sklearn.cluster.KMeans(n_clusters=n_clusters, random_state=random_seed)"
    ],
    "BigCodeBench/443": [
        "T.shape",
        "matplotlib.pyplot.Axes",
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].set_title('KMeans Clustering Visualization')",
        "matplotlib.pyplot.subplots[1].scatter(flattened_result[:, 0], flattened_result[:, 1], c=cluster_result)",
        "numpy.ndarray",
        "numpy.tensordot(P, T, axes=[1, 1])",
        "numpy.tensordot.swapaxes.reshape(-1, tensor_shape[2])",
        "sklearn.cluster.KMeans.fit_predict(flattened_result)",
        "sklearn.cluster.KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)"
    ],
    "BigCodeBench/445": [
        "matplotlib.pyplot.subplots()",
        "numpy.random",
        "numpy.ndarray",
        "numpy.random.seed(seed)",
        "numpy.random.normal(0, 1e-10, points.shape)",
        "points.shape",
        "scipy.spatial.Voronoi(jittered_points)",
        "scipy.spatial.voronoi_plot_2d(vor, ax=ax)"
    ],
    "BigCodeBench/454": [
        "files_moved.append(dest_file_path)",
        "glob.glob(os.path.join(src_dir, '*.' + ext))",
        "os.path",
        "os.path.basename(file)",
        "os.path.exists(src_dir)",
        "os.path.exists(dest_dir)",
        "os.path.exists(dest_file_path)",
        "os.path.join(dest_dir, filename)",
        "os.path.join(src_dir, '*.' + ext)",
        "shutil.move(file, dest_dir)"
    ],
    "BigCodeBench/458": [
        "json.loads.items()",
        "json.loads.values()",
        "json.loads(json_str)",
        "pandas.DataFrame()",
        "pandas.DataFrame.columns",
        "pandas.DataFrame(my_dict)",
        "pandas.to_numeric.isnull()",
        "pandas.DataFrame([my_dict])",
        "pandas.to_numeric(df[col], errors='coerce')",
        "re.compile.match(value)",
        "re.compile('^-?\\\\d+(?:\\\\.\\\\d+)?$')"
    ],
    "BigCodeBench/461": [
        "os.path",
        "os.path.exists(script_path)",
        "psutil.Process(pid)",
        "psutil.ZombieProcess",
        "psutil.NoSuchProcess",
        "psutil.Process.is_running()",
        "psutil.Process.memory_info()",
        "psutil.Process.cpu_percent(interval=0.05)",
        "subprocess.Popen.pid",
        "subprocess.Popen.poll()",
        "subprocess.Popen.wait()",
        "subprocess.Popen.terminate()",
        "subprocess.Popen(['bash', script_path])",
        "time.time()",
        "time.sleep(0.05)"
    ],
    "BigCodeBench/477": [
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].scatter(df[df['category'] == category]['x'], df[df['category'] == category]['y'], label=category)",
        "numpy.random",
        "numpy.random.rand(N)",
        "numpy.array(CATEGORIES)",
        "numpy.random.seed(seed)",
        "numpy.random.shuffle(all_categories)",
        "numpy.random.choice(CATEGORIES, N, replace=False)",
        "numpy.random.choice(CATEGORIES, N - len(CATEGORIES))",
        "numpy.concatenate([guaranteed_categories, remaining_categories])",
        "pandas.DataFrame({'x': np.random.rand(N), 'y': np.random.rand(N), 'category': all_categories})"
    ],
    "BigCodeBench/486": [
        "datetime.datetime.fromtimestamp(ts / 1000)",
        "df.plot.set_ylabel('Value')",
        "numpy.random",
        "numpy.random.seed(seed)",
        "numpy.arange(start_time, end_time, step)",
        "numpy.random.normal(size=len(timestamps))",
        "pandas.DataFrame.loc",
        "pandas.DataFrame.plot(x='Time', y='Value')",
        "pandas.DataFrame(columns=['Time', 'Value'])"
    ],
    "BigCodeBench/492": [
        "datetime.datetime.now()",
        "datetime.datetime.fromtimestamp(epoch_milliseconds / 1000.0)",
        "pandas.date_range(start_date, end_date, freq='D')",
        "pandas.DataFrame(sales_data, columns=['Product', 'Date', 'Sales'])",
        "random.randint(10, 50)",
        "random.seed(random_seed)",
        "sales_data.append([product, date, sales])"
    ],
    "BigCodeBench/501": [
        "book.add_sheet.write(0, col_index, col)",
        "book.add_sheet.write(row_index + 1, col_index, row[col])",
        "os.path",
        "os.path.abspath(filename)",
        "pandas.read_json.empty",
        "pandas.read_json.columns",
        "pandas.read_json(json_str)",
        "pandas.read_json.iterrows()",
        "xlwt.Workbook()",
        "xlwt.Workbook.save(filename)",
        "xlwt.Workbook.add_sheet(sheet_name)"
    ],
    "BigCodeBench/502": [
        "data.append([date, activity, duration])",
        "datetime.datetime.now()",
        "datetime.timedelta(days=i)",
        "pandas.DataFrame(data, columns=['Date', 'Activity', 'Duration'])",
        "random.randint(0, 120)",
        "random.seed(random_seed)",
        "seaborn.lineplot(data=df, x='Date', y='Duration', hue='Activity')"
    ],
    "BigCodeBench/503": [
        "datetime.datetime.now()",
        "numpy.random",
        "numpy.random.seed(random_seed)",
        "numpy.random.rand(days_in_past, len(stock_names))",
        "pandas.DataFrame(prices, columns=stock_names, index=dates)",
        "pandas.date_range(end=datetime.now().date(), periods=days_in_past)"
    ],
    "BigCodeBench/509": [
        "csv.reader(file, delimiter=delimiter, quotechar=quotechar)",
        "data.append([i + 1, status, content])",
        "difflib.ndiff(csv_content1, csv_content2)",
        "pandas.DataFrame(data, columns=headers)"
    ],
    "BigCodeBench/511": [
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].set_title(f'Pie Chart of {column}')",
        "matplotlib.pyplot.subplots[1].pie(column_data, labels=df['Age'], autopct='%1.1f%%')",
        "numpy.nan",
        "numpy.min(column_data)",
        "numpy.sum(column_data)",
        "numpy.max(column_data)",
        "numpy.mean(column_data)",
        "pandas.DataFrame.empty",
        "pandas.DataFrame(data, columns=COLUMNS)"
    ],
    "BigCodeBench/513": [
        "df.plot.line.set_ylabel(column)",
        "matplotlib.pyplot.title(f'Line Chart of {column}')",
        "numpy.min(column_data)",
        "numpy.sum(column_data)",
        "numpy.max(column_data)",
        "numpy.mean(column_data)",
        "pandas.DataFrame.plot",
        "pandas.DataFrame(data, columns=COLUMNS)",
        "pandas.DataFrame.plot.line(x='Date', y=column)"
    ],
    "BigCodeBench/526": [
        "collections.defaultdict(list)",
        "collections.defaultdict.items()",
        "d.keys()",
        "d.get(key, np.nan)",
        "json.load(f)",
        "numpy.nan",
        "numpy.nanmean(v)",
        "numpy.nanmedian(v)",
        "pandas.DataFrame(result)"
    ],
    "BigCodeBench/528": [
        "collections.Counter.keys()",
        "collections.Counter.values()",
        "collections.Counter((tuple(row) for row in rows if rows.count(row) > 1))",
        "csv.reader(f)",
        "df.plot.set_ylabel('Count')",
        "file_path.strip.lower()",
        "file_path.strip.strip()",
        "list.count(row)",
        "matplotlib.pyplot.tight_layout()",
        "pandas.DataFrame(duplicates.values(), duplicates.keys())",
        "pandas.DataFrame.plot(kind='bar', legend=False, title='Duplicate Entries')"
    ],
    "BigCodeBench/530": [
        "collections.Counter(duplicates_df['age'])",
        "df.empty",
        "matplotlib.pyplot.Axes",
        "matplotlib.pyplot.xlabel('Age')",
        "matplotlib.pyplot.ylabel('Count')",
        "matplotlib.pyplot.title('Distribution of Ages for Duplicate Names')",
        "numpy.floor",
        "numpy.arange(min_age, max_age + 1)",
        "pandas.DataFrame",
        "seaborn.histplot(duplicates_df['age'], bins=bins)"
    ],
    "BigCodeBench/532": [
        "collections.Counter(duplicates['value'])",
        "df.empty",
        "matplotlib.pyplot.xlim()",
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].set_xlabel('Value')",
        "matplotlib.pyplot.subplots[1].set_ylabel('Frequency')",
        "matplotlib.pyplot.subplots[1].set_title('Distribution')",
        "matplotlib.pyplot.subplots[1].plot(x, p, 'k', linewidth=2)",
        "matplotlib.pyplot.subplots[1].hist(df['value'], bins=bins, density=True, alpha=0.6, color='g')",
        "numpy.linspace(xmin, xmax, 100)",
        "scipy.stats.norm.pdf(x, mu, std)",
        "scipy.stats.norm.fit(df['value'])"
    ],
    "BigCodeBench/553": [
        "matplotlib.pyplot.show()",
        "matplotlib.pyplot.close(fig)",
        "matplotlib.pyplot.subplots()",
        "numpy.random",
        "numpy.random.seed(0)",
        "numpy.random.randn(len(a), len(b))",
        "pandas.DataFrame.plot(kind='bar')",
        "pandas.DataFrame(np.random.randn(len(a), len(b)), index=a, columns=selected_columns)"
    ],
    "BigCodeBench/560": [
        "d.split('-')",
        "d.rsplit('-', 1)",
        "data.strip()",
        "data.split(',')",
        "datetime.datetime.strptime(d[0], '%Y-%m')",
        "df.set_index.index",
        "df.set_index.set_index('Month')",
        "matplotlib.pyplot.close(fig)",
        "matplotlib.pyplot.subplots(figsize=(10, 6))",
        "matplotlib.pyplot.xticks(rotation='vertical')",
        "matplotlib.pyplot.subplots[1].set_ylabel('Value')",
        "matplotlib.pyplot.subplots[1].set_xlabel('Month')",
        "matplotlib.pyplot.subplots[1].bar(df.index, df['Value'])",
        "matplotlib.pyplot.subplots[1].set_title(f'Monthly Data for {list(unique_years)[0]}')",
        "pandas.DataFrame(data, columns=['Month', 'Value'])"
    ],
    "BigCodeBench/567": [
        "data.split.split('-')",
        "matplotlib.pyplot.gca()",
        "matplotlib.pyplot.show()",
        "matplotlib.pyplot.figure(figsize=(10, 6))",
        "matplotlib.pyplot.gca.set_xlabel('Value')",
        "matplotlib.pyplot.gca.set_ylabel('Frequency')",
        "matplotlib.pyplot.gca.set_title('Histogram of Values')",
        "matplotlib.pyplot.gca.set_xticks(sorted(list(set(data))))",
        "matplotlib.pyplot.gca.hist(df['Values'], bins=np.arange(df['Values'].min(), df['Values'].max() + 2) - 0.5, edgecolor='black')",
        "numpy.arange(df['Values'].min(), df['Values'].max() + 2)",
        "pandas.DataFrame(data, columns=['Values'])"
    ],
    "BigCodeBench/574": [
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].legend()",
        "matplotlib.pyplot.subplots[1].set_xlabel('x')",
        "matplotlib.pyplot.subplots[1].set_ylabel('y')",
        "matplotlib.pyplot.subplots[1].plot(x, y, 'b-', label='data')",
        "matplotlib.pyplot.subplots[1].plot(x, func(x, *popt), 'r-', label='fit: a=%5.3f, b=%5.3f' % tuple(popt))",
        "numpy.pi",
        "numpy.sin(x)",
        "numpy.random",
        "numpy.sin(b * x)",
        "numpy.random.rand(array_length)",
        "numpy.linspace(0, 4 * np.pi, array_length)",
        "scipy.optimize.curve_fit(func, x, y, p0=[1, 1])"
    ],
    "BigCodeBench/579": [
        "collections.Counter(words)",
        "collections.Counter.most_common(10)",
        "csv.reader(file)",
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].bar(labels, values)",
        "unicodedata.normalize('NFKD', word)",
        "words.append(normalized_word)"
    ],
    "BigCodeBench/582": [
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].get_xlim()",
        "matplotlib.pyplot.subplots[1].plot(x, p, 'k', linewidth=2)",
        "matplotlib.pyplot.subplots[1].hist(data, bins=number_of_bins, density=True, alpha=0.6, color='g')",
        "numpy.random",
        "numpy.random.randn(size)",
        "numpy.linspace(xmin, xmax, size)",
        "numpy.histogram_bin_edges(data, bins='auto')",
        "scipy.stats.norm",
        "scipy.stats.norm.fit(data)",
        "scipy.stats.norm.pdf(x, mu, std)"
    ],
    "BigCodeBench/583": [
        "Crypto.Cipher.AES.MODE_EAX",
        "Crypto.Cipher.AES.new.nonce",
        "Crypto.Random.get_random_bytes(16)",
        "Crypto.Cipher.AES.new(password, AES.MODE_EAX)",
        "Crypto.Cipher.AES.new.encrypt_and_digest(priv_key.save_pkcs1())",
        "base64.b64encode(priv_key_encrypted)",
        "open.write(priv_key_encrypted)",
        "os.urandom(8)",
        "rsa.newkeys(512)",
        "rsa.newkeys[1].save_pkcs1()"
    ],
    "BigCodeBench/587": [
        "base64.b64encode(encrypted_aes_key)",
        "cipher.encryptor.finalize()",
        "cipher.encryptor.update(padded_data)",
        "cryptography.hazmat.backends.default_backend()",
        "cryptography.hazmat.primitives.padding.PKCS7(128)",
        "cryptography.hazmat.primitives.ciphers.modes.CBC(iv)",
        "cryptography.hazmat.primitives.ciphers.Cipher.encryptor()",
        "cryptography.hazmat.primitives.ciphers.algorithms.AES(aes_key)",
        "cryptography.hazmat.primitives.padding.PKCS7.padder.finalize()",
        "cryptography.hazmat.primitives.padding.PKCS7.padder.update(data)",
        "cryptography.hazmat.primitives.ciphers.Cipher(algorithms.AES(aes_key), modes.CBC(iv), backend=default_backend())",
        "open.read()",
        "open.write(encrypted_data)",
        "open.write(b64encode(encrypted_aes_key))",
        "os.urandom(16)",
        "os.urandom(32)",
        "rsa.newkeys(512)",
        "rsa.encrypt(aes_key, pub_key)"
    ],
    "BigCodeBench/590": [
        "a.text",
        "a.get('href')",
        "datetime.datetime.now()",
        "pandas.DataFrame(anchors, columns=['text', 'href'])",
        "pyquery.PyQuery(html)",
        "urllib.error",
        "urllib.request",
        "urllib.error.URLError",
        "urllib.request.urlopen(url)",
        "urllib.request.urlopen.read()",
        "urllib.error.URLError(f'Error fetching URL {url}: {e}')"
    ],
    "BigCodeBench/592": [
        "csv.writer(f)",
        "csv.writer.writerows(data)",
        "data.append(row)",
        "datetime.datetime.now()",
        "os.path",
        "os.makedirs(output_dir)",
        "os.path.exists(output_dir)",
        "os.path.join(output_dir, 'sensor_data.csv')",
        "random.randint(0, 100)"
    ],
    "BigCodeBench/593": [
        "csv.writer(f)",
        "csv.writer.writerows(data)",
        "data.append(row)",
        "datetime.datetime.now()",
        "matplotlib.pyplot.show()",
        "matplotlib.pyplot.xlabel('Time')",
        "matplotlib.pyplot.tight_layout()",
        "matplotlib.pyplot.ylabel('Vehicle Count')",
        "os.path",
        "os.makedirs(output_dir)",
        "os.path.exists(output_dir)",
        "os.path.join(output_dir, 'traffic_data.csv')",
        "pandas.read_csv.empty",
        "pandas.read_csv(FILE_PATH)",
        "pandas.read_csv.plot(x='Time', y=VEHICLE_TYPES, kind='line', title='Traffic Data Over Time')",
        "random.randint(0, 50)"
    ],
    "BigCodeBench/594": [
        "csv.writer(f)",
        "csv.writer.writerows(data)",
        "data.append(row)",
        "datetime.datetime.now()",
        "os.path",
        "os.makedirs(BACKUP_PATH)",
        "os.path.exists(BACKUP_PATH)",
        "os.path.join(output_dir, 'backup/')",
        "os.path.join(output_dir, 'weather_data.csv')",
        "random.randint(0, len(WEATHER_CONDITIONS) - 1)",
        "shutil.copy(FILE_PATH, BACKUP_PATH)"
    ],
    "BigCodeBench/618": [
        "match_results.append([team, team_goals, penalty_cost])",
        "matplotlib.pyplot.close()",
        "pandas.DataFrame(match_results, columns=['Team', 'Goals', 'Penalty Cost'])",
        "random.randint(0, goals)",
        "random.randint(0, penalties)",
        "seaborn.barplot(x='Team', y='Goals', data=results_df, palette='viridis')",
        "seaborn.barplot(x='Team', y='Penalty Cost', data=results_df, palette='viridis')"
    ],
    "BigCodeBench/636": [
        "counts.plot.set_title('Non-Zero Value Counts')",
        "df.astype(bool).sum.plot(kind='bar')",
        "matplotlib.pyplot.gca()",
        "matplotlib.pyplot.close('all')",
        "matplotlib.pyplot.gca.set_title('Non-Zero Value Counts')",
        "numpy.random",
        "numpy.random.randint(10, size=(rows, len(COLUMNS)))",
        "pandas.DataFrame.astype(bool)",
        "pandas.DataFrame(columns=COLUMNS)",
        "pandas.DataFrame(data, columns=COLUMNS)"
    ],
    "BigCodeBench/637": [
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].legend()",
        "matplotlib.pyplot.subplots[1].set_title('Course-wise Average and Passing Grade Counts')",
        "numpy.random",
        "numpy.random.randint(40, 101, size=(num_students, len(COURSES)))",
        "pandas.DataFrame.mean()",
        "pandas.DataFrame(grades, index=students_sample, columns=COURSES)",
        "random.sample(STUDENTS, num_students)"
    ],
    "BigCodeBench/654": [
        "indices.size",
        "matplotlib.pyplot.gca()",
        "matplotlib.pyplot.show()",
        "matplotlib.pyplot.figure()",
        "matplotlib.pyplot.legend()",
        "matplotlib.pyplot.plot(x_data, y_data, 'bo', label='Data')",
        "matplotlib.pyplot.plot(x_fit, func(x_fit, *popt), 'r-', label='Fit')",
        "numpy.exp(-b * x)",
        "numpy.arange(len(indices))",
        "numpy.where(array[:, 0] == target_value)",
        "numpy.linspace(min(x_data), max(x_data), 500)",
        "scipy.optimize.curve_fit(func, x_data, y_data, p0=initial_guess, maxfev=10000)"
    ],
    "BigCodeBench/655": [
        "NMF(n_components=num_topics, random_state=1).fit.components_",
        "nltk.corpus",
        "nltk.corpus.stopwords",
        "nltk.download('stopwords')",
        "nltk.corpus.stopwords.words('english')",
        "re.compile('[\\\\W_]+')",
        "re.compile.sub(' ', text)",
        "sklearn.decomposition.NMF(n_components=num_topics, random_state=1)",
        "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names()",
        "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out()",
        "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform(tokenized_texts)",
        "sklearn.feature_extraction.text.TfidfVectorizer(max_df=1.0, min_df=1, stop_words='english')",
        "text.split()",
        "topic.argsort()",
        "topics.append(topic_keywords)"
    ],
    "BigCodeBench/657": [
        "gensim.models.Word2Vec(vector_size=100)",
        "gensim.models.Word2Vec(sentences=tokenized_texts, vector_size=100, window=5, min_count=1, workers=4)",
        "nltk.corpus",
        "nltk.corpus.stopwords",
        "nltk.corpus.stopwords.words('english')",
        "re.compile('[\\\\W_]+')",
        "re.compile.sub(' ', text)",
        "text.split()"
    ],
    "BigCodeBench/678": [
        "filename.endswith('.json')",
        "json.load(file)",
        "os.path",
        "os.listdir(path)",
        "os.makedirs(processed_path)",
        "os.path.join(path, filename)",
        "os.path.exists(processed_path)",
        "os.path.join(path, 'processed')",
        "pandas.DataFrame()",
        "pandas.DataFrame(data)",
        "pandas.concat([df, temp_df])",
        "shutil.move(file_path, processed_path)"
    ],
    "BigCodeBench/720": [
        "csv.writer(f)",
        "csv.writer.writerow(FIELDS)",
        "csv.writer.writerow([timestamp, temperature, humidity])",
        "datetime.datetime.now()",
        "os.path",
        "os.path.isfile(FILE_NAME)",
        "os.path.dirname(FILE_NAME)",
        "os.makedirs(os.path.dirname(FILE_NAME), exist_ok=True)",
        "random.uniform(50, 60)",
        "random.uniform(20, 30)"
    ],
    "BigCodeBench/723": [
        "bs4.BeautifulSoup(html, 'html.parser')",
        "bs4.BeautifulSoup.find('table', attrs={'class': 'data-table'})",
        "csv.writer(f)",
        "csv.writer.writerows(data)",
        "data.append(row)",
        "os.path",
        "os.remove(CSV_FILE_PATH)",
        "os.path.exists(CSV_FILE_PATH)",
        "soup.find.find_all('tr')",
        "tr.text",
        "tr.find_all('td')",
        "urllib.request",
        "urllib.request.urlopen(url)"
    ],
    "BigCodeBench/752": [
        "LinearRegression().fit.score(X_test, y_test)",
        "data.empty",
        "data.dtypes",
        "data.columns",
        "data.drop(columns=[target_column])",
        "numpy.number",
        "numpy.issubdtype(dtype, np.number)",
        "pandas.DataFrame",
        "sklearn.linear_model.LinearRegression()",
        "sklearn.model_selection.train_test_split(X, y, test_size=test_size, random_state=random_state)"
    ],
    "BigCodeBench/760": [
        "codecs.encode(name, 'utf-8')",
        "data.append([i, name, dob, email])",
        "datetime.datetime.datetime(birth_year, np.random.randint(1, 13), np.random.randint(1, 29))",
        "name.lower()",
        "numpy.random",
        "numpy.random.randint(1, 29)",
        "numpy.random.randint(1, 13)",
        "numpy.random.seed(rng_seed)",
        "numpy.random.choice(latin_names)",
        "numpy.random.choice(other_names)",
        "numpy.random.choice([True, False])",
        "numpy.random.randint(start_year, end_year + 1)",
        "pandas.DataFrame(data, columns=['ID', 'Name', 'Date of Birth', 'Email'])",
        "re.sub('\\\\s+', '.', name.lower())"
    ],
    "BigCodeBench/763": [
        "collections.defaultdict(list)",
        "collections.defaultdict.items()",
        "csv.DictWriter.writeheader()",
        "csv.DictWriter(f, fieldnames=['key', 'mean', 'median'])",
        "csv.DictWriter.writerow({'key': key, 'mean': values['mean'], 'median': values['median']})",
        "d.items()",
        "json.load(f)",
        "numpy.mean(v)",
        "numpy.median(v)",
        "result.items()"
    ],
    "BigCodeBench/765": [
        "copied_files.append(str(target_file))",
        "kwargs.items()",
        "os.path",
        "os.path.isfile(file)",
        "os.makedirs(target_dir)",
        "os.path.exists(target_dir)",
        "pathlib.Path(file)",
        "pathlib.Path(target_dir)",
        "shutil.copyfile(file, target_file)"
    ],
    "BigCodeBench/771": [
        "csv.reader(infile)",
        "csv.writer(outfile)",
        "csv.writer.writerows(reader)",
        "file_pattern.match.group(1)",
        "new_files.append(new_filename)",
        "os.listdir(file_dir)",
        "pathlib.Path(directory)",
        "re.compile(pattern)",
        "re.compile.match(filename)"
    ],
    "BigCodeBench/777": [
        "extracted_dirs.append(extract_path)",
        "os.path",
        "os.listdir(directory)",
        "os.path.join(directory, filename)",
        "os.path.join(directory, base_name)",
        "os.makedirs(extract_path, exist_ok=True)",
        "re.match.group(1)",
        "re.match(pattern, filename)",
        "zipfile.ZipFile(file_path, 'r')",
        "zipfile.ZipFile.extractall(extract_path)"
    ],
    "BigCodeBench/785": [
        "glob.glob(pattern)",
        "os.path",
        "os.remove(file)",
        "os.makedirs(ARCHIVE_DIR)",
        "os.path.exists(ARCHIVE_DIR)",
        "os.path.exists(archive_file)",
        "os.path.join(ARCHIVE_DIR, 'archive')",
        "subprocess.run(['tar', '-czf', archive_file] + file_list)"
    ],
    "BigCodeBench/800": [
        "collections.Counter({'goals': 0, 'penalties': 0})",
        "csv.writer(file)",
        "csv.DictReader(file)",
        "csv.writer.writerows(content)",
        "goals.items()",
        "os.path",
        "os.path.exists(csv_file_path)",
        "penalties.items()",
        "row.get('goals', 0)",
        "row.get('penalties', 0)"
    ],
    "BigCodeBench/826": [
        "os.path",
        "os.listdir(source_dir)",
        "os.makedirs(target_dir)",
        "os.path.exists(source_dir)",
        "os.path.exists(target_dir)",
        "os.path.join(target_dir, filename)",
        "os.path.join(source_dir, filename)",
        "re.match(file_pattern, filename)",
        "shutil.move(os.path.join(source_dir, filename), os.path.join(target_dir, filename))"
    ],
    "BigCodeBench/845": [
        "ALPHANUMERIC.sub(' ', text2).lower.split()",
        "ALPHANUMERIC.sub(' ', text1).lower.split()",
        "Levenshtein.ratio(text1, text2)",
        "collections.Counter.keys()",
        "collections.Counter(text1.split())",
        "collections.Counter(text2.split())",
        "numpy.sqrt(sum1)",
        "numpy.sqrt(sum2)",
        "re.compile('[\\\\W_]+')",
        "re.compile.sub(' ', text2)",
        "re.compile.sub(' ', text1)"
    ],
    "BigCodeBench/854": [
        "functools.reduce(lambda a, b: a + b, [math.factorial(n) for n in permutation])",
        "itertools.permutations(numbers)",
        "math.factorial(n)"
    ],
    "BigCodeBench/857": [
        "glob.glob(os.path.join(SOURCE_DIR, '*' + ext))",
        "os.path",
        "os.path.basename(src_file)",
        "os.path.join(SOURCE_DIR, '*' + ext)",
        "shutil.move(src_file, DEST_DIR)",
        "time.sleep(1)",
        "transferred_files.append(os.path.basename(src_file))",
        "warnings.simplefilter('always')",
        "warnings.warn(f'Unable to move file {src_file}: {str(e)}')"
    ],
    "BigCodeBench/865": [
        "numpy.array(weights)",
        "pandas.DataFrame({'Item': items, 'Normalized Count': counts_normalized, 'Normalized Weight': weights_normalized})",
        "scipy.stats.zscore(counts)",
        "sklearn.preprocessing.MinMaxScaler()",
        "sklearn.preprocessing.MinMaxScaler.fit_transform(np.array(weights).reshape(-1, 1))"
    ],
    "BigCodeBench/870": [
        "itertools.zip_longest(*data_list, fillvalue=np.nan)",
        "mean_values.append(np.nan)",
        "mean_values.append(np.nanmean(numeric_values))",
        "numpy.nan",
        "numpy.nanmean(numeric_values)",
        "pandas.DataFrame(mean_values, columns=['Mean Value'], index=['Position {}'.format(i) for i in range(len(mean_values))])"
    ],
    "BigCodeBench/879": [
        "data.empty",
        "numpy.number",
        "numpy.issubdtype(data[col1].dtype, np.number)",
        "numpy.issubdtype(data[col2].dtype, np.number)",
        "pandas.crosstab(data[col1], data[col2])",
        "scipy.stats.chi2_contingency(contingency_table)"
    ],
    "BigCodeBench/897": [
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].set_ylabel('Frequency')",
        "matplotlib.pyplot.subplots[1].set_xlabel('Dice Value')",
        "matplotlib.pyplot.subplots[1].set_title('Histogram of Dice Rolls')",
        "matplotlib.pyplot.subplots[1].hist(outcomes, bins=np.arange(1, 7 + 1.5) - 0.5, edgecolor='black')",
        "numpy.arange(1, 7 + 1.5)",
        "numpy.bincount(outcomes, minlength=7)",
        "random.seed(seed)",
        "random.choice(NUMBERS)"
    ],
    "BigCodeBench/906": [
        "os.path",
        "os.path.splitext(file)",
        "os.listdir(source_dir)",
        "os.path.join(source_dir, file)",
        "os.makedirs(target_dir, exist_ok=True)",
        "os.makedirs(source_dir, exist_ok=True)",
        "os.path.join(target_dir, archive_name)",
        "re.search('_processed$', os.path.splitext(file)[0])",
        "shutil.move(os.path.join(source_dir, file), target_dir)",
        "zipfile.ZipFile(archive_path, 'w')",
        "zipfile.ZipFile.write(os.path.join(source_dir, file), arcname=file)"
    ],
    "BigCodeBench/914": [
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].scatter(df['date'], df['closing_price'], color='black')",
        "matplotlib.pyplot.subplots[1].plot(future_dates, pred_prices, color='blue', linewidth=3)",
        "model.predict.tolist()",
        "numpy.array([df['date'].max() + i * 24 * 60 * 60 for i in range(1, 8)])",
        "pandas.Timestamp",
        "pandas.Timestamp.timestamp",
        "pandas.to_datetime(df['date'])",
        "sklearn.linear_model.LinearRegression()",
        "sklearn.linear_model.LinearRegression.fit(X, y)",
        "sklearn.linear_model.LinearRegression.predict(future_dates)"
    ],
    "BigCodeBench/915": [
        "matplotlib.pyplot.subplots(figsize=(10, 5))",
        "matplotlib.pyplot.subplots[1].legend(loc='best')",
        "matplotlib.pyplot.subplots[1].set_xlabel('Index')",
        "matplotlib.pyplot.subplots[1].set_ylabel('Closing Price')",
        "matplotlib.pyplot.subplots[1].set_title('Outliers in Closing Prices')",
        "matplotlib.pyplot.subplots[1].plot(df['closing_price'], color='blue', label='Normal')",
        "matplotlib.pyplot.subplots[1].plot(outliers['closing_price'], linestyle='none', marker='X', color='red', markersize=12, label='Outlier')",
        "numpy.abs(df['Z_score'])",
        "scipy.stats.zscore(df['closing_price'])"
    ],
    "BigCodeBench/916": [
        "matplotlib.pyplot.close(fig)",
        "matplotlib.pyplot.tight_layout()",
        "matplotlib.pyplot.subplots(1, 2, figsize=(12, 6))",
        "pandas.DataFrame",
        "seaborn.boxplot(x=df['closing_price'], ax=axes[0])",
        "seaborn.boxplot.set_title('Box Plot of Closing Prices')",
        "seaborn.histplot.set_title('Histogram of Closing Prices')",
        "seaborn.histplot(df['closing_price'], kde=True, ax=axes[1])"
    ],
    "BigCodeBench/917": [
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].legend()",
        "matplotlib.pyplot.subplots[1].plot(forecast_dates, forecast, label='Forecasted Closing Prices')",
        "matplotlib.pyplot.subplots[1].plot(df['date'], df['closing_price'], label='Historical Closing Prices')",
        "model.fit.forecast(steps=7)",
        "model_fit.forecast.tolist()",
        "pandas.DataFrame",
        "pandas.Timedelta(days=1)",
        "pandas.date_range(start=df['date'].iloc[-1] + pd.Timedelta(days=1), periods=7)",
        "statsmodels.tsa.arima.model.ARIMA.fit()",
        "statsmodels.tsa.arima.model.ARIMA(df['closing_price'], order=(5, 1, 0))",
        "typing.List",
        "typing.Tuple"
    ],
    "BigCodeBench/928": [
        "collections.Counter.get(key, 0)",
        "collections.Counter(word_combinations)",
        "itertools.permutations(ALPHABETS, 2)",
        "string.ascii_lowercase"
    ],
    "BigCodeBench/942": [
        "matplotlib.pyplot.subplots[1].grid(True)",
        "matplotlib.pyplot.subplots(figsize=(12, 8))",
        "matplotlib.pyplot.subplots[1].set_title('Category-wise Sales Trends')",
        "numpy.random",
        "numpy.random.seed(0)",
        "numpy.random.randint(low=100, high=500)",
        "pandas.date_range(start=start_date, periods=periods, freq=freq)",
        "pandas.DataFrame(report_data, columns=['Date', 'Category', 'Sales'])",
        "pandas.DataFrame.pivot(index='Date', columns='Category', values='Sales')",
        "report_data.append([date, category, sales])"
    ],
    "BigCodeBench/945": [
        "numpy.random",
        "numpy.arange(len(sales_df))",
        "numpy.arange(len(sales_df), 2 * len(sales_df))",
        "numpy.random.randint(low=100, high=500, size=periods)",
        "pandas.DataFrame({'Date': date_range, 'Sales': sales_data})",
        "pandas.date_range(start=start_date, freq=freq, periods=periods)",
        "sklearn.linear_model.LinearRegression()",
        "sklearn.linear_model.LinearRegression.fit(X, y)",
        "sklearn.linear_model.LinearRegression.predict(future_dates)"
    ],
    "BigCodeBench/952": [
        "assignment_data.append([task_name, employee, due_date])",
        "datetime.datetime.today()",
        "pandas.DataFrame(assignment_data, columns=['Task Name', 'Assigned To', 'Due Date'])",
        "random.seed(seed)",
        "random.choice(employees)",
        "random.choice(task_list)"
    ],
    "BigCodeBench/955": [
        "collections.Counter.items()",
        "collections.Counter(text.split())",
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].set_xticks(indices)",
        "matplotlib.pyplot.subplots[1].set_xticklabels(words)",
        "matplotlib.pyplot.subplots[1].bar(indices, frequencies)",
        "numpy.arange(len(word_counts))",
        "re.IGNORECASE",
        "re.sub.split()",
        "re.sub(word, word.replace(' ', '_'), text, flags=re.IGNORECASE)",
        "word.replace(' ', '_')"
    ],
    "BigCodeBench/963": [
        "glob.glob(f'{source_directory}/**/*{extension}', recursive=True)",
        "os.path",
        "os.path.abspath(zip_path)",
        "os.path.exists(target_directory)",
        "os.path.exists(source_directory)",
        "os.makedirs(target_directory, exist_ok=True)",
        "os.path.join(target_directory, f'{zip_name.strip()}.zip')",
        "pathlib.Path(file)",
        "zip_name.strip()",
        "zipfile.ZipFile(zip_path, 'w')",
        "zipfile.ZipFile.write(file, arcname=Path(file).name)"
    ],
    "BigCodeBench/964": [
        "docx.Document(filepath)",
        "docx.Document.paragraphs",
        "open.readlines()",
        "os.path",
        "os.path.join(root, file)",
        "os.walk(source_directory)",
        "os.path.exists(target_directory)",
        "os.path.exists(source_directory)",
        "os.makedirs(target_directory, exist_ok=True)",
        "os.path.join(target_directory, Path(file).stem + '.csv')",
        "p.text",
        "pandas.read_csv(filepath)",
        "pandas.DataFrame({'Text': data})",
        "pandas.read_excel(filepath, engine='openpyxl')",
        "pandas.DataFrame.to_csv(target_filepath, index=False)",
        "pathlib.Path(file)"
    ],
    "BigCodeBench/969": [
        "df.shape",
        "df.empty",
        "df.columns",
        "df.cumsum()",
        "df.isnull()",
        "df.select_dtypes(include=np.number)",
        "numpy.number",
        "pandas.DataFrame",
        "pandas.DataFrame(scaler.fit_transform(df_cumsum), columns=df.columns)",
        "sklearn.preprocessing.MinMaxScaler()",
        "sklearn.preprocessing.MinMaxScaler.fit_transform(df_cumsum)"
    ],
    "BigCodeBench/971": [
        "datetime.timezone.utc",
        "datetime.datetime.fromtimestamp(file_info.st_mtime, timezone.utc)",
        "datetime.datetime.fromtimestamp(file_info.st_ctime, timezone.utc)",
        "entry.name",
        "entry.path",
        "entry.is_file()",
        "file_details.append((entry.name, file_size, creation_time, modification_time))",
        "os.stat.st_size",
        "os.stat.st_ctime",
        "os.stat.st_mtime",
        "os.stat(entry.path)",
        "os.scandir(directory_path)",
        "pathlib.Path(directory_path)"
    ],
    "BigCodeBench/985": [
        "data.get.items()",
        "json.JSONDecodeError",
        "json.loads(json_data)",
        "json.loads.get('Countries')",
        "math.floor(population)",
        "os.path",
        "os.path.join(output_dir, file_name)",
        "os.makedirs(output_dir, exist_ok=True)",
        "pandas.DataFrame.to_csv(file_path, index=False)",
        "pandas.DataFrame(country_data, columns=['Country', 'Population'])"
    ],
    "BigCodeBench/988": [
        "os.path",
        "os.listdir(dir_path)",
        "os.path.isdir(dir_path)",
        "os.path.exists(dir_path)",
        "os.path.join(dir_path, item)",
        "pathlib.Path(os.path.join(dir_path, item))",
        "predicate_functions.items()",
        "re.search('\\\\d', x.name)",
        "re.search('\\\\W', x.stem)",
        "x.name",
        "x.stem",
        "x.is_dir()",
        "x.is_file()"
    ],
    "BigCodeBench/990": [
        "base64.b64encode(decoded_str.encode())",
        "binascii.hexlify(decoded_str.encode())",
        "bytes.fromhex(hex_string)",
        "bytes.fromhex.decode.encode()",
        "bytes.fromhex.decode.encode('ascii')",
        "bytes.fromhex.decode.encode('utf-8')",
        "bytes.fromhex.decode.encode('utf-16')",
        "bytes.fromhex.decode.encode('utf-32')",
        "codecs.encode(decoded_str, 'rot_13')",
        "urllib.parse",
        "urllib.parse.quote(decoded_str)"
    ],
    "BigCodeBench/998": [
        "hashlib.md5()",
        "hashlib.md5.hexdigest()",
        "hashlib.md5.update(byte_block)",
        "open.read(4096)",
        "os.remove(TARGET_TAR_FILE)",
        "tarfile.open.extractall()",
        "tarfile.open(TARGET_TAR_FILE, 'r:gz')",
        "urllib.request",
        "urllib.request.urlretrieve(url, TARGET_TAR_FILE)"
    ],
    "BigCodeBench/999": [
        "collections.Counter(values)",
        "csv.DictReader(f)",
        "csv.DictReader.fieldnames",
        "os.remove(csv_file_path)",
        "urllib.request",
        "urllib.request.urlretrieve(url, csv_file_path)"
    ],
    "BigCodeBench/1003": [
        "child.tag",
        "child.text",
        "data.append(data_item)",
        "lxml.etree.XML(xml_data)",
        "lxml.etree.XMLSyntaxError",
        "lxml.etree.XML.findall('.//item')",
        "pandas.DataFrame(data)",
        "urllib.request",
        "urllib.request.urlopen(url)",
        "urllib.request.urlopen.read()"
    ],
    "BigCodeBench/1004": [
        "collections.Counter(words)",
        "collections.Counter.most_common(10)",
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].set_xlabel('Words')",
        "matplotlib.pyplot.subplots[1].set_ylabel('Frequency')",
        "matplotlib.pyplot.subplots[1].set_title('Top 10 Most Common Words')",
        "matplotlib.pyplot.subplots[1].bar([word[0] for word in top_words], [word[1] for word in top_words])",
        "re.findall('\\\\b\\\\w+\\\\b', text)",
        "urllib.request",
        "urllib.request.urlopen(url)",
        "urllib.request.urlopen.read()"
    ],
    "BigCodeBench/1006": [
        "open.write(response.content)",
        "os.path",
        "os.path.basename(url)",
        "os.makedirs(extract_path)",
        "os.makedirs(download_path)",
        "os.path.splitext(file_name)",
        "os.path.exists(extract_path)",
        "os.path.exists(download_path)",
        "os.path.join(download_path, os.path.basename(url))",
        "requests.get.headers",
        "requests.get.content",
        "requests.RequestException",
        "requests.get(url, timeout=5)",
        "requests.get.raise_for_status()",
        "requests.get.headers.get('Content-Type', '')",
        "zipfile.ZipFile(file_name, 'r')",
        "zipfile.ZipFile.extractall(extract_path)"
    ],
    "BigCodeBench/1008": [
        "bs4.BeautifulSoup(response.text, 'html.parser')",
        "bs4.BeautifulSoup.find('table', {'id': table_id})",
        "io.StringIO(str(table))",
        "pandas.DataFrame()",
        "pandas.read_html(StringIO(str(table)))",
        "requests.get.text",
        "requests.exceptions",
        "requests.get(url, timeout=5)",
        "requests.exceptions.HTTPError",
        "requests.get.raise_for_status()",
        "soup.find.find_all('tr')"
    ],
    "BigCodeBench/1012": [
        "file.name",
        "filepath.parent",
        "filepath.parent.mkdir(parents=True, exist_ok=True)",
        "open.write(data)",
        "pathlib.Path('downloads')",
        "pathlib.Path('unzipped_files')",
        "requests.exceptions",
        "requests.get.status_code",
        "requests.get.iter_content()",
        "requests.exceptions.RequestException",
        "requests.get(url, stream=True, timeout=5)",
        "zip_dir.iterdir()",
        "zip_dir.mkdir(parents=True, exist_ok=True)",
        "zipfile.BadZipFile",
        "zipfile.ZipFile(filepath, 'r')",
        "zipfile.ZipFile.extractall(zip_dir)"
    ],
    "BigCodeBench/1013": [
        "bs4.BeautifulSoup.find_all('a', href=True)",
        "bs4.BeautifulSoup(response.text, 'html.parser')",
        "csv.writer(csvfile)",
        "csv.writer.writerow([link])",
        "requests.get.text",
        "requests.get(full_url)",
        "urllib.parse.urljoin(base_url, url)",
        "urllib.parse.urljoin(base_url, a['href'])"
    ],
    "BigCodeBench/1015": [
        "cell.text_content()",
        "lxml.html.fromstring(content)",
        "lxml.html.fromstring.xpath('//tr')",
        "open.read()",
        "pandas.DataFrame(data)",
        "pandas.DataFrame.empty",
        "pandas.DataFrame.to_sql('my_table', conn, if_exists='replace', index=False)",
        "requests.get.content",
        "requests.RequestException",
        "requests.get.raise_for_status()",
        "requests.get(webpage_url, timeout=5)",
        "requests.RequestException(f'Error accessing URL {webpage_url}: {e}')",
        "row.xpath('.//td')",
        "sqlite3.DatabaseError",
        "sqlite3.connect.close()",
        "sqlite3.connect(database_name)",
        "sqlite3.DatabaseError(f'Database error with {database_name}: {e}')",
        "webpage_url.startswith('file://')"
    ],
    "BigCodeBench/1019": [
        "PIL.Image.open.info",
        "PIL.Image.open(filename)",
        "PIL.Image.open.info.get('comment', '')",
        "codecs.decode(comment, from_encoding)",
        "pytesseract.image_to_string(image)",
        "pytesseract.image_to_string.encode(from_encoding)"
    ],
    "BigCodeBench/1020": [
        "chardet.detect(content)",
        "content.decode.decode(from_encoding)",
        "content.decode.decode(detected_encoding)",
        "content.encode(to_encoding).decode.encode(to_encoding)",
        "json.loads(content)",
        "requests.get.content",
        "requests.get(url, timeout=5)"
    ],
    "BigCodeBench/1022": [
        "datetime.datetime.now()",
        "df.sort_values.sort_values(by=column_name)",
        "os.path",
        "os.path.isfile(csv_file_path)",
        "pandas.DataFrame()",
        "pandas.read_csv.columns",
        "pandas.read_csv(csv_file_path)",
        "pandas.to_datetime(df[column_name], format=date_format)"
    ],
    "BigCodeBench/1039": [
        "context.wrap_socket.close()",
        "context.wrap_socket.recv(buffer_size)",
        "context.wrap_socket.send(response.encode('utf-8'))",
        "hashlib.sha256()",
        "hashlib.sha256.hexdigest()",
        "hashlib.sha256.update(byte_block)",
        "open.read(4096)",
        "os.path",
        "os.path.exists(request)",
        "sha256_hash.hexdigest.encode('utf-8')",
        "ssl.PROTOCOL_TLS_SERVER",
        "ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)",
        "ssl.SSLContext.wrap_socket(client_socket, server_side=True)",
        "ssl.SSLContext.load_cert_chain(certfile=cert_file, keyfile=key_file)"
    ],
    "BigCodeBench/1040": [
        "datetime.datetime.now()",
        "datetime.timedelta(seconds=run_duration)",
        "inputs.remove(s)",
        "inputs.append(connection)",
        "message_queues[s].get_nowait.encode('utf-8')",
        "outputs.remove(s)",
        "outputs.append(s)",
        "queue.Empty",
        "queue.Queue()",
        "s.close()",
        "s.accept()",
        "s.recv.decode()",
        "s.recv(buffer_size)",
        "s.accept[0].setblocking(0)",
        "s.sendall(next_msg.encode('utf-8'))",
        "select.select(inputs, outputs, inputs, 1)",
        "socket.AF_INET",
        "socket.SOCK_STREAM",
        "socket.socket.close()",
        "socket.socket.listen(5)",
        "socket.socket.setblocking(0)",
        "socket.socket.bind((server_address, server_port))",
        "socket.socket(socket.AF_INET, socket.SOCK_STREAM)"
    ],
    "BigCodeBench/1042": [
        "client_socket.close()",
        "client_socket.recv(BUFFER_SIZE)",
        "client_socket.send(response.encode('utf-8'))",
        "email.message.EmailMessage()",
        "email.message.EmailMessage.set_content(request)",
        "getpass.getpass('Email: ')",
        "getpass.getpass('Password: ')",
        "getpass.getpass('Recipient: ')",
        "response.encode('utf-8')",
        "smtplib.SMTP.starttls()",
        "smtplib.SMTP.send_message(email)",
        "smtplib.SMTP(SMTP_SERVER, SMTP_PORT)",
        "smtplib.SMTP.login(email['From'], getpass.getpass('Password: '))"
    ],
    "BigCodeBench/1053": [
        "matplotlib.pyplot.close()",
        "matplotlib.pyplot.savefig(save_path)",
        "pandas.DataFrame.plot",
        "pandas.DataFrame(top_words, columns=['Word', 'Count'])",
        "pandas.DataFrame.plot.bar(x='Word', y='Count', rot=0, legend=False)",
        "pandas.read_csv(file_path, usecols=[0], names=['Text'], header=None)",
        "sklearn.feature_extraction.text.CountVectorizer.vocabulary_",
        "sklearn.feature_extraction.text.CountVectorizer.vocabulary_.items()",
        "sklearn.feature_extraction.text.CountVectorizer(stop_words=STOP_WORDS)",
        "sklearn.feature_extraction.text.CountVectorizer.fit_transform(df['Text'].dropna())",
        "vectorizer.fit_transform.sum(axis=0)"
    ],
    "BigCodeBench/1057": [
        "itertools.product(animals, foods)",
        "numpy.array(pairs)",
        "pandas.DataFrame()",
        "pandas.DataFrame(data, columns=foods)"
    ],
    "BigCodeBench/1077": [
        "datetime.datetime.strptime(ts, '%d/%m/%y %H:%M:%S.%f')",
        "numpy.mean(differences)",
        "pytz.UTC",
        "pytz.timezone(timezone)"
    ],
    "BigCodeBench/1085": [
        "collections.Counter(words)",
        "collections.Counter.most_common(10)",
        "matplotlib.pyplot.subplots()",
        "matplotlib.pyplot.subplots[1].bar([], [])",
        "matplotlib.pyplot.subplots[1].bar(*zip(*most_common_words))",
        "re.sub(f'[{punctuation}]', '', text)",
        "re.sub.lower.split()"
    ],
    "BigCodeBench/1124": [
        "bs4.BeautifulSoup.title",
        "bs4.BeautifulSoup(response.text, 'html.parser')",
        "re.search.group()",
        "re.search('(https?://\\\\S+)', myString)",
        "requests.get.text",
        "requests.RequestException",
        "requests.get.raise_for_status()",
        "requests.get(url, headers=HEADERS)",
        "title.string",
        "urllib.parse.urlparse(url)"
    ],
    "BigCodeBench/1129": [
        "datetime.datetime.now()",
        "json.loads(json_data)",
        "open.write(response.content)",
        "os.path",
        "os.getcwd()",
        "os.path.join(save_dir, filename)",
        "requests.get(url)",
        "requests.get.content"
    ],
    "BigCodeBench/1137": [
        "bs4.BeautifulSoup.get_text()",
        "bs4.BeautifulSoup(response.text, 'html.parser')",
        "json.dump(phone_numbers, f)",
        "open.read()",
        "re.findall(PHONE_REGEX, text)",
        "requests.get.text",
        "requests.get(url, headers=HEADERS)",
        "url.startswith('file://')"
    ]
}