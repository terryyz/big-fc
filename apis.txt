' '.join((word for word in text.split() if word not in STOPWORDS)).split()
ALPHANUMERIC.sub(' ', text1).lower().split()
ALPHANUMERIC.sub(' ', text2).lower().split()
Crypto.Cipher.AES.new(password, AES.MODE_EAX)
Crypto.Cipher.AES.new.encrypt_and_digest(priv_key.save_pkcs1())
Crypto.Random.get_random_bytes(16)
Crypto.Cipher.AES.new(password, AES.MODE_EAX).nonce
Crypto.Cipher.AES.MODE_EAX
Levenshtein.ratio(text1, text2)
LinearRegression().fit(X_train, y_train).score(X_test, y_test)
LoginForm().password
LoginForm().username.data
LoginForm().username
LoginForm().validate_on_submit()
LoginForm().password.data
NMF(n_components=num_topics, random_state=1).fit(tfidf).components_
PIL.Image.open(filename)
PIL.Image.open.info.get('comment', '')
PIL.Image.open.info
RandomForestClassifier(random_state=42).fit(X, y).feature_importances_
T.shape
a.get('href')
a.text
activity.strftime('%A')
assignment_data.append([task_name, employee, due_date])
axes.append(ax)
base64.b64encode(priv_key_encrypted)
base64.b64encode(encrypted_aes_key)
base64.b64encode(decoded_str.encode())
binascii.hexlify(decoded_str.encode())
book.add_sheet(sheet_name).write(row_index + 1, col_index, row[col])
book.add_sheet(sheet_name).write(0, col_index, col)
bs4.BeautifulSoup.get_text()
bs4.BeautifulSoup(response.text, 'html.parser').title
bs4.BeautifulSoup.find('table')
bs4.BeautifulSoup.find('table', {'id': table_id})
bs4.BeautifulSoup.find_all('a', href=True)
bs4.BeautifulSoup(html, 'html.parser')
bs4.BeautifulSoup.find('table', attrs={'class': 'data-table'})
bs4.BeautifulSoup(response.text, 'html.parser')
bytes.fromhex.decode('utf-8').encode('utf-32')
bytes.fromhex.decode('utf-8').encode()
bytes.fromhex.decode('utf-8').encode('ascii')
bytes.fromhex(hex_string)
bytes.fromhex.decode('utf-8').encode('utf-8')
bytes.fromhex.decode('utf-8').encode('utf-16')
cell.value
cell.text_content()
cgi.parse_header(self.headers.get('content-type'))
chardet.detect(content)
child.text
child.tag
cipher.encryptor().finalize()
cipher.encryptor().update(padded_data)
client_socket.send(response.encode('utf-8'))
client_socket.close()
client_socket.recv(BUFFER_SIZE)
codecs.encode(name, 'utf-8')
codecs.encode(decoded_str, 'rot_13')
codecs.decode(comment, from_encoding)
collections.Counter.items()
collections.defaultdict(list)
collections.Counter()
collections.Counter((tuple(row) for row in rows if rows.count(row) > 1))
collections.Counter.most_common(10)
collections.Counter(duplicates_df['age'])
collections.Counter.get(key, 0)
collections.Counter.values()
collections.Counter({'goals': 0, 'penalties': 0})
collections.Counter(text2.split())
collections.Counter(values)
collections.Counter(text.split())
collections.Counter(text1.split())
collections.defaultdict.items()
collections.Counter(word_combinations)
collections.Counter.keys()
collections.Counter(duplicates['value'])
collections.defaultdict(int)
collections.Counter.update(words)
collections.Counter(words)
column_data.reshape(-1, 1)
content.decode(from_encoding).decode(from_encoding)
content.decode(detected_encoding).decode(detected_encoding)
content.encode(to_encoding).decode(to_encoding).encode(to_encoding)
context.wrap_socket(client_socket, server_side=True).recv(buffer_size)
context.wrap_socket(client_socket, server_side=True).send(response.encode('utf-8'))
context.wrap_socket(client_socket, server_side=True).close()
copied_files.append(str(target_file))
counts.plot(kind='bar').set_title('Non-Zero Value Counts')
cryptography.hazmat.primitives.ciphers.Cipher.encryptor()
cryptography.hazmat.primitives.padding.PKCS7.padder().finalize()
cryptography.hazmat.primitives.padding.PKCS7(128)
cryptography.hazmat.primitives.ciphers.Cipher(algorithms.AES(aes_key), modes.CBC(iv), backend=default_backend())
cryptography.hazmat.backends.default_backend()
cryptography.hazmat.primitives.padding.PKCS7.padder().update(data)
cryptography.hazmat.primitives.ciphers.modes.CBC(iv)
cryptography.hazmat.primitives.ciphers.algorithms.AES(aes_key)
csv.writer.writerows(content)
csv.DictReader(file)
csv.DictReader(f)
csv.reader(f)
csv.writer.writerow(FIELDS)
csv.writer(file)
csv.writer(outfile)
csv.reader(infile)
csv.writer.writerow([timestamp, temperature, humidity])
csv.writer.writerow(COLUMNS)
csv.DictWriter.writerow({'key': key, 'mean': values['mean'], 'median': values['median']})
csv.writer(f)
csv.DictReader(f).fieldnames
csv.writer(csvfile)
csv.writer.writerow([link])
csv.DictWriter.writeheader()
csv.writer.writerows(reader)
csv.reader(file, delimiter=delimiter, quotechar=quotechar)
csv.reader(file)
csv.writer.writerow(averages)
csv.writer.writerows(data)
csv.DictWriter(f, fieldnames=['key', 'mean', 'median'])
cv2.imread.reshape(-1, 3)
cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
cv2.imread.copy()
cv2.COLOR_BGR2RGB
cv2.imread(image_path).shape
cv2.imwrite(f'cluster_{i + 1}.jpg', cluster_img)
cv2.imread(image_path)
d.rsplit('-', 1)
d.keys()
d.items()
d.split('-')
d.get(key, np.nan)
data.values()
data.columns
data.iloc
data.drop(columns=[target_column])
data.append(cols)
data.append(data_item)
data.dtypes
data.split(',')
data.split('-').split('-')
data.append(row)
data.append([i, name, dob, email])
data.append([i + 1, status, content])
data.strip()
data.empty
data.append([date, activity, duration])
data.get('Countries').items()
datetime.datetime.today()
datetime.timezone.utc
datetime.datetime(2020, 1, 1)
datetime.datetime.fromtimestamp(ts / 1000)
datetime.datetime(2020, 12, 31)
datetime.datetime.strptime(ts, '%d/%m/%y %H:%M:%S.%f')
datetime.datetime.fromtimestamp(file_info.st_ctime, timezone.utc)
datetime.datetime.fromtimestamp(file_info.st_mtime, timezone.utc)
datetime.datetime.strptime(d[0], '%Y-%m')
datetime.datetime.datetime(birth_year, np.random.randint(1, 13), np.random.randint(1, 29))
datetime.timedelta(days=i)
datetime.timedelta(seconds=run_duration)
datetime.datetime.fromtimestamp(epoch_milliseconds / 1000.0)
datetime.datetime
datetime.timedelta(days=randint(0, num_days))
datetime.datetime.now()
datetime.datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
df.columns
df.index
df.set_index('Month').index
df.isnull()
df.plot(x='Time', y='Value').set_ylabel('Value')
df.empty
df.drop(target_column, axis=1).columns
df.asfreq(freq, method='pad').asfreq(freq, method='pad')
df.sort_values(by=column_name).sort_values(by=column_name)
df.astype(bool).sum(axis=0).plot(kind='bar')
df.plot.line(x='Date', y=column).set_ylabel(column)
df.drop(target_column, axis=1)
df.select_dtypes(include=np.number)
df.set_index('Month').set_index('Month')
df.cumsum()
df.asfreq(freq, method='pad').plot(y='value')
df.plot(kind='bar', legend=False, title='Duplicate Entries').set_ylabel('Count')
df.shape
df.set_index('date').set_index('date')
difflib.ndiff(csv_content1, csv_content2)
docx.Document(filepath).paragraphs
docx.Document(filepath)
downloaded_files.append(filename)
ele.text
ele.text.strip()
email.message.EmailMessage()
email.mime.text.MIMEText(email_data['message'])
email.message.EmailMessage.set_content(request)
email.mime.text.MIMEText.as_string()
entry.name
entry.path
entry.is_file()
exit_codes.append(process.poll())
extracted_dirs.append(extract_path)
file.name
file_details.append((entry.name, file_size, creation_time, modification_time))
file_name.endswith('.txt')
file_path.strip().lower()
file_path.strip().strip()
file_pattern.match(filename).group(1)
filename.split('.')
filename.endswith('.json')
filepath.parent.mkdir(parents=True, exist_ok=True)
filepath.parent
files_moved.append(dest_file_path)
flask.redirect(url_for('protected'))
flask.Flask.route('/logout')
flask.url_for('protected')
flask.redirect(url_for('login'))
flask.Flask(__name__, template_folder=template_folder).config
flask.Flask(app_name).config
flask.Flask(__name__, template_folder=template_folder)
flask.render_template('login.html', form=form)
flask.url_for('login')
flask.Flask.route('/protected')
flask.Flask.route('/login', methods=['GET', 'POST'])
flask.Flask(app_name)
flask_login.login_user(user)
flask_login.UserMixin.id
flask_login.LoginManager()
flask_login.LoginManager().user_loader
flask_login.LoginManager.init_app(app)
flask_login.UserMixin.password_hash
flask_login.logout_user()
flask_login.current_user.id
flask_mail.Mail(app)
ftplib.FTP.quit()
ftplib.FTP.login(ftp_user, ftp_password)
ftplib.FTP(ftp_server)
ftplib.FTP.cwd(ftp_dir)
ftplib.FTP.nlst()
functools.reduce(lambda a, b: a + b, [math.factorial(n) for n in permutation])
gensim.models.Word2Vec(vector_size=100)
gensim.models.Word2Vec(sentences=tokenized_texts, vector_size=100, window=5, min_count=1, workers=4)
geopandas.GeoDataFrame(data, geometry='Coordinates')
getpass.getpass('Password: ')
getpass.getpass('Recipient: ')
getpass.getpass('Email: ')
glob.glob(f'{source_directory}/**/*{extension}', recursive=True)
glob.glob(pattern)
glob.glob(os.path.join(src_dir, '*.' + ext))
glob.glob(os.path.join(directory, '*'))
glob.glob(os.path.join(SOURCE_DIR, '*' + ext))
glob.glob(os.path.join(file_dir, '*' + file_ext))
glob.glob(os.path.join(directory_path, '*.bat'))
glob.glob(directory_path + '/*.xlsx')
goals.items()
hashlib.md5.update(byte_block)
hashlib.sha256.hexdigest()
hashlib.md5.hexdigest()
hashlib.sha256()
hashlib.md5()
hashlib.sha256.update(byte_block)
http.server.BaseHTTPRequestHandler.headers.get('content-type')
http.server.BaseHTTPRequestHandler.send_header('content-type', 'application/json')
http.server.BaseHTTPRequestHandler.headers
http.server.BaseHTTPRequestHandler.headers.get('content-length')
http.server.BaseHTTPRequestHandler.send_error(400, 'No data key in request')
http.server.BaseHTTPRequestHandler
http.server.BaseHTTPRequestHandler.rfile.read(length)
http.server.BaseHTTPRequestHandler.wfile
http.server.BaseHTTPRequestHandler.wfile.write(response)
http.server
http.server.BaseHTTPRequestHandler.rfile
http.server.BaseHTTPRequestHandler.send_response(200)
http.server.BaseHTTPRequestHandler.send_response(535)
http.server.BaseHTTPRequestHandler.send_error(400, 'Invalid JSON')
http.server.BaseHTTPRequestHandler.send_response(400)
http.server.BaseHTTPRequestHandler.send_error(400, 'Content-Type header is not application/json')
http.server.BaseHTTPRequestHandler.end_headers()
indices.size
inputs.remove(s)
inputs.append(connection)
interesting_articles.empty
io.StringIO(str(table))
ipaddress.IPv4Network(ip_range)
itertools.permutations(numbers)
itertools.permutations(ALPHABETS, 2)
itertools.product(animals, foods)
itertools.zip_longest(*data_list, fillvalue=np.nan)
json.dumps(SUCCESS_RESPONSE)
json.loads(content)
json.load(f)
json.loads(json_data)
json.dump(phone_numbers, f)
json.load(file)
json.dump(dict(word_counts), file)
json.loads.values()
json.loads(json_str)
json.loads.items()
json.JSONDecodeError
json.loads.get('Countries')
json.loads(self.rfile.read(length))
keras.layers.Dense(input_dim=2, units=1, activation='sigmoid')
keras.models.Sequential.compile(loss='binary_crossentropy', optimizer=SGD(learning_rate=0.1))
keras.optimizers.SGD(learning_rate=0.1)
keras.models.Sequential([Dense(input_dim=2, units=1, activation='sigmoid')])
keras.models.Sequential.fit(X_train, Y_train, epochs=200, batch_size=1, verbose=0, validation_data=(X_test, Y_test))
kwargs.items()
librosa.display
librosa.amplitude_to_db(np.abs(librosa.stft(matrix)), ref=np.max)
librosa.stft(matrix)
librosa.display.specshow(D, sr=samplerate, x_axis='time', y_axis='log')
line.strip().strip()
list(reader).count(row)
lxml.etree.XMLSyntaxError
lxml.html.fromstring.xpath('//tr')
lxml.etree.XML.findall('.//item')
lxml.etree.XML(xml_data)
lxml.html.fromstring(content)
match.groups()[2].strip()
match_results.append([team, team_goals, penalty_cost])
math.factorial(n)
math.floor(population)
math.pi
matplotlib.pyplot.subplots[1].scatter(flattened_result[:, 0], flattened_result[:, 1], c=cluster_result)
matplotlib.pyplot.gca.set_title('Histogram of Values')
matplotlib.pyplot.subplots[1].legend()
matplotlib.pyplot.subplots[1].plot(x, func(x, *popt), 'r-', label='fit: a=%5.3f, b=%5.3f' % tuple(popt))
matplotlib.pyplot.subplots[1].hist(outcomes, bins=np.arange(1, 7 + 1.5) - 0.5, edgecolor='black')
matplotlib.pyplot.title('Time Series Decomposition')
matplotlib.pyplot.subplots[1].plot(x, p, 'k', linewidth=2)
matplotlib.pyplot.subplots[1].set_title('Outliers in Closing Prices')
matplotlib.pyplot.subplots[1].plot(arr, label='Original')
matplotlib.pyplot.figure(figsize=(10, 5))
matplotlib.pyplot.rc('font', **font)
matplotlib.pyplot.subplots[1].set_xlabel('Word Length')
matplotlib.pyplot.subplots[1].plot(future_dates, pred_prices, color='blue', linewidth=3)
matplotlib.pyplot.subplots[1].set_title('Random RGB Image')
matplotlib.pyplot.plot(walk)
matplotlib.pyplot.close(fig)
matplotlib.pyplot.subplots[1].plot(df['closing_price'], color='blue', label='Normal')
matplotlib.pyplot.plot(x_fit, func(x_fit, *popt), 'r-', label='Fit')
matplotlib.pyplot.subplots[1].set_xlabel('Index')
matplotlib.pyplot.gcf()
matplotlib.pyplot.subplots[1].set_title('Weekly Activity')
matplotlib.pyplot.subplots[1].scatter(df['date'], df['closing_price'], color='black')
matplotlib.pyplot.subplots[1].plot(dates, values, label='Value over Time')
matplotlib.pyplot.subplots[1].set_title('K-Means Clustering')
matplotlib.pyplot.title('Correlation Heatmap')
matplotlib.pyplot.subplots[1].set_xlabel('Feature 1')
matplotlib.pyplot.colorbar(format='%+2.0f dB')
matplotlib.pyplot.plot(x_data, y_data, 'bo', label='Data')
matplotlib.pyplot.ylabel('Value')
matplotlib.pyplot.subplots[1].set_title('Original vs. Normalized Data')
matplotlib.pyplot.gca.set_ylabel('Frequency')
matplotlib.pyplot.subplots[1].scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels, cmap='viridis', alpha=0.6, label='Data points')
matplotlib.pyplot.xlim()
matplotlib.pyplot.subplots[1].plot(norm_arr, label='Normalized')
matplotlib.pyplot.subplots[1].set_xlabel('Columns')
matplotlib.pyplot.subplots[1].set_xlabel('Words')
matplotlib.pyplot.subplots[1].scatter(centroids[:, 0], centroids[:, 1], marker='x', s=200, c='red', label='Centroids')
matplotlib.pyplot.subplots[1].scatter(transformed_data[:, 0], transformed_data[:, 1])
matplotlib.pyplot.subplots[1].set_xlabel('Value')
matplotlib.pyplot.gca.set_xticks(sorted(list(set(data))))
matplotlib.pyplot.figure(figsize=(10, 8))
matplotlib.pyplot.subplots[1].imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
matplotlib.pyplot.imshow(wordcloud)
matplotlib.pyplot.subplots(1, 2, figsize=(12, 6))
matplotlib.pyplot.subplots[1].set_title(f'Monthly Data for {list(unique_years)[0]}')
matplotlib.pyplot.subplots[1].plot([0, 1], [0, 1], 'k--')
matplotlib.pyplot.subplots[1].bar(column, mean, yerr=std)
matplotlib.pyplot.ylabel('Count')
matplotlib.pyplot.scatter(data_copy[:, 0], data_copy[:, 1])
matplotlib.pyplot.subplots[1].set_title('Model loss')
matplotlib.pyplot.subplots[1].legend(loc='best')
matplotlib.pyplot.show()
matplotlib.pyplot.subplots[1].set_title('Histogram with PDF')
matplotlib.pyplot.title(f'Line Chart of {column}')
matplotlib.pyplot.subplots[1].set_ylabel('Frequency')
matplotlib.pyplot.subplots[1].set_xticklabels(words)
matplotlib.pyplot.subplot(1, 2, 2)
matplotlib.pyplot.subplots[1].set_title('Distribution of Word Lengths')
matplotlib.pyplot.ylabel('Vehicle Count')
matplotlib.pyplot.savefig(save_path)
matplotlib.pyplot.subplots[1].plot(history.history['val_loss'], label='Validation Loss')
matplotlib.pyplot.subplots[1].plot(forecast_dates, forecast, label='Forecasted Closing Prices')
matplotlib.pyplot.gca.set_title('Non-Zero Value Counts')
matplotlib.pyplot.scatter(data_without_outliers[:, 0], data_without_outliers[:, 1])
matplotlib.pyplot.subplots[1].set_xlabel('Frequency [Hz]')
matplotlib.pyplot.axis('off')
matplotlib.pyplot.figure()
matplotlib.pyplot.subplots[1].set_xlabel('Dice Value')
matplotlib.pyplot.close('all')
matplotlib.pyplot.subplots[1].set_ylabel('Number of Activities')
matplotlib.pyplot.subplots[1].set_ylabel('Closing Price')
matplotlib.pyplot.close()
matplotlib.pyplot.subplots[1].set_xlabel('Day of the Week')
matplotlib.pyplot.title('Spectrogram')
matplotlib.pyplot.subplots[1].set_xlabel('Date')
matplotlib.pyplot.Axes
matplotlib.pyplot.subplots[1].bar([word[0] for word in top_words], [word[1] for word in top_words])
matplotlib.pyplot.subplots[1].hist(data, bins=number_of_bins, density=True, alpha=0.6, color='g')
matplotlib.pyplot.subplots[1].plot(x, y_sin, label='sin')
matplotlib.pyplot.subplots[1].scatter(df[df['category'] == category]['x'], df[df['category'] == category]['y'], label=category)
matplotlib.pyplot.subplots(figsize=(10, 5))
matplotlib.pyplot.title('Random Walk')
matplotlib.pyplot.subplots[1].set_ylabel('Values')
matplotlib.pyplot.xlabel('Time')
matplotlib.pyplot.subplots[1].hist(word_lengths, bins=bins, rwidth=rwidth)
matplotlib.pyplot.rc('font', family='Arial')
matplotlib.pyplot.subplots[1].plot(x, y, 'b-', label='data')
matplotlib.pyplot.subplots[1].pie(column_data, labels=df['Age'], autopct='%1.1f%%')
matplotlib.pyplot.subplots[1].bar([], [])
matplotlib.pyplot.subplots[1].grid(True)
matplotlib.pyplot.xlabel('Age')
matplotlib.pyplot.gca.hist(df['Values'], bins=np.arange(df['Values'].min(), df['Values'].max() + 2) - 0.5, edgecolor='black')
matplotlib.pyplot.subplots[1].set_xlabel('x')
matplotlib.pyplot.subplots(figsize=(12, 6))
matplotlib.pyplot.subplots[1].set_ylabel('Feature 2')
matplotlib.pyplot.subplots[1].bar(days, counts)
matplotlib.pyplot.subplots[1].plot(df['date'], df['closing_price'], label='Historical Closing Prices')
matplotlib.pyplot.subplots[1].set_title('Histogram of Random Numbers')
matplotlib.pyplot.subplots[1].set_title(f'Pie Chart of {column}')
matplotlib.pyplot.subplots[1].set_xlabel('False positive rate')
matplotlib.pyplot.subplots[1].set_ylabel('Frequency Spectrum Magnitude')
matplotlib.pyplot.subplots[1].set_title('Random Time Series Data')
matplotlib.pyplot.subplots[1].set_title('Mean and Standard Deviation')
matplotlib.pyplot.gca.set_xlabel('Value')
matplotlib.pyplot.figure(figsize=(10, 6))
matplotlib.pyplot.subplots[1].hist(arr, density=True, alpha=0.6, bins='auto', label='Histogram')
matplotlib.pyplot.xticks(rotation='vertical')
matplotlib.pyplot.subplots()
matplotlib.pyplot.subplots[1].set_ylabel('True positive rate')
matplotlib.pyplot.subplots[1].bar(labels, values)
matplotlib.pyplot.subplots[1].hist(random_list, bins=20)
matplotlib.pyplot.subplots[1].plot(np.abs(fft))
matplotlib.pyplot.subplots[1].plot(x, p, 'k', linewidth=2, label='PDF')
matplotlib.pyplot.subplots[1].set_title('Histogram of Dice Rolls')
matplotlib.pyplot.subplots[1].set_title('Category-wise Sales Trends')
matplotlib.pyplot.legend()
matplotlib.pyplot.title('Distribution of Ages for Duplicate Names')
matplotlib.pyplot.subplots[1].plot(outliers['closing_price'], linestyle='none', marker='X', color='red', markersize=12, label='Outlier')
matplotlib.pyplot.subplots[1].set_title('Distribution')
matplotlib.pyplot.subplots[1].set_ylabel('Loss')
matplotlib.pyplot.subplots[1].set_xlabel('Epoch')
matplotlib.pyplot.subplots(nrows=2, ncols=1)
matplotlib.pyplot.subplots[1].bar(indices, frequencies)
matplotlib.pyplot.title('Data with Outliers')
matplotlib.pyplot.subplots[1].set_title('FFT of the Signal')
matplotlib.pyplot.subplot(1, 2, 1)
matplotlib.pyplot.subplots[1].get_xlim()
matplotlib.pyplot.subplots[1].set_xticks(indices)
matplotlib.pyplot.subplots(figsize=(12, 8))
matplotlib.pyplot.subplots[1].hist(df['value'], bins=bins, density=True, alpha=0.6, color='g')
matplotlib.pyplot.subplots[1].set_xlabel('Month')
matplotlib.pyplot.subplots[1].set_title('KMeans Clustering Visualization')
matplotlib.pyplot.subplots[1].set_title('Top 10 Most Common Words')
matplotlib.pyplot.subplots[1].legend(['Train', 'Test'], loc='upper left')
matplotlib.pyplot.subplots[1].set_ylabel('y')
matplotlib.pyplot.gca()
matplotlib.pyplot.subplots[1].plot(fpr, tpr, label='AUC = {:.3f}'.format(auc_score))
matplotlib.pyplot.subplots[1].set_ylabel('Value')
matplotlib.pyplot.subplots[1].bar(df.index, df['Value'])
matplotlib.pyplot.subplots(figsize=(10, 6))
matplotlib.pyplot.tight_layout()
matplotlib.pyplot.subplots[1].set_title('Course-wise Average and Passing Grade Counts')
matplotlib.pyplot.subplots[1].plot(x, y_cos, label='cos')
matplotlib.pyplot.subplots[1].set_title('ROC curve')
matplotlib.pyplot.subplots[1].bar(*zip(*most_common_words))
matplotlib.pyplot.subplots[1].plot(history.history['loss'], label='Train Loss')
matplotlib.pyplot.subplots[1].set_xlabel('Number')
matplotlib.pyplot.title('Data without Outliers')
mean_values.append(np.nan)
mean_values.append(np.nanmean(numeric_values))
message_queues[s].get_nowait().encode('utf-8')
model.predict(future_dates).tolist()
model.fit(X_train, Y_train, epochs=200, batch_size=1, verbose=0, validation_data=(X_test, Y_test)).history
model.fit().forecast(steps=7)
model_fit.forecast(steps=7).tolist()
my_list.append(12)
name.lower()
new_files.append(new_filename)
nltk.download('stopwords')
nltk.corpus.stopwords
nltk.word_tokenize(content)
nltk.corpus
nltk.corpus.stopwords.words('english')
numeric_cols.size
numpy.mean(differences)
numpy.random.rand(N)
numpy.linspace(0, 2, 2 * sample_rate, False)
numpy.concatenate([guaranteed_categories, remaining_categories])
numpy.where(array[:, 0] == target_value)
numpy.cos(frequency * x)
numpy.random.randint(10, size=(rows, len(COLUMNS)))
numpy.arange(1, 7 + 1.5)
numpy.random.seed(random_seed)
numpy.random.choice(CATEGORIES, N, replace=False)
numpy.where(np.stack([mask] * 3, axis=-1), segmented_image, np.array([255, 255, 255], dtype=np.uint8))
numpy.random.seed(0)
numpy.median(v)
numpy.exp(-b * x)
numpy.random.randint(1, 29)
numpy.max(column_data)
numpy.mean(df[column])
numpy.arange(len(word_counts))
numpy.random.seed(rng_seed)
numpy.array(weights)
numpy.array(CATEGORIES)
numpy.random.uniform(lon_min, lon_max)
numpy.array(pairs)
numpy.mean(column_data)
numpy.min(arr)
numpy.std(arr)
numpy.random.normal(0, 1e-10, points.shape)
numpy.sin(b * x)
numpy.stack([mask] * 3, axis=-1)
numpy.uint8
numpy.sqrt(np.mean(data ** 2))
numpy.sqrt(sum1)
numpy.random.uniform(lat_min, lat_max)
numpy.array([b for (a, b) in original])
numpy.sum(column_data)
numpy.max(arr)
numpy.mean(arr)
numpy.random.randn(len(a), len(b))
numpy.delete(data_copy, outliers, axis=0)
numpy.zeros(image_size, dtype=np.uint8)
numpy.arange(len(sales_df), 2 * len(sales_df))
numpy.nan
numpy.cumsum(steps)
numpy.arange(df['Values'].min(), df['Values'].max() + 2)
numpy.mean(v)
numpy.random.randint(start_year, end_year + 1)
numpy.random.rand(array_length)
numpy.abs(stats.zscore(standardized_data))
numpy.sin(np.outer(time, signal) * np.pi)
numpy.array(list(data.values()))
numpy.random.choice(other_names)
numpy.arange(len(sales_df))
numpy.random.randint(40, 101, size=(num_students, len(COURSES)))
numpy.min(column_data)
numpy.outer(time, signal)
numpy.random.choice(CATEGORIES, N - len(CATEGORIES))
numpy.ndarray
numpy.array(img)
numpy.sin(frequency * x)
numpy.mean(df[column_name])
numpy.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])
numpy.array(segmented_image)
numpy.random.choice([True, False])
numpy.linspace(0, 2 * math.pi, sample_size)
numpy.log10(np.sqrt(np.mean(data ** 2)))
numpy.array([df['date'].max() + i * 24 * 60 * 60 for i in range(1, 8)])
numpy.random.randint(low=100, high=500, size=periods)
numpy.mean(data ** 2)
numpy.pi
numpy.histogram_bin_edges(data, bins='auto')
numpy.number
numpy.abs(df['Z_score'])
numpy.random.shuffle(all_categories)
numpy.array([b for (a, b) in original]).size
numpy.abs(fft)
numpy.array([255, 255, 255], dtype=np.uint8)
numpy.abs(librosa.stft(matrix))
numpy.where(z_scores > outlier_z_score)
numpy.issubdtype(data[col1].dtype, np.number)
numpy.random.randn(size)
numpy.random.seed(seed)
numpy.random.rand(days_in_past, len(stock_names))
numpy.nanmean(v)
numpy.random.randint(1, 13)
numpy.bincount(outcomes, minlength=7)
numpy.std(df[column])
numpy.nanmean(numeric_values)
numpy.arange(start_time, end_time, step)
numpy.random.randint(low=100, high=500)
numpy.issubdtype(data[col2].dtype, np.number)
numpy.random.choice(latin_names)
numpy.tensordot.swapaxes(0, 1).reshape(-1, tensor_shape[2])
numpy.linspace(0, 4 * np.pi, array_length)
numpy.median(df[column_name])
numpy.max(matrix)
numpy.linspace(min(x_data), max(x_data), 500)
numpy.arange(min_age, max_age + 1)
numpy.sqrt(sum2)
numpy.random
numpy.arange(max(word_lengths) + 2)
numpy.linspace(xmin, xmax, size)
numpy.nanmedian(v)
numpy.array(L)
numpy.tensordot(P, T, axes=[1, 1])
numpy.copy(data)
numpy.random.seed(42)
numpy.linspace(xmin, xmax, 100)
numpy.max
numpy.random.choice([-1, 1], size=elements)
numpy.std(df[column_name])
numpy.sin(x)
numpy.issubdtype(dtype, np.number)
numpy.floor
numpy.random.normal(size=len(timestamps))
numpy.arange(len(indices))
open.read(4096)
open.write(b64encode(encrypted_aes_key))
open.write(response.content)
open.write(priv_key_encrypted)
open.readlines()
open.read()
open.write(data)
open.write(encrypted_data)
open.write(f'\nError executing command, exited with code {ret_code}')
openpyxl.load_workbook(filename=xlsx_file)
openpyxl.load_workbook.save(xlsx_file)
openpyxl.load_workbook(filename=xlsx_file).sheetnames
os.path.join(directory, 'files.zip')
os.path.join(target_directory, f'{zip_name.strip()}.zip')
os.path.abspath(zip_path)
os.path.exists(os.path.join(directory, subdirectory))
os.listdir(directory)
os.path.join(output_dir, 'sensor_data.csv')
os.path.isfile(script_path)
os.path.splitext(file_name)
os.makedirs(BACKUP_PATH)
os.path.basename(file_path)
os.listdir(path)
os.path.join(dest_dir, filename)
os.path.join(os.getcwd(), filename)
os.path.splitext(file)
os.makedirs(download_dir)
os.path.join(output_dir, file_name)
os.path.exists(download_path)
os.path.exists(output_dir_path)
os.stat(entry.path).st_size
os.getenv('MAIL_PORT', 25)
os.path.isfile(FILE_NAME)
os.path
os.makedirs(output_dir_path)
os.makedirs(os.path.dirname(FILE_NAME), exist_ok=True)
os.listdir(file_dir)
os.path.join(source_dir, file)
os.path.join(download_path, os.path.basename(url))
os.path.exists(output_dir)
os.path.join(excel_file_path, file_name)
os.urandom(8)
os.makedirs(extract_path, exist_ok=True)
os.listdir(source_dir)
os.path.exists(target_dir)
os.getenv('MAIL_USERNAME', None)
os.path.join(directory, base_name)
os.path.exists(source_directory)
os.path.join(directory, subdirectory)
os.path.exists(dir_path)
os.makedirs(extract_path)
os.path.join(dest_dir, file_name)
os.path.dirname(FILE_NAME)
os.listdir(src_dir)
os.path.exists(BACKUP_PATH)
os.path.join(path, filename)
os.path.basename(url)
os.path.exists(download_dir)
os.getenv('MAIL_PASSWORD', None)
os.remove(csv_file_path)
os.path.join(target_dir, archive_name)
os.path.isfile(csv_file_path)
os.path.isfile(audio_file)
os.remove(file)
os.makedirs(source_dir, exist_ok=True)
os.path.basename(file)
os.path.join(destination_directory, filename)
os.path.exists(archive_file)
os.makedirs(ARCHIVE_DIR)
os.path.join(directory_path, '*.bat')
os.path.exists(csv_file_path)
os.path.exists(file_location)
os.path.join(output_dir, 'weather_data.csv')
os.scandir(directory_path)
os.path.isfile(f)
os.getenv('MAIL_SERVER', 'localhost')
os.path.exists(excel_file)
os.listdir(destination_directory)
os.path.exists(CSV_FILE_PATH)
os.path.join(directory, file_name)
os.path.exists(processed_path)
os.makedirs(download_path)
os.path.join(directory, '*')
os.path.exists(ARCHIVE_DIR)
os.path.join(directory, filename)
os.path.exists(script_path)
os.makedirs(target_dir)
os.path.exists(target_directory)
os.listdir(dir_path)
os.path.exists(extract_path)
os.getcwd()
os.stat(entry.path).st_ctime
os.path.exists(commands_file_path)
os.makedirs(output_dir, exist_ok=True)
os.path.join(output_dir, 'backup/')
os.path.join(dir_path, item)
os.path.join(save_dir, filename)
os.path.exists(source_dir)
os.path.join(source_dir, filename)
os.path.join(file_dir, '*' + file_ext)
os.stat(entry.path).st_mtime
os.makedirs(target_directory, exist_ok=True)
os.makedirs(processed_path)
os.path.basename(src_file)
os.remove(TARGET_TAR_FILE)
os.walk(source_directory)
os.path.isfile(file)
os.path.exists(src_dir)
os.path.join(SOURCE_DIR, '*' + ext)
os.path.exists(image_path)
os.path.join(directory, subdirectory, new_filename)
os.path.join(target_directory, Path(file).stem + '.csv')
os.remove(CSV_FILE_PATH)
os.path.join(target_dir, filename)
os.getenv('MAIL_USE_TLS', False)
os.path.exists(directory)
os.stat(entry.path)
os.path.isdir(directory_path)
os.path.join(output_dir, 'traffic_data.csv')
os.path.isdir(dir_path)
os.path.exists(request)
os.urandom(16)
os.path.join(path, 'processed')
os.path.exists(dest_file_path)
os.urandom(32)
os.path.exists(dest_dir)
os.path.join(ARCHIVE_DIR, 'archive')
os.path.abspath(filename)
os.makedirs(os.path.join(directory, subdirectory))
os.path.join(src_dir, '*.' + ext)
os.path.join(src_dir, file_name)
os.path.join(root, file)
os.makedirs(output_dir)
os.makedirs(target_dir, exist_ok=True)
output_files.append(output_file)
outputs.append(s)
outputs.remove(s)
p.text
pandas.DataFrame.to_csv(output_csv_path, index=False)
pandas.DataFrame(duplicates.values(), duplicates.keys())
pandas.DataFrame.apply(mean)
pandas.DataFrame(mean_values, columns=['Mean Value'], index=['Position {}'.format(i) for i in range(len(mean_values))])
pandas.read_excel(file_location, sheet_name=sheet_name).columns
pandas.DataFrame(data)
pandas.DataFrame(report_data, columns=['Date', 'Category', 'Sales'])
pandas.DataFrame(assignment_data, columns=['Task Name', 'Assigned To', 'Due Date'])
pandas.date_range(end=datetime.now().date(), periods=days_in_past)
pandas.api.types.is_numeric_dtype(df[col])
pandas.DataFrame(report_data, columns=['City', 'Local Time', 'Weather Condition'])
pandas.DataFrame(data, columns=COLUMNS).plot
pandas.DataFrame(data, columns=COLUMNS).empty
pandas.DataFrame(data, columns=['Date', 'Activity', 'Duration'])
pandas.date_range(start=start_date, periods=periods, freq=freq)
pandas.DataFrame([my_dict])
pandas.DataFrame(data, columns=headers)
pandas.read_json(json_str).columns
pandas.to_datetime(df[column_name], format=date_format)
pandas.read_csv(data_url, sep='\\s+', skiprows=22, header=None).values
pandas.DataFrame({'x': np.random.rand(N), 'y': np.random.rand(N), 'category': all_categories})
pandas.DataFrame(vectorized_data.toarray(), columns=vectorizer.get_feature_names_out())
pandas.concat([df['Date'], df['Value'].apply(pd.Series)], axis=1).iloc
pandas.read_csv(FILE_PATH).empty
pandas.to_datetime(df['date'])
pandas.read_csv(data_url, sep='\\s+', skiprows=22, header=None)
pandas.read_csv(FILE_PATH)
pandas.DataFrame.plot(x='Time', y='Value')
pandas.read_csv.plot(x='Time', y=VEHICLE_TYPES, kind='line', title='Traffic Data Over Time')
pandas.DataFrame(data=data, columns=columns)
pandas.DataFrame(anchors, columns=['text', 'href'])
pandas.DataFrame.plot(kind='bar')
pandas.DataFrame(grades, index=students_sample, columns=COURSES)
pandas.DataFrame
pandas.DataFrame(np.random.randn(len(a), len(b)), index=a, columns=selected_columns)
pandas.Series([start_date + timedelta(days=randint(0, num_days)) for _ in range(num_days)])
pandas.date_range(start_date, end_date, freq='D')
pandas.DataFrame.plot.bar(x='Word', y='Count', rot=0, legend=False)
pandas.read_json.iterrows()
pandas.Timestamp
pandas.DataFrame.mean()
pandas.DataFrame(top_words, columns=['Word', 'Count'])
pandas.Series(model.feature_importances_, index=X.columns).sort_values(ascending=False).index
pandas.concat(data_frames, ignore_index=True)
pandas.DataFrame.corr()
pandas.concat([df['Date'], df['Value'].apply(pd.Series)], axis=1)
pandas.date_range(start=df['date'].iloc[-1] + pd.Timedelta(days=1), periods=7)
pandas.DataFrame(sales_data, columns=['Product', 'Date', 'Sales'])
pandas.DataFrame(scaler.fit_transform(df_cumsum), columns=df.columns)
pandas.DataFrame(country_data, columns=['Country', 'Population'])
pandas.read_csv(file)
pandas.api.types
pandas.DataFrame(columns=COLUMNS)
pandas.DataFrame(columns=['Time', 'Value'])
pandas.DataFrame(data, columns=['Values'])
pandas.DataFrame(parsed_data, columns=['Type', 'Timestamp', 'Message'])
pandas.DataFrame.apply(mean, axis=1)
pandas.read_json(json_str).empty
pandas.Series
pandas.DataFrame({'Text': data})
pandas.DataFrame(data, columns=headers if headers else None)
pandas.Series(model.feature_importances_, index=X.columns)
pandas.read_csv(file_path, usecols=[0], names=['Text'], header=None)
pandas.Series(walk)
pandas.DataFrame(data, columns=['ID', 'Name', 'Date of Birth', 'Email'])
pandas.DataFrame(data, columns=COLUMNS)
pandas.read_excel(filepath, engine='openpyxl')
pandas.concat([df, temp_df])
pandas.Timedelta(days=1)
pandas.DataFrame(data).empty
pandas.DataFrame.astype(bool)
pandas.DataFrame.to_csv(file_path, index=False)
pandas.date_range(end=datetime.now(), periods=30)
pandas.read_json(json_str)
pandas.DataFrame({'Date': date_range, 'Sales': sales_data})
pandas.DataFrame(result)
pandas.DataFrame(top_words, columns=['Word', 'Count']).plot
pandas.DataFrame(my_dict)
pandas.crosstab(data[col1], data[col2])
pandas.DataFrame(transformed_data, columns=[f'PC{i + 1}' for i in range(n_components)])
pandas.DataFrame(prices, columns=stock_names, index=dates)
pandas.to_numeric(df['value'], errors='coerce')
pandas.DataFrame(report_data, index=STUDENTS)
pandas.DataFrame(match_results, columns=['Team', 'Goals', 'Penalty Cost'])
pandas.DataFrame({'Item': items, 'Normalized Count': counts_normalized, 'Normalized Weight': weights_normalized})
pandas.DataFrame.plot.line(x='Date', y=column)
pandas.to_numeric(df[col], errors='coerce')
pandas.DataFrame(data, columns=foods)
pandas.read_excel(file_location, sheet_name=sheet_name)
pandas.read_csv(filepath)
pandas.to_numeric.isnull()
pandas.read_csv(csv_file_path).columns
pandas.DataFrame(data=iris.data, columns=iris.feature_names)
pandas.read_html(StringIO(str(table)))
pandas.DataFrame(my_dict).columns
pandas.DataFrame(data, columns=['Month', 'Value'])
pandas.DataFrame.plot(kind='bar', legend=False, title='Duplicate Entries')
pandas.read_excel(excel_file)
pandas.DataFrame.pivot(index='Date', columns='Category', values='Sales')
pandas.DataFrame()
pandas.api
pandas.DataFrame.to_sql('my_table', conn, if_exists='replace', index=False)
pandas.read_csv(csv_file_path)
pandas.to_datetime(df['Date'])
pandas.DataFrame(columns=['Time', 'Value']).loc
pandas.DataFrame(report_data, index=STUDENTS).loc
pandas.date_range(start=start_date, freq=freq, periods=periods)
pandas.read_excel(excel_file).columns
pandas.Timestamp.timestamp
pandas.DataFrame.to_csv(target_filepath, index=False)
parsed_data.append([log_type, timestamp, message.strip()])
pathlib.Path(os.path.join(dir_path, item))
pathlib.Path(file)
pathlib.Path('downloads')
pathlib.Path(target_dir)
pathlib.Path(directory_path)
pathlib.Path('unzipped_files')
pathlib.Path(directory)
penalties.items()
points.shape
predicate_functions.items()
proc.terminate()
proc.name()
psutil.Process.cpu_percent(interval=0.05)
psutil.ZombieProcess
psutil.Process.memory_info()
psutil.NoSuchProcess
psutil.process_iter()
psutil.Process(pid)
psutil.Process.is_running()
pyquery.PyQuery(html)
pytesseract.image_to_string.encode(from_encoding)
pytesseract.image_to_string(image)
pytz.timezone(timezone)
pytz.timezone(timezones[city])
pytz.UTC
queue.Empty
queue.Queue()
random.randint(150, 200)
random.randint(10, 50)
random.randint(0, penalties)
random.seed(seed)
random.randint(0, len(weather_conditions) - 1)
random.seed(random_seed)
random.choice(files)
random.randint(range_low, range_high)
random.randint(0, goals)
random.randint(0, 120)
random.choice(task_list)
random.randint(0, len(WEATHER_CONDITIONS) - 1)
random.sample(STUDENTS, num_students)
random.randint(20, 50)
random.choice(NUMBERS)
random.randint(50, 100)
random.uniform(50, 60)
random.randint(0, num_days)
random.choice(employees)
random.uniform(20, 30)
random.randint(1, 100)
random.randint(0, 100)
random.randint(0, 50)
re.sub('http[s]?://\\S+', '', text)
re.findall('\\b\\w+\\b', text)
re.sub(f'[{punctuation}]', '', text)
re.sub(word, word.replace(' ', '_'), text, flags=re.IGNORECASE)
re.match.groups()
re.sub.lower().split()
re.search.group(1)
re.search('(.*?)\\[.*?\\]', content)
re.sub('\\d+', '', text)
re.compile.search(x)
re.match(pattern, filename)
re.compile.match(filename)
re.search('_processed$', os.path.splitext(file)[0])
re.sub('\\W+', ' ', text)
re.match(log_pattern, line)
re.findall(PHONE_REGEX, text)
re.compile('(like|what)', re.IGNORECASE)
re.sub('\\s+', '.', name.lower())
re.compile.sub(' ', text2)
re.split('\\W+', text)
re.search('\\d', x.name)
re.compile('^-?\\d+(?:\\.\\d+)?$')
re.search('(https?://\\S+)', myString)
re.match(file_pattern, filename)
re.compile.sub(' ', text1)
re.compile.sub(' ', text)
re.sub.split()
re.search('\\W', x.stem)
re.search.group()
re.compile.match(value)
re.sub.strip()
re.match.group(1)
re.compile('[\\W_]+')
re.compile(pattern)
re.IGNORECASE
regex.sub('(?<=(^|[^\\\\])(\\\\\\\\)*)"', '\\"', cell.value)
report_data.append([date, category, sales])
report_data.append([city, city_time.strftime('%Y-%m-%d %H:%M:%S %Z'), weather])
requests.get(url, headers=HEADERS).text
requests.get.iter_content()
requests.get(url)
requests.get(url).content
requests.get(url, headers=HEADERS)
requests.get.raise_for_status()
requests.RequestException(f'Error accessing URL {webpage_url}: {e}')
requests.exceptions
requests.get(url, headers=headers).content
requests.get(url, stream=True, timeout=5)
requests.ConnectionError
requests.HTTPError(f'HTTP error occurred: {e}')
requests.get(url, timeout=5).text
requests.get(url, headers=headers)
requests.HTTPError
requests.get(full_url).text
requests.get(url).text
requests.get(full_url)
requests.get(url, timeout=5).content
requests.exceptions.RequestException
requests.RequestException
requests.get(webpage_url, timeout=5)
requests.exceptions.HTTPError
requests.get(url, stream=True, timeout=5).status_code
requests.get(webpage_url, timeout=5).content
requests.get(url, timeout=5)
requests.get(url, timeout=5).headers
requests.get.headers.get('Content-Type', '')
response.encode('utf-8')
result.items()
results.append((os.path.basename(file_path), exit_code))
results.append((os.path.basename(file_path), None))
row.get('penalties', 0)
row.xpath('.//td')
row.find_all('td')
row.get('goals', 0)
rsa.newkeys[1].save_pkcs1()
rsa.encrypt(aes_key, pub_key)
rsa.newkeys(512)
s.accept()
s.recv.decode()
s.sendall(next_msg.encode('utf-8'))
s.recv(buffer_size)
s.close()
s.accept[0].setblocking(0)
sales_data.append([product, date, sales])
scipy.stats.zscore(counts)
scipy.stats.norm
scipy.stats.zscore(df['closing_price'])
scipy.optimize.curve_fit(func, x_data, y_data, p0=initial_guess, maxfev=10000)
scipy.stats.zscore(standardized_data)
scipy.stats.norm.fit(data)
scipy.spatial.voronoi_plot_2d(vor, ax=ax)
scipy.optimize.curve_fit(func, x, y, p0=[1, 1])
scipy.stats.norm.pdf(x, mu, std)
scipy.stats.chi2_contingency(contingency_table)
scipy.stats.norm.pdf(x, computed_stats['mean'], computed_stats['std'])
scipy.fftpack.fft(signal)
scipy.spatial.Voronoi(jittered_points)
scipy.stats.norm.fit(df['value'])
seaborn.countplot(x=df[col], ax=axes[0])
seaborn.histplot(duplicates_df['age'], bins=bins)
seaborn.lineplot(data=df, x='Date', y='Duration', hue='Activity')
seaborn.set_theme(style='white')
seaborn.barplot(x=feature_imp, y=feature_imp.index)
seaborn.barplot.set_xlabel('Feature Importance Score')
seaborn.heatmap(corr, annot=True)
seaborn.pairplot(iris_df, hue='species', vars=iris.feature_names).fig
seaborn.boxplot(x=df['closing_price'], ax=axes[0])
seaborn.pairplot.fig.suptitle('Iris Dataset Pair Plot', fontsize=16)
seaborn.barplot(x='Team', y='Goals', data=results_df, palette='viridis')
seaborn.histplot(df['closing_price'], kde=True, ax=axes[1])
seaborn.boxplot(x=df[col], ax=axes[1])
seaborn.histplot.set_title('Histogram of Closing Prices')
seaborn.boxplot.set_title('Box Plot of Closing Prices')
seaborn.barplot(x='Team', y='Penalty Cost', data=results_df, palette='viridis')
seaborn.pairplot(iris_df, hue='species', vars=iris.feature_names)
seaborn.barplot.set_title('Visualizing Important Features')
seaborn.stripplot(x=df[col], ax=axes[1], jitter=True)
seaborn.barplot.set_ylabel('Features')
seaborn.heatmap(corr_df, annot=True, cmap='coolwarm')
segmented_image.reshape(img.shape).astype('uint8').reshape(img.shape)
select.select(inputs, outputs, inputs, 1)
sha256_hash.hexdigest().encode('utf-8')
shapely.geometry.Point(np.random.uniform(lon_min, lon_max), np.random.uniform(lat_min, lat_max))
shutil.move(os.path.join(source_dir, file), target_dir)
shutil.move(src_file, DEST_DIR)
shutil.copyfile(file, target_file)
shutil.move(os.path.join(source_dir, filename), os.path.join(target_dir, filename))
shutil.move(file, dest_dir)
shutil.copy(FILE_PATH, BACKUP_PATH)
shutil.move(src_file, dest_file)
shutil.move(os.path.join(directory, filename), os.path.join(directory, subdirectory, new_filename))
shutil.move(file_path, processed_path)
sklearn.linear_model.LinearRegression.predict(future_dates)
sklearn.model_selection.train_test_split(X, y, test_size=test_size, random_state=random_state)
sklearn.datasets.load_iris().feature_names
sklearn.cluster.KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)
sklearn.feature_extraction.text.CountVectorizer.fit_transform(df['Text'].dropna())
sklearn.feature_extraction.text.CountVectorizer.vocabulary_.items()
sklearn.preprocessing.normalize([arr])
sklearn.datasets.load_iris().target
sklearn.cluster.KMeans(n_clusters=n_clusters, random_state=random_seed).cluster_centers_
sklearn.decomposition.PCA.fit_transform(data)
sklearn.feature_extraction.text.CountVectorizer()
sklearn.feature_extraction.text.CountVectorizer(stop_words=STOP_WORDS)
sklearn.feature_extraction.text.TfidfVectorizer(max_df=1.0, min_df=1, stop_words='english')
sklearn.linear_model.LinearRegression()
sklearn.feature_extraction.text.TfidfVectorizer.fit_transform(tokenized_texts)
sklearn.model_selection.train_test_split(X, Y, test_size=0.25)
sklearn.preprocessing.StandardScaler.fit_transform(column_data.reshape(-1, 1))
sklearn.linear_model.LinearRegression.fit(X, y)
sklearn.datasets.load_iris()
sklearn.cluster.KMeans.fit(pixels)
sklearn.decomposition.PCA(n_components=n_components)
sklearn.decomposition.NMF(n_components=num_topics, random_state=1)
sklearn.datasets.load_iris().data
sklearn.metrics.auc(fpr, tpr)
sklearn.metrics.roc_curve(Y_test, Y_pred)
sklearn.cluster.KMeans(n_clusters=n_clusters, random_state=random_seed).labels_
sklearn.cluster.KMeans(n_clusters=n_clusters).cluster_centers_
sklearn.preprocessing.MinMaxScaler.fit_transform(df_cumsum)
sklearn.preprocessing.StandardScaler()
sklearn.cluster.KMeans.fit_predict(data)
sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names()
sklearn.preprocessing.MinMaxScaler.fit_transform(np.array(weights).reshape(-1, 1))
sklearn.model_selection.train_test_split(X, Y, test_size=0.3)
sklearn.feature_extraction.text.CountVectorizer(stop_words=STOP_WORDS).vocabulary_
sklearn.feature_extraction.text.CountVectorizer.fit_transform(dataframe[text_column])
sklearn.preprocessing.MinMaxScaler()
sklearn.cluster.KMeans(n_clusters=n_clusters, random_state=random_seed)
sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out()
sklearn.cluster.KMeans.fit_predict(flattened_result)
sklearn.cluster.KMeans(n_clusters=n_clusters)
sklearn.cluster.KMeans.labels_.reshape(img.shape[:2])
sklearn.ensemble.RandomForestClassifier(random_state=42)
sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out()
smtplib.SMTPAuthenticationError
smtplib.SMTP.starttls()
smtplib.SMTP.send_message(email)
smtplib.SMTP(smtp_server, smtp_port)
smtplib.SMTP.login(email['From'], getpass.getpass('Password: '))
smtplib.SMTP.sendmail(smtp_username, [email_data['to']], msg.as_string())
smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
smtplib.SMTP.login(smtp_username, smtp_password)
socket.AF_INET
socket.socket.settimeout(1)
socket.socket.setblocking(0)
socket.socket(socket.AF_INET, socket.SOCK_STREAM)
socket.error
socket.socket.bind((server_address, server_port))
socket.socket.listen(5)
socket.socket.close()
socket.socket.connect((str(ip), port))
socket.SOCK_STREAM
soundfile.read(audio_file)
soup.find('table', {'id': table_id}).find_all('tr')
soup.find('table').find_all('tr')
soup.find('table', attrs={'class': 'data-table'}).find_all('tr')
soup.find('table').find_all('th')
sqlite3.connect.close()
sqlite3.connect(database_name)
sqlite3.DatabaseError
sqlite3.DatabaseError(f'Database error with {database_name}: {e}')
ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
ssl.SSLContext.wrap_socket(client_socket, server_side=True)
ssl.SSLContext.load_cert_chain(certfile=cert_file, keyfile=key_file)
ssl.PROTOCOL_TLS_SERVER
statistics.mean([row[3] for row in data])
statistics.mean
statistics.mean([row[2] for row in data])
statistics.mean([row[1] for row in data])
statsmodels.tsa.arima.model.ARIMA(df['closing_price'], order=(5, 1, 0))
statsmodels.tsa.arima.model.ARIMA.fit()
statsmodels.tsa.seasonal.seasonal_decompose(df['value'], model=decomposition_model)
string.ascii_lowercase
subprocess.Popen(file_path, shell=True)
subprocess.Popen.poll()
subprocess.PIPE
subprocess.Popen.terminate()
subprocess.Popen([sys.executable, script_path, *args], stderr=subprocess.PIPE, stdout=subprocess.PIPE).returncode
subprocess.Popen.wait()
subprocess.Popen.communicate()
subprocess.Popen([sys.executable, script_path, *args], stderr=subprocess.PIPE, stdout=subprocess.PIPE).args
subprocess.Popen(['bash', script_path])
subprocess.Popen([sys.executable, script_path, *args], stderr=subprocess.PIPE, stdout=subprocess.PIPE)
subprocess.call(command, shell=True, stdout=f, stderr=subprocess.STDOUT)
subprocess.Popen(file_path)
subprocess.Popen(process_name)
subprocess.run(['tar', '-czf', archive_file] + file_list)
subprocess.STDOUT
subprocess.call(command, shell=True)
subprocess.CalledProcessError(process.returncode, process.args)
subprocess.Popen(['bash', script_path]).pid
sys.stderr
sys.executable
tarfile.open(TARGET_TAR_FILE, 'r:gz')
tarfile.open.extractall()
tensorflow.keras.layers
tensorflow.keras.Sequential.compile(loss='binary_crossentropy', optimizer=keras.optimizers.SGD(learning_rate=0.1))
tensorflow.keras.optimizers
tensorflow.keras.Sequential.fit(X_train, Y_train, epochs=200, batch_size=1, verbose=0)
tensorflow.keras.Sequential.predict(X_test, verbose=0)
tensorflow.keras.layers.Dense(input_dim=2, units=1, activation='sigmoid')
tensorflow.keras.optimizers.SGD(learning_rate=0.1)
tensorflow.keras.Sequential([keras.layers.Dense(input_dim=2, units=1, activation='sigmoid')])
text.split()
text.lower().lower()
th.text.strip()
th.text
thread.join()
thread.start()
threading.Thread(target=execute_file, args=(file,))
threading.Thread.start()
threading.Thread.join()
threading.Thread(target=check_port, args=(ip,))
threads.append(thread)
time.sleep(1)
time.sleep(0.05)
time.sleep(5)
time.time()
title.string
topic.argsort()
topics.append(topic_keywords)
tr.find_all('td')
tr.text
transferred_files.append(os.path.basename(src_file))
typing.List
typing.Tuple
unicodedata.normalize('NFKD', word)
url.startswith('file://')
urllib.request
urllib.error
urllib.error.URLError
urllib.parse.urljoin(base_url, url)
urllib.parse.urlparse(url)
urllib.parse.quote(decoded_str)
urllib.request.urlopen.read()
urllib.request.urlopen(url)
urllib.error.URLError(f'Error fetching URL {url}: {e}')
urllib.parse
urllib.request.urlretrieve(url, TARGET_TAR_FILE)
urllib.parse.urljoin(base_url, a['href'])
urllib.request.urlretrieve(url, csv_file_path)
utc_datetime.astimezone.strftime('%Y-%m-%d %H:%M:%S %Z')
utc_datetime.astimezone(city_tz)
vectorizer.fit_transform(df['Text'].dropna()).sum(axis=0)
vectorizer.fit_transform(dataframe[text_column]).toarray()
warnings.warn(f'Unable to move file {src_file}: {str(e)}')
warnings.simplefilter('always')
webpage_url.startswith('file://')
werkzeug.security.check_password_hash(self.password_hash, password)
werkzeug.security.generate_password_hash(password)
word.replace(' ', '_')
wordcloud.WordCloud()
words.append(normalized_word)
wtforms.validators.DataRequired()
wtforms.StringField('Username', validators=[DataRequired(), Length(min=4, max=25)])
wtforms.SubmitField('Log In')
wtforms.validators.Length(min=4, max=25)
wtforms.PasswordField('Password', validators=[DataRequired(), Length(min=8, max=80)])
wtforms.validators.Length(min=8, max=80)
x.stem
x.is_file()
x.name
x.is_dir()
xlwt.Workbook()
xlwt.Workbook.save(filename)
xlwt.Workbook.add_sheet(sheet_name)
zip_dir.mkdir(parents=True, exist_ok=True)
zip_dir.iterdir()
zip_name.strip()
zipfile.ZipFile(zip_file_path, 'w')
zipfile.BadZipFile
zipfile.ZipFile.write(file, os.path.basename(file))
zipfile.ZipFile(file_name, 'r')
zipfile.ZipFile.extractall(extract_path)
zipfile.ZipFile(zip_path, 'r')
zipfile.ZipFile.extractall(destination_directory)
zipfile.ZipFile.write(os.path.join(source_dir, file), arcname=file)
zipfile.ZipFile(file_path, 'r')
zipfile.ZipFile(filepath, 'r')
zipfile.ZipFile.write(file, arcname=Path(file).name)
zipfile.ZipFile.extractall(zip_dir)
zipfile.ZipFile(archive_path, 'w')
zipfile.ZipFile(zip_path, 'w')
