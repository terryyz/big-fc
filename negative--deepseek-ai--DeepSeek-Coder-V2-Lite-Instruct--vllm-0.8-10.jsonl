{"api_id": 0, "api_name": "Crypto.Random.get_random_bytes", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateCryptographicKeyPair\", \"type\": \"function\", \"signature\": \"(keySize, /)\", \"return_type\": \"tuple\", \"short_description\": \"Generate a new RSA key pair with the specified key size.\"}"}
{"api_id": 0, "api_name": "Crypto.Random.get_random_bytes", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateCryptographicKeyPair\", \"type\": \"function\", \"signature\": \"(key_size, /)\", \"return_type\": \"tuple\", \"short_description\": \"Generate a new RSA key pair with the specified key size suitable for cryptographic use.\"}"}
{"api_id": 0, "api_name": "Crypto.Random.get_random_bytes", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateCryptographicKeys\", \"type\": \"function\", \"signature\": \"(keySize, /)\", \"return_type\": \"tuple\", \"short_description\": \"Generate a pair of cryptographic keys suitable for RSA encryption and decryption.\"}"}
{"api_id": 0, "api_name": "Crypto.Random.get_random_bytes", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateCryptoKeyPair\", \"type\": \"function\", \"signature\": \"(keySize, /)\", \"return_type\": \"tuple(publicKey, privateKey)\", \"short_description\": \"Generate a new RSA key pair with the specified key size for cryptographic use.\"}"}
{"api_id": 0, "api_name": "Crypto.Random.get_random_bytes", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateCryptographicKeys\", \"type\": \"callable\", \"signature\": \"(keySize, /)\", \"return_type\": \"tuple\", \"short_description\": \"Generate a pair of RSA public and private keys suitable for cryptographic use.\"}"}
{"api_id": 0, "api_name": "Crypto.Random.get_random_bytes", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateRandomPassword\", \"type\": \"function\", \"signature\": \"(length)\", \"return_type\": \"str\", \"short_description\": \"Generates a random password of specified length.\"}"}
{"api_id": 0, "api_name": "Crypto.Random.get_random_bytes", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateCryptoKeyPair\", \"type\": \"function\", \"signature\": \"(bits)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a new RSA key pair with the specified number of bits.\"}"}
{"api_id": 0, "api_name": "Crypto.Random.get_random_bytes", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateCryptographicKeys\", \"type\": \"function\", \"signature\": \"(keySize, /)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a pair of cryptographic keys: public and private.\"}"}
{"api_id": 0, "api_name": "Crypto.Random.get_random_bytes", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateCryptographicKeyPair\", \"type\": \"function\", \"signature\": \"(keySize, /)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a new public and private key pair for cryptographic use.\"}"}
{"api_id": 0, "api_name": "Crypto.Random.get_random_bytes", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateCryptoKeyPair\", \"type\": \"function\", \"signature\": \"(key_size, /)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a new RSA key pair with the specified key size suitable for cryptographic use.\"}"}
{"api_id": 1, "api_name": "Crypto.Cipher.AES.new", "task_id": "BigCodeBench/583", "solution": "{\n  \"name\": \"generate_aes_cipher\",\n  \"type\": \"function\",\n  \"signature\": \"(key, mode)\",\n  \"return_type\": \"AES\",\n  \"short_description\": \"Create a new AES cipher object with the specified key and mode.\"\n}"}
{"api_id": 1, "api_name": "Crypto.Cipher.AES.new", "task_id": "BigCodeBench/583", "solution": "{\n  \"name\": \"generate_aes_cipher\",\n  \"type\": \"callable\",\n  \"signature\": \"(key, mode, nonce=None, iv=None, segment_size=None, mac_len=None, msg_len=None, assoc_len=None, initial_value=None, counter=None, use_aesni=None)\",\n  \"return_type\": \"AES object\",\n  \"short_description\": \"Creates a new AES cipher with the specified mode and optional parameters.\"\n}"}
{"api_id": 1, "api_name": "Crypto.Cipher.AES.new", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateEncryptedKey\", \"type\": \"function\", \"signature\": \"(keyLength, mode, nonceLength=None)\", \"return_type\": \"AESCipher\", \"short_description\": \"Generates a new AES cipher with the specified key length and mode, optionally with a specified nonce length.\"}"}
{"api_id": 1, "api_name": "Crypto.Cipher.AES.new", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateAESCipher\", \"type\": \"function\", \"signature\": \"(key, mode)\", \"return_type\": \"AES cipher object\", \"short_description\": \"Creates a new AES cipher object with the specified key and mode.\"}"}
{"api_id": 1, "api_name": "Crypto.Cipher.AES.new", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateAESCipher\", \"type\": \"function\", \"signature\": \"(key, mode, **kwargs)\", \"return_type\": \"AES cipher object\", \"short_description\": \"Creates a new AES cipher with the specified key and mode, and optionally accepts initialization parameters like IV or nonce.\"}"}
{"api_id": 1, "api_name": "Crypto.Cipher.AES.new", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateAESCipher\", \"type\": \"function\", \"signature\": \"(key, mode, *args, **kwargs)\", \"return_type\": \"AES object\", \"short_description\": \"Create a new AES cipher with the specified key and mode. Supports various encryption modes and optional parameters for initialization.\"}"}
{"api_id": 1, "api_name": "Crypto.Cipher.AES.new", "task_id": "BigCodeBench/583", "solution": "{\n  \"name\": \"generate_aes_cipher\",\n  \"type\": \"function\",\n  \"signature\": \"(key, mode, *args, **kwargs)\",\n  \"return_type\": \"AES\",\n  \"short_description\": \"Create a new AES cipher with the specified mode.\"\n}"}
{"api_id": 1, "api_name": "Crypto.Cipher.AES.new", "task_id": "BigCodeBench/583", "solution": "{\n  \"name\": \"generateAesCipher\",\n  \"type\": \"function\",\n  \"signature\": \"(key, mode, nonce=None, iv=None)\",\n  \"return_type\": \"AES cipher object\",\n  \"short_description\": \"Creates a new AES cipher with the specified mode and optional nonce or IV.\"\n}"}
{"api_id": 1, "api_name": "Crypto.Cipher.AES.new", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateAesCipher\", \"type\": \"function\", \"signature\": \"(key, mode, *args, **kwargs)\", \"return_type\": \"AES object\", \"short_description\": \"Creates a new AES cipher with the specified key and mode.\"}"}
{"api_id": 1, "api_name": "Crypto.Cipher.AES.new", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateAESCipher\", \"type\": \"function\", \"signature\": \"(key, mode)\", \"return_type\": \"AESCipher\", \"short_description\": \"Creates a new AES cipher object with the specified key and mode.\"}"}
{"api_id": 2, "api_name": "Crypto.Cipher.AES.MODE_EAX", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generate_secure_key\", \"type\": \"function\", \"signature\": \"def generate_secure_key(length: int) -> bytes:\", \"return_type\": \"bytes\", \"short_description\": \"Generates a secure random key of the specified length.\"}"}
{"api_id": 2, "api_name": "Crypto.Cipher.AES.MODE_EAX", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateAESKey\", \"type\": \"function\", \"signature\": \"generateAESKey() -> bytes\", \"return_type\": \"bytes\", \"short_description\": \"Generates a random AES key.\"}"}
{"api_id": 2, "api_name": "Crypto.Cipher.AES.MODE_EAX", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generate_aes_key\", \"type\": \"function\", \"signature\": \"def generate_aes_key(length: int) -> bytes:\", \"return_type\": \"bytes\", \"short_description\": \"Generates a random AES key of the specified length.\"}"}
{"api_id": 2, "api_name": "Crypto.Cipher.AES.MODE_EAX", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generate_secure_key_pair\", \"type\": \"function\", \"signature\": \"def generate_secure_key_pair(): -> Tuple[rsa.PublicKey, rsa.PrivateKey]\", \"return_type\": \"Tuple[rsa.PublicKey, rsa.PrivateKey]\", \"short_description\": \"Generates a secure RSA key pair consisting of a public and private key.\"}"}
{"api_id": 2, "api_name": "Crypto.Cipher.AES.MODE_EAX", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generate_secure_key\", \"type\": \"function\", \"signature\": \"def generate_secure_key():\", \"return_type\": \"tuple\", \"short_description\": \"Generates a secure key pair and a random password.\"}"}
{"api_id": 2, "api_name": "Crypto.Cipher.AES.MODE_EAX", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generate_secure_key\", \"type\": \"function\", \"signature\": \"def generate_secure_key():\", \"return_type\": \"bytes\", \"short_description\": \"Generates a secure random key suitable for cryptographic use.\"}"}
{"api_id": 2, "api_name": "Crypto.Cipher.AES.MODE_EAX", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generate_secure_key_pair\", \"type\": \"function\", \"signature\": \"def generate_secure_key_pair():\", \"return_type\": \"tuple(tuple(str, str), bytes, bytes)\", \"short_description\": \"Generates a secure RSA key pair and a random symmetric key.\"}"}
{"api_id": 2, "api_name": "Crypto.Cipher.AES.MODE_EAX", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateAesCipher\", \"type\": \"function\", \"signature\": \"(key: bytes, mode: str)\", \"return_type\": \"Cipher\", \"short_description\": \"Generates an AES cipher with the specified mode using the provided key.\"}"}
{"api_id": 2, "api_name": "Crypto.Cipher.AES.MODE_EAX", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generate_secure_key\", \"type\": \"function\", \"signature\": \"def generate_secure_key():\", \"return_type\": \"bytes\", \"short_description\": \"Generates a secure random key suitable for cryptographic use.\"}"}
{"api_id": 2, "api_name": "Crypto.Cipher.AES.MODE_EAX", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generate_secure_key_pair\", \"type\": \"function\", \"signature\": \"def generate_secure_key_pair():\", \"return_type\": \"tuple\", \"short_description\": \"Generates a pair of RSA public and private keys for secure communication.\"}"}
{"api_id": 3, "api_name": "Levenshtein.ratio", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateLevenshteinRatio\", \"type\": \"function\", \"signature\": \"(str1, str2, processor=None, scoreCutoff=None)\", \"return_type\": \"float\", \"short_description\": \"Calculates a normalized indel similarity in the range [0, 1] between two strings.\"}"}
{"api_id": 3, "api_name": "Levenshtein.ratio", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateLevenshteinRatio\", \"type\": \"callable\", \"signature\": \"(s1, s2, *, processor=None, score_cutoff=None)\", \"return_type\": \"float\", \"short_description\": \"Calculates a normalized indel similarity in the range [0, 1]. This function uses the Levenshtein distance to measure the similarity between two sequences.\"}"}
{"api_id": 3, "api_name": "Levenshtein.ratio", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateNormalizedIndelSimilarity\", \"type\": \"function\", \"signature\": \"(s1, s2, *, processor=None, score_cutoff=None)\", \"return_type\": \"float\", \"short_description\": \"Calculates a normalized indel similarity in the range [0, 1]. This function uses the Levenshtein distance to determine the similarity between two sequences.\"}"}
{"api_id": 3, "api_name": "Levenshtein.ratio", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateLevenshteinRatio\", \"type\": \"callable\", \"signature\": \"(s1, s2, *, processor=None, score_cutoff=None)\", \"return_type\": \"float\", \"short_description\": \"Calculates a normalized indel similarity in the range [0, 1]. This is a high-level function that abstracts the complexity of the Levenshtein distance calculation, providing a straightforward interface for similarity assessment between two sequences.\"}"}
{"api_id": 3, "api_name": "Levenshtein.ratio", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateCosineSimilarity\", \"type\": \"function\", \"signature\": \"(vec1, vec2)\", \"return_type\": \"float\", \"short_description\": \"Computes the cosine similarity between two term frequency vectors.\"}"}
{"api_id": 3, "api_name": "Levenshtein.ratio", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateCosineSimilarity\", \"type\": \"function\", \"signature\": \"(vec1, vec2)\", \"return_type\": \"float\", \"short_description\": \"Computes the cosine similarity between two term frequency vectors.\"}"}
{"api_id": 3, "api_name": "Levenshtein.ratio", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateLevenshteinRatio\", \"type\": \"function\", \"signature\": \"(s1, s2, *, processor=None, score_cutoff=None)\", \"return_type\": \"float\", \"short_description\": \"Calculates a normalized indel similarity in the range [0, 1]. This is a high-level function that abstracts the complexity of direct Levenshtein library calls.\"}"}
{"api_id": 3, "api_name": "Levenshtein.ratio", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateLevenshteinRatio\", \"type\": \"callable\", \"signature\": \"(s1, s2, *, processor=None, score_cutoff=None)\", \"return_type\": \"float\", \"short_description\": \"Calculates a normalized indel similarity in the range [0, 1]. This function provides a direct way to compute the Levenshtein ratio between two sequences.\"}"}
{"api_id": 3, "api_name": "Levenshtein.ratio", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateNormIndelSimilarity\", \"type\": \"callable\", \"signature\": \"(s1, s2, *, processor=None, score_cutoff=None)\", \"return_type\": \"float\", \"short_description\": \"Calculates a normalized indel similarity in the range [0, 1] between two sequences.\"}"}
{"api_id": 3, "api_name": "Levenshtein.ratio", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateLevenshteinRatio\", \"type\": \"callable\", \"signature\": \"(s1, s2, *, processor=None, score_cutoff=None)\", \"return_type\": \"float\", \"short_description\": \"Calculates a normalized indel similarity in the range [0, 1] between two sequences.\"}"}
{"api_id": 4, "api_name": "PIL.Image.open", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"extractTextFromImage\", \"type\": \"function\", \"signature\": \"(image) -> str\", \"return_type\": \"str\", \"short_description\": \"Extracts text from a given image using OCR.\"}"}
{"api_id": 4, "api_name": "PIL.Image.open", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"openImage\", \"type\": \"callable\", \"signature\": \"(imagePath) -> 'Image'\", \"return_type\": \"PIL.Image.Image\", \"short_description\": \"Opens and identifies the image file located at the specified path.\"}"}
{"api_id": 4, "api_name": "PIL.Image.open", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"extractTextFromImage\", \"type\": \"function\", \"signature\": \"(image) -> str\", \"return_type\": \"str\", \"short_description\": \"Extracts text from a given image using OCR.\"}"}
{"api_id": 4, "api_name": "PIL.Image.open", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"extractTextFromImage\", \"type\": \"function\", \"signature\": \"(image) -> str\", \"return_type\": \"str\", \"short_description\": \"Extracts text from a given image using OCR.\"}"}
{"api_id": 4, "api_name": "PIL.Image.open", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"extractImageText\", \"type\": \"function\", \"signature\": \"(image) -> str\", \"return_type\": \"str\", \"short_description\": \"Extracts text from a given image using OCR.\"}"}
{"api_id": 4, "api_name": "PIL.Image.open", "task_id": "BigCodeBench/1019", "solution": "{\n  \"name\": \"readImage\",\n  \"type\": \"function\",\n  \"signature\": \"(filePath, mode='r', formats=None) -> 'Image'\",\n  \"return_type\": \"PIL.Image.Image\",\n  \"short_description\": \"Opens and identifies the image file at the specified path.\"\n}"}
{"api_id": 4, "api_name": "PIL.Image.open", "task_id": "BigCodeBench/1019", "solution": "{\n  \"name\": \"loadImage\",\n  \"type\": \"function\",\n  \"signature\": \"(filePath) -> Image\",\n  \"return_type\": \"Image\",\n  \"short_description\": \"Loads an image from the specified file path.\"\n}"}
{"api_id": 4, "api_name": "PIL.Image.open", "task_id": "BigCodeBench/1019", "solution": "{\n  \"name\": \"loadImage\",\n  \"type\": \"callable\",\n  \"signature\": \"(image_path, mode='r', formats=None) -> 'Image'\",\n  \"return_type\": \"An :py:class:`~PIL.Image.Image` object.\",\n  \"short_description\": \"Opens and identifies the image file located at the specified path.\"\n}"}
{"api_id": 4, "api_name": "PIL.Image.open", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"extractImageText\", \"type\": \"function\", \"signature\": \"(image) -> str\", \"return_type\": \"str\", \"short_description\": \"Extracts text from a given image using OCR.\"}"}
{"api_id": 4, "api_name": "PIL.Image.open", "task_id": "BigCodeBench/1019", "solution": "{\n  \"name\": \"openImage\",\n  \"type\": \"function\",\n  \"signature\": \"(filePath) -> 'Image'\",\n  \"return_type\": \"PIL.Image.Image\",\n  \"short_description\": \"Opens and identifies the image file at the given file path.\"\n}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generate_aes_key\", \"type\": \"function\", \"signature\": \"(length=16)\", \"return_type\": \"bytes\", \"short_description\": \"Generates a random AES key of the specified length. Default is 16 bytes (128 bits).\" }"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateRandomKey\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"bytes\", \"short_description\": \"Generates a cryptographically secure random key of 32 bytes.\"}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generate_rsa_keys\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"tuple(public_key, private_key)\", \"short_description\": \"Generates a new RSA key pair consisting of a public key and a private key.\"}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generate_key_pair\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"tuple(public_key, private_key)\", \"short_description\": \"Generates a new RSA key pair consisting of a public and a private key.\"}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"(length)\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of the specified length.\"}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"(length)\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of a specified length.\"}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"(length)\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of a specified length.\"}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/583", "solution": "{\n  \"name\": \"generate_aes_key\",\n  \"type\": \"function\",\n  \"signature\": \"()\",\n  \"return_type\": \"bytes\",\n  \"short_description\": \"Generates a random AES key suitable for use in encryption and decryption operations.\"\n}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generate_rsa_keys\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"Tuple[rsa.PublicKey, rsa.PrivateKey]\", \"short_description\": \"Generates a pair of RSA public and private keys.\"}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"(length)\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of the specified length.\"}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_rsa_keys\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"tuple\", \"short_description\": \"Generate a pair of RSA public and private keys.\"}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/587", "solution": "{\n  \"name\": \"generate_key_pair\",\n  \"type\": \"function\",\n  \"signature\": \"()\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generate a new RSA key pair.\"\n}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_secure_keys\", \"type\": \"function\", \"signature\": \"(key_size)\", \"return_type\": \"tuple\", \"short_description\": \"Generate a pair of RSA public and private keys of a specified size.\"}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_secure_key_pair\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"tuple\", \"short_description\": \"Generates a new RSA key pair for secure encryption and decryption.\"}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_aes_key\", \"type\": \"function\", \"signature\": \"(key_size, backend)\", \"return_type\": \"bytes\", \"short_description\": \"Generates a random AES key of the specified size using the provided backend.\"}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/587", "solution": "{\n  \"name\": \"generate_aes_key\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path, key_size=512)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a new AES key, encrypts it using RSA, and prepares the encrypted key and file paths for further processing.\"\n}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_secure_key\", \"type\": \"function\", \"signature\": \"(length)\", \"return_type\": \"bytes\", \"short_description\": \"Generates a secure random key of specified length.\"}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_rsa_keys\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"tuple\", \"short_description\": \"Generates a pair of RSA public and private keys.\"}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_encrypted_file\", \"type\": \"function\", \"signature\": \"(file_path, public_key)\", \"return_type\": \"tuple(PublicKey, str, str)\", \"short_description\": \"Encrypts a file using AES and RSA encryption, returning the public key, the path to the encrypted file, and the path to the encrypted AES key.\"}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_aes_key\", \"type\": \"function\", \"signature\": \"(key_size: int, backend: default_backend)\", \"return_type\": \"bytes\", \"short_description\": \"Generates a random AES key of the specified size using the provided backend.\"}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/990", "solution": "{\n  \"name\": \"encode_to_base64\",\n  \"type\": \"function\",\n  \"signature\": \"(input_string, altchars=None)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Encode the input string using Base64 and return the encoded string. Optionally, specify an alternative alphabet for '+' and '/' characters.\"\n}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"generate_unique_id\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique string identifier.\"}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"generate_short_url\", \"type\": \"function\", \"signature\": \"(long_url)\", \"return_type\": \"str\", \"short_description\": \"Creates a shortened URL from a given long URL using a fictitious URL shortening service.\"}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"encodeToBase64\", \"type\": \"callable\", \"signature\": \"(input_string)\", \"return_type\": \"str\", \"short_description\": \"Encodes the given input string to Base64 format.\"}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"encode_to_base64\", \"type\": \"callable\", \"signature\": \"(input_string)\", \"return_type\": \"str\", \"short_description\": \"Encodes the given input string to its Base64 representation.\"}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"encodeToBase64\", \"type\": \"function\", \"signature\": \"(input_string, altchars=None)\", \"return_type\": \"str\", \"short_description\": \"Encodes the given input string to a Base64 encoded string. Optionally uses an alternative alphabet for '+' and '/' characters.\"}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"encodeToBase64\", \"type\": \"function\", \"signature\": \"(input_string)\", \"return_type\": \"str\", \"short_description\": \"Encodes the given input string to Base64 format.\"}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"encodeToBase64\", \"type\": \"callable\", \"signature\": \"(input_string)\", \"return_type\": \"str\", \"short_description\": \"Encodes the input string to a Base64 encoded string.\"}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"url_safe_base64_encode\", \"type\": \"callable\", \"signature\": \"(s)\", \"return_type\": \"str\", \"short_description\": \"Encode the bytes-like object s using Base64 and return a URL-safe string.\"}"}
{"api_id": 5, "api_name": "base64.b64encode", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"encode_to_hex\", \"type\": \"callable\", \"signature\": \"(s)\", \"return_type\": \"str\", \"short_description\": \"Converts the input string to its hexadecimal representation.\"}"}
{"api_id": 6, "api_name": "binascii.hexlify", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"encode_hex\", \"type\": \"callable\", \"signature\": \"(data: bytes) -> bytes\", \"return_type\": \"bytes\", \"short_description\": \"Converts binary data to its hexadecimal representation.\"}"}
{"api_id": 6, "api_name": "binascii.hexlify", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"encodeToAllFormats\", \"type\": \"function\", \"signature\": \"(str: hex_string) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Encodes the input string to all supported encodings including hexadecimal, base64, URL encoding, and more.\"}"}
{"api_id": 6, "api_name": "binascii.hexlify", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"string_to_bytes\", \"type\": \"function\", \"signature\": \"string\", \"return_type\": \"bytes\", \"short_description\": \"Converts a string to a bytes object.\"}"}
{"api_id": 6, "api_name": "binascii.hexlify", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"encode_to_hex\", \"type\": \"function\", \"signature\": \"encode_to_hex(data: bytes) -> bytes\", \"return_type\": \"bytes\", \"short_description\": \"Converts binary data to its hexadecimal representation.\"}"}
{"api_id": 6, "api_name": "binascii.hexlify", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"encode_hex\", \"type\": \"function\", \"signature\": \"(data: bytes) -> bytes\", \"return_type\": \"bytes\", \"short_description\": \"Converts binary data to its hexadecimal representation.\"}"}
{"api_id": 6, "api_name": "binascii.hexlify", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"encode_hex\", \"type\": \"function\", \"signature\": \"encode_hex(data: bytes) -> bytes\", \"return_type\": \"bytes\", \"short_description\": \"Converts binary data to its hexadecimal representation.\"}"}
{"api_id": 6, "api_name": "binascii.hexlify", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"base64Encode\", \"type\": \"callable\", \"signature\": \"(data: bytes) -> bytes\", \"return_type\": \"bytes\", \"short_description\": \"Encodes the given binary data using Base64 encoding.\"}"}
{"api_id": 6, "api_name": "binascii.hexlify", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"stringToHex\", \"type\": \"function\", \"signature\": \"stringToHex(input_string: str) -> bytes\", \"return_type\": \"bytes\", \"short_description\": \"Converts a given string to its hexadecimal representation.\"}"}
{"api_id": 6, "api_name": "binascii.hexlify", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"encode_hex\", \"type\": \"callable\", \"signature\": \"bytes_data\", \"return_type\": \"str\", \"short_description\": \"Returns the hexadecimal representation of the given bytes data.\"}"}
{"api_id": 6, "api_name": "binascii.hexlify", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"encode_string\", \"type\": \"function\", \"signature\": \"encode_string(data: str, encoding: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Encodes a given string to a specified encoding scheme.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"parseHtmlToDataFrame\", \"type\": \"function\", \"signature\": \"(markup, features='html.parser')\", \"return_type\": \"pandas.core.frame.DataFrame\", \"short_description\": \"Parses HTML markup into a pandas DataFrame.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"parseHtmlToDataFrame\", \"type\": \"function\", \"signature\": \"(markup, features='html.parser')\", \"return_type\": \"pandas.core.frame.DataFrame\", \"short_description\": \"Parses HTML markup into a pandas DataFrame for easy tabular data extraction.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"extractTableData\", \"type\": \"function\", \"signature\": \"(markup, features=None)\", \"return_type\": \"DataFrame\", \"short_description\": \"Extracts table data from HTML markup and returns it as a DataFrame.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"parseHtmlTable\", \"type\": \"function\", \"signature\": \"(html, parser='html.parser')\", \"return_type\": \"BeautifulSoup\", \"short_description\": \"Parses an HTML document and returns a BeautifulSoup object containing the parsed document.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"parseHtmlToDataFrame\", \"type\": \"function\", \"signature\": \"(markup, features=None)\", \"return_type\": \"pandas.core.frame.DataFrame\", \"short_description\": \"Parses HTML markup into a DataFrame for easier data manipulation.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"parseHtmlTable\", \"type\": \"function\", \"signature\": \"(markup, features=None)\", \"return_type\": \"BeautifulSoup\", \"short_description\": \"Parses HTML markup to extract a table and return it as a BeautifulSoup object.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/129", "solution": "{\n  \"name\": \"parseHtmlTable\",\n  \"type\": \"function\",\n  \"signature\": \"(markup, features=None)\",\n  \"return_type\": \"BeautifulSoup\",\n  \"short_description\": \"Parses HTML markup to extract the first table found and returns a BeautifulSoup object containing the parsed document.\"\n}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/129", "solution": "{\n  \"name\": \"parseHtmlToDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(markup, features=None)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Parses HTML markup into a pandas DataFrame for easier data manipulation.\"\n}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"parseHtmlToDataFrame\", \"type\": \"function\", \"signature\": \"(markup, features=None)\", \"return_type\": \"DataFrame\", \"short_description\": \"Parses HTML markup into a pandas DataFrame.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"extractTableData\", \"type\": \"function\", \"signature\": \"(soup)\", \"return_type\": \"DataFrame\", \"short_description\": \"Extracts table data from a BeautifulSoup object and returns it as a pandas DataFrame.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/723", "solution": "{\n  \"name\": \"scrapeData\",\n  \"type\": \"function\",\n  \"signature\": \"(url, parser='html.parser')\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Scrapes data from a given URL and saves it to a CSV file.\"\n}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"scrapeData\", \"type\": \"function\", \"signature\": \"(url, parser='html.parser')\", \"return_type\": \"str\", \"short_description\": \"Scrapes data from a given URL and saves it to a CSV file.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/723", "solution": "{\n  \"name\": \"parseHtml\",\n  \"type\": \"function\",\n  \"signature\": \"(markup, features=None)\",\n  \"return_type\": \"BeautifulSoup\",\n  \"short_description\": \"Parses the provided HTML markup and returns a BeautifulSoup object.\"\n}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/723", "solution": "{\n  \"name\": \"extractTableData\",\n  \"type\": \"function\",\n  \"signature\": \"(soup, tableSelector)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Extracts table data from an HTML document parsed by BeautifulSoup using a specified CSS selector.\"\n}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"parseHtml\", \"type\": \"function\", \"signature\": \"(markup, features=None)\", \"return_type\": \"BeautifulSoup\", \"short_description\": \"Parses the provided HTML markup and returns a BeautifulSoup object.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"fetchAndParseHtml\", \"type\": \"function\", \"signature\": \"(url, parser='html.parser')\", \"return_type\": \"BeautifulSoup\", \"short_description\": \"Fetches HTML content from the provided URL and parses it using BeautifulSoup with the specified parser.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"extractTableData\", \"type\": \"function\", \"signature\": \"(soup)\", \"return_type\": \"list\", \"short_description\": \"Extracts table data from a BeautifulSoup object and returns it as a list of lists.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/723", "solution": "{\n  \"name\": \"parseHtml\",\n  \"type\": \"function\",\n  \"signature\": \"(markup, features=None)\",\n  \"return_type\": \"BeautifulSoup\",\n  \"short_description\": \"Parses HTML markup and returns a BeautifulSoup object.\"\n}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"parseHtml\", \"type\": \"function\", \"signature\": \"(markup, features=None)\", \"return_type\": \"BeautifulSoup\", \"short_description\": \"Parses the provided HTML markup and returns a BeautifulSoup object for further manipulation.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"parseHtmlToCsv\", \"type\": \"function\", \"signature\": \"(htmlString, csvFilePath)\", \"return_type\": \"str\", \"short_description\": \"Parses HTML content and writes it to a CSV file.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1008", "solution": "{\n  \"name\": \"parseHtmlTable\",\n  \"type\": \"function\",\n  \"signature\": \"parseHtmlTable(markup, features=None, builder=None, parse_only=None, from_encoding=None, exclude_encodings=None, element_classes=None, **kwargs)\",\n  \"return_type\": \"BeautifulSoup\",\n  \"short_description\": \"Parses HTML markup and extracts tables, providing a high-level interface for navigating, searching, and modifying the parse tree.\"\n}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1008", "solution": "{\n  \"name\": \"parseHtmlDocument\",\n  \"type\": \"function\",\n  \"signature\": \"(markup='', features=None, builder=None, parse_only=None, from_encoding=None, exclude_encodings=None, element_classes=None, **kwargs)\",\n  \"return_type\": \"BeautifulSoup\",\n  \"short_description\": \"Parses an HTML or XML document and returns a BeautifulSoup object for further manipulation.\"\n}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"parseHtmlTable\", \"type\": \"function\", \"signature\": \"(markup, features=None, builder=None, parse_only=None, from_encoding=None, exclude_encodings=None, element_classes=None, **kwargs)\", \"return_type\": \"BeautifulSoup\", \"short_description\": \"Parses HTML markup and returns a BeautifulSoup object with the parsed document.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"parseHtml\", \"type\": \"function\", \"signature\": \"(markup, features=None)\", \"return_type\": \"BeautifulSoup\", \"short_description\": \"Parses HTML markup and returns a BeautifulSoup object for further manipulation.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1008", "solution": "{\n  \"name\": \"parseHtmlTable\",\n  \"type\": \"function\",\n  \"signature\": \"(html, table_id)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Parses HTML content to extract a table with the specified ID and returns it as a DataFrame.\"\n}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1008", "solution": "{\n  \"name\": \"parseHtml\",\n  \"type\": \"function\",\n  \"signature\": \"(markup, features=None, builder=None, parse_only=None, from_encoding=None, exclude_encodings=None, element_classes=None, **kwargs)\",\n  \"return_type\": \"BeautifulSoup\",\n  \"short_description\": \"Parses HTML or XML markup and returns a BeautifulSoup object for further manipulation.\"\n}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"parseHtmlTable\", \"type\": \"function\", \"signature\": \"(markup, features=None)\", \"return_type\": \"BeautifulSoup\", \"short_description\": \"Parses the HTML markup to extract a BeautifulSoup object for further manipulation.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"parseHtmlTable\", \"type\": \"function\", \"signature\": \"(markup, features=None)\", \"return_type\": \"BeautifulSoup\", \"short_description\": \"Parses HTML markup to extract a table identified by its features and returns a BeautifulSoup object.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1008", "solution": "{\n  \"name\": \"parseHtmlTable\",\n  \"type\": \"function\",\n  \"signature\": \"(markup, features=None, builder=None, parse_only=None, from_encoding=None, exclude_encodings=None, element_classes=None, **kwargs)\",\n  \"return_type\": \"BeautifulSoup\",\n  \"short_description\": \"Parses HTML markup and extracts the first table found with the specified features.\"\n}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"fetchHtmlTable\", \"type\": \"function\", \"signature\": \"(url, tableId)\", \"return_type\": \"DataFrame\", \"short_description\": \"Fetches and parses an HTML table from a given URL based on its ID.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"fetchAndParseHTML\", \"type\": \"function\", \"signature\": \"(url, features='html.parser')\", \"return_type\": \"BeautifulSoup\", \"short_description\": \"Fetches and parses HTML content from a given URL using BeautifulSoup.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1013", "solution": "{\n  \"name\": \"scrapeWebsite\",\n  \"type\": \"function\",\n  \"signature\": \"(url, baseUrl='https://www.example.com', outputFile='scraped_data.csv')\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Scrapes a website for all links and saves them to a CSV file.\"\n}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1013", "solution": "{\n  \"name\": \"scrapeWebsite\",\n  \"type\": \"function\",\n  \"signature\": \"(url, baseUrl='https://www.example.com', outputFile='scraped_data.csv')\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Scrapes a website for links and saves them to a CSV file.\"\n}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"extractHtmlData\", \"type\": \"function\", \"signature\": \"(soup, tag_name, attribute)\", \"return_type\": \"list\", \"short_description\": \"Extracts data from specified HTML tag with a given attribute and returns a list of values.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"fetchHtmlContent\", \"type\": \"function\", \"signature\": \"(url, features=None)\", \"return_type\": \"BeautifulSoup\", \"short_description\": \"Fetches the HTML content of a given URL and parses it using BeautifulSoup.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1013", "solution": "{\n  \"name\": \"fetchAndParse\",\n  \"type\": \"function\",\n  \"signature\": \"(url, parser='html.parser')\",\n  \"return_type\": \"BeautifulSoup\",\n  \"short_description\": \"Fetches and parses the HTML content of a given URL using the specified parser.\"\n}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1013", "solution": "{\n  \"name\": \"extractHtmlData\",\n  \"type\": \"function\",\n  \"signature\": \"(markup='', features=None, builder=None, parse_only=None, from_encoding=None, exclude_encodings=None, element_classes=None, **kwargs)\",\n  \"return_type\": \"BeautifulSoup\",\n  \"short_description\": \"Parses HTML or XML markup and returns a BeautifulSoup object for further manipulation.\"\n}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"extractLinks\", \"type\": \"function\", \"signature\": \"(soup, baseUrl)\", \"return_type\": \"Set[str]\", \"short_description\": \"Extracts all links from a BeautifulSoup object and returns them as absolute URLs relative to a base URL.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"fetchAndParseHtml\", \"type\": \"function\", \"signature\": \"(url, parser='html.parser')\", \"return_type\": \"BeautifulSoup\", \"short_description\": \"Fetches and parses HTML content from a given URL using a specified parser.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"extractLinks\", \"type\": \"function\", \"signature\": \"(soup, baseUrl)\", \"return_type\": \"Set[str]\", \"short_description\": \"Extracts all links from a BeautifulSoup object and returns them as a set of absolute URLs.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"fetchWebpageTitle\", \"type\": \"function\", \"signature\": \"(url, headers)\", \"return_type\": \"str\", \"short_description\": \"Fetches the title of a webpage given its URL and optional headers.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1124", "solution": "{\n  \"name\": \"extractWebpageTitle\",\n  \"type\": \"function\",\n  \"signature\": \"(url, headers)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Extracts the title from a webpage given its URL and headers.\"\n}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"extractWebpageTitle\", \"type\": \"function\", \"signature\": \"(url, headers)\", \"return_type\": \"str\", \"short_description\": \"Extracts the title from a webpage given its URL and headers.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1124", "solution": "{\n  \"name\": \"fetchWebpageContent\",\n  \"type\": \"function\",\n  \"signature\": \"(url, userAgent)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Fetches the content of a webpage and returns it as a string.\"\n}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"extractWebpageTitle\", \"type\": \"function\", \"signature\": \"(url, headers)\", \"return_type\": \"str\", \"short_description\": \"Extracts the title from a webpage given its URL and optional headers.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1124", "solution": "{\n  \"name\": \"extractWebpageTitle\",\n  \"type\": \"function\",\n  \"signature\": \"(url, headers)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Extracts the title from a given webpage using its URL.\"\n}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"extractWebpageTitle\", \"type\": \"function\", \"signature\": \"(markup, parser='html.parser') -> str\", \"return_type\": \"str\", \"short_description\": \"Extracts the title from the provided webpage markup using BeautifulSoup.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"fetchWebpageTitle\", \"type\": \"function\", \"signature\": \"(url, userAgent='Mozilla/5.0')\", \"return_type\": \"str\", \"short_description\": \"Fetches the title of a webpage given its URL and a user agent string.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1124", "solution": "{\n  \"name\": \"fetchWebpageContent\",\n  \"type\": \"function\",\n  \"signature\": \"(url, headers={})\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Fetches the content of a webpage given its URL and optional headers.\"\n}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1124", "solution": "{\n  \"name\": \"extractWebpageTitle\",\n  \"type\": \"function\",\n  \"signature\": \"(url, headers={})\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Extracts the title of a webpage given its URL.\"\n}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"extractPhoneNumbers\", \"type\": \"function\", \"signature\": \"(text: str) -> list\", \"return_type\": \"list\", \"short_description\": \"Extracts phone numbers from a given text using a regular expression.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"extractPhoneNumbers\", \"type\": \"function\", \"signature\": \"(text: str) -> list\", \"return_type\": \"list\", \"short_description\": \"Extracts phone numbers from a given text using regular expressions.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"scrapeWebsite\", \"type\": \"function\", \"signature\": \"(url, output_path)\", \"return_type\": \"list\", \"short_description\": \"Scrapes a website for phone numbers and saves them to a JSON file.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"parseHtml\", \"type\": \"function\", \"signature\": \"(html_content, parser='html.parser')\", \"return_type\": \"bs4.BeautifulSoup\", \"short_description\": \"Parses the given HTML content and returns a BeautifulSoup object using the specified parser.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"extractPhoneNumbers\", \"type\": \"function\", \"signature\": \"(text: str) -> list\", \"return_type\": \"list\", \"short_description\": \"Extracts phone numbers from the given text using a regular expression.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"extractPhoneNumbers\", \"type\": \"function\", \"signature\": \"(text: str) -> list\", \"return_type\": \"list\", \"short_description\": \"Extracts phone numbers from a given text using regex.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"extractPhoneNumbers\", \"type\": \"function\", \"signature\": \"(text: str) -> list\", \"return_type\": \"list\", \"short_description\": \"Extracts phone numbers from a given text using regular expressions.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"extractPhoneNumbers\", \"type\": \"function\", \"signature\": \"(text: str) -> list\", \"return_type\": \"list\", \"short_description\": \"Extracts phone numbers from a given text using a regular expression.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"extractPhoneNumbers\", \"type\": \"function\", \"signature\": \"(text: str) -> list\", \"return_type\": \"list\", \"short_description\": \"Extracts phone numbers from the provided text using a regular expression.\"}"}
{"api_id": 7, "api_name": "bs4.BeautifulSoup", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"extractPhoneNumbers\", \"type\": \"function\", \"signature\": \"(text: str) -> list\", \"return_type\": \"list\", \"short_description\": \"Extracts phone numbers from a given text using regular expressions.\"}"}
{"api_id": 8, "api_name": "cgi.parse_header", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseHeader\", \"type\": \"callable\", \"signature\": \"(headerString)\", \"return_type\": \"dict\", \"short_description\": \"Parses a header string and returns a dictionary of key-value pairs.\"}"}
{"api_id": 8, "api_name": "cgi.parse_header", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseHeader\", \"type\": \"callable\", \"signature\": \"(headerStr)\", \"return_type\": \"tuple\", \"short_description\": \"Parses a HTTP header string and returns the main content-type and a dictionary of options.\"}"}
{"api_id": 8, "api_name": "cgi.parse_header", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseHeader\", \"type\": \"callable\", \"signature\": \"(header)\", \"return_type\": \"dict\", \"short_description\": \"Parses a HTTP header string and returns a dictionary of key-value pairs.\"}"}
{"api_id": 8, "api_name": "cgi.parse_header", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseHeader\", \"type\": \"function\", \"signature\": \"(header)\", \"return_type\": \"tuple\", \"short_description\": \"Parses a HTTP header and returns the main content-type and a dictionary of options.\"}"}
{"api_id": 8, "api_name": "cgi.parse_header", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseHeader\", \"type\": \"function\", \"signature\": \"(headerString)\", \"return_type\": \"tuple\", \"short_description\": \"Parses a header string and returns the main content-type and a dictionary of options.\"}"}
{"api_id": 8, "api_name": "cgi.parse_header", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseHeader\", \"type\": \"callable\", \"signature\": \"(headerLine)\", \"return_type\": \"tuple\", \"short_description\": \"Parses a header line and returns the main content-type and a dictionary of options.\"}"}
{"api_id": 8, "api_name": "cgi.parse_header", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseHeader\", \"type\": \"function\", \"signature\": \"(headerString)\", \"return_type\": \"tuple\", \"short_description\": \"Parses a header string and returns the main content-type and a dictionary of options.\"}"}
{"api_id": 8, "api_name": "cgi.parse_header", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseHeader\", \"type\": \"function\", \"signature\": \"(headerLine)\", \"return_type\": \"tuple\", \"short_description\": \"Parses a Content-type like header and returns the main content-type and a dictionary of options.\"}"}
{"api_id": 8, "api_name": "cgi.parse_header", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseContentTypeHeader\", \"type\": \"function\", \"signature\": \"(header)\", \"return_type\": \"tuple[str, dict]\", \"short_description\": \"Parses a Content-Type like header and returns the main content-type and a dictionary of options.\"}"}
{"api_id": 8, "api_name": "cgi.parse_header", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseHeader\", \"type\": \"callable\", \"signature\": \"(headerString)\", \"return_type\": \"tuple\", \"short_description\": \"Parses a header string and returns a tuple containing the main content-type and a dictionary of options.\"}"}
{"api_id": 8, "api_name": "cgi.parse_header", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parse_content_type\", \"type\": \"function\", \"signature\": \"(header_line)\", \"return_type\": \"tuple\", \"short_description\": \"Parses a Content-type like header and returns the main content-type and a dictionary of options.\"}"}
{"api_id": 8, "api_name": "cgi.parse_header", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parse_content_type\", \"type\": \"function\", \"signature\": \"(header_line)\", \"return_type\": \"tuple\", \"short_description\": \"Parses a Content-Type like header and returns the main content-type and a dictionary of options.\"}"}
{"api_id": 8, "api_name": "cgi.parse_header", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parse_content_type\", \"type\": \"function\", \"signature\": \"(header_line)\", \"return_type\": \"tuple[str, dict]\", \"short_description\": \"Parses a Content-Type like header and returns the main content-type and a dictionary of options.\"}"}
{"api_id": 8, "api_name": "cgi.parse_header", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parse_content_type\", \"type\": \"function\", \"signature\": \"(header_line)\", \"return_type\": \"tuple[str, dict]\", \"short_description\": \"Parses a Content-type like header and returns the main content-type and a dictionary of options.\"}"}
{"api_id": 8, "api_name": "cgi.parse_header", "task_id": "BigCodeBench/274", "solution": "{\n  \"name\": \"parse_content_type\",\n  \"type\": \"function\",\n  \"signature\": \"(header)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Parses a Content-type like header and returns the main content-type and a dictionary of options.\"\n}"}
{"api_id": 8, "api_name": "cgi.parse_header", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parse_content_type\", \"type\": \"function\", \"signature\": \"(header_line)\", \"return_type\": \"tuple\", \"short_description\": \"Parses a Content-type like header and returns the main content-type and a dictionary of options.\"}"}
{"api_id": 8, "api_name": "cgi.parse_header", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parse_content_type\", \"type\": \"function\", \"signature\": \"(header_line)\", \"return_type\": \"tuple\", \"short_description\": \"Parses a Content-Type like header and returns the main content type and a dictionary of options.\"}"}
{"api_id": 8, "api_name": "cgi.parse_header", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parse_content_type\", \"type\": \"function\", \"signature\": \"(header_line)\", \"return_type\": \"tuple\", \"short_description\": \"Parses a Content-type like header and returns the main content-type and a dictionary of options.\"}"}
{"api_id": 8, "api_name": "cgi.parse_header", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parse_content_header\", \"type\": \"callable\", \"signature\": \"(header_line)\", \"return_type\": \"tuple[str, dict[str, str]]\", \"short_description\": \"Parses a Content-type like header and returns the main content-type and a dictionary of options.\"}"}
{"api_id": 8, "api_name": "cgi.parse_header", "task_id": "BigCodeBench/274", "solution": "{\n  \"name\": \"parse_content_type\",\n  \"type\": \"function\",\n  \"signature\": \"(header_line)\",\n  \"return_type\": \"tuple[str, dict]\",\n  \"short_description\": \"Parses a Content-type like header and returns the main content-type and a dictionary of options.\"\n}"}
{"api_id": 9, "api_name": "chardet.detect", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"get_encoding\", \"type\": \"function\", \"signature\": \"(byte_str: Union[bytes, bytearray]) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Detect and return the encoding of the given byte string.\"}"}
{"api_id": 9, "api_name": "chardet.detect", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"detect_encoding\", \"type\": \"callable\", \"signature\": \"(byte_str: Union[bytes, bytearray]) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Detects the encoding of the given byte string and returns the result as a dictionary.\"}"}
{"api_id": 9, "api_name": "chardet.detect", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"get_data_with_encoding\", \"type\": \"function\", \"signature\": \"(url: str, from_encoding: str = None, to_encoding: str = 'utf8') -> dict\", \"return_type\": \"dict\", \"short_description\": \"Retrieves and decodes data from a given URL, allowing for encoding conversion.\"}"}
{"api_id": 9, "api_name": "chardet.detect", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"validate_json\", \"type\": \"callable\", \"signature\": \"(content: Union[str, bytes], encoding: str = 'utf-8') -> dict\", \"return_type\": \"dict\", \"short_description\": \"Validates and decodes JSON content from a byte string or string, with optional encoding specified.\"}"}
{"api_id": 9, "api_name": "chardet.detect", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"calculate_string_hash\", \"type\": \"callable\", \"signature\": \"(input_str: str) -> int\", \"return_type\": \"int\", \"short_description\": \"Calculates a hash value for the given string using a cryptographic hash function.\"}"}
{"api_id": 9, "api_name": "chardet.detect", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"get_data_encoding\", \"type\": \"function\", \"signature\": \"(url: str, from_encoding: str = None, to_encoding: str = 'utf8') -> dict\", \"return_type\": \"dict\", \"short_description\": \"Fetches data from the given URL and attempts to convert its encoding.\"}"}
{"api_id": 9, "api_name": "chardet.detect", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"get_encoding\", \"type\": \"callable\", \"signature\": \"(byte_str: Union[bytes, bytearray]) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Detect the encoding of the given byte string and return a dictionary with the detected encoding.\"}"}
{"api_id": 9, "api_name": "chardet.detect", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"encode_decode\", \"type\": \"function\", \"signature\": \"(data: Union[str, bytes], from_encoding: str = None, to_encoding: str, should_rename_legacy: bool = False) -> Union[str, bytes]\", \"return_type\": \"Union[str, bytes]\", \"short_description\": \"This function encodes and decodes data from one encoding to another, with optional support for legacy encoding name renaming.\"}"}
{"api_id": 9, "api_name": "chardet.detect", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"get_json_data\", \"type\": \"function\", \"signature\": \"(url: str, from_encoding: str = None, to_encoding: str = 'utf8') -> dict\", \"return_type\": \"dict\", \"short_description\": \"Retrieves JSON data from a given URL, optionally converting the content encoding.\"}"}
{"api_id": 9, "api_name": "chardet.detect", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"detectEncoding\", \"type\": \"function\", \"signature\": \"(byteStr: Union[bytes, bytearray]) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Detects the encoding of the given byte string and returns the result as a dictionary.\"}"}
{"api_id": 10, "api_name": "codecs.decode", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"extract_text_from_image\", \"type\": \"callable\", \"signature\": \"(image_path, src_encoding='cp1251', target_encoding='utf-8')\", \"return_type\": \"str\", \"short_description\": \"Extracts and decodes text from an image file using OCR, with encoding options.\"}"}
{"api_id": 10, "api_name": "codecs.decode", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"extract_text_from_image\", \"type\": \"function\", \"signature\": \"(image_path, from_encoding='cp1251', to_encoding='utf8')\", \"return_type\": \"str\", \"short_description\": \"Extracts and decodes text from an image using OCR and handles image comments.\"}"}
{"api_id": 10, "api_name": "codecs.decode", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"extract_text_from_image\", \"type\": \"function\", \"signature\": \"(image_path, from_encoding, to_encoding)\", \"return_type\": \"str\", \"short_description\": \"Extracts and decodes text from an image using OCR and handles image comments for text extraction.\"}"}
{"api_id": 10, "api_name": "codecs.decode", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"extract_text_from_image\", \"type\": \"function\", \"signature\": \"(image_path, source_encoding='cp1251', target_encoding='utf8')\", \"return_type\": \"str\", \"short_description\": \"Extracts and decodes text from an image using OCR, with optional encoding conversion.\"}"}
{"api_id": 10, "api_name": "codecs.decode", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"convert_text_encoding\", \"type\": \"function\", \"signature\": \"(text, from_encoding, to_encoding)\", \"return_type\": \"str\", \"short_description\": \"Converts the text from one encoding to another.\"}"}
{"api_id": 10, "api_name": "codecs.decode", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"extract_text_from_image\", \"type\": \"function\", \"signature\": \"(image_path, source_encoding='cp1251', target_encoding='utf8')\", \"return_type\": \"str\", \"short_description\": \"Extracts and decodes text from an image using OCR, with optional encoding conversion.\"}"}
{"api_id": 10, "api_name": "codecs.decode", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"extract_text_from_image\", \"type\": \"function\", \"signature\": \"(image_path, from_encoding, to_encoding)\", \"return_type\": \"str\", \"short_description\": \"Extracts and decodes text from an image using OCR and handles encoding conversion.\"}"}
{"api_id": 10, "api_name": "codecs.decode", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"extract_text_from_image\", \"type\": \"callable\", \"signature\": \"(image_path, source_encoding='cp1251', target_encoding='utf-8')\", \"return_type\": \"str\", \"short_description\": \"Extracts and decodes text from an image file using OCR and optionally converts the text encoding.\"}"}
{"api_id": 10, "api_name": "codecs.decode", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"extract_text_from_image\", \"type\": \"callable\", \"signature\": \"(image_path, from_encoding, to_encoding)\", \"return_type\": \"str\", \"short_description\": \"Extracts and decodes text from an image using OCR, with encoding conversion.\"}"}
{"api_id": 10, "api_name": "codecs.decode", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"extract_text_from_image\", \"type\": \"function\", \"signature\": \"(image_path, src_encoding, target_encoding)\", \"return_type\": \"str\", \"short_description\": \"Extracts and decodes text from an image file using OCR, with optional encoding conversion.\"}"}
{"api_id": 11, "api_name": "codecs.encode", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generate_data\", \"type\": \"function\", \"signature\": \"(start_year, end_year, email_domain, latin_names, other_names, rng_seed)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame with synthetic personal data, including Latin and non-Latin names, email addresses, and dates of birth within a specified range.\"}"}
{"api_id": 11, "api_name": "codecs.encode", "task_id": "BigCodeBench/760", "solution": "{\n  \"name\": \"generate_data\",\n  \"type\": \"function\",\n  \"signature\": \"(start_year=1980, end_year=2000, email_domain='example.com', latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'], other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], rng_seed=None)\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a DataFrame containing synthetic personal data including names, birth years, and email addresses.\"\n}"}
{"api_id": 11, "api_name": "codecs.encode", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generate_data\", \"type\": \"function\", \"signature\": \"(start_year, end_year, email_domain, latin_names, other_names, rng_seed)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame containing synthetic personal data including names, dates of birth, and emails based on specified parameters.\"}"}
{"api_id": 11, "api_name": "codecs.encode", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(startYear, endYear, emailDomain, latinNames, otherNames, rngSeed)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame with random person data, including names, dates of birth, and emails, categorized by whether the name is Latin-based or not.\"}"}
{"api_id": 11, "api_name": "codecs.encode", "task_id": "BigCodeBench/760", "solution": "{\n  \"name\": \"generate_random_data\",\n  \"type\": \"function\",\n  \"signature\": \"(start_year=1980, end_year=2000, email_domain='example.com', latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'], other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], rng_seed=None)\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a DataFrame containing random data with names, dates of birth, and email addresses.\"\n}"}
{"api_id": 11, "api_name": "codecs.encode", "task_id": "BigCodeBench/760", "solution": "{\n  \"name\": \"generate_data\",\n  \"type\": \"function\",\n  \"signature\": \"(start_year=1980, end_year=2000, email_domain='example.com', latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'], other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], rng_seed=None)\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a DataFrame containing synthetic personal data, including IDs, names, dates of birth, and emails, with options to specify name domains and random seed.\"\n}"}
{"api_id": 11, "api_name": "codecs.encode", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(startYear=1980, endYear=2000, emailDomain='example.com', latinNames=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'], otherNames=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], rngSeed=None)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random data including names, dates of birth, and emails.\"}"}
{"api_id": 11, "api_name": "codecs.encode", "task_id": "BigCodeBench/760", "solution": "{\n  \"name\": \"generate_data\",\n  \"type\": \"function\",\n  \"signature\": \"(start_year=1980, end_year=2000, email_domain='example.com', latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'], other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], rng_seed=None)\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a DataFrame containing randomly created data with details such as name, date of birth, and email.\"\n}"}
{"api_id": 11, "api_name": "codecs.encode", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"normalizeEncoding\", \"type\": \"callable\", \"signature\": \"(text, encoding='utf-8', errors='strict')\", \"return_type\": \"str\", \"short_description\": \"Normalizes the encoding of a given text string to the specified encoding, handling errors by raising a ValueError by default.\"}"}
{"api_id": 11, "api_name": "codecs.encode", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generate_random_data\", \"type\": \"function\", \"signature\": \"(start_year=1980, end_year=2000, email_domain='example.com', latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'], other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], rng_seed=None)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random data including names, dates of birth, and emails.\"}"}
{"api_id": 11, "api_name": "codecs.encode", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"encode_string\", \"type\": \"callable\", \"signature\": \"(obj, encoding='utf-8', errors='strict')\", \"return_type\": \"str\", \"short_description\": \"Encodes the given object using the specified encoding. The default encoding is 'utf-8'. Errors can be handled using the 'errors' parameter.\"}"}
{"api_id": 11, "api_name": "codecs.encode", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"generate_encodings\", \"type\": \"function\", \"signature\": \"(input_str, target_encodings)\", \"return_type\": \"dict\", \"short_description\": \"Generates encodings for the given input string based on specified target encodings.\"}"}
{"api_id": 11, "api_name": "codecs.encode", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"generate_encodings\", \"type\": \"function\", \"signature\": \"(input_string, target_encodings)\", \"return_type\": \"dict\", \"short_description\": \"Generates encodings for the given input string using specified target encodings.\"}"}
{"api_id": 11, "api_name": "codecs.encode", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"generate_encodings\", \"type\": \"function\", \"signature\": \"(input_string, target_encodings=['hex', 'base64', 'utf-8', 'utf-16', 'utf-32', 'ascii', 'url', 'rot13'])\", \"return_type\": \"dict\", \"short_description\": \"Generates encodings for the given input string using specified target encodings.\"}"}
{"api_id": 11, "api_name": "codecs.encode", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"calculate_encodings\", \"type\": \"function\", \"signature\": \"(hex_string, encoding_type)\", \"return_type\": \"dict\", \"short_description\": \"Calculates various encodings for a given hex string.\"}"}
{"api_id": 11, "api_name": "codecs.encode", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"generate_encodings\", \"type\": \"function\", \"signature\": \"(input_string, target_encodings)\", \"return_type\": \"dict\", \"short_description\": \"Generates encodings for a given string using specified target encodings.\"}"}
{"api_id": 11, "api_name": "codecs.encode", "task_id": "BigCodeBench/990", "solution": "{\n  \"name\": \"encode_object\",\n  \"type\": \"callable\",\n  \"signature\": \"(obj, encoding='utf-8', errors='strict')\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Encodes the given object using the specified encoding. The default encoding is 'utf-8'. Errors can be handled using the 'errors' parameter.\"\n}"}
{"api_id": 11, "api_name": "codecs.encode", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"generate_encodings\", \"type\": \"function\", \"signature\": \"(obj, target_encoding='utf-8')\", \"return_type\": \"dict\", \"short_description\": \"Generates a dictionary of encoded strings for various encodings including hexadecimal, base64, URL encoding, and more.\"}"}
{"api_id": 11, "api_name": "codecs.encode", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"generate_encodings\", \"type\": \"function\", \"signature\": \"(string)\", \"return_type\": \"dict\", \"short_description\": \"Generates encodings for a given string including hexadecimal, base64, UTF-8, UTF-16, UTF-32, ASCII, URL encoding, and ROT13.\"}"}
{"api_id": 11, "api_name": "codecs.encode", "task_id": "BigCodeBench/990", "solution": "{\"name\": \"encode_string\", \"type\": \"callable\", \"signature\": \"(string, encoding='utf-8')\", \"return_type\": \"str\", \"short_description\": \"Encodes the input string using the specified encoding. Supports UTF-8, base64, hexadecimal, and URL encoding.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/367", "solution": "{\"name\": \"calculateWeeklyActivityCounts\", \"type\": \"function\", \"signature\": \"def calculateWeeklyActivityCounts(activities: list[datetime]) -> dict[str, int]:\", \"return_type\": \"dict[str, int]\", \"short_description\": \"Calculates the number of activities for each day of the week.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/367", "solution": "{\"name\": \"generateWeeklyActivityChart\", \"type\": \"function\", \"signature\": \"def generateWeeklyActivityChart(activities)\", \"return_type\": \"None\", \"short_description\": \"Generates a bar chart showing the number of activities per day of the week.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/367", "solution": "{\"name\": \"calculateWeeklyActivity\", \"type\": \"function\", \"signature\": \"def calculateWeeklyActivity(activities: list[datetime]) -> dict[str, int]\", \"return_type\": \"dict[str, int]\", \"short_description\": \"Calculates the number of activities for each day of the week.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/367", "solution": "{\"name\": \"calculateWeeklyActivity\", \"type\": \"function\", \"signature\": \"calculateWeeklyActivity(activities: List[datetime]) -> Dict[str, int]\", \"return_type\": \"Dict[str, int]\", \"short_description\": \"Calculates the number of activities for each day of the week from a list of datetime objects.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/367", "solution": "{\"name\": \"generateWeeklyActivityChart\", \"type\": \"function\", \"signature\": \"def generateWeeklyActivityChart(activities)\", \"return_type\": \"ax\", \"short_description\": \"Generates a bar chart displaying the number of activities per day of the week.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/367", "solution": "{\"name\": \"calculateWeeklyActivity\", \"type\": \"function\", \"signature\": \"calculateWeeklyActivity(activities: list[datetime]) -> dict[str, int]\", \"return_type\": \"dict[str, int]\", \"short_description\": \"Calculates the number of activities per day of the week from a list of datetime objects.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/367", "solution": "{\"name\": \"generateWeeklyActivityPlot\", \"type\": \"function\", \"signature\": \"def generateWeeklyActivityPlot(activities)\", \"return_type\": \"ax\", \"short_description\": \"Generates a bar plot showing the number of activities for each day of the week.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/367", "solution": "{\"name\": \"calculateWeeklyActivity\", \"type\": \"function\", \"signature\": \"def calculateWeeklyActivity(activities: list[datetime]) -> dict[str, int]\", \"return_type\": \"dict[str, int]\", \"short_description\": \"Calculates the number of activities per day of the week for a given list of datetime objects.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/367", "solution": "{\"name\": \"generateWeeklyActivityChart\", \"type\": \"function\", \"signature\": \"def generateWeeklyActivityChart(activities):\", \"return_type\": \"matplotlib.axes._axes.Axes\", \"short_description\": \"Generates a bar chart displaying the number of activities per day of the week for a given list of activities.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/367", "solution": "{\"name\": \"generateWeeklyActivityChart\", \"type\": \"function\", \"signature\": \"def generateWeeklyActivityChart(activities: List[datetime]) -> None\", \"return_type\": \"None\", \"short_description\": \"Generates a bar chart displaying the number of activities per day of the week for a given list of datetime objects.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"calculate_statistics(data_list, key_list)\", \"return_type\": \"dict\", \"short_description\": \"Calculates mean and median for specified keys in a list of dictionaries.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateCollectionStats\", \"type\": \"function\", \"signature\": \"calculateCollectionStats(data: list[dict]) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Calculates statistical metrics for each key in the provided list of dictionaries, treating values as numeric where possible.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateKeyStatistics\", \"type\": \"function\", \"signature\": \"([{'key': str, 'values': [float, int]}]), -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates the mean and median for each key's values in a list of dictionaries.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"calculate_statistics(data_list)\", \"return_type\": \"dict\", \"short_description\": \"Calculates statistical measures (mean and median) for numerical values across multiple dictionaries for each key in the keys set.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"calculateStatistics(data: list[dict]) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Calculates statistical measures (mean and median) for numeric values associated with each key across multiple dictionaries.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateCollectionStats\", \"type\": \"function\", \"signature\": \"calculateCollectionStats(data: list[dict]) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Calculates statistical metrics for each key in a list of dictionaries, ignoring non-numeric values.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"calculateStatistics(data: list[dict]) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates basic statistical measures (mean and median) for numerical values across all keys in the provided list of dictionaries.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"def calculateStatistics(data: list[dict]) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates basic statistical measures (mean and median) for numeric values across a list of dictionaries for each key.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateStats\", \"type\": \"function\", \"signature\": \"([{'key': str, 'values': [float]}])\", \"return_type\": \"{'mean': float, 'median': float}\", \"short_description\": \"Calculates the mean and median for each key in the list of dictionaries.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateCollectionStats\", \"type\": \"function\", \"signature\": \"([dict], optional): dict\", \"return_type\": \"dict\", \"short_description\": \"Calculates statistical measures (mean and median) for numeric values in a list of dictionaries, grouping by keys.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"([{'key': str, 'value': int}])\", \"return_type\": \"{'key': str, 'mean': float, 'median': float}\", \"short_description\": \"Calculates the mean and median for each unique key in a list of dictionaries.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"calculateStatistics(data: list[dict[str, list[int]]]) -> dict[str, dict[str, float]]\", \"return_type\": \"dict[str, dict[str, float]]\", \"short_description\": \"Calculates the mean and median for each key in the nested dictionaries provided.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"def calculateStatistics(data: list[dict]) -> dict[str, dict[str, float]]\", \"return_type\": \"dict[str, dict[str, float]]\", \"short_description\": \"Calculates mean and median for values associated with each key in the provided list of dictionaries.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"([{'key': str, 'value': int}])\", \"return_type\": \"{'key': str, 'mean': float, 'median': float}\", \"short_description\": \"Calculates the mean and median for each unique key in the list of dictionaries.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"([{}]), str, str\", \"return_type\": \"{}\", \"short_description\": \"Calculates basic statistical measures (mean and median) for each key in the input data and writes the results to a CSV file.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"calculate_statistics(data: list[dict]) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Calculates mean and median for each key in the nested dictionaries.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"([dict],)\", \"return_type\": \"dict\", \"short_description\": \"Calculates mean and median for each key in a list of dictionaries.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"([{key: string, value: number}])\", \"return_type\": \"{key: string, mean: number, median: number}\", \"short_description\": \"Calculates the mean and median for each key in a list of objects.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"([{'key': str, 'value': int}], str)\", \"return_type\": \"{'key': str, 'mean': float, 'median': float}\", \"short_description\": \"Calculates the mean and median for each key in the list of dictionaries.\"}"}
{"api_id": 12, "api_name": "collections.defaultdict", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculateStats\", \"type\": \"function\", \"signature\": \"calculate_stats(data)\", \"return_type\": \"dict\", \"short_description\": \"Calculates mean and median for each key in the provided data.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"calculateTotalWordCount\", \"type\": \"function\", \"signature\": \"(directoryPath)\", \"return_type\": \"int\", \"short_description\": \"Calculates the total word count from all text files in a given directory.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"countUniqueWords\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"int\", \"short_description\": \"Counts the number of unique words in a given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"countUniqueWords\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"int\", \"short_description\": \"Counts the number of unique words in a given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"countUniqueWords\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"int\", \"short_description\": \"Counts the number of unique words in a given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"countUniqueWords\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"int\", \"short_description\": \"Counts the number of unique words in a given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"getMostCommonWords\", \"type\": \"function\", \"signature\": \"(counter, topN)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of the top N most common words from the given Counter object.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"countUniqueWords\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"int\", \"short_description\": \"Counts the number of unique words in a given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"calculateTotalWordCount\", \"type\": \"function\", \"signature\": \"(text, /)\", \"return_type\": \"int\", \"short_description\": \"Calculates the total word count of a given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"countUniqueWords\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"int\", \"short_description\": \"Counts the number of unique words in a given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"calculateDuplicates\", \"type\": \"function\", \"signature\": \"(rows)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the number of duplicate entries in a list of rows.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"calculateDuplicates\", \"type\": \"function\", \"signature\": \"(rows)\", \"return_type\": \"dict\", \"short_description\": \"Calculates and returns a dictionary of duplicate rows from the provided list of rows.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in a given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"calculateFrequencies\", \"type\": \"function\", \"signature\": \"(text: str) -> Dict[str, int]\", \"return_type\": \"Dict[str, int]\", \"short_description\": \"Calculates the frequency of each word in a given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"calculateDuplicates\", \"type\": \"function\", \"signature\": \"(rows)\", \"return_type\": \"Counter\", \"short_description\": \"Calculates and returns a Counter object with duplicate rows from a list of lists.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"calculateDuplicates\", \"type\": \"function\", \"signature\": \"(rows)\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the frequency of duplicate rows in a list of lists.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"countDuplicates\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"Counter\", \"short_description\": \"Counts the frequency of duplicate entries in a list of lists.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"countDuplicates\", \"type\": \"function\", \"signature\": \"(rows)\", \"return_type\": \"Counter\", \"short_description\": \"Counts the number of duplicate entries in a list of rows.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"generateFrequencyMap\", \"type\": \"function\", \"signature\": \"(iterable)\", \"return_type\": \"dict\", \"short_description\": \"Generates a frequency map (dictionary) from the elements of the given iterable.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"calculateDuplicateAges\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> Tuple[Counter, Optional[plt.Axes]]\", \"return_type\": \"Tuple[Counter, Optional[plt.Axes]]\", \"short_description\": \"Calculates the distribution of ages for names that appear more than once in the DataFrame and returns a Counter of these ages along with an optional Matplotlib Axes object for visualization.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"calculateAgesCount\", \"type\": \"function\", \"signature\": \"(dataframe)\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the count of ages for each unique name in the given DataFrame.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"calculateDuplicatesCounter\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> (Counter, plt.Axes)\", \"return_type\": \"tuple\", \"short_description\": \"Calculates the count of ages for names that appear more than once in the DataFrame and plots the distribution of these ages.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"calculateAgesDistribution\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame)\", \"return_type\": \"(Counter, plt.Axes)\", \"short_description\": \"Calculates the distribution of ages for names that appear more than once in the DataFrame and returns a Counter object and a Matplotlib Axes object for plotting.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"calculateDuplicatesCounter\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> (Counter, plt.Axes)\", \"return_type\": \"tuple\", \"short_description\": \"Calculates a Counter of ages for duplicate names in a DataFrame and returns a histogram plot of the ages if duplicates exist.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"calculateAgesCount\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> Counter\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the count of ages for each name in the DataFrame, focusing on names with duplicates.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"calculateDuplicatesAge\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> (Counter, plt.Axes)\", \"return_type\": \"Tuple[Counter, Optional[plt.Axes]]\", \"short_description\": \"Calculates the distribution of ages for names that appear more than once in the given DataFrame and returns a Counter object and a Matplotlib Axes object for plotting.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"generateFrequencyChart\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame, column: str)\", \"return_type\": \"plt.Figure\", \"short_description\": \"Generates a frequency chart for a specified column in a pandas DataFrame.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"calculateAgesDistribution\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame)\", \"return_type\": \"(Counter, plt.Axes)\", \"short_description\": \"Calculates the distribution of ages for duplicate names in the given DataFrame and returns a Counter object and a Matplotlib Axes object for plotting.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"calculateAgesCount\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> Counter\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the count of ages for names in the DataFrame.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculateDuplicates\", \"type\": \"function\", \"signature\": \"(dataframe)\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the frequency of duplicate values in a specified column of a DataFrame.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculateDuplicates\", \"type\": \"function\", \"signature\": \"(df)\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the frequency of duplicate values in a DataFrame column and returns a Counter object.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculateHistogram\", \"type\": \"function\", \"signature\": \"(data, bins=4)\", \"return_type\": \"dict\", \"short_description\": \"Calculates a histogram for the given data with specified number of bins.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculateDistribution\", \"type\": \"function\", \"signature\": \"(data, bins=4)\", \"return_type\": \"tuple(Counter, plt.Axes)\", \"short_description\": \"Calculates the distribution of the given data and returns a tuple containing a Counter object of duplicate values and the Axes object of the plot.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculateDuplicates\", \"type\": \"function\", \"signature\": \"(dataframe)\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the frequency of duplicate values in a DataFrame column and returns a Counter object.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculateDistribution\", \"type\": \"function\", \"signature\": \"(data, bins=4)\", \"return_type\": \"Tuple[Counter, plt.Axes]\", \"short_description\": \"Calculates the distribution of given data and returns the counter of duplicates and the plot axes.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistics such as mean, median, and mode from the given data.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculateDuplicatesCounter\", \"type\": \"function\", \"signature\": \"(dataframe)\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the count of duplicate values in a DataFrame column and returns a Counter object.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"countDuplicates\", \"type\": \"function\", \"signature\": \"(dataframe)\", \"return_type\": \"Counter\", \"short_description\": \"Counts the number of duplicate values in the 'value' column of a given DataFrame.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculateDistribution\", \"type\": \"function\", \"signature\": \"(data, bins=4)\", \"return_type\": \"Tuple[Counter, plt.Axes]\", \"short_description\": \"Calculates the distribution of values in a DataFrame and returns a tuple containing a Counter of duplicate values and the Axes object of the plot.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"calculateWordFrequency\", \"type\": \"function\", \"signature\": \"(csv_file)\", \"return_type\": \"Tuple[Axes, List[Tuple[str, int]]]\", \"short_description\": \"Calculates the frequency of words in a given CSV file and returns a bar plot of the most common words along with the data.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/579", "solution": "{\n  \"name\": \"calculateWordFrequencies\",\n  \"type\": \"function\",\n  \"signature\": \"(csvFilePath)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Calculates the frequency of each word in a CSV file and returns a dictionary with words as keys and their frequencies as values.\"\n}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(csvFile)\", \"return_type\": \"list\", \"short_description\": \"Calculates the frequency of each word in a CSV file and returns a list of the most common words.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"countUniqueWords\", \"type\": \"function\", \"signature\": \"(csv_file)\", \"return_type\": \"List[Tuple[str, int]]\", \"short_description\": \"Counts the unique words in a given CSV file and returns the most common words and their counts.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"generateWordCloud\", \"type\": \"function\", \"signature\": \"(text, fontPath=None, width=400, height=200, margin=2, relativeFontSize=False, colormap='viridis')\", \"return_type\": \"PIL.Image.Image\", \"short_description\": \"Generates a word cloud image from the provided text using the WordCloud class from the PIL library. The word cloud can be customized with various parameters for font path, size, color map, and more.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(words)\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the frequency of each word in a list of words and returns a Counter object.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(csv_file)\", \"return_type\": \"list\", \"short_description\": \"Calculates the frequency of each word in a CSV file and returns a list of the most common words and their frequencies.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"calculateWordFrequency\", \"type\": \"function\", \"signature\": \"(words: list[str])\", \"return_type\": \"dict[str, int]\", \"short_description\": \"Calculates the frequency of each word in a list of words.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"countWords\", \"type\": \"function\", \"signature\": \"(csvFilePath)\", \"return_type\": \"Counter\", \"short_description\": \"Counts the frequency of each word in a CSV file and returns a Counter object with the counts.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"calculateWordFrequency\", \"type\": \"function\", \"signature\": \"(words)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in a list of words.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"analyzeMatchData\", \"type\": \"function\", \"signature\": \"(csvFilePath: str) => Counter\", \"return_type\": \"Counter\", \"short_description\": \"Analyzes match data from a CSV file and returns a Counter object with counts of goals and penalties.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"calculateMatchStats\", \"type\": \"function\", \"signature\": \"(goals, penalties, csvFilePath='match_data.csv')\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the total goals and penalties from given data, optionally reading from a CSV file.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"calculateTeamStatistics\", \"type\": \"function\", \"signature\": \"(teamGoals, teamPenalties, csvFilePath='match_data.csv')\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the total statistics for a set of teams based on goals and penalties, updating existing CSV data if available.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"calculateGoalsPenalties\", \"type\": \"function\", \"signature\": \"(goals, penalties)\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the total goals and penalties from given dictionaries and returns a Counter object with the counts.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"(data, format)\", \"return_type\": \"str\", \"short_description\": \"Generates a report in a specified format from the given data.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"calculateMatchGoalsPenalties\", \"type\": \"function\", \"signature\": \"(goals, penalties)\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the total goals and penalties from given dictionaries and returns a Counter object with the counts.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"calculateTeamStats\", \"type\": \"function\", \"signature\": \"(teamGoals, teamPenalties)\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the total goals and penalties for a set of teams and returns a Counter object with the counts.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"calculateGoalsPenalties\", \"type\": \"function\", \"signature\": \"(goals, penalties)\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the total goals and penalties from given dictionaries and returns a Counter object with the counts.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"calculateTeamPerformance\", \"type\": \"function\", \"signature\": \"(teamStats, goals, penalties)\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the performance of a team based on goals and penalties.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"generateFrequencyMap\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"Counter\", \"short_description\": \"Generates a frequency map of elements from the given iterable.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateTermFrequencyVectors\", \"type\": \"function\", \"signature\": \"(text1, text2)\", \"return_type\": \"tuple(Counter, Counter)\", \"short_description\": \"Calculates term frequency vectors for two given texts.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateSimilarity\", \"type\": \"function\", \"signature\": \"(text1, text2)\", \"return_type\": \"tuple[float, float]\", \"short_description\": \"Calculates the cosine similarity and Levenshtein ratio between two texts.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateWordFrequency\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in a given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateCosineSimilarity\", \"type\": \"function\", \"signature\": \"(vec1, vec2)\", \"return_type\": \"float\", \"short_description\": \"Calculates the cosine similarity between two term frequency vectors.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateSimilarity\", \"type\": \"function\", \"signature\": \"(text1, text2)\", \"return_type\": \"tuple[float, float]\", \"short_description\": \"Calculates the cosine similarity and Levenshtein ratio between two texts.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateTermFrequencyVectors\", \"type\": \"function\", \"signature\": \"(text1, text2)\", \"return_type\": \"dict\", \"short_description\": \"Calculates and returns term frequency vectors for the given texts.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateCosineSimilarity\", \"type\": \"function\", \"signature\": \"(vec1, vec2)\", \"return_type\": \"float\", \"short_description\": \"Calculates the cosine similarity between two term frequency vectors.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateTextSimilarity\", \"type\": \"function\", \"signature\": \"(text1, text2)\", \"return_type\": \"tuple(float, float)\", \"short_description\": \"Calculates the cosine similarity and Levenshtein ratio between two given texts.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"generateAlphabetCombinations\", \"type\": \"function\", \"signature\": \"(length=2)\", \"return_type\": \"list\", \"short_description\": \"Generates all possible combinations of two letters from the English alphabet.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"calculateWordCombinations\", \"type\": \"function\", \"signature\": \"(word: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Calculates the count of all two-letter combinations in the given word, including those not present, and returns a dictionary with these counts.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"countDistinctPairs\", \"type\": \"function\", \"signature\": \"(word: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Counts the occurrences of all distinct two-letter combinations present in the input word.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"generateLetterCombinations\", \"type\": \"function\", \"signature\": \"(word: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Generates a dictionary containing counts of all possible two-letter combinations, including repeated letters and non-alphabetic characters.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"countUniqueCombinations\", \"type\": \"function\", \"signature\": \"(word: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Counts the unique two-letter combinations in a given word, comparing them against all possible two-letter combinations of the alphabet.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"generateWordCombinations\", \"type\": \"function\", \"signature\": \"(word: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Generates a dictionary with counts of all two-letter combinations present in the given word, including those not present.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"generateAlphabetCombinations\", \"type\": \"function\", \"signature\": \"(length=2, exclude_duplicates=False)\", \"return_type\": \"list\", \"short_description\": \"Generates all possible combinations of alphabetic characters of a specified length. Optionally excludes combinations that repeat characters.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"calculateWordStatistics\", \"type\": \"function\", \"signature\": \"(word: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Calculates the statistics of all two-letter combinations in a given word, including those not present.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"generateWordCombinations\", \"type\": \"function\", \"signature\": \"(word: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Generates a dictionary with counts of all two-letter combinations present in the given word.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"generateWordCombinations\", \"type\": \"function\", \"signature\": \"(word: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Generates a dictionary of all two-letter combinations present in the given word, along with their counts. It also includes all two-letter combinations of the alphabets and double letters.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the frequency of each word in a given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text: str)\", \"return_type\": \"Dict[str, int]\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in the provided text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"countWords\", \"type\": \"function\", \"signature\": \"(text: str)\", \"return_type\": \"Dict[str, int]\", \"short_description\": \"Counts the frequency of each word in the given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"calculateFrequencies\", \"type\": \"function\", \"signature\": \"(text: str, words: list[str]) -> dict[str, int]\", \"return_type\": \"dict[str, int]\", \"short_description\": \"Calculates the frequency of each word in the given text for the specified list of words.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text: str) -> Dict[str, int]\", \"return_type\": \"Dict[str, int]\", \"short_description\": \"Calculates the frequency of each word in the provided text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text: str)\", \"return_type\": \"Dict[str, int]\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"countElements\", \"type\": \"function\", \"signature\": \"(iterable)\", \"return_type\": \"collections.Counter\", \"short_description\": \"Creates a Counter object from the given iterable and counts the elements.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"createCounter\", \"type\": \"function\", \"signature\": \"(iterable=None, /)\", \"return_type\": \"collections.Counter\", \"short_description\": \"Creates a Counter object from an iterable to count hashable items.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"countElements\", \"type\": \"function\", \"signature\": \"(iterable)\", \"return_type\": \"Counter\", \"short_description\": \"Creates a Counter object from the provided iterable, counting the frequency of each element.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"createCounter\", \"type\": \"function\", \"signature\": \"(iterable=None, /, **kwds)\", \"return_type\": \"collections.Counter\", \"short_description\": \"Creates a Counter object from the provided iterable.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"createCounter\", \"type\": \"function\", \"signature\": \"(values)\", \"return_type\": \"Counter\", \"short_description\": \"Creates a Counter object from the provided iterable.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"createCounter\", \"type\": \"function\", \"signature\": \"(iterable)\", \"return_type\": \"collections.Counter\", \"short_description\": \"Creates a Counter object from an iterable.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"createCounter\", \"type\": \"function\", \"signature\": \"(iterable=None, /)\", \"return_type\": \"collections.Counter\", \"short_description\": \"Creates a new Counter object from an iterable.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"countElements\", \"type\": \"function\", \"signature\": \"(iterable)\", \"return_type\": \"collections.Counter\", \"short_description\": \"Creates a Counter object from an iterable, counting the frequency of each element.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"createCounter\", \"type\": \"function\", \"signature\": \"(values)\", \"return_type\": \"collections.Counter\", \"short_description\": \"Creates a Counter object from the provided iterable.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"countElements\", \"type\": \"function\", \"signature\": \"(values)\", \"return_type\": \"collections.Counter\", \"short_description\": \"Creates a Counter object from an iterable of values, counting the occurrences of each element.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/1004", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the frequency of each word in the given text and returns a Counter object with the results.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/1004", "solution": "{\"name\": \"calculateWordFrequency\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the frequency of each word in the given text and returns a Counter object.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/1004", "solution": "{\"name\": \"generateWordCloud\", \"type\": \"function\", \"signature\": \"(text, font_path=None, width=400, height=200, margin=2, ranks_only=None, prefer_horizontal=0.9, mask=None, scale=1, color_func=None, max_words=200, min_font_size=4, stopwords=None, random_state=None, background_color='black', max_font_size=None, font_step=1, mode='RGB', relative_scaling='auto', normalize_plurals=True, contour_width=0, contour_color='black', repeat=False, include_numbers=False, min_word_length=0)\", \"return_type\": \"PIL.Image.Image\", \"short_description\": \"Generates a word cloud image from the given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/1004", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the frequency of each word in the provided text and returns a Counter object.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/1004", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the frequency of each word in the provided text and returns a Counter object.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/1004", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the frequency of each word in the provided text and returns a Counter object.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/1004", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the frequency of each word in a given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/1004", "solution": "{\"name\": \"generateWordCloud\", \"type\": \"function\", \"signature\": \"(text, font_path=None, width=400, height=200, margin=2, ranks_only=None, prefer_horizontal=0.9, mask=None, scale=1, min_font_size=4, max_font_size=None, font_step=1, mode='RGB', color_func=None, regexp=None, wordcloud=None, **kwargs)\", \"return_type\": \"WordCloud\", \"short_description\": \"Generates a word cloud image from the given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/1004", "solution": "{\"name\": \"calculateWordFrequency\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the frequency of each word in the given text and returns a Counter object.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/1004", "solution": "{\"name\": \"countWords\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"Counter\", \"short_description\": \"Counts the frequency of each word in the given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/1085", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the frequency of each word in the given text and returns a Counter object.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/1085", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/1085", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/1085", "solution": "{\"name\": \"countWords\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"dict\", \"short_description\": \"Counts the frequency of each word in the given text and returns a dictionary with words as keys and their counts as values.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/1085", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"Dict[str, int]\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/1085", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"Counter\", \"short_description\": \"Calculates the frequency of each word in the given text and returns a Counter object.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/1085", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/1085", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/1085", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 13, "api_name": "collections.Counter", "task_id": "BigCodeBench/1085", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 14, "api_name": "cryptography.hazmat.backends.default_backend", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_encrypted_file\", \"type\": \"function\", \"signature\": \"() -> Tuple[RSAKey, str, str]\", \"return_type\": \"Tuple[RSAKey, str, str]\", \"short_description\": \"Generates an encrypted file using AES encryption and RSA public key encryption.\"}"}
{"api_id": 14, "api_name": "cryptography.hazmat.backends.default_backend", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_secure_key_pair\", \"type\": \"function\", \"signature\": \"() -> tuple\", \"return_type\": \"tuple\", \"short_description\": \"Generates a new RSA key pair for secure encryption.\"}"}
{"api_id": 14, "api_name": "cryptography.hazmat.backends.default_backend", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_secure_keys\", \"type\": \"function\", \"signature\": \"() -> Tuple[rsa.PublicKey, str, str]\", \"return_type\": \"Tuple[rsa.PublicKey, str, str]\", \"short_description\": \"Generates RSA public and private keys, an AES encryption key, and returns them along with file paths for the encrypted data and the encrypted AES key.\"}"}
{"api_id": 14, "api_name": "cryptography.hazmat.backends.default_backend", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_encrypted_file\", \"type\": \"function\", \"signature\": \"() -> dict\", \"return_type\": \"dict\", \"short_description\": \"Generates an encrypted file and returns the public key, path to the encrypted file, and path to the encrypted key.\"}"}
{"api_id": 14, "api_name": "cryptography.hazmat.backends.default_backend", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_secure_key_pair\", \"type\": \"function\", \"signature\": \"() -> Tuple[rsa.PublicKey, rsa.PrivateKey]\", \"return_type\": \"Tuple[rsa.PublicKey, rsa.PrivateKey]\", \"short_description\": \"Generates a new RSA key pair for encryption.\"}"}
{"api_id": 14, "api_name": "cryptography.hazmat.backends.default_backend", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_encrypted_file\", \"type\": \"function\", \"signature\": \"() -> Tuple[RSAKey, str, str]\", \"return_type\": \"Tuple[RSAKey, str, str]\", \"short_description\": \"Generates an encrypted file using RSA and AES encryption.\"}"}
{"api_id": 14, "api_name": "cryptography.hazmat.backends.default_backend", "task_id": "BigCodeBench/587", "solution": "{\n  \"name\": \"generate_encrypted_file\",\n  \"type\": \"function\",\n  \"signature\": \"() -> tuple\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates an encrypted file and returns the public key, path to the encrypted file, and path to the encrypted AES key.\"\n}"}
{"api_id": 14, "api_name": "cryptography.hazmat.backends.default_backend", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_secure_key_pair\", \"type\": \"function\", \"signature\": \"() -> Tuple[Any, Any]\", \"return_type\": \"Tuple[Any, Any]\", \"short_description\": \"Generates a new RSA key pair for secure encryption and decryption.\"}"}
{"api_id": 14, "api_name": "cryptography.hazmat.backends.default_backend", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_secure_key_pair\", \"type\": \"function\", \"signature\": \"() -> Tuple[rsa.PublicKey, rsa.PrivateKey]\", \"return_type\": \"Tuple[rsa.PublicKey, rsa.PrivateKey]\", \"short_description\": \"Generates a secure RSA key pair for encryption.\"}"}
{"api_id": 14, "api_name": "cryptography.hazmat.backends.default_backend", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_key_pair\", \"type\": \"function\", \"signature\": \"() -> Tuple[rsa.PublicKey, rsa.PrivateKey]\", \"return_type\": \"Tuple[rsa.PublicKey, rsa.PrivateKey]\", \"short_description\": \"Generates a new RSA key pair.\"}"}
{"api_id": 15, "api_name": "cryptography.hazmat.primitives.ciphers.Cipher", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generateEncryptionKeys\", \"type\": \"function\", \"signature\": \"() -> Tuple[rsa.PublicKey, rsa.PrivateKey]\", \"return_type\": \"Tuple[rsa.PublicKey, rsa.PrivateKey]\", \"short_description\": \"Generates a pair of RSA public and private keys.\"}"}
{"api_id": 15, "api_name": "cryptography.hazmat.primitives.ciphers.Cipher", "task_id": "BigCodeBench/587", "solution": "{\n  \"name\": \"generateEncryptedFile\",\n  \"type\": \"function\",\n  \"signature\": \"(filePath: str, publicKey: rsa.PublicKey, privateKey: rsa.PrivateKey) -> Tuple[str, str, str]\",\n  \"return_type\": \"Tuple[str, str, str]\",\n  \"short_description\": \"Encrypts the contents of a file using AES and RSA encryption, then saves the encrypted file and key.\"\n}"}
{"api_id": 15, "api_name": "cryptography.hazmat.primitives.ciphers.Cipher", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generateEncryptedFile\", \"type\": \"function\", \"signature\": \"(filePath: str, publicKey: str, privateKey: str)\", \"return_type\": \"tuple(str, str, str)\", \"short_description\": \"Generates an encrypted file using AES encryption and RSA encryption for the AES key.\"}"}
{"api_id": 15, "api_name": "cryptography.hazmat.primitives.ciphers.Cipher", "task_id": "BigCodeBench/587", "solution": "{\n  \"name\": \"generateEncryptionKeyPair\",\n  \"type\": \"function\",\n  \"signature\": \"(keySize: int)\",\n  \"return_type\": \"Tuple[rsa.PublicKey, rsa.PrivateKey]\",\n  \"short_description\": \"Generates a new RSA key pair with the specified key size.\"\n}"}
{"api_id": 15, "api_name": "cryptography.hazmat.primitives.ciphers.Cipher", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generateEncryptionKeyPair\", \"type\": \"function\", \"signature\": \"() -> Tuple[rsa.PublicKey, rsa.PrivateKey]\", \"return_type\": \"Tuple[rsa.PublicKey, rsa.PrivateKey]\", \"short_description\": \"Generates a new RSA key pair for encryption.\"}"}
{"api_id": 15, "api_name": "cryptography.hazmat.primitives.ciphers.Cipher", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generateEncryptedFile\", \"type\": \"function\", \"signature\": \"(filePath: str, publicKey: object, privateKey: object) -> (str, str)\", \"return_type\": \"tuple\", \"short_description\": \"Generates an encrypted file and returns the public key, path to the encrypted file, and path to the encrypted key.\"}"}
{"api_id": 15, "api_name": "cryptography.hazmat.primitives.ciphers.Cipher", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generateEncryptedFile\", \"type\": \"function\", \"signature\": \"(filePath: str, publicKey: str, privateKey: str) -> Tuple[str, str, str]\", \"return_type\": \"Tuple[str, str, str]\", \"short_description\": \"Generates an encrypted file with an associated encrypted AES key using provided RSA keys.\"}"}
{"api_id": 15, "api_name": "cryptography.hazmat.primitives.ciphers.Cipher", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generateEncryptedFile\", \"type\": \"function\", \"signature\": \"(filePath: str, publicKey: str, privateKey: str) -> Tuple[str, str, str]\", \"return_type\": \"Tuple[str, str, str]\", \"short_description\": \"Encrypts a file using AES and RSA encryption, and returns the paths to the encrypted file, the encrypted AES key, and the private key file.\"}"}
{"api_id": 15, "api_name": "cryptography.hazmat.primitives.ciphers.Cipher", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generateEncryptedFile\", \"type\": \"function\", \"signature\": \"(filePath: str)\", \"return_type\": \"Tuple[rsa.PublicKey, str, str]\", \"short_description\": \"Generates an encrypted file and returns the public key, path to the encrypted file, and path to the encrypted key file.\"}"}
{"api_id": 15, "api_name": "cryptography.hazmat.primitives.ciphers.Cipher", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generateSecureKey\", \"type\": \"function\", \"signature\": \"(length: int, algorithm: str)\", \"return_type\": \"bytes\", \"short_description\": \"Generates a secure random key of specified length using the given cryptographic algorithm.\"}"}
{"api_id": 16, "api_name": "cryptography.hazmat.primitives.ciphers.algorithms.AES", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_secure_key\", \"type\": \"function\", \"signature\": \"(key_length: int)\", \"return_type\": \"bytes\", \"short_description\": \"Generates a secure random key of specified length.\"}"}
{"api_id": 16, "api_name": "cryptography.hazmat.primitives.ciphers.algorithms.AES", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generateEncryptionKeyPair\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"tuple(public_key: bytes, private_key: bytes)\", \"short_description\": \"Generates a new RSA key pair for encryption.\"}"}
{"api_id": 16, "api_name": "cryptography.hazmat.primitives.ciphers.algorithms.AES", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_encrypted_key\", \"type\": \"function\", \"signature\": \"(file_path: str, public_key: rsa.PublicKey)\", \"return_type\": \"(rsa.PublicKey, str, str)\", \"short_description\": \"Encrypts a file using AES and encrypts the AES key with RSA, returning the public key, path to the encrypted file, and path to the encrypted AES key.\"}"}
{"api_id": 16, "api_name": "cryptography.hazmat.primitives.ciphers.algorithms.AES", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generateEncryptionKeyPair\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"tuple(public_key: bytes, private_key: bytes)\", \"short_description\": \"Generates a new RSA key pair for encryption.\"}"}
{"api_id": 16, "api_name": "cryptography.hazmat.primitives.ciphers.algorithms.AES", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generateAesKey\", \"type\": \"function\", \"signature\": \"(key_size: int)\", \"return_type\": \"bytes\", \"short_description\": \"Generates a random AES key of the specified size.\"}"}
{"api_id": 16, "api_name": "cryptography.hazmat.primitives.ciphers.algorithms.AES", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generateAesKey\", \"type\": \"function\", \"signature\": \"(key_size: int)\", \"return_type\": \"bytes\", \"short_description\": \"Generates a random AES key of the specified size.\"}"}
{"api_id": 16, "api_name": "cryptography.hazmat.primitives.ciphers.algorithms.AES", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_encrypted_file\", \"type\": \"function\", \"signature\": \"(file_path: str, key_size: int)\", \"return_type\": \"(public_key: bytes, encrypted_file: str, encrypted_key_file: str)\", \"short_description\": \"Generates an encrypted file with an RSA-encrypted AES key.\"}"}
{"api_id": 16, "api_name": "cryptography.hazmat.primitives.ciphers.algorithms.AES", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_encrypted_file\", \"type\": \"function\", \"signature\": \"(file_path: str, key_size: int, public_key: rsa.PublicKey)\", \"return_type\": \"(rsa.PublicKey, str, str)\", \"short_description\": \"Encrypts the contents of a file using AES and RSA encryption, then saves the encrypted file and key.\"}"}
{"api_id": 16, "api_name": "cryptography.hazmat.primitives.ciphers.algorithms.AES", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generateEncryptedFile\", \"type\": \"function\", \"signature\": \"(filePath: str)\", \"return_type\": \"tuple(PublicKey, str, str)\", \"short_description\": \"Generates an encrypted file and returns the public key, path to the encrypted file, and path to the encrypted AES key.\"}"}
{"api_id": 16, "api_name": "cryptography.hazmat.primitives.ciphers.algorithms.AES", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_secure_key\", \"type\": \"function\", \"signature\": \"(key_size: int)\", \"return_type\": \"bytes\", \"short_description\": \"Generates a secure random key of the specified size.\"}"}
{"api_id": 17, "api_name": "cryptography.hazmat.primitives.padding.PKCS7", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_encrypted_file\", \"type\": \"function\", \"signature\": \"(file_path: str, block_size: int)\", \"return_type\": \"tuple(rsa.PublicKey, str, str)\", \"short_description\": \"Encrypts the given file using AES and RSA encryption, returning the public key, path to the encrypted file, and path to the encrypted AES key.\"}"}
{"api_id": 17, "api_name": "cryptography.hazmat.primitives.padding.PKCS7", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_secure_key\", \"type\": \"function\", \"signature\": \"(length: int)\", \"return_type\": \"bytes\", \"short_description\": \"Generates a secure random key of the specified length.\"}"}
{"api_id": 17, "api_name": "cryptography.hazmat.primitives.padding.PKCS7", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_encrypted_file\", \"type\": \"function\", \"signature\": \"(file_path: str, public_key: rsa.PublicKey, private_key: rsa.PrivateKey)\", \"return_type\": \"(str, str, str)\", \"short_description\": \"Generates an encrypted file and associated key using RSA and AES encryption.\"}"}
{"api_id": 17, "api_name": "cryptography.hazmat.primitives.padding.PKCS7", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_encrypted_file\", \"type\": \"function\", \"signature\": \"(file_path: str, key_size: int, public_key: rsa.PublicKey)\", \"return_type\": \"(str, str, str)\", \"short_description\": \"Encrypts the specified file using AES and RSA encryption, and returns the file paths of the encrypted file and the encrypted key.\"}"}
{"api_id": 17, "api_name": "cryptography.hazmat.primitives.padding.PKCS7", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_rsa_keys\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"tuple(rsa.PublicKey, rsa.PrivateKey)\", \"short_description\": \"Generates a pair of RSA public and private keys.\"}"}
{"api_id": 17, "api_name": "cryptography.hazmat.primitives.padding.PKCS7", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_encrypted_file\", \"type\": \"function\", \"signature\": \"(file_path: str, key_size: int, algorithm: str, mode: str)\", \"return_type\": \"tuple\", \"short_description\": \"Generates an encrypted file using the specified cryptographic algorithm and mode.\"}"}
{"api_id": 17, "api_name": "cryptography.hazmat.primitives.padding.PKCS7", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_secure_key\", \"type\": \"function\", \"signature\": \"(length: int)\", \"return_type\": \"bytes\", \"short_description\": \"Generates a secure random key of specified length.\"}"}
{"api_id": 17, "api_name": "cryptography.hazmat.primitives.padding.PKCS7", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_encrypted_file\", \"type\": \"function\", \"signature\": \"(file_path: str, block_size: int)\", \"return_type\": \"tuple(rsa.PublicKey, str, str)\", \"short_description\": \"Encrypts the contents of a file using AES and encrypts the AES key with RSA.\"}"}
{"api_id": 17, "api_name": "cryptography.hazmat.primitives.padding.PKCS7", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_encrypted_file\", \"type\": \"function\", \"signature\": \"(file_path: str)\", \"return_type\": \"(pub_key: rsa.PublicKey, encrypted_file: str, encrypted_key_file: str)\", \"short_description\": \"Encrypts the specified file using AES and RSA encryption, and returns the public key, path to the encrypted file, and path to the encrypted AES key.\"}"}
{"api_id": 17, "api_name": "cryptography.hazmat.primitives.padding.PKCS7", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_encrypted_key\", \"type\": \"function\", \"signature\": \"(file_path: str, public_key: rsa.PublicKey, private_key: rsa.PrivateKey)\", \"return_type\": \"tuple(rsa.PublicKey, str, str)\", \"short_description\": \"Generates an encrypted key and returns the public key, path to the encrypted file, and path to the encrypted key file.\"}"}
{"api_id": 18, "api_name": "cryptography.hazmat.primitives.ciphers.modes.CBC", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_encrypted_file\", \"type\": \"function\", \"signature\": \"(file_path: str, public_key: rsa.PublicKey, private_key: rsa.PrivateKey)\", \"return_type\": \"tuple[rsa.PublicKey, str, str]\", \"short_description\": \"Encrypts the contents of a file using AES in CBC mode with a randomly generated key, then encrypts the key using the provided RSA public key and saves both the encrypted file and the encrypted key.\"}"}
{"api_id": 18, "api_name": "cryptography.hazmat.primitives.ciphers.modes.CBC", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_encrypted_file\", \"type\": \"function\", \"signature\": \"(file_path: str, key_length: int)\", \"return_type\": \"(public_key: object, encrypted_file_path: str, encrypted_key_file_path: str)\", \"short_description\": \"Generates an encrypted file and returns the public key, path to the encrypted file, and path to the encrypted key.\"}"}
{"api_id": 18, "api_name": "cryptography.hazmat.primitives.ciphers.modes.CBC", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_encrypted_file\", \"type\": \"function\", \"signature\": \"(file_path: str, public_key: rsa.PublicKey, private_key: rsa.PrivateKey)\", \"return_type\": \"(str, str, str)\", \"short_description\": \"Generates an encrypted file and returns the public key, path to the encrypted file, and path to the encrypted AES key.\"}"}
{"api_id": 18, "api_name": "cryptography.hazmat.primitives.ciphers.modes.CBC", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"encrypt_file\", \"type\": \"function\", \"signature\": \"(file_path: str, public_key: rsa.PublicKey)\", \"return_type\": \"tuple(rsa.PublicKey, str, str)\", \"short_description\": \"Encrypts the specified file using AES in CBC mode and RSA encryption for the AES key.\"}"}
{"api_id": 18, "api_name": "cryptography.hazmat.primitives.ciphers.modes.CBC", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_secure_key_pair\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"tuple(public_key: bytes, private_key: bytes)\", \"short_description\": \"Generates a new RSA key pair for secure encryption and decryption.\"}"}
{"api_id": 18, "api_name": "cryptography.hazmat.primitives.ciphers.modes.CBC", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_secure_key\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"bytes\", \"short_description\": \"Generates a secure random key suitable for cryptographic operations.\"}"}
{"api_id": 18, "api_name": "cryptography.hazmat.primitives.ciphers.modes.CBC", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_encrypted_file\", \"type\": \"function\", \"signature\": \"(file_path: str, key_size: int)\", \"return_type\": \"tuple(rsa.PublicKey, str, str)\", \"short_description\": \"Generates an encrypted version of a file using AES in CBC mode and encrypts the AES key using RSA.\"}"}
{"api_id": 18, "api_name": "cryptography.hazmat.primitives.ciphers.modes.CBC", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"encryptFileWithAES\", \"type\": \"function\", \"signature\": \"(filePath: str, publicKey: rsa.PublicKey)\", \"return_type\": \"(encryptedFilePath: str, encryptedKeyFile: str)\", \"short_description\": \"Encrypts a file using AES encryption and RSA public key for key encryption.\"}"}
{"api_id": 18, "api_name": "cryptography.hazmat.primitives.ciphers.modes.CBC", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_secure_encryption\", \"type\": \"function\", \"signature\": \"(data: bytes, key: bytes, iv: bytes)\", \"return_type\": \"bytes\", \"short_description\": \"Encrypts the provided data using AES in CBC mode with the given key and initialization vector.\"}"}
{"api_id": 18, "api_name": "cryptography.hazmat.primitives.ciphers.modes.CBC", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_encrypted_file\", \"type\": \"function\", \"signature\": \"(file_path: str, public_key: rsa.PublicKey, private_key: rsa.PrivateKey)\", \"return_type\": \"Tuple[rsa.PublicKey, str, str]\", \"short_description\": \"Encrypts the contents of a file using AES in CBC mode with a randomly generated key, and then encrypts the AES key with RSA before saving both the encrypted file and the encrypted key to disk.\"}"}
{"api_id": 19, "api_name": "csv.DictWriter", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, output_file)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures (mean and median) for each key in the input data and writes the results to a CSV file.\"}"}
{"api_id": 19, "api_name": "csv.DictWriter", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"generateCsvReport\", \"type\": \"function\", \"signature\": \"(data, fieldnames, output_file)\", \"return_type\": \"None\", \"short_description\": \"Generates a CSV report with statistical metrics from the provided data.\"}"}
{"api_id": 19, "api_name": "csv.DictWriter", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"generate_csv_from_json\", \"type\": \"function\", \"signature\": \"(json_data, output_file, fieldnames)\", \"return_type\": \"None\", \"short_description\": \"Generates a CSV file from JSON data with specified fieldnames.\"}"}
{"api_id": 19, "api_name": "csv.DictWriter", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, output_file)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures (mean and median) for each key in the provided data and writes the results to a CSV file.\"}"}
{"api_id": 19, "api_name": "csv.DictWriter", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"processData\", \"type\": \"function\", \"signature\": \"(data, output)\", \"return_type\": \"dict\", \"short_description\": \"Processes the input data and writes statistics to a CSV file.\"}"}
{"api_id": 19, "api_name": "csv.DictWriter", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"generateStatistics\", \"type\": \"function\", \"signature\": \"(data, output_file)\", \"return_type\": \"dict\", \"short_description\": \"Generates statistical summaries for each key in the input data and writes them to a CSV file.\"}"}
{"api_id": 19, "api_name": "csv.DictWriter", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"generateCsvReport\", \"type\": \"function\", \"signature\": \"(data, fieldnames, output_file)\", \"return_type\": \"None\", \"short_description\": \"Generates a CSV report from the provided data using the specified fieldnames and writes it to the given output file.\"}"}
{"api_id": 19, "api_name": "csv.DictWriter", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"generate_csv\", \"type\": \"function\", \"signature\": \"(data, fieldnames, output_file)\", \"return_type\": \"None\", \"short_description\": \"Generates a CSV file from the provided data, using the specified fieldnames.\"}"}
{"api_id": 19, "api_name": "csv.DictWriter", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, output_file)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical metrics (mean and median) for each key in the input data and writes them to a CSV file.\"}"}
{"api_id": 19, "api_name": "csv.DictWriter", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"generateCsvReport\", \"type\": \"function\", \"signature\": \"(data, fieldnames, output_file)\", \"return_type\": \"None\", \"short_description\": \"Generates a CSV report with statistical metrics from input data.\"}"}
{"api_id": 20, "api_name": "csv.DictReader", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"readCsvData\", \"type\": \"function\", \"signature\": \"(file_path, fieldnames=None)\", \"return_type\": \"list[dict]\", \"short_description\": \"Reads a CSV file and returns its contents as a list of dictionaries.\"}"}
{"api_id": 20, "api_name": "csv.DictReader", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"readCsvData\", \"type\": \"function\", \"signature\": \"(file_path, fieldnames=None)\", \"return_type\": \"list[dict]\", \"short_description\": \"Reads a CSV file and returns its content as a list of dictionaries.\"}"}
{"api_id": 20, "api_name": "csv.DictReader", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"readCsvData\", \"type\": \"function\", \"signature\": \"(file_path, fieldnames=None)\", \"return_type\": \"list[dict]\", \"short_description\": \"Reads data from a CSV file and returns it as a list of dictionaries.\"}"}
{"api_id": 20, "api_name": "csv.DictReader", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"readCsvData\", \"type\": \"function\", \"signature\": \"(file_path, fieldnames=None)\", \"return_type\": \"list[dict]\", \"short_description\": \"Reads a CSV file and returns its content as a list of dictionaries.\"}"}
{"api_id": 20, "api_name": "csv.DictReader", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"parseCsv\", \"type\": \"function\", \"signature\": \"(file_path, fieldnames=None)\", \"return_type\": \"list\", \"short_description\": \"Parses a CSV file and returns its content as a list of dictionaries.\"}"}
{"api_id": 20, "api_name": "csv.DictReader", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"readCsvData\", \"type\": \"function\", \"signature\": \"(file_path, fieldnames=None)\", \"return_type\": \"list\", \"short_description\": \"Reads data from a CSV file and returns it as a list of dictionaries.\"}"}
{"api_id": 20, "api_name": "csv.DictReader", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"readCsvData\", \"type\": \"function\", \"signature\": \"(file_path, fieldnames=None)\", \"return_type\": \"list[dict]\", \"short_description\": \"Reads a CSV file and returns its data as a list of dictionaries.\"}"}
{"api_id": 20, "api_name": "csv.DictReader", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"parseCsvFile\", \"type\": \"function\", \"signature\": \"(file_path, delimiter=',', quotechar='\\\"')\", \"return_type\": \"list[dict]\", \"short_description\": \"Reads a CSV file and returns its contents as a list of dictionaries.\"}"}
{"api_id": 20, "api_name": "csv.DictReader", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"readCsvData\", \"type\": \"function\", \"signature\": \"(file_path, fieldnames=None)\", \"return_type\": \"list[dict]\", \"short_description\": \"Reads data from a CSV file and returns it as a list of dictionaries.\"}"}
{"api_id": 20, "api_name": "csv.DictReader", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"readCsvData\", \"type\": \"function\", \"signature\": \"(file_path, fieldnames=None)\", \"return_type\": \"list[dict]\", \"short_description\": \"Reads data from a CSV file and returns it as a list of dictionaries.\"}"}
{"api_id": 20, "api_name": "csv.DictReader", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"fetchAndCountCsvData\", \"type\": \"function\", \"signature\": \"(url, columnName, csvFilePath)\", \"return_type\": \"collections.Counter\", \"short_description\": \"Fetches a CSV file from a given URL, reads its content, and counts the occurrences of a specified column name.\"}"}
{"api_id": 20, "api_name": "csv.DictReader", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"readCsv\", \"type\": \"function\", \"signature\": \"(filePath, columnName)\", \"return_type\": \"dict\", \"short_description\": \"Reads a CSV file and returns a dictionary with the specified column's values.\"}"}
{"api_id": 20, "api_name": "csv.DictReader", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"parseCsv\", \"type\": \"function\", \"signature\": \"(file_path, delimiter=',')\", \"return_type\": \"list[dict]\", \"short_description\": \"Parses a CSV file and returns its content as a list of dictionaries.\"}"}
{"api_id": 20, "api_name": "csv.DictReader", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"readCsv\", \"type\": \"function\", \"signature\": \"(filePath, columnName)\", \"return_type\": \"dict\", \"short_description\": \"Reads a CSV file and returns a dictionary where keys are column names and values are lists of values for each row in the specified column.\"}"}
{"api_id": 20, "api_name": "csv.DictReader", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"parseCsv\", \"type\": \"function\", \"signature\": \"(filePath, delimiter=',')\", \"return_type\": \"list[dict]\", \"short_description\": \"Parses a CSV file and returns its contents as a list of dictionaries, with the first row serving as the keys for the dictionaries.\"}"}
{"api_id": 20, "api_name": "csv.DictReader", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"fetchCsvData\", \"type\": \"function\", \"signature\": \"(url, csvFilePath)\", \"return_type\": \"dict\", \"short_description\": \"Fetches data from a CSV file located at the given URL and returns it as a dictionary.\"}"}
{"api_id": 20, "api_name": "csv.DictReader", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"parseCsv\", \"type\": \"function\", \"signature\": \"(filePath, delimiter=',')\", \"return_type\": \"list[dict]\", \"short_description\": \"Parses a CSV file and returns its content as a list of dictionaries.\"}"}
{"api_id": 20, "api_name": "csv.DictReader", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"fetchAndCountCsvValues\", \"type\": \"function\", \"signature\": \"(url, columnName, csvFilePath)\", \"return_type\": \"collections.Counter\", \"short_description\": \"Fetches a CSV file from a given URL, reads its contents, and counts the occurrences of a specified column name.\"}"}
{"api_id": 20, "api_name": "csv.DictReader", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"fetchCsvData\", \"type\": \"function\", \"signature\": \"(url, columnName, filePath)\", \"return_type\": \"dict\", \"short_description\": \"Fetches a CSV file from a given URL, reads its data, and returns a dictionary with the values of a specified column.\"}"}
{"api_id": 20, "api_name": "csv.DictReader", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"parseCsv\", \"type\": \"function\", \"signature\": \"(filePath, delimiter=',')\", \"return_type\": \"list[dict]\", \"short_description\": \"Parses a CSV file and returns its content as a list of dictionaries where keys are the column headers and values are the corresponding cell values.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/310", "solution": "{\n  \"name\": \"generate_csv\",\n  \"type\": \"function\",\n  \"signature\": \"generate_csv(filename, columns, data, averages)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Generates a CSV file with the provided data and appends average values for specified columns.\"\n}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateCsv\", \"type\": \"function\", \"signature\": \"generate_csv(filename, columns, people_count)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with specified columns and data, and returns the file path.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateCsv\", \"type\": \"function\", \"signature\": \"generateCsv(filename: str, columns: List[str], data: List[List[str]], averages: List[str]) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with given columns, data, and average row.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/310", "solution": "{\n  \"name\": \"generate_csv\",\n  \"type\": \"function\",\n  \"signature\": \"generate_csv(filename, columns, data, averages)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Creates a CSV file with the given filename, columns, data, and appends average values at the end.\"\n}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateCsv\", \"type\": \"function\", \"signature\": \"generate_csv(filename, columns, data)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with the given filename, columns, and data. Returns the filepath of the generated CSV file.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateCsvFile\", \"type\": \"function\", \"signature\": \"generate_csv_file(filename, data)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with the given data and returns the file path.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/310", "solution": "{\n  \"name\": \"generate_csv_with_averages\",\n  \"type\": \"function\",\n  \"signature\": \"generate_csv_with_averages(filename, column_names, data_points, averages)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Generates a CSV file with given column names, data points, and appends a row of averages for the specified columns.\"\n}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateCsv\", \"type\": \"function\", \"signature\": \"generate_csv(filename, data, columns)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with the provided data and columns, and returns the file path.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateCsvFile\", \"type\": \"function\", \"signature\": \"def generate_csv_file(filename: str, data: list[list[str]], headers: list[str]) -> str:\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with the given data and headers, and returns the file path.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/310", "solution": "{\n  \"name\": \"write_csv_data\",\n  \"type\": \"callable\",\n  \"signature\": \"write_csv_data(fileobj, data, columns)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Writes data to a CSV file with the provided columns.\"\n}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorDataCsv\", \"type\": \"function\", \"signature\": \"generate_sensor_data_csv(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file containing sensor data for a given number of hours. The CSV file is saved in the specified output directory.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"generateSensorData(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with sensor data for the specified number of hours and saves it in the specified output directory.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with sensor data for a given number of hours and saves it in the specified output directory.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with sensor data for a given number of hours, optionally specifying an output directory.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"writeCsvData\", \"type\": \"function\", \"signature\": \"(data, filePath)\", \"return_type\": \"str\", \"short_description\": \"Writes data to a CSV file at the specified path. The data should be a list of lists, where each inner list represents a row in the CSV file.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorDataCSV\", \"type\": \"function\", \"signature\": \"hours, output_dir=None\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with sensor data for the specified number of hours and saves it to the specified output directory. Returns the path to the generated CSV file.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"writeCsvData\", \"type\": \"callable\", \"signature\": \"writeCsvData(file_path, data)\", \"return_type\": \"None\", \"short_description\": \"Writes data to a CSV file at the specified path. The data should be provided as a list of lists, where the first sublist is the header row.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"writeCsvData\", \"type\": \"function\", \"signature\": \"writeCsvData(filePath, data)\", \"return_type\": \"None\", \"short_description\": \"Writes data to a CSV file at the specified file path. The data should be a list of lists where the first sublist represents the header row and subsequent sublists represent data rows.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates sensor data in CSV format and saves it to a file. Returns the path to the generated CSV file.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"writeCsvData\", \"type\": \"function\", \"signature\": \"writeCsvData(data, filePath)\", \"return_type\": \"str\", \"short_description\": \"Writes data to a CSV file at the specified path. The data should be a list of lists, where each inner list represents a row of data. The first inner list is treated as the header row.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple(str, matplotlib.axes._subplots.AxesSubplot)\", \"short_description\": \"Generates a CSV file with traffic data and plots the data using matplotlib.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"def generate_traffic_data(hours, output_dir='./output') -> tuple[str, plt.Axes]\", \"return_type\": \"tuple[str, plt.Axes]\", \"short_description\": \"Generates a CSV file with simulated traffic data and plots the data over time.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"generateTrafficData(hours, output_dir='./output')\", \"return_type\": \"tuple(str, plt.Axes)\", \"short_description\": \"Generates a CSV file with traffic data and plots it using matplotlib.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"generate_traffic_data(hours, output_dir='./output')\", \"return_type\": \"tuple\", \"short_description\": \"Generates traffic data and visualizes it over time.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"def generate_traffic_data(hours, output_dir='./output')\", \"return_type\": \"tuple(str, plt.Axes)\", \"short_description\": \"Generates a CSV file with traffic data and plots the data using matplotlib.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"generateTrafficData\",\n  \"type\": \"function\",\n  \"signature\": \"generate_traffic_data(hours, output_dir='./output')\",\n  \"return_type\": \"tuple[str, plt.Axes]\",\n  \"short_description\": \"Generates a CSV file containing traffic data for a specified number of hours and plots the data using matplotlib.\"\n}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"def generate_traffic_data(hours, output_dir='./output') -> Tuple[str, Optional[plt.Axes]]\", \"return_type\": \"Tuple[str, Optional[plt.Axes]]\", \"short_description\": \"Generates a CSV file with traffic data and optionally returns a plot of the data.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"def generate_traffic_data(hours, output_dir='./output') -> tuple[str, plt.Axes]\", \"return_type\": \"tuple[str, plt.Axes]\", \"short_description\": \"Generates a CSV file with simulated traffic data and plots the data using matplotlib.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"generateTrafficData\",\n  \"type\": \"function\",\n  \"signature\": \"generate_traffic_data(hours, output_dir='./output')\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a CSV file with simulated traffic data and plots the data over time.\"\n}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"writeCsvData\", \"type\": \"callable\", \"signature\": \"write_csv_data(fileobj, data)\", \"return_type\": \"None\", \"short_description\": \"Writes data to a CSV file. The 'fileobj' argument can be any object supporting the file API. The 'data' argument is a list of lists where each inner list represents a row of data to be written to the CSV file.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"writeCsvData\", \"type\": \"callable\", \"signature\": \"write_csv_data(fileobj, data)\", \"return_type\": \"None\", \"short_description\": \"Writes a list of rows to a CSV file. Each row is a list of strings or numbers. The file is opened in write mode.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV report of weather conditions for a given number of hours and saves it to the specified output directory. It also creates a backup of the generated file.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"writeCsvData\", \"type\": \"function\", \"signature\": \"(fileobj, data, dialect='excel')\", \"return_type\": \"None\", \"short_description\": \"Writes a list of rows to a CSV file. The 'fileobj' argument can be any object that supports the file API. The 'data' argument is a list of lists, where each inner list represents a row in the CSV file. Optionally, a 'dialect' parameter can be specified to define the formatting style of the CSV file.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"generate_weather_report(hours, output_dir='./output') -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report in CSV format for the given number of hours and saves it to the specified directory. Returns the path to the generated CSV file.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherData\", \"type\": \"function\", \"signature\": \"generate_weather_data(hours, output_dir='./output') -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with weather data for a specified number of hours and returns the path to the generated file.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"generate_weather_report(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV report of weather conditions over a specified number of hours and saves it to a specified output directory. Returns the path to the generated CSV file.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"generate_weather_report(hours, output_dir='./output') -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report in CSV format with the specified number of hours and saves it to the specified output directory. The function also creates a backup of the generated CSV file.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV report of weather conditions for a given number of hours and saves it to the specified output directory. It also creates a backup of the CSV file in a backup directory within the output directory.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"writeCsv\", \"type\": \"function\", \"signature\": \"writeCsv(data, filePath)\", \"return_type\": \"None\", \"short_description\": \"Writes data to a CSV file at the specified path.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"generate_weather_report(hours, output_dir='./output') -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV report of weather conditions for a given number of hours and saves it to a specified directory. Returns the path to the generated report.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"writeCsvData\", \"type\": \"function\", \"signature\": \"writeCsvData(filePath, fields, data)\", \"return_type\": \"None\", \"short_description\": \"Writes CSV data to a specified file, including headers if the file does not exist.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"writeCsvData\", \"type\": \"function\", \"signature\": \"writeCsvData(fileObj, fields, data)\", \"return_type\": \"None\", \"short_description\": \"Writes CSV data to a file. The file is created if it does not exist, and headers are written if the file is new.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"writeCsvData\", \"type\": \"function\", \"signature\": \"writeCsvData(filePath, fields, data)\", \"return_type\": \"None\", \"short_description\": \"Writes CSV data to a specified file, including headers if the file does not already exist. Accepts a file path, a list of fields, and a list of data rows.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"writeCsvData\", \"type\": \"function\", \"signature\": \"writeCsvData(fileobj, rows, headers)\", \"return_type\": \"None\", \"short_description\": \"Writes data to a CSV file. The file object should be opened in append mode. If headers are provided, they will be written at the top of the file.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"writeCsvData\", \"type\": \"function\", \"signature\": \"write_csv_data(file_path, fields, data)\", \"return_type\": \"None\", \"short_description\": \"Writes CSV data to a file. The function takes a file path, a list of fields, and a list of data rows as arguments.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"writeCsvData\", \"type\": \"function\", \"signature\": \"writeCsvData(filePath, fields, data)\", \"return_type\": \"None\", \"short_description\": \"Writes CSV data to a specified file, including headers if the file does not exist.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"writeCsv\", \"type\": \"function\", \"signature\": \"write_csv(file_obj, rows, headers=None)\", \"return_type\": \"None\", \"short_description\": \"Writes rows of data to a CSV file. Optionally includes headers as the first row.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"writeCsv\", \"type\": \"function\", \"signature\": \"writeCsv(filePath, headers, data)\", \"return_type\": \"None\", \"short_description\": \"Writes data to a CSV file at the specified path. If the file does not exist, it will create it and write the headers.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"writeCsvData\", \"type\": \"function\", \"signature\": \"write_csv_data(file_path, fields, data)\", \"return_type\": \"None\", \"short_description\": \"Writes data to a CSV file, creating headers if the file does not exist.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generate_csv\", \"type\": \"function\", \"signature\": \"generate_csv(file_name, fields, data)\", \"return_type\": \"None\", \"short_description\": \"Generates a CSV file with the provided file name, fields, and data. The data is appended to the file if it already exists.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"generateCsvFromUrl\", \"type\": \"function\", \"signature\": \"generateCsvFromUrl(url: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file from the HTML content of a given URL and returns the path to the generated CSV file.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"writeCsvData\", \"type\": \"callable\", \"signature\": \"write_csv_data(data, file_path)\", \"return_type\": \"str\", \"short_description\": \"This function writes data to a CSV file. It takes a list of lists (data) and a file path (file_path) as arguments and returns the file path of the created CSV file.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/723", "solution": "{\n  \"name\": \"writeCsvData\",\n  \"type\": \"function\",\n  \"signature\": \"writeCsvData(data, filePath)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"This function writes a list of data rows to a CSV file at the specified path.\"\n}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"writeCsvData\", \"type\": \"callable\", \"signature\": \"writeCsvData(fileobj, data)\", \"return_type\": \"None\", \"short_description\": \"Writes data to a CSV file. The 'fileobj' argument should be an open file object, and 'data' should be a list of lists where each inner list represents a row in the CSV file.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"writeCsvData\", \"type\": \"callable\", \"signature\": \"writeCsvData(data, filePath)\", \"return_type\": \"str\", \"short_description\": \"This function writes a list of lists (data) to a CSV file at the specified filePath. Each sublist represents a row in the CSV file, and the elements of the sublist represent the cells in the row.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"generateCsvFile\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file from the HTML data fetched from the provided URL.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"writeCsvData\", \"type\": \"callable\", \"signature\": \"(fileobj, data)\", \"return_type\": \"None\", \"short_description\": \"Writes data to a CSV file. This function takes a file object and a 2D list of data as arguments and writes the data to the CSV file. The data is written row by row.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"writeCsvData\", \"type\": \"callable\", \"signature\": \"writeCsvData(fileobj, data)\", \"return_type\": \"None\", \"short_description\": \"Writes a list of data rows to a CSV file. Each row is a list of strings. The file object must support the file API.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"writeCsvData\", \"type\": \"function\", \"signature\": \"writeCsvData(data, filePath)\", \"return_type\": \"str\", \"short_description\": \"This function writes data to a CSV file at the specified path.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"writeCsvData\", \"type\": \"callable\", \"signature\": \"writeCsvData(fileobj, data)\", \"return_type\": \"None\", \"short_description\": \"Writes data to a CSV file. The 'fileobj' argument should be an open file object in write mode, and 'data' should be a list of lists representing the rows to be written.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"convertCsv\", \"type\": \"function\", \"signature\": \"convert_csv(input_file, output_file, dialect='excel')\", \"return_type\": \"None\", \"short_description\": \"Converts a CSV file from one format to another using the specified dialect.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"processCsvFiles\", \"type\": \"function\", \"signature\": \"(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\", \"return_type\": \"list\", \"short_description\": \"Processes CSV files in a directory by renaming them and copying their contents.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"copyCsvFiles\", \"type\": \"function\", \"signature\": \"copy_csv_files(source_directory: str, target_directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\", \"return_type\": \"list\", \"short_description\": \"Copies CSV files from a source directory to a target directory, renaming them by removing the numeric suffix.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"convert_csv\", \"type\": \"function\", \"signature\": \"convert_csv(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\", \"return_type\": \"list\", \"short_description\": \"Converts CSV files in a directory by copying their contents to new files with a .csv extension.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"convertCsvFiles\", \"type\": \"function\", \"signature\": \"(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\", \"return_type\": \"list\", \"short_description\": \"Converts CSV files in a directory by copying content from one file to another with a modified name based on a given pattern.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/771", "solution": "{\n  \"name\": \"convert_csv\",\n  \"type\": \"function\",\n  \"signature\": \"convert_csv(input_file_path: str, output_file_path: str)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Converts a CSV file from one path to another, copying the contents without altering the structure.\"\n}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"convertCsvFiles\", \"type\": \"function\", \"signature\": \"(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\", \"return_type\": \"list\", \"short_description\": \"Converts CSV files in a directory by copying their content to new files with a '.csv' extension.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"convertCsvFiles\", \"type\": \"function\", \"signature\": \"convert_csv_files(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\", \"return_type\": \"list\", \"short_description\": \"Converts CSV files in a directory by renaming them and copying their contents.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"convert_csv\", \"type\": \"function\", \"signature\": \"def convert_csv(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list:\", \"return_type\": \"list[str]\", \"short_description\": \"Converts CSV files in a directory by renaming them without the trailing number.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"convertCsvFiles\", \"type\": \"function\", \"signature\": \"convertCsvFiles(directoryPath: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\", \"return_type\": \"list\", \"short_description\": \"Converts CSV files in a directory by renaming them without the trailing digits and extension.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"generateCsvFile\", \"type\": \"function\", \"signature\": \"generate_csv_file(filename, content)\", \"return_type\": \"None\", \"short_description\": \"Creates a CSV file with the given filename and content.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"writeCsvData\", \"type\": \"function\", \"signature\": \"(fileobj, data, dialect='excel')\", \"return_type\": \"None\", \"short_description\": \"Writes data to a CSV file. Accepts a file object, data to be written, and an optional dialect for formatting.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"generateCsv\", \"type\": \"function\", \"signature\": \"def generateCsv(filename, content)\", \"return_type\": \"None\", \"short_description\": \"Generates a CSV file with the provided content and saves it to the specified filename.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"generateCsv\", \"type\": \"function\", \"signature\": \"generateCsv(filename, content)\", \"return_type\": \"None\", \"short_description\": \"Creates a CSV file with the given filename and content.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"writeCsv\", \"type\": \"callable\", \"signature\": \"writeCsv(fileobj, rows)\", \"return_type\": \"None\", \"short_description\": \"Writes multiple rows to a CSV file. The 'fileobj' argument should be an object supporting the file API, and 'rows' should be a list of lists representing the data to be written.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"writeCsv\", \"type\": \"function\", \"signature\": \"writeCsv(fileobj, rows, dialect='excel', **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Writes multiple rows to a CSV file. The fileobj argument can be any object that supports the file API.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/800", "solution": "{\n  \"name\": \"writeCsvRows\",\n  \"type\": \"function\",\n  \"signature\": \"write_csv_rows(fileobj, rows, dialect='excel', **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Writes multiple rows to a CSV file. This function is a higher-level abstraction over the csv.writer functionality, simplifying the process of writing multiple rows to a CSV file.\"\n}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"generateCsv\", \"type\": \"function\", \"signature\": \"generateCsv(filename, content)\", \"return_type\": \"None\", \"short_description\": \"Generates a CSV file with the provided content and saves it to the specified filename.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"generateCsv\", \"type\": \"function\", \"signature\": \"def generateCsv(filename, content)\", \"return_type\": \"None\", \"short_description\": \"Creates a CSV file with the given content and saves it to the specified filename.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"generateCsv\", \"type\": \"function\", \"signature\": \"def generateCsv(filename, content)\", \"return_type\": \"None\", \"short_description\": \"Generates a CSV file with the provided content and saves it to the specified filename.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"fetchAndWriteLinks\", \"type\": \"function\", \"signature\": \"(url: str, base_url: str, csv_file: str) -> int\", \"return_type\": \"int\", \"short_description\": \"Fetches web page content and writes all found links to a CSV file.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"scrapeWebsite\", \"type\": \"function\", \"signature\": \"scrape_website(url: str, base_url: str = 'https://www.example.com', csv_file: str = 'scraped_data.csv') -> int\", \"return_type\": \"int\", \"short_description\": \"Scrapes a website for links and saves them to a CSV file.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"fetchAndWriteLinks\", \"type\": \"function\", \"signature\": \"fetchAndWriteLinks(url: str, baseUrl: str, csvFile: str) -> int\", \"return_type\": \"int\", \"short_description\": \"Fetches a webpage, extracts all links, and writes them to a CSV file.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"scrapeLinksToCsv\", \"type\": \"function\", \"signature\": \"def scrape_links_to_csv(url: str, base_url: str = 'https://www.example.com', csv_file: str = 'scraped_data.csv') -> int:\", \"return_type\": \"int\", \"short_description\": \"Scrapes all links from a given webpage and writes them to a CSV file.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"fetchAndWriteLinks\", \"type\": \"function\", \"signature\": \"def fetchAndWriteLinks(url: str, base_url: str = 'https://www.example.com', csv_file: str = 'scraped_data.csv') -> int:\", \"return_type\": \"int\", \"short_description\": \"Fetches web page content and writes all found links to a CSV file.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"saveLinksToCsv\", \"type\": \"function\", \"signature\": \"save_links_to_csv(links, file_path)\", \"return_type\": \"None\", \"short_description\": \"Saves a list of links to a CSV file. Each link is stored in a separate row.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"extractLinks\", \"type\": \"function\", \"signature\": \"(url: str, base_url: str = \\\"https://www.example.com\\\", csv_file: str = \\\"scraped_data.csv\\\") -> int\", \"return_type\": \"int\", \"short_description\": \"Extracts all links from a webpage and writes them to a CSV file.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"scrapeWebData\", \"type\": \"function\", \"signature\": \"scrape_web_data(url: str, base_url: str = \\\"https://www.example.com\\\", csv_file: str = \\\"scraped_data.csv\\\") -> int\", \"return_type\": \"int\", \"short_description\": \"This function takes a URL, a base URL, and a CSV file name as arguments. It scrapes data from the given URL, extracts all links found, and writes them to the specified CSV file. It returns the number of links found.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"extractLinks\", \"type\": \"function\", \"signature\": \"extract_links(soup)\", \"return_type\": \"list\", \"short_description\": \"Extracts all the links from a BeautifulSoup object and returns them as a list of absolute URLs.\"}"}
{"api_id": 21, "api_name": "csv.writer", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"fetchAndWriteLinks\", \"type\": \"function\", \"signature\": \"(url: str, base_url: str = 'https://www.example.com', csv_file: str = 'scraped_data.csv') -> int\", \"return_type\": \"int\", \"short_description\": \"Fetches web content from a given URL, extracts all links, and writes them to a CSV file.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"parseCsv\", \"type\": \"function\", \"signature\": \"(file_path, dialect='excel', **kwargs)\", \"return_type\": \"list\", \"short_description\": \"Parses a CSV file and returns its contents as a list of rows. The optional dialect and keyword arguments can be used to customize the parsing behavior.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"readCsvData\", \"type\": \"callable\", \"signature\": \"read_csv_data(file_path, dialect='excel')\", \"return_type\": \"list\", \"short_description\": \"Reads data from a CSV file and returns it as a list of rows. The optional 'dialect' parameter allows specifying the CSV parsing dialect.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"readCsvData\", \"type\": \"function\", \"signature\": \"(file_path, dialect='excel', **kwargs)\", \"return_type\": \"list\", \"short_description\": \"Reads data from a CSV file and returns it as a list of lists. The optional dialect and keyword arguments allow customization of the CSV parsing behavior.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"processCsvCommands\", \"type\": \"function\", \"signature\": \"process_csv_commands(file_path, output_dir)\", \"return_type\": \"list[str]\", \"short_description\": \"Processes a CSV file containing commands and executes each command, writing the output to specified directory.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"parseCsv\", \"type\": \"function\", \"signature\": \"(file_path, dialect='excel', **kwargs)\", \"return_type\": \"list\", \"short_description\": \"Parses a CSV file and returns its contents as a list of rows. The optional 'dialect' parameter allows specifying the CSV dialect, and additional keyword arguments can override settings provided by the dialect.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"executeCommands\", \"type\": \"function\", \"signature\": \"(commands_file_path, output_dir_path)\", \"return_type\": \"List[str]\", \"short_description\": \"Executes a list of commands from a CSV file and writes their outputs to specified directory.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"parseCsv\", \"type\": \"function\", \"signature\": \"(file_path, dialect='excel')\", \"return_type\": \"list\", \"short_description\": \"Parses a CSV file and returns its contents as a list of rows.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"processCommands\", \"type\": \"function\", \"signature\": \"(commands_file_path, output_dir_path)\", \"return_type\": \"List[str]\", \"short_description\": \"Processes a CSV file containing commands and executes them, writing the output to specified directory.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"execute_commands\", \"type\": \"function\", \"signature\": \"execute_commands(commands_list, output_dir)\", \"return_type\": \"list\", \"short_description\": \"Executes a list of shell commands and writes their output to files in a specified directory.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"readCsvFile\", \"type\": \"function\", \"signature\": \"(file_path, dialect='excel', **kwargs)\", \"return_type\": \"Iterator[List[str]]\", \"short_description\": \"Reads a CSV file and returns an iterator of rows. The optional dialect and keyword arguments can be used to customize the parsing behavior.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/509", "solution": "{\"name\": \"extractCsvContent\", \"type\": \"function\", \"signature\": \"(file_path, delimiter='', quotechar='')\", \"return_type\": \"list[list[str]]\", \"short_description\": \"Extracts the contents of a CSV file into a nested list of strings. Each inner list represents a row from the CSV file.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/509", "solution": "{\"name\": \"parseCsv\", \"type\": \"function\", \"signature\": \"parseCsv(filePath: str, delimiter: str = ',', quotechar: str = '\"') -> List[List[str]]\", \"return_type\": \"List[List[str]]\", \"short_description\": \"Parses a CSV file and returns its contents as a nested list of strings.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/509", "solution": "{\"name\": \"readCsv\", \"type\": \"function\", \"signature\": \"read_csv(file_path, delimiter=',', quotechar='\"')\", \"return_type\": \"list[list[str]]\", \"short_description\": \"Reads a CSV file and returns its content as a nested list of strings. The function handles file I/O and CSV parsing.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/509", "solution": "{\"name\": \"parseCsv\", \"type\": \"function\", \"signature\": \"parseCsv(filePath: str, delimiter: str = ',', quotechar: str = '\"') -> list[list[str]]\", \"return_type\": \"list[list[str]]\", \"short_description\": \"Parses a CSV file into a nested list of strings. Each row is represented as a list of strings.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/509", "solution": "{\"name\": \"readCsvData\", \"type\": \"function\", \"signature\": \"read_csv_data(file_path: str, delimiter: str = ',', quotechar: str = '\"') -> list[list[str]]\", \"return_type\": \"list[list[str]]\", \"short_description\": \"Reads the contents of a CSV file into a 2D list of strings.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/509", "solution": "{\"name\": \"readCsvToDict\", \"type\": \"function\", \"signature\": \"(file_path, delimiter='', quotechar='')\", \"return_type\": \"list[dict]\", \"short_description\": \"Reads a CSV file and returns its contents as a list of dictionaries.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/509", "solution": "{\"name\": \"parseCsvFile\", \"type\": \"function\", \"signature\": \"def parseCsvFile(file_path: str, delimiter: str = ',', quotechar: str = '\"') -> list[list[str]]\", \"return_type\": \"list[list[str]]\", \"short_description\": \"Parses a CSV file into a nested list of strings, where each inner list represents a row from the CSV file.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/509", "solution": "{\n  \"name\": \"readCsvContent\",\n  \"type\": \"function\",\n  \"signature\": \"read_csv_content(file_path, delimiter=',', quotechar='\"')\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Reads the content of a CSV file and returns it as a list of rows.\"\n}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/509", "solution": "{\"name\": \"readCsv\", \"type\": \"function\", \"signature\": \"read_csv(file_path: str, delimiter: str = ',', quotechar: str = '\"') -> List[List[str]]\", \"return_type\": \"List[List[str]]\", \"short_description\": \"Reads a CSV file and returns its contents as a list of lists. This function handles the file opening and reading process, providing a user-friendly interface for CSV data retrieval.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/509", "solution": "{\"name\": \"readCsv\", \"type\": \"function\", \"signature\": \"readCsv(filePath: str, delimiter: str = ',', quotechar: str = '\"')\", \"return_type\": \"List[List[str]]\", \"short_description\": \"Reads a CSV file and returns its contents as a nested list of strings.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"readCsv\", \"type\": \"function\", \"signature\": \"read_csv(file_path: str) -> List[List[str]]\", \"return_type\": \"List[List[str]]\", \"short_description\": \"Reads a CSV file and returns its contents as a list of rows.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"readCsvData\", \"type\": \"function\", \"signature\": \"(file_path: str) -> List[List[str]]\", \"return_type\": \"List[List[str]]\", \"short_description\": \"Reads a CSV file and returns its contents as a list of lists.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"readCsv\", \"type\": \"function\", \"signature\": \"read_csv(file_path: str) -> list[list[str]]\", \"return_type\": \"list[list[str]]\", \"short_description\": \"Reads a CSV file and returns its contents as a list of rows.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"readCsvData\", \"type\": \"function\", \"signature\": \"def read_csv_data(file_path: str) -> Tuple[List[List[str]], Optional[plt.Axes]]\", \"return_type\": \"Tuple[List[List[str]], Optional[plt.Axes]]\", \"short_description\": \"Reads a CSV file and returns its contents along with any plotted duplicates using matplotlib.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"readCsv\", \"type\": \"function\", \"signature\": \"(file_path: str) -> List[List[str]]\", \"return_type\": \"List[List[str]]\", \"short_description\": \"Reads a CSV file and returns its contents as a list of lists.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"readCsv\", \"type\": \"function\", \"signature\": \"readCsv(filePath: str) -> List[List[str]]\", \"return_type\": \"List[List[str]]\", \"short_description\": \"Reads a CSV file and returns its contents as a list of lists.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"parseCsv\", \"type\": \"function\", \"signature\": \"(file_path: str) -> Tuple[Counter, Optional[plt.Axes]]\", \"return_type\": \"Tuple[Counter, Optional[plt.Axes]]\", \"short_description\": \"Parses a CSV file and returns a Counter of duplicate rows along with a matplotlib plot of the duplicates if any.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"parseCsv\", \"type\": \"function\", \"signature\": \"(file_path: str) -> Tuple[Counter, plt.Axes]\", \"return_type\": \"Tuple[Counter, plt.Axes]\", \"short_description\": \"Parses a CSV file and identifies duplicate rows, returning the duplicates and optionally plotting them.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/528", "solution": "{\n  \"name\": \"read_csv_duplicates\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path: str) -> Tuple[Counter, Optional[plt.Axes]]\",\n  \"return_type\": \"Tuple[Counter, Optional[plt.Axes]]\",\n  \"short_description\": \"Reads a CSV file and identifies and returns duplicate entries, optionally plotting them.\"\n}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"readCsv\", \"type\": \"function\", \"signature\": \"readCsv(filePath: str) -> List[List[str]]\", \"return_type\": \"List[List[str]]\", \"short_description\": \"Reads a CSV file and returns its contents as a list of lists, with each inner list representing a row and its elements representing the fields in that row.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"parseCsv\", \"type\": \"function\", \"signature\": \"parseCsv(filePath: str) -> List[List[str]]\", \"return_type\": \"List[List[str]]\", \"short_description\": \"Parses a CSV file and returns its contents as a list of lists, with each inner list representing a row from the CSV file.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"processCsvData\", \"type\": \"function\", \"signature\": \"def processCsvData(csv_file, dialect='excel') -> None\", \"return_type\": \"None\", \"short_description\": \"Processes a CSV file and outputs the most common words and their counts.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"parseCsv\", \"type\": \"function\", \"signature\": \"parseCsv(filePath: str) -> list[list[str]]\", \"return_type\": \"list[list[str]]\", \"short_description\": \"Parses a CSV file and returns its contents as a list of rows, where each row is a list of strings.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"readCsv\", \"type\": \"function\", \"signature\": \"readCsv(filePath: str) -> list[list[str]]\", \"return_type\": \"list[list[str]]\", \"short_description\": \"Reads a CSV file and returns its contents as a list of rows, where each row is a list of strings.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"processCsvData\", \"type\": \"function\", \"signature\": \"(csv_file: str) -> None\", \"return_type\": \"None\", \"short_description\": \"Processes a CSV file and counts the words, providing visual representation of the most common words.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"parseCsv\", \"type\": \"function\", \"signature\": \"parseCsv(filePath: str) -> List[List[str]]\", \"return_type\": \"List[List[str]]\", \"short_description\": \"Parses a CSV file and returns its contents as a list of lists, where each inner list represents a row from the CSV file.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/579", "solution": "{\n  \"name\": \"parseCsvData\",\n  \"type\": \"function\",\n  \"signature\": \"parseCsvData(file_path, dialect='excel')\",\n  \"return_type\": \"list[list[str]]\",\n  \"short_description\": \"Parses a CSV file and returns its contents as a nested list of strings.\"\n}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"readCsvData\", \"type\": \"function\", \"signature\": \"readCsvData(filePath: str) -> list[list[str]]\", \"return_type\": \"list[list[str]]\", \"short_description\": \"Reads a CSV file and returns its data as a list of lists, with each inner list representing a row from the CSV file.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"readCsvData\", \"type\": \"function\", \"signature\": \"(csv_file: str) -> list[list[str]]\", \"return_type\": \"list[list[str]]\", \"short_description\": \"Reads data from a CSV file and returns it as a list of rows. Each row is represented as a list of strings.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"readCsvData\", \"type\": \"function\", \"signature\": \"readCsvData(filePath: str) -> List[List[str]]\", \"return_type\": \"List[List[str]]\", \"short_description\": \"Reads a CSV file and returns its contents as a list of lists.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"flattenCsvFiles\", \"type\": \"function\", \"signature\": \"def flattenCsvFiles(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list:\", \"return_type\": \"list\", \"short_description\": \"Flattens all CSV files in a directory by copying their contents to new CSV files with the same base name.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/771", "solution": "{\n  \"name\": \"process_csv_files\",\n  \"type\": \"function\",\n  \"signature\": \"process_csv_files(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Processes CSV files in a directory to rename them by removing a numeric suffix.\"\n}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"convertCsvFiles\", \"type\": \"function\", \"signature\": \"(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\", \"return_type\": \"list\", \"short_description\": \"Converts CSV files in a directory by renaming them and copying their contents. It uses a regular expression pattern to identify the CSV files to be processed.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"convertCsvFiles\", \"type\": \"function\", \"signature\": \"convert_csv_files(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\", \"return_type\": \"list\", \"short_description\": \"Converts CSV files in a directory based on a given pattern by copying the contents from matched files to new files with a specific prefix.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"convertCsvFiles\", \"type\": \"function\", \"signature\": \"(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\", \"return_type\": \"list\", \"short_description\": \"Converts CSV files in a directory by renaming them and copying their contents. It uses a regex pattern to identify the files and a CSV reader/writer to copy the data.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"convertCsvFiles\", \"type\": \"function\", \"signature\": \"convert_csv_files(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\", \"return_type\": \"list\", \"short_description\": \"Converts CSV files in a directory by renaming them based on a pattern and copying their contents.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"processCsvFiles\", \"type\": \"function\", \"signature\": \"(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\", \"return_type\": \"list\", \"short_description\": \"Processes CSV files in a directory to rename them based on a pattern and copy their contents.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/771", "solution": "{\n  \"name\": \"process_csv_files\",\n  \"type\": \"function\",\n  \"signature\": \"def process_csv_files(directory: str, pattern: str = r'^(.*?)-\\d+\\\\.csv$') -> list:\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Processes CSV files in a directory by copying them with a modified name based on a regex pattern.\"\n}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"convertCsvFiles\", \"type\": \"function\", \"signature\": \"convert_csv_files(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\", \"return_type\": \"list\", \"short_description\": \"Converts CSV files in a directory by renaming them and copying their contents.\"}"}
{"api_id": 22, "api_name": "csv.reader", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"extractCsvFiles\", \"type\": \"function\", \"signature\": \"(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\", \"return_type\": \"list\", \"short_description\": \"Extracts CSV files from a directory based on a given pattern and renames them by removing the numeric suffix.\"}"}
{"api_id": 23, "api_name": "cv2.COLOR_BGR2RGB", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomRGBImage\", \"type\": \"function\", \"signature\": \"(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255)\", \"return_type\": \"ax, image\", \"short_description\": \"Generates a random RGB image using OpenCV and Matplotlib.\"}"}
{"api_id": 23, "api_name": "cv2.COLOR_BGR2RGB", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"convertColorBGR2RGB\", \"type\": \"function\", \"signature\": \"(image)\", \"return_type\": \"(convertedImage)\", \"short_description\": \"Converts an image from BGR color space to RGB color space.\"}"}
{"api_id": 23, "api_name": "cv2.COLOR_BGR2RGB", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"convertColorSpace\", \"type\": \"function\", \"signature\": \"(image, target_color_space)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Converts the color space of an image to the specified target color space.\"}"}
{"api_id": 23, "api_name": "cv2.COLOR_BGR2RGB", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"convertImageColor\", \"type\": \"function\", \"signature\": \"convertImageColor(image, targetColorSpace)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Converts an image from one color space to another.\"}"}
{"api_id": 23, "api_name": "cv2.COLOR_BGR2RGB", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"convertColorSpace\", \"type\": \"function\", \"signature\": \"(image, target_color_space)\", \"return_type\": \"ndarray\", \"short_description\": \"Converts an image from one color space to another.\"}"}
{"api_id": 23, "api_name": "cv2.COLOR_BGR2RGB", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255)\", \"return_type\": \"tuple(ax, image)\", \"short_description\": \"Generates a random RGB image with specified size and pixel value range.\"}"}
{"api_id": 23, "api_name": "cv2.COLOR_BGR2RGB", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomRGBImage\", \"type\": \"function\", \"signature\": \"def generateRandomRGBImage(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255):\", \"return_type\": \"tuple(plt.Axes, np.ndarray)\", \"short_description\": \"Generates a random RGB image with specified size and pixel value range.\"}"}
{"api_id": 23, "api_name": "cv2.COLOR_BGR2RGB", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomRGBImage\", \"type\": \"function\", \"signature\": \"generateRandomRGBImage(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255)\", \"return_type\": \"tuple(Axes, ndarray)\", \"short_description\": \"Generates a random RGB image with specified size and intensity range.\"}"}
{"api_id": 23, "api_name": "cv2.COLOR_BGR2RGB", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"def generateRandomImage(size: tuple, low: int, high: int) -> np.ndarray\", \"return_type\": \"np.ndarray\", \"short_description\": \"Generates a random image of a specified size with pixel values within a given range.\"}"}
{"api_id": 23, "api_name": "cv2.COLOR_BGR2RGB", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"convertColorSpace\", \"type\": \"function\", \"signature\": \"(image, target_color_space)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Converts the color space of an image from one format to another.\"}"}
{"api_id": 24, "api_name": "cv2.imread", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"loadImage\", \"type\": \"function\", \"signature\": \"(filename: str, flags: int) -> np.ndarray\", \"return_type\": \"np.ndarray\", \"short_description\": \"Loads an image from a file with specified flags and returns it as a NumPy array.\"}"}
{"api_id": 24, "api_name": "cv2.imread", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"loadImage\", \"type\": \"callable\", \"signature\": \"loadImage(filename: str, flags: int) -> np.ndarray\", \"return_type\": \"np.ndarray\", \"short_description\": \"Loads an image from a file with specified flags and returns it as a NumPy array.\"}"}
{"api_id": 24, "api_name": "cv2.imread", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"loadImage\", \"type\": \"function\", \"signature\": \"loadImage(filePath: str, flags: int) -> np.ndarray\", \"return_type\": \"np.ndarray\", \"short_description\": \"Loads an image from a file with specified flags and returns it as a NumPy array.\"}"}
{"api_id": 24, "api_name": "cv2.imread", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"loadImage\", \"type\": \"callable\", \"signature\": \"filename\", \"return_type\": \"Mat\", \"short_description\": \"Loads an image from a file and returns it as a Mat object.\"}"}
{"api_id": 24, "api_name": "cv2.imread", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"loadImage\", \"type\": \"function\", \"signature\": \"loadImage(filePath, flag)\", \"return_type\": \"Mat\", \"short_description\": \"Loads an image from the specified file path and returns it. Supports a variety of image formats.\"}"}
{"api_id": 24, "api_name": "cv2.imread", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"loadImage\", \"type\": \"function\", \"signature\": \"loadImage(filename, flags)\", \"return_type\": \"Mat\", \"short_description\": \"Loads an image from a file and returns it. Supports various image formats.\"}"}
{"api_id": 24, "api_name": "cv2.imread", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"loadImage\", \"type\": \"function\", \"signature\": \"loadImage(filename: str, flags: int) -> np.ndarray\", \"return_type\": \"np.ndarray\", \"short_description\": \"Loads an image from a file with specified flags and returns it as a NumPy array.\"}"}
{"api_id": 24, "api_name": "cv2.imread", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"loadImage\", \"type\": \"callable\", \"signature\": \"loadImage(filename, flags)\", \"return_type\": \"Mat\", \"short_description\": \"Loads an image from a file and returns it. Supports a variety of image formats.\"}"}
{"api_id": 24, "api_name": "cv2.imread", "task_id": "BigCodeBench/424", "solution": "{\n  \"name\": \"loadImage\",\n  \"type\": \"function\",\n  \"signature\": \"loadImage(filePath, flags)\",\n  \"return_type\": \"Mat\",\n  \"short_description\": \"Loads an image from a file and returns it. Supports a variety of image formats.\"\n}"}
{"api_id": 24, "api_name": "cv2.imread", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"loadImage\", \"type\": \"function\", \"signature\": \"loadImage(filename, flags)\", \"return_type\": \"Mat\", \"short_description\": \"Loads an image from a file and returns it. Supports a variety of image formats.\"}"}
{"api_id": 25, "api_name": "cv2.imwrite", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"saveImage\", \"type\": \"callable\", \"signature\": \"saveImage(filename, image, params)\", \"return_type\": \"bool\", \"short_description\": \"Saves an image to a specified file. The image format is chosen based on the filename extension.\"}"}
{"api_id": 25, "api_name": "cv2.imwrite", "task_id": "BigCodeBench/424", "solution": "{\n  \"name\": \"generate_segmented_images\",\n  \"type\": \"function\",\n  \"signature\": \"(image_path, n_clusters, random_seed)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates segmented images from a given image using KMeans clustering and saves them as separate files.\"\n}"}
{"api_id": 25, "api_name": "cv2.imwrite", "task_id": "BigCodeBench/424", "solution": "{\n  \"name\": \"save_images\",\n  \"type\": \"function\",\n  \"signature\": \"save_images(images, file_paths, params)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Saves multiple images to the specified file paths with optional format-specific parameters.\"\n}"}
{"api_id": 25, "api_name": "cv2.imwrite", "task_id": "BigCodeBench/424", "solution": "{\n  \"name\": \"generate_color_palette\",\n  \"type\": \"function\",\n  \"signature\": \"generate_color_palette(image_path, n_clusters, random_seed)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a color palette from an image using K-means clustering.\"\n}"}
{"api_id": 25, "api_name": "cv2.imwrite", "task_id": "BigCodeBench/424", "solution": "{\n  \"name\": \"save_images\",\n  \"type\": \"callable\",\n  \"signature\": \"save_images(filename, images, params)\",\n  \"return_type\": \"bool\",\n  \"short_description\": \"Saves a list of images to specified files.\"\n}"}
{"api_id": 25, "api_name": "cv2.imwrite", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"saveImage\", \"type\": \"callable\", \"signature\": \"[filename, image, params]\", \"return_type\": \"retval\", \"short_description\": \"Saves an image to a specified file. Supports various image formats and provides options for specifying image quality, compression, and other parameters.\"}"}
{"api_id": 25, "api_name": "cv2.imwrite", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"generateColorPalette\", \"type\": \"function\", \"signature\": \"(imagePath: string, numClusters: int) -> (List[List[int]], List[List[int]])\", \"return_type\": \"List[List[int]]\", \"short_description\": \"Generates a color palette from an image using k-means clustering.\"}"}
{"api_id": 25, "api_name": "cv2.imwrite", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"generateColorPalette\", \"type\": \"function\", \"signature\": \"generateColorPalette(imagePath: string, nClusters: int) -> list[list[int]]\", \"return_type\": \"list[list[int]]\", \"short_description\": \"Generates a color palette from an image using K-means clustering.\"}"}
{"api_id": 25, "api_name": "cv2.imwrite", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"generateImageSegments\", \"type\": \"function\", \"signature\": \"generateImageSegments(imagePath: string, nClusters: number, randomSeed: number) -> (originalImage: Mat, segmentedImage: Mat, clusterImages: [string])\", \"return_type\": \"(Mat, Mat, [string])\", \"short_description\": \"Generates segmented images from a given image, saves each cluster as a separate image, and returns the original and segmented images along with the paths to the cluster images.\"}"}
{"api_id": 25, "api_name": "cv2.imwrite", "task_id": "BigCodeBench/424", "solution": "{\n  \"name\": \"save_image\",\n  \"type\": \"function\",\n  \"signature\": \"save_image(filename, image, params=None)\",\n  \"return_type\": \"bool\",\n  \"short_description\": \"Saves an image to a specified file. Supports various image formats and provides options for saving with specific parameters.\"\n}"}
{"api_id": 26, "api_name": "cv2.cvtColor", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"convertColor\", \"type\": \"callable\", \"signature\": \"(src, code[, dst[, dstCn]]) -> dst\", \"return_type\": \"dst\", \"short_description\": \"Converts an image from one color space to another.\"}"}
{"api_id": 26, "api_name": "cv2.cvtColor", "task_id": "BigCodeBench/214", "solution": "{\n  \"name\": \"convert_color_space\",\n  \"type\": \"function\",\n  \"signature\": \"(src, code, dst=None, dstCn=0)\",\n  \"return_type\": \"dst\",\n  \"short_description\": \"Converts an image from one color space to another.\"\n}"}
{"api_id": 26, "api_name": "cv2.cvtColor", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"convertColor\", \"type\": \"callable\", \"signature\": \"convertColor(src, code[, dst[, dstCn]]) -> dst\", \"return_type\": \"dst\", \"short_description\": \"Converts an image from one color space to another.\"}"}
{"api_id": 26, "api_name": "cv2.cvtColor", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"convertColor\", \"type\": \"callable\", \"signature\": \"convertColor(src, code[, dst[, dstCn]]) -> dst\", \"return_type\": \"dst\", \"short_description\": \"Converts an image from one color space to another, similar to cv2.cvtColor but with a different focus.\"}"}
{"api_id": 26, "api_name": "cv2.cvtColor", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"convertColor\", \"type\": \"callable\", \"signature\": \"convertColor(src, code[, dst[, dstCn]]) -> dst\", \"return_type\": \"dst\", \"short_description\": \"Converts an image from one color space to another. This function provides a more Pythonic interface compared to the hierarchical cv2.cvtColor.\"}"}
{"api_id": 26, "api_name": "cv2.cvtColor", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"convertColor\", \"type\": \"callable\", \"signature\": \"convert_color(src, code, dst=None, dstCn=0)\", \"return_type\": \"dst\", \"short_description\": \"Converts an image from one color space to another.\"}"}
{"api_id": 26, "api_name": "cv2.cvtColor", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"convertColor\", \"type\": \"callable\", \"signature\": \"convertColor(src, code[, dst[, dstCn]]) -> dst\", \"return_type\": \"dst\", \"short_description\": \"Converts an image from one color space to another.\"}"}
{"api_id": 26, "api_name": "cv2.cvtColor", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"convertColorSpace\", \"type\": \"callable\", \"signature\": \"convertColorSpace(src, code[, dst[, dstCn]]) -> dst\", \"return_type\": \"dst\", \"short_description\": \"Converts an image from one color space to another. This function provides a more versatile and user-friendly interface compared to cv2.cvtColor, allowing for easier color space conversions without manual scaling or additional steps.\"}"}
{"api_id": 26, "api_name": "cv2.cvtColor", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"convertColor\", \"type\": \"callable\", \"signature\": \"convertColor(src, code[, dst[, dstCn]]) -> dst\", \"return_type\": \"dst\", \"short_description\": \"Converts an image from one color space to another. This function provides a more intuitive and clear name for the operation compared to the hierarchical cv2.cvtColor call.\"}"}
{"api_id": 26, "api_name": "cv2.cvtColor", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"convertColor\", \"type\": \"callable\", \"signature\": \"convertColor(src, code[, dst[, dstCn]]) -> dst\", \"return_type\": \"dst\", \"short_description\": \"Converts an image from one color space to another.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/161", "solution": "{\"name\": \"parseLogFile\", \"type\": \"function\", \"signature\": \"(log_file: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Parses a log file and returns the path to a CSV file containing the parsed data.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/161", "solution": "{\"name\": \"parseLogFile\", \"type\": \"function\", \"signature\": \"(log_file: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Parses a log file and returns the path to the output CSV file containing the parsed data.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/161", "solution": "{\"name\": \"parse_log_file\", \"type\": \"function\", \"signature\": \"log_file -> str\", \"return_type\": \"str\", \"short_description\": \"Parses a log file and returns the path to the output CSV file containing the parsed data.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/161", "solution": "{\"name\": \"parse_log_timestamps\", \"type\": \"function\", \"signature\": \"log_file -> str\", \"return_type\": \"str\", \"short_description\": \"Parses log entries from a file, validating timestamps and returning a CSV file path containing the parsed data.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/161", "solution": "{\"name\": \"parse_log_file\", \"type\": \"function\", \"signature\": \"log_file -> str\", \"return_type\": \"str\", \"short_description\": \"Parses a log file and returns the path to the CSV file containing the parsed data.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/161", "solution": "{\"name\": \"parseLogData\", \"type\": \"function\", \"signature\": \"(log_file: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Parses log data from a file and returns the path to the output CSV file.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/161", "solution": "{\"name\": \"parse_log_file\", \"type\": \"function\", \"signature\": \"(log_file: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Parses a log file and returns the path to a CSV file containing the parsed data.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/161", "solution": "{\n  \"name\": \"parse_log_timestamps\",\n  \"type\": \"function\",\n  \"signature\": \"log_file\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Parses timestamps from a log file and validates them, returning the path to the output CSV file.\"\n}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/161", "solution": "{\"name\": \"parseLogFile\", \"type\": \"function\", \"signature\": \"(log_file: str) -> str\", \"return_type\": \"The path to the output CSV file containing the parsed log data.\", \"short_description\": \"Parses a log file and returns a CSV file containing the log entries.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/161", "solution": "{\"name\": \"parseLogFile\", \"type\": \"function\", \"signature\": \"(log_file: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Parses a log file and returns the path to the CSV file containing the parsed data.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"parseDateString\", \"type\": \"function\", \"signature\": \"(string, format)\", \"return_type\": \"datetime\", \"short_description\": \"Parses a string into a datetime object using the specified format.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"parseDateString\", \"type\": \"function\", \"signature\": \"string, str -> datetime\", \"return_type\": \"datetime\", \"short_description\": \"Parses a date string according to a specified format and returns a datetime object.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"parseDateString\", \"type\": \"function\", \"signature\": \"(string, format: str) -> datetime\", \"return_type\": \"datetime\", \"short_description\": \"Parses a date string according to the specified format and returns a datetime object.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"parseDateString\", \"type\": \"function\", \"signature\": \"(date_string, format_string)\", \"return_type\": \"datetime\", \"short_description\": \"Parses a date string according to a given format string and returns a datetime object.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"parseDateTime\", \"type\": \"function\", \"signature\": \"string, str -> datetime\", \"return_type\": \"datetime\", \"short_description\": \"Parses a date string using a specified format and returns a datetime object.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"parse_date_string\", \"type\": \"function\", \"signature\": \"string, str -> datetime\", \"return_type\": \"datetime\", \"short_description\": \"Parses a date string using a specified format and returns a datetime object.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"parseDateString\", \"type\": \"function\", \"signature\": \"(string, format)\", \"return_type\": \"datetime\", \"short_description\": \"Parses a date string according to a given format.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"parseDateString\", \"type\": \"function\", \"signature\": \"string, str -> datetime\", \"return_type\": \"datetime\", \"short_description\": \"Parses a date string using a specified format and returns a datetime object.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"parseDateString\", \"type\": \"function\", \"signature\": \"(date_str, format_str)\", \"return_type\": \"datetime\", \"short_description\": \"Parses a date string according to a specified format and returns a datetime object.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"parseDateString\", \"type\": \"function\", \"signature\": \"string, str -> datetime\", \"return_type\": \"datetime\", \"short_description\": \"Parses a date string using a specified format and returns a datetime object.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"parseDateTimeString\", \"type\": \"function\", \"signature\": \"string, format -> datetime\", \"return_type\": \"datetime\", \"short_description\": \"Parses a string into a datetime object using a specified format.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"parseDateTimeStrings\", \"type\": \"function\", \"signature\": \"([str], str) -> [datetime]\", \"return_type\": \"list\", \"short_description\": \"Parses a list of time strings in a specified format and converts them to datetime objects, optionally with a specified timezone.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"parseDateTimeStrings\", \"type\": \"function\", \"signature\": \"([string], string) -> [datetime]\", \"return_type\": \"list\", \"short_description\": \"Parses a list of date-time strings using a specified format and converts them to datetime objects in a given timezone.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"parseDateTimeStrings\", \"type\": \"function\", \"signature\": \"strings, format, timezone -> list of datetime objects\", \"return_type\": \"list\", \"short_description\": \"Parses a list of date-time strings according to a specified format and converts them to datetime objects in a specified timezone.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"parseDateTimeStrings\", \"type\": \"function\", \"signature\": \"(timeStrings: List[str], format: str, timezone: str) -> List[datetime]\", \"return_type\": \"list of datetime objects\", \"short_description\": \"Parses a list of time strings using a specified format and converts them to datetime objects with timezone information.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"parseDateTimeStrings\", \"type\": \"function\", \"signature\": \"([str], str) -> [datetime]\", \"return_type\": \"list\", \"short_description\": \"Parses a list of date-time strings according to a specified format and converts them to datetime objects in a specified timezone.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"parseDateTimeStrings\", \"type\": \"function\", \"signature\": \"([string], str) -> [datetime]\", \"return_type\": \"list\", \"short_description\": \"Parses a list of time strings into a list of datetime objects, each with its own timezone specified by the user.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"parseTimeString\", \"type\": \"function\", \"signature\": \"string, format -> datetime\", \"return_type\": \"datetime\", \"short_description\": \"Parses a string into a datetime object using the specified format.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"parseDatetime\", \"type\": \"function\", \"signature\": \"string, str -> datetime\", \"return_type\": \"datetime\", \"short_description\": \"Parses a string into a datetime object using a specified format string.\"}"}
{"api_id": 27, "api_name": "datetime.datetime.strptime", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"parseDateTimeStrings\", \"type\": \"function\", \"signature\": \"([string], string) -> [datetime]\", \"return_type\": \"list\", \"short_description\": \"Parses a list of date-time strings into a list of datetime objects, with optional timezone conversion.\"}"}
{"api_id": 28, "api_name": "datetime.timezone.utc", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"get_file_details\", \"type\": \"function\", \"signature\": \"get_file_details(directory_path: str) -> list\", \"return_type\": \"list\", \"short_description\": \"Retrieves details of files in a given directory, including file names, sizes, creation times, and modification times, all in UTC.\"}"}
{"api_id": 28, "api_name": "datetime.timezone.utc", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"get_file_details\", \"type\": \"function\", \"signature\": \"get_file_details(directory_path: str) -> list[tuple[str, int, str, str]]\", \"return_type\": \"list[tuple[str, int, str, str]]\", \"short_description\": \"Retrieves detailed information about files in a given directory, including their names, sizes, creation times, and modification times, all in UTC.\"}"}
{"api_id": 28, "api_name": "datetime.timezone.utc", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"get_file_creation_times\", \"type\": \"function\", \"signature\": \"directory_path: str\", \"return_type\": \"list[tuple[str, int, str, str]]\", \"short_description\": \"Retrieves a list of tuples containing file details including name, size, creation time, and modification time for files in a specified directory.\"}"}
{"api_id": 28, "api_name": "datetime.timezone.utc", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"get_file_creation_times\", \"type\": \"function\", \"signature\": \"get_file_creation_times(directory_path: str)\", \"return_type\": \"List[Tuple[str, int, str, str]]\", \"short_description\": \"Retrieves detailed information about files in a given directory, including their names, sizes, and creation and modification times in UTC.\"}"}
{"api_id": 28, "api_name": "datetime.timezone.utc", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"get_file_creation_times\", \"type\": \"function\", \"signature\": \"get_file_creation_times(directory_path: str)\", \"return_type\": \"list[tuple[str, int, str, str]]\", \"short_description\": \"Retrieves detailed information about files in a specified directory, including their names, sizes, creation times, and modification times, all in UTC.\"}"}
{"api_id": 28, "api_name": "datetime.timezone.utc", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"get_file_details\", \"type\": \"function\", \"signature\": \"get_file_details(directory_path: str)\", \"return_type\": \"List[Tuple[str, int, str, str]]\", \"short_description\": \"Retrieves detailed information about files in a given directory, including their names, sizes, creation times, and modification times in UTC.\"}"}
{"api_id": 28, "api_name": "datetime.timezone.utc", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"get_file_metadata\", \"type\": \"function\", \"signature\": \"(directory_path: str) -> list[tuple[str, int, str, str]]\", \"return_type\": \"list[tuple[str, int, str, str]]\", \"short_description\": \"Retrieves detailed metadata for files in a specified directory, including file size and timestamps in UTC.\"}"}
{"api_id": 28, "api_name": "datetime.timezone.utc", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"get_file_creation_times\", \"type\": \"function\", \"signature\": \"get_file_creation_times(directory_path: str) -> List[Tuple[str, int, str, str]]\", \"return_type\": \"List[Tuple[str, int, str, str]]\", \"short_description\": \"Retrieves detailed information about files in a directory, including their creation and modification times in UTC.\"}"}
{"api_id": 28, "api_name": "datetime.timezone.utc", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"get_file_creation_times\", \"type\": \"function\", \"signature\": \"directory_path: str\", \"return_type\": \"list\", \"short_description\": \"Retrieves a list of tuples containing file names, sizes, and creation times from a specified directory.\"}"}
{"api_id": 28, "api_name": "datetime.timezone.utc", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"get_file_creation_times\", \"type\": \"function\", \"signature\": \"directory_path: str\", \"return_type\": \"List[Tuple[str, int, str, str]]\", \"short_description\": \"Retrieves details about files in a directory, including their names, sizes, and creation and modification times in UTC.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"parseTimestamp\", \"type\": \"function\", \"signature\": \"timestamp, tz=None\", \"return_type\": \"datetime\", \"short_description\": \"Converts a timestamp to a datetime object, optionally in a specified timezone.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"getFormattedTime\", \"type\": \"function\", \"signature\": \"timestamp\", \"return_type\": \"str\", \"short_description\": \"Formats a timestamp into a human-readable string in the format 'YYYY-MM-DD HH:MM:SS.mmm'.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"formatTimestamp\", \"type\": \"function\", \"signature\": \"timestamp, format_str\", \"return_type\": \"str\", \"short_description\": \"Converts a timestamp to a formatted string date and time.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"parseTimestamp\", \"type\": \"function\", \"signature\": \"timestamp[, tz]\", \"return_type\": \"tz's local time\", \"short_description\": \"Converts a POSIX timestamp to a local time object.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generateRandomTimeSeries\", \"type\": \"function\", \"signature\": \"start_time, end_time, step, trend, seed=42\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random time series data based on given parameters.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"convertTimestampToLocalTime\", \"type\": \"function\", \"signature\": \"timestamp, optional tz\", \"return_type\": \"datetime\", \"short_description\": \"Converts a POSIX timestamp to a local time object.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"convertTimestampToLocalTime\", \"type\": \"function\", \"signature\": \"[timestamp, tz]\", \"return_type\": \"datetime\", \"short_description\": \"Converts a POSIX timestamp to a local time object.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"getFormattedTimestamp\", \"type\": \"function\", \"signature\": \"timestamp\", \"return_type\": \"str\", \"short_description\": \"Converts a timestamp to a formatted string representation of the local time.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"convertTimestampToDateTime\", \"type\": \"function\", \"signature\": \"timestamp, tz=None\", \"return_type\": \"datetime\", \"short_description\": \"Converts a POSIX timestamp to a datetime object in the specified timezone.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generateTimeSeriesData\", \"type\": \"function\", \"signature\": \"start_time, end_time, step, trend, seed=42\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a time series DataFrame with timestamps as local times derived from POSIX timestamps.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"getFormattedDate\", \"type\": \"function\", \"signature\": \"timestamp\", \"return_type\": \"str\", \"short_description\": \"Converts a POSIX timestamp to a formatted date string.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"convertTimestampToDate\", \"type\": \"function\", \"signature\": \"(timestamp)\", \"return_type\": \"datetime\", \"short_description\": \"Converts a POSIX timestamp to a datetime object.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"convertTimestampToDate\", \"type\": \"function\", \"signature\": \"timestamp, tz=None\", \"return_type\": \"datetime\", \"short_description\": \"Converts a POSIX timestamp to a datetime object in the specified timezone.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"convertTimestampToDate\", \"type\": \"function\", \"signature\": \"[timestamp]\", \"return_type\": \"datetime\", \"short_description\": \"Converts a POSIX timestamp to a datetime object.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"convertTimestampToDate\", \"type\": \"function\", \"signature\": \"(timestamp)\", \"return_type\": \"datetime\", \"short_description\": \"Converts a POSIX timestamp to a datetime object.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"parseTimestamp\", \"type\": \"function\", \"signature\": \"(timestamp, tz=None)\", \"return_type\": \"datetime\", \"short_description\": \"Parses a timestamp into a datetime object, optionally in a specified timezone.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"convertTimestampToDate\", \"type\": \"function\", \"signature\": \"(timestamp)\", \"return_type\": \"datetime\", \"short_description\": \"Converts a POSIX timestamp to a datetime object.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"convertTimestampToDate\", \"type\": \"function\", \"signature\": \"(timestamp, tz=None)\", \"return_type\": \"datetime\", \"short_description\": \"Converts a POSIX timestamp to a datetime object in the specified timezone.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"parseTimestamp\", \"type\": \"function\", \"signature\": \"timestamp, tz=None\", \"return_type\": \"datetime\", \"short_description\": \"Parses a timestamp into a datetime object, with an optional timezone.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"createTimestamp\", \"type\": \"function\", \"signature\": \"[timestamp]\", \"return_type\": \"datetime\", \"short_description\": \"Creates a datetime object from a given timestamp.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"convertTimestampToLocalTime\", \"type\": \"function\", \"signature\": \"(timestamp, tz=None)\", \"return_type\": \"datetime\", \"short_description\": \"Converts a POSIX timestamp to a local time datetime object. Optionally, you can specify a timezone.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"generateFileReport\", \"type\": \"function\", \"signature\": \"directory_path: str\", \"return_type\": \"list\", \"short_description\": \"Generates a report of file details for all files in a directory, including their sizes and timestamps.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"get_file_creation_times\", \"type\": \"function\", \"signature\": \"(directory_path: str) -> list[tuple[str, int, str, str]]\", \"return_type\": \"list[tuple[str, int, str, str]]\", \"short_description\": \"Retrieves detailed information about files in a given directory, including their names, sizes, and creation and modification times.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"getUtcCreationTime\", \"type\": \"function\", \"signature\": \"path\", \"return_type\": \"datetime\", \"short_description\": \"Returns the creation time of a file as a UTC datetime object.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"getFileInfo\", \"type\": \"function\", \"signature\": \"directory_path: str\", \"return_type\": \"list\", \"short_description\": \"Retrieves detailed information about files in a directory.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"getFileInfo\", \"type\": \"function\", \"signature\": \"directory_path: str\", \"return_type\": \"list\", \"short_description\": \"Retrieves detailed file information from a given directory path.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"convertTimestampToLocal\", \"type\": \"function\", \"signature\": \"timestamp, tz=None\", \"return_type\": \"datetime\", \"short_description\": \"Converts a POSIX timestamp to a local datetime object. Optionally, a timezone can be provided.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"getFileInfo\", \"type\": \"function\", \"signature\": \"directory_path: str\", \"return_type\": \"list[tuple[str, int, str, str]]\", \"short_description\": \"Retrieves detailed file information from a given directory, including file names, sizes, creation times, and modification times.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"convertTimestampToLocal\", \"type\": \"function\", \"signature\": \"timestamp\", \"return_type\": \"datetime\", \"short_description\": \"Converts a POSIX timestamp to a local datetime object.\"}"}
{"api_id": 29, "api_name": "datetime.datetime.fromtimestamp", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"getFileInfo\", \"type\": \"function\", \"signature\": \"directory_path: str\", \"return_type\": \"list\", \"short_description\": \"Retrieves detailed information about files in a directory, including file sizes and creation/modification times.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_date_range\", \"type\": \"function\", \"signature\": \"(start_date: datetime, end_date: datetime) -> List[datetime]\", \"return_type\": \"List[datetime]\", \"short_description\": \"Generates a list of dates between two given dates.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generateRandomDates\", \"type\": \"function\", \"signature\": \"(start_date, end_date, seed)\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a pandas Series of random dates between start_date and end_date, using the specified seed for reproducibility.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generateRandomDates\", \"type\": \"function\", \"signature\": \"generate_random_dates(start_date, end_date, seed)\", \"return_type\": \"pd.Series[datetime]\", \"short_description\": \"Generates a Series of random dates between two given dates.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generateRandomDates\", \"type\": \"function\", \"signature\": \"(start_date: datetime, end_date: datetime, seed: int) -> pd.Series\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a series of random dates between two given dates, with an optional seed for reproducibility.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_date_range\", \"type\": \"function\", \"signature\": \"generate_date_range(start_date, end_date)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random dates within a specified range.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_random_dates\", \"type\": \"function\", \"signature\": \"generate_random_dates(start_date, end_date, seed=42)\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a Series of random dates within a specified range.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generateRandomDates\", \"type\": \"function\", \"signature\": \"(startDate, endDate, seed)\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a series of random dates between two given dates.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generateRandomDates\", \"type\": \"function\", \"signature\": \"generate_random_dates(start_date, end_date, seed)\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a Series of random dates between two given dates.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generateDates\", \"type\": \"function\", \"signature\": \"start_date: datetime, end_date: datetime, seed: int\", \"return_type\": \"pd.Series[datetime]\", \"short_description\": \"Generates a series of random dates between two given dates, using a specified seed for reproducibility.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_random_dates\", \"type\": \"function\", \"signature\": \"generate_random_dates(start_date, end_date, seed=42)\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a Series of random dates between two given dates.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"get_localized_datetime\", \"type\": \"function\", \"signature\": \"get_localized_datetime(utc_datetime, cities=[], timezones={}, seed=42)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Returns a DataFrame with localized datetime for specified cities and random weather conditions.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"generate_city_weather_report\", \"type\": \"function\", \"signature\": \"generate_city_weather_report(utc_datetime, cities=[], timezones={}, weather_conditions=[], seed=42)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame containing local times and weather conditions for a list of cities based on a given UTC datetime.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"convert_utc_to_local\", \"type\": \"function\", \"signature\": \"(utc_datetime, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'], timezones={'New York': 'America/New_York', 'London': 'Europe/London', 'Beijing': 'Asia/Shanghai', 'Tokyo': 'Asia/Tokyo', 'Sydney': 'Australia/Sydney'}, seed=42)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Converts a UTC datetime to local times for a list of cities and generates a report as a DataFrame.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"generate_city_weather_report\", \"type\": \"function\", \"signature\": \"generate_city_weather_report(utc_datetime, cities=[], weather_conditions=[], timezones={}, seed=42)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame containing weather reports for multiple cities based on a given UTC datetime.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"get_city_weather_report\", \"type\": \"function\", \"signature\": \"get_city_weather_report(utc_datetime, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'], timezones={'New York': 'America/New_York', 'London': 'Europe/London', 'Beijing': 'Asia/Shanghai', 'Tokyo': 'Asia/Tokyo', 'Sydney': 'Australia/Sydney'}, weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'], seed=42)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a weather report for a list of cities based on a given UTC datetime and other parameters.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"generate_weather_report\", \"type\": \"function\", \"signature\": \"generate_weather_report(utc_datetime, cities=[], weather_conditions=[], timezones={}, seed=42)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a weather report for a list of cities based on a given UTC datetime.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"generate_weather_report(utc_datetime, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'], weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'], timezones={'New York': 'America/New_York', 'London': 'Europe/London', 'Beijing': 'Asia/Shanghai', 'Tokyo': 'Asia/Tokyo', 'Sydney': 'Australia/Sydney'}, seed=42)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Generates a weather report for multiple cities based on a given UTC datetime.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"parse_datetime_string\", \"type\": \"function\", \"signature\": \"(datetime_string, format)\", \"return_type\": \"datetime\", \"short_description\": \"Parses a datetime string according to a specified format and returns a datetime object.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"generate_weather_report(utc_datetime, cities=[], weather_conditions=[], timezones={}, seed=42)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a weather report for multiple cities based on a given UTC datetime.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"generate_weather_report\", \"type\": \"function\", \"signature\": \"generate_weather_report(utc_datetime, cities=[], weather_conditions=[], timezones={}, seed=42)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a weather report for a list of cities based on a given UTC datetime.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/367", "solution": "{\"name\": \"generateWeeklyActivityChart\", \"type\": \"function\", \"signature\": \"def generateWeeklyActivityChart(activities: List[datetime]) -> plt.Axes\", \"return_type\": \"plt.Axes\", \"short_description\": \"Generates a bar chart showing the number of activities per day of the week.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/367", "solution": "{\"name\": \"generateWeeklyActivityChart\", \"type\": \"function\", \"signature\": \"def generateWeeklyActivityChart(activities: list[datetime]) -> plt.Axes\", \"return_type\": \"plt.Axes\", \"short_description\": \"Generates a bar chart displaying the number of activities per day of the week.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/367", "solution": "{\"name\": \"getDayOfWeekActivityCounts\", \"type\": \"function\", \"signature\": \"activities: List[datetime]\", \"return_type\": \"Dict[str, int]\", \"short_description\": \"Calculates the number of activities per day of the week from a list of datetime objects.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/367", "solution": "{\"name\": \"generateWeeklyActivityChart\", \"type\": \"function\", \"signature\": \"def generateWeeklyActivityChart(activities: list[datetime]) -> plt.Axes\", \"return_type\": \"plt.Axes\", \"short_description\": \"Generates a bar chart displaying the number of activities per day of the week.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/367", "solution": "{\"name\": \"generateWeeklyActivityChart\", \"type\": \"function\", \"signature\": \"def generateWeeklyActivityChart(activities)\", \"return_type\": \"Axes\", \"short_description\": \"Generates a bar chart displaying the number of activities per day of the week.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/367", "solution": "{\"name\": \"getWeekdayActivityCounts\", \"type\": \"function\", \"signature\": \"activities: List[datetime]\", \"return_type\": \"Dict[str, int]\", \"short_description\": \"Calculates the number of activities for each day of the week from a list of datetime objects.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/367", "solution": "{\"name\": \"calculateWeeklyActivity\", \"type\": \"function\", \"signature\": \"activities: List[datetime]\", \"return_type\": \"plt.Axes\", \"short_description\": \"Calculates and visualizes the weekly activity distribution from a list of datetime objects.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/367", "solution": "{\"name\": \"getWeekdayActivityCounts\", \"type\": \"function\", \"signature\": \"activities: List[datetime]\", \"return_type\": \"Dict[str, int]\", \"short_description\": \"Calculates the number of activities per weekday for a list of datetime objects.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/367", "solution": "{\"name\": \"calculateWeeklyActivity\", \"type\": \"function\", \"signature\": \"activities: List[datetime]\", \"return_type\": \"plt.Axes\", \"short_description\": \"Calculates and plots the number of activities per day of the week.\"}"}
{"api_id": 30, "api_name": "datetime.datetime", "task_id": "BigCodeBench/367", "solution": "{\"name\": \"getWeeklyActivityCounts\", \"type\": \"function\", \"signature\": \"activities: List[datetime]\", \"return_type\": \"Dict[str, int]\", \"short_description\": \"Calculates the number of activities for each day of the week from a list of datetime objects.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"calculate_random_dates\", \"type\": \"function\", \"signature\": \"start_date, end_date, seed\", \"return_type\": \"pd.Series[datetime]\", \"short_description\": \"Generates a Series of random dates between two given dates using a specified seed for reproducibility.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_random_dates\", \"type\": \"function\", \"signature\": \"start_date, end_date, seed\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a series of random dates between two given dates, using a specified seed for reproducibility.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_dates\", \"type\": \"function\", \"signature\": \"generate_dates(start_date, end_date, seed)\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a Series of random dates within a specified range.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"calculate_date_range\", \"type\": \"function\", \"signature\": \"start_date, end_date\", \"return_type\": \"list\", \"short_description\": \"Generates a list of dates between two given dates.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_random_dates\", \"type\": \"function\", \"signature\": \"(start_date, end_date, seed)\", \"return_type\": \"pd.Series[datetime]\", \"short_description\": \"Generates a Series of random dates between two given dates, using a specified seed for reproducibility.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"calculate_date_range\", \"type\": \"function\", \"signature\": \"calculate_date_range(start_date, end_date)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of dates between two given dates.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_random_dates\", \"type\": \"function\", \"signature\": \"generate_random_dates(start_date, end_date, seed)\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a Series of random dates between two given dates.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_random_dates\", \"type\": \"function\", \"signature\": \"generate_random_dates(start_date, end_date, seed)\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a Series of random dates within a specified range, using a given seed for reproducibility.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"calculateRandomDates\", \"type\": \"function\", \"signature\": \"calculateRandomDates(start_date, end_date, seed)\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a series of random dates between two given dates.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"calculate_date_ranges\", \"type\": \"function\", \"signature\": \"start_date, end_date\", \"return_type\": \"list\", \"short_description\": \"Generates a list of date ranges between two given dates.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"generateActivityData\", \"type\": \"function\", \"signature\": \"days_in_past: int, random_seed: int\", \"return_type\": \"tuple[plt.Axes, pd.DataFrame]\", \"short_description\": \"Generates a dataset of activities and their durations for a given number of past days, with an option to set a random seed for reproducibility.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"calculatePhysicalActivities\", \"type\": \"function\", \"signature\": \"calculatePhysicalActivities(daysInPast: int, randomSeed: int) -> Tuple[plt.Axes, pd.DataFrame]\", \"return_type\": \"Tuple[plt.Axes, pd.DataFrame]\", \"short_description\": \"Generates a summary of physical activities over a specified number of days, including dates and durations for each activity. Returns a plot and the corresponding DataFrame.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"generateActivityData\", \"type\": \"function\", \"signature\": \"generate_activity_data(days_in_past: int, random_seed: int) -> Tuple[plt.Axes, pd.DataFrame]\", \"return_type\": \"Tuple[plt.Axes, pd.DataFrame]\", \"short_description\": \"Generates a dataset of activities performed over a specified number of past days, including random durations for each activity. The data is visualized using a line plot and returned along with the plot axes.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"generateActivityData\", \"type\": \"function\", \"signature\": \"generate_activity_data(days_in_past, random_seed)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a DataFrame of random activity data for the past number of days specified, and returns a tuple containing the plot and the DataFrame.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"generateActivityReport\", \"type\": \"function\", \"signature\": \"generate_activity_report(days_in_past: int, random_seed: int) -> Tuple[plt.Figure, pd.DataFrame]\", \"return_type\": \"Tuple[plt.Figure, pd.DataFrame]\", \"short_description\": \"Generates a report of activities over a specified number of days, including a plot of activity durations and a DataFrame containing the data.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"generateActivityReport\", \"type\": \"function\", \"signature\": \"def generateActivityReport(days_in_past: int, random_seed: int) -> tuple[plt.Axes, pd.DataFrame]\", \"return_type\": \"tuple[plt.Axes, pd.DataFrame]\", \"short_description\": \"Generates a report of activities over a specified number of days, with an option to seed the random number generator for reproducibility.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"generateActivityData\", \"type\": \"function\", \"signature\": \"(daysInPast, randomSeed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing random activity data for the specified number of days in the past, with optional random seed for reproducibility.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"generateActivityData\", \"type\": \"function\", \"signature\": \"generate_activity_data(days_in_past, random_seed)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a dataset of random activities over a specified number of past days.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"generateActivityReport\", \"type\": \"function\", \"signature\": \"(daysInPast: int, randomSeed: int) => (ax: object, df: object)\", \"return_type\": \"void\", \"short_description\": \"Generates a report of activities over the specified number of days, visualizing the durations of activities using a line plot.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"generateActivityData\", \"type\": \"function\", \"signature\": \"days_in_past, random_seed\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing random activity data for the specified number of past days.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"calculateExecutionTime\", \"type\": \"function\", \"signature\": \"(run_duration: int) -> str\", \"return_type\": \"str\", \"short_description\": \"Calculates the total execution time of a server task for a given duration.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"calculateElapsedTime\", \"type\": \"function\", \"signature\": \"def calculateElapsedTime(startDateTime: datetime, endDateTime: datetime) -> timedelta\", \"return_type\": \"timedelta\", \"short_description\": \"Calculates the difference between two datetime objects, returning a timedelta object representing the elapsed time.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"generateTimestamp\", \"type\": \"function\", \"signature\": \"() => string\", \"return_type\": \"string\", \"short_description\": \"Generates a timestamp string in the format 'YYYY-MM-DD HH:MM:SS'.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"calculateTimeUntil\", \"type\": \"function\", \"signature\": \"now, target\", \"return_type\": \"timedelta\", \"short_description\": \"Calculates the time difference between the current datetime and a target datetime.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"calculateTimeDifference\", \"type\": \"function\", \"signature\": \"(start_time, end_time)\", \"return_type\": \"timedelta\", \"short_description\": \"Calculates the difference between two datetime objects and returns a timedelta object.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"calculateTimeDifference\", \"type\": \"function\", \"signature\": \"(start_time, end_time)\", \"return_type\": \"timedelta\", \"short_description\": \"Calculates the difference between two datetime objects.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"generateTimestamp\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a timestamp string in the format 'YYYY-MM-DD HH:MM:SS' using the current date and time.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"calculateRunTime\", \"type\": \"function\", \"signature\": \"run_duration\", \"return_type\": \"str\", \"short_description\": \"Calculates the total runtime of the server based on the given duration.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"length: int\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of the specified length.\"}"}
{"api_id": 31, "api_name": "datetime.timedelta", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"(length: int) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of the specified length.\"}"}
{"api_id": 32, "api_name": "datetime.datetime.today", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"get_random_tasks\", \"type\": \"function\", \"signature\": \"get_random_tasks(task_list, n_tasks, employees=['John Doe', 'Jane Smith', 'James Brown', 'Mary Johnson', 'Robert Davis'], seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame with random task assignments based on the provided parameters.\"}"}
{"api_id": 32, "api_name": "datetime.datetime.today", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generate_task_assignments\", \"type\": \"function\", \"signature\": \"(task_list, n_tasks, employees=None, seed=None)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame of task assignments with randomized selections from the provided list of tasks, employees, and a seed for random number generation.\"}"}
{"api_id": 32, "api_name": "datetime.datetime.today", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generate_random_tasks\", \"type\": \"function\", \"signature\": \"generate_random_tasks(task_list, n_tasks, employees=['John Doe', 'Jane Smith', 'James Brown', 'Mary Johnson', 'Robert Davis'], seed=None)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Generates a DataFrame of randomly assigned tasks to employees with optional seed for reproducibility.\"}"}
{"api_id": 32, "api_name": "datetime.datetime.today", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generate_task_assignments\", \"type\": \"function\", \"signature\": \"generate_task_assignments(task_list, n_tasks, employees=[], seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame of task assignments with assigned employees and due dates.\"}"}
{"api_id": 32, "api_name": "datetime.datetime.today", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generateRandomSeed\", \"type\": \"function\", \"signature\": \"()->int\", \"return_type\": \"int\", \"short_description\": \"Generates a random seed for use in random number generation.\"}"}
{"api_id": 32, "api_name": "datetime.datetime.today", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"get_random_task\", \"type\": \"function\", \"signature\": \"get_random_task(task_list, employees=None, seed=None)\", \"return_type\": \"dict\", \"short_description\": \"Returns a randomly selected task from the task list along with an assigned employee and due date.\"}"}
{"api_id": 32, "api_name": "datetime.datetime.today", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generate_random_tasks\", \"type\": \"function\", \"signature\": \"def generate_random_tasks(task_list, n_tasks, employees=['John Doe', 'Jane Smith', 'James Brown', 'Mary Johnson', 'Robert Davis'], seed=None):\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame with random task assignments including task name, assigned employee, and due date.\"}"}
{"api_id": 32, "api_name": "datetime.datetime.today", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generateRandomTaskAssignment\", \"type\": \"function\", \"signature\": \"generate_random_task_assignment(task_list, n_tasks, employees=[], seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame containing randomly assigned tasks to employees, with optional seed for reproducibility.\"}"}
{"api_id": 32, "api_name": "datetime.datetime.today", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generateRandomAssignment\", \"type\": \"function\", \"signature\": \"generateRandomAssignment(task_list, n_tasks, employees=[], seed=None)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random task assignments to employees, including a due date based on the current date.\"}"}
{"api_id": 32, "api_name": "datetime.datetime.today", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generate_random_task\", \"type\": \"function\", \"signature\": \"(task_list, n_tasks, employees=None, seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame of random task assignments with due dates.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateRandomTimeSeries\", \"type\": \"function\", \"signature\": \"(numPoints=30, endDate=None, seed=42)\", \"return_type\": \"plt.Axes\", \"short_description\": \"Generates a random time series plot with customizable number of points, end date, and seed.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateRandomPlot\", \"type\": \"function\", \"signature\": \"(data, labels)\", \"return_type\": \"plt.Axes\", \"short_description\": \"Generates a plot from given data and labels.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateRandomTimeSeries\", \"type\": \"function\", \"signature\": \"(periods=30, start=None, end=None, freq='D')\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing random time series data with dates ranging from start to end.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateRandomTimeSeries\", \"type\": \"function\", \"signature\": \"(periods=30, start=None, end=None, freq='D')\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing random time series data. The data includes dates and corresponding random values.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateRandomTimeSeries\", \"type\": \"function\", \"signature\": \"(periods=30, end=None, seed=42)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing random time series data with dates ranging from the current time to the specified end date.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateRandomTimeSeries\", \"type\": \"function\", \"signature\": \"(num_points=30, start_date=None, end_date=None, seed=42)\", \"return_type\": \"plt.Axes\", \"short_description\": \"Generates a random time series plot with customizable parameters.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"getCurrentTime\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime\", \"short_description\": \"Returns the current time as a datetime object.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateRandomTimeSeries\", \"type\": \"function\", \"signature\": \"(periods=30, start=None, end=None, freq='D')\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing random time series data with dates ranging from start to end, with the specified frequency.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateRandomTimeSeries\", \"type\": \"function\", \"signature\": \"(num_points=30, start_date=None, end_date=None, min_value=0, max_value=100, seed=42)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing random time series data. The data includes dates and corresponding random values within a specified range.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateRandomTimeSeries\", \"type\": \"function\", \"signature\": \"(num_points, start_date, end_date)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing random time series data between start_date and end_date with the specified number of points.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"getDirectoryFiles\", \"type\": \"function\", \"signature\": \"(directory)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves a dictionary of files organized by their subdirectories within the specified directory.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"getCurrentTime\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime\", \"short_description\": \"Returns the current date and time object.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"getCurrentTimestamp\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Returns a string representation of the current timestamp in the format 'YYYYMMDDHHMMSS'.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"getCurrentTimestamp\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Returns a string representation of the current timestamp in the format 'YYYYMMDDHHMMSS'.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"getCurrentFormattedTime\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Returns the current time formatted as a string in the format 'YYYYMMDDHHMMSS'.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"generateTimestamp\", \"type\": \"function\", \"signature\": \"(format='%Y%m%d%H%M%S')\", \"return_type\": \"str\", \"short_description\": \"Generates a timestamp string based on the specified format.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"getCurrentTimestamp\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Returns a string representing the current date and time in the format 'YYYYMMDDHHMMSS'.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"getCurrentTimestamp\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Returns a string representation of the current timestamp in the format 'YYYYMMDDHHMMSS'.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"generateTimestamp\", \"type\": \"function\", \"signature\": \"(format)\", \"return_type\": \"str\", \"short_description\": \"Generates a timestamp string based on the specified format.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"getSystemInfo\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"dict\", \"short_description\": \"Retrieves system information such as CPU, memory, and disk usage.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"getCurrentDateTime\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime\", \"short_description\": \"Returns the current date and time in the local timezone.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"getCurrentDateTime\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime\", \"short_description\": \"Returns the current date and time, optionally with a specified timezone.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"getCurrentTime\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime\", \"short_description\": \"Returns the current date and time without specifying a timezone.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"getCurrentDateTime\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime\", \"short_description\": \"Returns the current date and time in the local timezone.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"getCurrentDateTime\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime\", \"short_description\": \"Returns the current date and time without specifying a timezone.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"getCurrentFormattedDate\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Returns the current date in a human-readable format.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"getCurrentTime\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime\", \"short_description\": \"Returns the current time in the local timezone.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/492", "solution": "{\n  \"name\": \"generateSalesReport\",\n  \"type\": \"function\",\n  \"signature\": \"(startDate, endDate, products)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Generates a sales report for a given date range and list of products.\"\n}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"generateSalesReport\", \"type\": \"function\", \"signature\": \"(startDate, endDate, products)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a sales report for a given date range and list of products. The report includes sales data for each product within the specified date range.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"getCurrentDateTime\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime\", \"short_description\": \"Returns a datetime object representing the current time.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"getCurrentTime\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime\", \"short_description\": \"Returns the current time as a datetime object, using the local timezone.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"getRandomDate\", \"type\": \"function\", \"signature\": \"(startDate, endDate)\", \"return_type\": \"datetime\", \"short_description\": \"Returns a random datetime object between startDate and endDate.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"getRandomColor\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a random hex color code.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"getRandomColor\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a random hex color code.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"getTodayDate\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime\", \"short_description\": \"Returns the current date.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"getCurrentTime\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime\", \"short_description\": \"Returns the current time as a datetime object, using the local timezone if no timezone is specified.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"generateActivityReport\", \"type\": \"function\", \"signature\": \"(daysInPast, randomSeed)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a report of recent activities, including date, activity type, and duration, visualized as a line plot.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"generateRandomActivityData\", \"type\": \"function\", \"signature\": \"(daysInPast=7, randomSeed=0)\", \"return_type\": \"tuple(ax, df)\", \"short_description\": \"Generates a DataFrame of random activity data and plots it using seaborn.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"getRecentDates\", \"type\": \"function\", \"signature\": \"(days)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of recent dates, each offset by one day from today, up to the specified number of days.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"getCurrentWeather\", \"type\": \"function\", \"signature\": \"(location, units='metric')\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the current weather conditions for a given location in specified units.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generateStockData\", \"type\": \"function\", \"signature\": \"(days, stockNames, seed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame of stock prices for a specified number of days, using given stock names and a random seed for reproducibility.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"getStockPrices\", \"type\": \"function\", \"signature\": \"(daysInPast, stockNames, randomSeed)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Retrieves historical stock prices for given days in the past for a list of specified stock names. The prices are generated randomly with a specified seed for reproducibility.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generateStockData\", \"type\": \"function\", \"signature\": \"(days_in_past, stock_names, random_seed)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame of random stock prices for specified number of days and stock names.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generateStockPrices\", \"type\": \"function\", \"signature\": \"(daysInPast, stockNames, randomSeed)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame containing randomly generated stock prices for the past 'daysInPast' days, with optional random seed for reproducibility.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"getStockPrices\", \"type\": \"function\", \"signature\": \"(days, stockNames, seed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Retrieves a DataFrame containing random stock prices for a specified number of days and stock names, using a specified random seed for reproducibility.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"getHistoricalPrices\", \"type\": \"function\", \"signature\": \"(stock_names, days_in_past, random_seed)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Retrieves historical stock prices for specified days in the past.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"getStockPrices\", \"type\": \"function\", \"signature\": \"(stock_names, days_in_past, random_seed)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Retrieves historical stock prices for given stock names over a specified number of days, using random prices generated based on a given seed for reproducibility.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generateStockData\", \"type\": \"function\", \"signature\": \"(daysInPast, stockNames, randomSeed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing simulated stock prices for given days and stock names.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"getHistoricalPrices\", \"type\": \"function\", \"signature\": \"(stock_names, days_in_past, random_seed)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Retrieves historical stock prices for given stock names over a specified number of days, with an optional random seed for reproducibility.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generateStockData\", \"type\": \"function\", \"signature\": \"(days, stockNames, seed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing random stock prices for specified days and stock names. The prices are generated using a random seed for reproducibility.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"fetchHtmlContent\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"dict\", \"short_description\": \"Fetches HTML content from a given URL and returns it as a dictionary with 'html' key.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"fetchHtmlData\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"DataFrame\", \"short_description\": \"Fetches HTML data from the given URL and returns it as a DataFrame with additional fetch time.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a report from the provided data, including a timestamp of when the report was generated.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"fetchUrlContent\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"dict\", \"short_description\": \"Fetches the content of a URL and returns it as a dictionary with the HTML content and the fetch time.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"fetchHtmlContent\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"str\", \"short_description\": \"Fetches the HTML content of the given URL.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"fetchHtmlContent\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"dict\", \"short_description\": \"Fetches the HTML content of a given URL and returns it as a dictionary with the fetch time included.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"getPageData\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"DataFrame\", \"short_description\": \"Fetches data from the given URL and returns it as a DataFrame.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"fetchHtmlContent\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"dict\", \"short_description\": \"Fetches HTML content from a given URL and returns a dictionary with the fetched content and timestamp.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"getPageContent\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"str\", \"short_description\": \"Fetches and returns the HTML content of a webpage at the given URL.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"fetchHtmlData\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"DataFrame\", \"short_description\": \"Fetches HTML data from a given URL and returns it as a DataFrame with additional fetch time information.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with sensor data for the specified number of hours and saves it in the given output directory.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/592", "solution": "{\n  \"name\": \"generateSensorData\",\n  \"type\": \"function\",\n  \"signature\": \"(hours, output_dir='./output')\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Generates a CSV file containing sensor data for a specified number of hours, saving it in the given output directory.\"\n}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, outputDir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with sensor data for a given number of hours and saves it to the specified directory.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateRandomSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with random sensor data for a given number of hours and saves it to the specified output directory.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateRandomSensorData\", \"type\": \"function\", \"signature\": \"(hours, outputDir=None)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with random sensor data for a given number of hours. The file is saved in the specified output directory.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, outputDir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file containing sensor data for a specified number of hours, optionally in a specified output directory.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir=None)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file containing sensor data for a specified number of hours. The data includes timestamps and randomly generated sensor readings.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file containing sensor data for the specified number of hours and saves it to the given output directory.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, outputDir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file containing sensor data for a given number of hours and saves it to a specified directory. Returns the path to the generated CSV file.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateRandomSensorData\", \"type\": \"function\", \"signature\": \"(hours, outputDir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with random sensor data for a given number of hours. The file is saved in the specified output directory.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, outputDir='./output')\", \"return_type\": \"tuple(str, plt.Axes)\", \"short_description\": \"Generates a CSV file with traffic data and plots it using matplotlib.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, outputDir='./output')\", \"return_type\": \"tuple\", \"short_description\": \"Generates a CSV file with traffic data for a given number of hours and plots the data using matplotlib.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, outputDir='./output')\", \"return_type\": \"tuple[str, matplotlib.axes._axes.Axes]\", \"short_description\": \"Generates a CSV file with traffic data for a given number of hours and plots the data using matplotlib.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, outputDir=None)\", \"return_type\": \"tuple(str, plt.Axes)\", \"short_description\": \"Generates a CSV file with traffic data for a given number of hours and plots the data using matplotlib.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, outputDir='./output')\", \"return_type\": \"tuple(str, plt.Axes)\", \"short_description\": \"Generates a CSV file with traffic data and plots it using matplotlib.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, outputDir=None)\", \"return_type\": \"tuple[str, matplotlib.axes._axes.Axes]\", \"short_description\": \"Generates a CSV file containing traffic data for a given number of hours and plots the data using matplotlib.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, outputDir=None)\", \"return_type\": \"tuple[str, plt.Axes]\", \"short_description\": \"Generates a CSV file with traffic data and plots it using matplotlib.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple(str, plt.Axes)\", \"short_description\": \"Generates a CSV file with traffic data for a given number of hours and plots the data using matplotlib.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"generateTrafficData\",\n  \"type\": \"function\",\n  \"signature\": \"(hours, output_dir='./output')\",\n  \"return_type\": \"tuple(str, matplotlib.axes._axes.Axes)\",\n  \"short_description\": \"Generates a CSV file with traffic data for a given number of hours and plots the data using matplotlib.\"\n}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"generateTrafficData\",\n  \"type\": \"function\",\n  \"signature\": \"(hours, outputDir='./output')\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a CSV file with traffic data for a given number of hours and optionally an output directory, then plots the data and returns the file path and plot axis.\"\n}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for a given number of hours and saves it to a CSV file. Returns the path to the generated report.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for a specified number of hours and saves it to a CSV file. Returns the path to the generated CSV file.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"getCurrentWeatherCondition\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Returns the current weather condition based on the number of hours specified.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with simulated weather data for a given number of hours and saves it to the specified output directory. Additionally, it creates a backup of the CSV file in a subdirectory named 'backup'.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for the specified number of hours and saves it to a CSV file. It also creates a backup of the file in a subdirectory.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for a specified number of hours and saves it to a CSV file. Returns the path to the generated CSV file.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"getWeatherForecast\", \"type\": \"function\", \"signature\": \"(location, days)\", \"return_type\": \"list\", \"short_description\": \"Retrieves a forecast of weather conditions for a specified location over a given number of days.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for a specified number of hours and saves it to a CSV file. It also creates a backup of the CSV file.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for a given number of hours and saves it to a CSV file in the specified output directory. It also creates a backup of the generated file.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for a given number of hours and saves it to a CSV file. Also creates a backup of the file in a specified directory.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomTemperatureHumidity\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"dict\", \"short_description\": \"Generates a dictionary containing random temperature and humidity values along with a timestamp.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomTemperatureHumidity\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"dict\", \"short_description\": \"Generates a dictionary containing random temperature and humidity values.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomTemperature\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"float\", \"short_description\": \"Generates a random temperature between 20 and 30 degrees Celsius.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomQuote\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a random quote from a predefined list.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomTemperatureHumidity\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"dict\", \"short_description\": \"Generates a dictionary containing random temperature and humidity values.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateTimestampData\", \"type\": \"function\", \"signature\": \"(filePath, fields, temperatureRange, humidityRange)\", \"return_type\": \"str\", \"short_description\": \"Generates a timestamped data file with specified temperature and humidity ranges.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomTemperatureHumidity\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"{'timestamp': datetime, 'temperature': float, 'humidity': float}\", \"short_description\": \"Generates a random temperature and humidity reading along with a timestamp.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomTemperatureHumidity\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"dict\", \"short_description\": \"Generates a dictionary containing random temperature and humidity values.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomTemperatureHumidity\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"dict\", \"short_description\": \"Generates a dictionary containing random temperature and humidity values.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomTemperature\", \"type\": \"function\", \"signature\": \"(minTemp, maxTemp)\", \"return_type\": \"float\", \"short_description\": \"Generates a random float temperature between minTemp and maxTemp.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"get_current_date\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime.date\", \"short_description\": \"Returns the current date without specifying a timezone.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"get_current_date\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime.date\", \"short_description\": \"Returns the current date without specifying a timezone.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"get_current_date_time\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime\", \"short_description\": \"Returns the current date and time in UTC.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"get_current_date\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime.date\", \"short_description\": \"Returns the current date without timezone information.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"get_current_date\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime.date\", \"short_description\": \"Returns the current date without any specified timezone.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"get_current_date\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime.date\", \"short_description\": \"Returns the current date without timezone information.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"getCurrentWeekday\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Returns the current weekday as a string (e.g., 'Monday').\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"get_current_date_time\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Returns a string representing the current date and time in a human-readable format.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"get_current_time_formatted\", \"type\": \"function\", \"signature\": \"(format='%Y-%m-%d')\", \"return_type\": \"str\", \"short_description\": \"Returns the current time as a formatted string.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"get_current_date\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime.date\", \"short_description\": \"Returns the current date without a specified timezone.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"getCurrentTime\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime\", \"short_description\": \"Returns the current time.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"getCurrentTimestamp\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Returns a string representation of the current timestamp.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"getCurrentTimestamp\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Returns the current timestamp as a formatted string.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"getCurrentTime\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime\", \"short_description\": \"Returns the current time as a datetime object.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"generateTimestamp\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Returns a string representation of the current timestamp.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"getCurrentTime\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime\", \"short_description\": \"Returns the current time as a datetime object without any timezone information.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"getCurrentTime\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime\", \"short_description\": \"Returns the current time in the local timezone.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"getCurrentTime\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime\", \"short_description\": \"Returns the current date and time.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"getCurrentTime\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime\", \"short_description\": \"Returns the current time as a datetime object.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"getCurrentTime\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"datetime\", \"short_description\": \"Returns the current time as a datetime object.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"getNowTimestamp\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Returns a string representation of the current time in a custom format, including milliseconds.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"fetchData\", \"type\": \"function\", \"signature\": \"(url, headers=None)\", \"return_type\": \"Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"generateTimestamp\", \"type\": \"function\", \"signature\": \"(format)\", \"return_type\": \"str\", \"short_description\": \"Generates a timestamp string in the specified format.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"fetchAndSaveData\", \"type\": \"function\", \"signature\": \"(url, savePath)\", \"return_type\": \"str\", \"short_description\": \"Fetches data from the given URL and saves it to the specified path.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"generateTimestamp\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a timestamp string in the format YYYYMMDDHHMMSSFFFFFF.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"generateTimestamp\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a timestamp string in the format YYYYMMDDHHMMSSFFF.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"generateTimestamp\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Returns a string representation of the current date and time without timezone information, formatted as 'YYYYMMDDHHMMSS' with microseconds.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"generateTimestamp\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a timestamp string with milliseconds.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"fetchAndSaveResource\", \"type\": \"function\", \"signature\": \"(url, savePath, headers=None)\", \"return_type\": \"str\", \"short_description\": \"Fetches a resource from a given URL and saves it to a specified path. Returns the path to the saved file.\"}"}
{"api_id": 33, "api_name": "datetime.datetime.now", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"generateTimestamp\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a timestamp string in the format YYYYMMDDHHMMSSFFF.\"}"}
{"api_id": 34, "api_name": "difflib.ndiff", "task_id": "BigCodeBench/509", "solution": "{\"name\": \"compareCsvFiles\", \"type\": \"function\", \"signature\": \"(file_path1, file_path2, delimiter=',', quotechar='\"')\", \"return_type\": \"DataFrame\", \"short_description\": \"Compares two CSV files line by line and returns a DataFrame with the comparison results.\"}"}
{"api_id": 34, "api_name": "difflib.ndiff", "task_id": "BigCodeBench/509", "solution": "{\"name\": \"compareCsvFiles\", \"type\": \"function\", \"signature\": \"(file_path1, file_path2, delimiter=',', quotechar='\"')\", \"return_type\": \"DataFrame\", \"short_description\": \"Compares two CSV files line by line and returns a DataFrame with the differences.\"}"}
{"api_id": 34, "api_name": "difflib.ndiff", "task_id": "BigCodeBench/509", "solution": "{\"name\": \"compareCsvFiles\", \"type\": \"function\", \"signature\": \"(file_path1, file_path2, delimiter=',', quotechar='\\\"')\", \"return_type\": \"DataFrame\", \"short_description\": \"Compares two CSV files line by line and returns a DataFrame with the comparison results.\"}"}
{"api_id": 34, "api_name": "difflib.ndiff", "task_id": "BigCodeBench/509", "solution": "{\"name\": \"compareCsvFiles\", \"type\": \"function\", \"signature\": \"(file_path1, file_path2, delimiter=',', quotechar='\"')\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Compares two CSV files line by line and returns a DataFrame with the comparison results.\"}"}
{"api_id": 34, "api_name": "difflib.ndiff", "task_id": "BigCodeBench/509", "solution": "{\"name\": \"compareFiles\", \"type\": \"function\", \"signature\": \"(file_path1, file_path2, delimiter=',', quotechar='\\\"')\", \"return_type\": \"DataFrame\", \"short_description\": \"Compares the contents of two CSV files line by line and returns a DataFrame with the differences.\"}"}
{"api_id": 34, "api_name": "difflib.ndiff", "task_id": "BigCodeBench/509", "solution": "{\n  \"name\": \"compare_csv_files\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path1, file_path2, delimiter=',', quotechar='\"')\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Compares two CSV files line by line and returns a DataFrame with the comparison results.\"\n}"}
{"api_id": 34, "api_name": "difflib.ndiff", "task_id": "BigCodeBench/509", "solution": "{\n  \"name\": \"compare_csv_files\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path1, file_path2, delimiter=',', quotechar='\"')\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Compares two CSV files line by line and returns a DataFrame with the comparison results.\"\n}"}
{"api_id": 34, "api_name": "difflib.ndiff", "task_id": "BigCodeBench/509", "solution": "{\"name\": \"compareCsvFiles\", \"type\": \"function\", \"signature\": \"(str, str, str, str)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Compares two CSV files line by line and returns a DataFrame with the comparison results.\"}"}
{"api_id": 34, "api_name": "difflib.ndiff", "task_id": "BigCodeBench/509", "solution": "{\"name\": \"csv_diff\", \"type\": \"function\", \"signature\": \"(file_path1, file_path2, delimiter=',', quotechar='\\\"')\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Compares the contents of two CSV files line by line and returns a DataFrame with the differences.\"}"}
{"api_id": 34, "api_name": "difflib.ndiff", "task_id": "BigCodeBench/509", "solution": "{\"name\": \"compareCsvFiles\", \"type\": \"function\", \"signature\": \"(file_path1, file_path2, delimiter=',', quotechar='\"')\", \"return_type\": \"DataFrame\", \"short_description\": \"Compares two CSV files line by line and returns a DataFrame with the comparison results.\"}"}
{"api_id": 35, "api_name": "docx.Document", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"convert_files_to_csv\",\n  \"type\": \"function\",\n  \"signature\": \"(source_directory: str, target_directory: str)\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Converts all files with supported extensions in the source directory to CSV format and saves them in the target directory.\"\n}"}
{"api_id": 35, "api_name": "docx.Document", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"loadDocument\", \"type\": \"callable\", \"signature\": \"(docxPath: 'str | None' = None)\", \"return_type\": \"docx.Document\", \"short_description\": \"Loads a |Document| object from the given path or returns a default template document if no path is provided.\"}"}
{"api_id": 35, "api_name": "docx.Document", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"loadAndConvertDocx\", \"type\": \"function\", \"signature\": \"(docxPath: 'str | None' = None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Loads a .docx file and converts its content into a pandas DataFrame.\"}"}
{"api_id": 35, "api_name": "docx.Document", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convertFilesToDocx\", \"type\": \"callable\", \"signature\": \"(sourceDirectory: 'str', targetDirectory: 'str')\", \"return_type\": \"int\", \"short_description\": \"Converts all files with specified extensions in the source directory to .docx format and saves them in the target directory.\"}"}
{"api_id": 35, "api_name": "docx.Document", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convertFilesToDocx\", \"type\": \"function\", \"signature\": \"(sourceDirectory: 'str', targetDirectory: 'str') -> 'int'\", \"return_type\": \"int\", \"short_description\": \"Converts all files in the source directory to .docx format and saves them in the target directory.\"}"}
{"api_id": 35, "api_name": "docx.Document", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"convert_files_to_csv\",\n  \"type\": \"function\",\n  \"signature\": \"(source_directory: 'str', target_directory: 'str')\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Converts all supported files in the source directory to CSV format and saves them in the target directory.\"\n}"}
{"api_id": 35, "api_name": "docx.Document", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"readAndConvertDocx\", \"type\": \"function\", \"signature\": \"(docxPath: 'str')\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Reads a .docx file and converts its content into a pandas DataFrame.\"}"}
{"api_id": 35, "api_name": "docx.Document", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"createWordDocFromText\", \"type\": \"function\", \"signature\": \"(text: 'str', output_path: 'str')\", \"return_type\": \"None\", \"short_description\": \"Create a new Word document from a given text string and save it to the specified path.\"}"}
{"api_id": 35, "api_name": "docx.Document", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"loadDocument\", \"type\": \"callable\", \"signature\": \"(document: 'str | IO[bytes] | None' = None)\", \"return_type\": \"Document\", \"short_description\": \"Loads a |Document| object from the given input, which can be a file path, a file-like object, or None for a default template.\"}"}
{"api_id": 35, "api_name": "docx.Document", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"loadDocument\", \"type\": \"callable\", \"signature\": \"(docxPath: 'str | None' = None)\", \"return_type\": \"Document\", \"short_description\": \"Loads a |Document| object from the specified path or a default template if no path is provided.\"}"}
{"api_id": 36, "api_name": "email.message.EmailMessage", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(from, to, subject, content, smtpServer, smtpPort)\", \"return_type\": \"None\", \"short_description\": \"Sends an email with the provided details to the specified SMTP server.\"}"}
{"api_id": 36, "api_name": "email.message.EmailMessage", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(email, recipient, subject, content, smtpServer, smtpPort)\", \"return_type\": \"None\", \"short_description\": \"Sends an email with the provided details to the specified recipient using an SMTP server.\"}"}
{"api_id": 36, "api_name": "email.message.EmailMessage", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"sendEmailMessage\", \"type\": \"function\", \"signature\": \"(message, recipient, sender, password, smtpServer, smtpPort)\", \"return_type\": \"None\", \"short_description\": \"Sends an email message to a recipient using the specified SMTP server and port.\"}"}
{"api_id": 36, "api_name": "email.message.EmailMessage", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(from, to, subject, content)\", \"return_type\": \"None\", \"short_description\": \"Sends an email with the provided details.\"}"}
{"api_id": 36, "api_name": "email.message.EmailMessage", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(from, to, subject, content)\", \"return_type\": \"None\", \"short_description\": \"Sends an email with the provided details.\"}"}
{"api_id": 36, "api_name": "email.message.EmailMessage", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(from, to, subject, content)\", \"return_type\": \"None\", \"short_description\": \"Sends an email with the given details.\"}"}
{"api_id": 36, "api_name": "email.message.EmailMessage", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(email, recipient, subject, content, smtpServer, smtpPort)\", \"return_type\": \"None\", \"short_description\": \"Sends an email with the given details.\"}"}
{"api_id": 36, "api_name": "email.message.EmailMessage", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"sendEmailMessage\", \"type\": \"function\", \"signature\": \"(email, recipient, subject, content)\", \"return_type\": \"None\", \"short_description\": \"Sends an email message with the given details.\"}"}
{"api_id": 36, "api_name": "email.message.EmailMessage", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(from, to, subject, content, smtpServer, smtpPort)\", \"return_type\": \"None\", \"short_description\": \"Sends an email with the given details to the specified recipient.\"}"}
{"api_id": 36, "api_name": "email.message.EmailMessage", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(email, recipient, subject, content)\", \"return_type\": \"None\", \"short_description\": \"Sends an email with the provided details.\"}"}
{"api_id": 37, "api_name": "email.mime.text.MIMEText", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"generateEmail\", \"type\": \"function\", \"signature\": \"(subject, message, to, smtp_server, smtp_port, smtp_username, smtp_password)\", \"return_type\": \"None\", \"short_description\": \"Sends an email with the given subject, message, and recipient using the provided SMTP server credentials.\"}"}
{"api_id": 37, "api_name": "email.mime.text.MIMEText", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"createMimeText\", \"type\": \"function\", \"signature\": \"(_text, _subtype='plain', _charset=None)\", \"return_type\": \"object\", \"short_description\": \"Creates a MIME text document for email messages.\"}"}
{"api_id": 37, "api_name": "email.mime.text.MIMEText", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"generateEmail\", \"type\": \"function\", \"signature\": \"(subject, message, to, smtp_server, smtp_port, smtp_username, smtp_password)\", \"return_type\": \"None\", \"short_description\": \"Generates and sends an email with the given subject, message, and recipient using the provided SMTP server details.\"}"}
{"api_id": 37, "api_name": "email.mime.text.MIMEText", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"generateEmail\", \"type\": \"function\", \"signature\": \"(subject, message, to, smtp_server, smtp_port, smtp_username, smtp_password)\", \"return_type\": \"None\", \"short_description\": \"Generates and sends an email with the given subject, message, and recipient using the provided SMTP server details.\"}"}
{"api_id": 37, "api_name": "email.mime.text.MIMEText", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"generateEmail\", \"type\": \"function\", \"signature\": \"(_subject, _message, _to, _smtp_server, _smtp_port, _smtp_username, _smtp_password)\", \"return_type\": \"None\", \"short_description\": \"Generates and sends an email with the provided details.\"}"}
{"api_id": 37, "api_name": "email.mime.text.MIMEText", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"generateEmail\", \"type\": \"function\", \"signature\": \"(subject, message, to, smtpServer, smtpPort, smtpUsername, smtpPassword)\", \"return_type\": \"None\", \"short_description\": \"Generates and sends an email with the provided subject, message, and recipient using the given SMTP server details.\"}"}
{"api_id": 37, "api_name": "email.mime.text.MIMEText", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"generateEmail\", \"type\": \"function\", \"signature\": \"(subject, message, to, smtp_server, smtp_port, smtp_username, smtp_password)\", \"return_type\": \"None\", \"short_description\": \"Generates and sends an email with the given details.\"}"}
{"api_id": 37, "api_name": "email.mime.text.MIMEText", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"generateEmailMessage\", \"type\": \"function\", \"signature\": \"(_subject, _message, _to, _from, _smtpServer, _smtpPort, _smtpUsername, _smtpPassword)\", \"return_type\": \"str\", \"short_description\": \"Generates an email message and sends it using the provided SMTP credentials.\"}"}
{"api_id": 37, "api_name": "email.mime.text.MIMEText", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"generateEmail\", \"type\": \"function\", \"signature\": \"(subject, message, to, smtp_server, smtp_port, smtp_username, smtp_password)\", \"return_type\": \"None\", \"short_description\": \"Generates and sends an email with the provided details.\"}"}
{"api_id": 37, "api_name": "email.mime.text.MIMEText", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"generateEmailMessage\", \"type\": \"function\", \"signature\": \"(_subject, _message, _to, _smtp_server, _smtp_port, _smtp_username, _smtp_password)\", \"return_type\": \"str\", \"short_description\": \"Generates and sends an email message using the provided SMTP server credentials.\"}"}
{"api_id": 38, "api_name": "flask.Flask", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createFlaskApp\", \"type\": \"function\", \"signature\": \"(import_name: 'str', template_folder: 'str', secret_key: 'str')\", \"return_type\": \"Flask\", \"short_description\": \"Creates a Flask application instance with the given import name, template folder, and secret key.\"}"}
{"api_id": 38, "api_name": "flask.Flask", "task_id": "BigCodeBench/82", "solution": "{\n  \"name\": \"createFlaskApp\",\n  \"type\": \"function\",\n  \"signature\": \"(import_name: 'str', secret_key: 'str', template_folder: 'str')\",\n  \"return_type\": \":class:`Flask`\",\n  \"short_description\": \"Creates and configures a Flask application with a given secret key and template folder.\"\n}"}
{"api_id": 38, "api_name": "flask.Flask", "task_id": "BigCodeBench/82", "solution": "{\n  \"name\": \"createFlaskApp\",\n  \"type\": \"function\",\n  \"signature\": \"(import_name: 'str', secret_key: 'str', template_folder: 'str', instance_path: 'str | None' = None)\",\n  \"return_type\": \"Flask\",\n  \"short_description\": \"Creates a Flask application instance with the specified configuration.\"\n}"}
{"api_id": 38, "api_name": "flask.Flask", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createFlaskApp\", \"type\": \"function\", \"signature\": \"(secret_key: 'str', template_folder: 'str', static_folder: 'str | None' = None, instance_path: 'str | None' = None)\", \"return_type\": \"Flask\", \"short_description\": \"Creates a Flask application instance with the specified secret key, template folder, and optional static and instance paths.\"}"}
{"api_id": 38, "api_name": "flask.Flask", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createFlaskApp\", \"type\": \"function\", \"signature\": \"(import_name: 'str', template_folder: 'str', secret_key: 'str')\", \"return_type\": \":class:`Flask`\", \"short_description\": \"Creates and configures a Flask application with the given parameters.\"}"}
{"api_id": 38, "api_name": "flask.Flask", "task_id": "BigCodeBench/82", "solution": "{\n  \"name\": \"createApp\",\n  \"type\": \"function\",\n  \"signature\": \"(secret_key: 'str', template_folder: 'str')\",\n  \"return_type\": \"Flask\",\n  \"short_description\": \"Creates a new Flask application instance with the given secret key and template folder.\"\n}"}
{"api_id": 38, "api_name": "flask.Flask", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createApp\", \"type\": \"function\", \"signature\": \"(secret_key: 'str', template_folder: 'str')\", \"return_type\": \"Flask\", \"short_description\": \"Creates a new Flask application instance with the given secret key and template folder.\"}"}
{"api_id": 38, "api_name": "flask.Flask", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createFlaskApp\", \"type\": \"function\", \"signature\": \"(import_name: 'str', template_folder: 'str', secret_key: 'str')\", \"return_type\": \"Flask\", \"short_description\": \"Creates and configures a Flask application with a given template folder and secret key.\"}"}
{"api_id": 38, "api_name": "flask.Flask", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createFlaskApp\", \"type\": \"function\", \"signature\": \"(secret_key: 'str', template_folder: 'str')\", \"return_type\": \":class:`Flask`\", \"short_description\": \"Creates a Flask application instance with the given secret key and template folder.\"}"}
{"api_id": 38, "api_name": "flask.Flask", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createApp\", \"type\": \"function\", \"signature\": \"(secret_key: 'str', template_folder: 'str')\", \"return_type\": \"Flask\", \"short_description\": \"Creates a new Flask application instance with the given secret key and template folder.\"}"}
{"api_id": 38, "api_name": "flask.Flask", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"createFlaskApp\", \"type\": \"function\", \"signature\": \"(import_name: 'str', static_url_path: 'str | None' = None, static_folder: 'str | os.PathLike[str] | None' = 'static', static_host: 'str | None' = None, host_matching: 'bool' = False, subdomain_matching: 'bool' = False, template_folder: 'str | os.PathLike[str] | None' = 'templates', instance_path: 'str | None' = None, instance_relative_config: 'bool' = False, root_path: 'str | None' = None)\", \"return_type\": \"Tuple[Flask, Dict[str, Any]]\", \"short_description\": \"Creates and configures a Flask application with the given parameters and returns the application instance along with its configuration.\"}"}
{"api_id": 38, "api_name": "flask.Flask", "task_id": "BigCodeBench/401", "solution": "{\n  \"name\": \"createMailConfiguration\",\n  \"type\": \"function\",\n  \"signature\": \"(app_name: 'str', mail_server: 'str | None' = None, mail_port: 'int | None' = None, mail_use_tls: 'bool | None' = None, mail_username: 'str | None' = None, mail_password: 'str | None' = None)\",\n  \"return_type\": \"{'MAIL_SERVER': 'str', 'MAIL_PORT': 'int', 'MAIL_USE_TLS': 'bool', 'MAIL_USERNAME': 'str | None', 'MAIL_PASSWORD': 'str | None'}\",\n  \"short_description\": \"Creates a mail configuration object for a Flask application with the given parameters.\"\n}"}
{"api_id": 38, "api_name": "flask.Flask", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"createMailClient\", \"type\": \"function\", \"signature\": \"(appName: 'str')\", \"return_type\": \"tuple\", \"short_description\": \"Creates a mail client configuration for the given Flask application.\"}"}
{"api_id": 38, "api_name": "flask.Flask", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"createFlaskApp\", \"type\": \"function\", \"signature\": \"(import_name: 'str', static_url_path: 'str | None' = None, static_folder: 'str | os.PathLike[str] | None' = 'static', template_folder: 'str | os.PathLike[str] | None' = 'templates')\", \"return_type\": \":class:`Flask`\", \"short_description\": \"Creates a Flask application instance with the given parameters. This function is a high-level utility for quickly setting up a Flask application with default configurations for static files and templates.\"}"}
{"api_id": 38, "api_name": "flask.Flask", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"createMailServerConfig\", \"type\": \"function\", \"signature\": \"(app_name: 'str')\", \"return_type\": \"Tuple[Mail, Dict[str, Any]]\", \"short_description\": \"Creates a mail server configuration for the given Flask application.\"}"}
{"api_id": 38, "api_name": "flask.Flask", "task_id": "BigCodeBench/401", "solution": "{\n  \"name\": \"createFlaskApp\",\n  \"type\": \"function\",\n  \"signature\": \"(import_name: 'str', static_url_path: 'str | None' = None, static_folder: 'str | os.PathLike[str] | None' = 'static', static_host: 'str | None' = None, host_matching: 'bool' = False, subdomain_matching: 'bool' = False, template_folder: 'str | os.PathLike[str] | None' = 'templates', instance_path: 'str | None' = None, instance_relative_config: 'bool' = False, root_path: 'str | None' = None)\",\n  \"return_type\": \"tuple[Flask, dict[str, str | int | bool | None]]\",\n  \"short_description\": \"Creates a new Flask application instance with the specified parameters and configures email settings using environment variables.\"\n}"}
{"api_id": 38, "api_name": "flask.Flask", "task_id": "BigCodeBench/401", "solution": "{\n  \"name\": \"createFlaskApp\",\n  \"type\": \"function\",\n  \"signature\": \"(import_name: 'str', config: 'dict' = {})\",\n  \"return_type\": \"tuple(Flask, dict)\",\n  \"short_description\": \"Creates a new Flask application instance with optional configuration.\"\n}"}
{"api_id": 38, "api_name": "flask.Flask", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"createFlaskApp\", \"type\": \"function\", \"signature\": \"(import_name: 'str', static_url_path: 'str | None' = None, static_folder: 'str | os.PathLike[str] | None' = 'static', template_folder: 'str | os.PathLike[str] | None' = 'templates')\", \"return_type\": \"tuple[Flask, dict[str, str | int | bool | None]]\", \"short_description\": \"Creates a Flask application with the given parameters and configures email settings using environment variables.\"}"}
{"api_id": 38, "api_name": "flask.Flask", "task_id": "BigCodeBench/401", "solution": "{\n  \"name\": \"createFlaskApp\",\n  \"type\": \"function\",\n  \"signature\": \"(import_name: 'str', static_url_path: 'str | None' = None, static_folder: 'str | os.PathLike[str] | None' = 'static', template_folder: 'str | os.PathLike[str] | None' = 'templates')\",\n  \"return_type\": \"tuple[Flask, dict[str, any]]\",\n  \"short_description\": \"Creates a Flask application with the given import name and optional static and template folders. Returns the Flask app and a dictionary with the configuration details.\"\n}"}
{"api_id": 38, "api_name": "flask.Flask", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"createFlaskApp\", \"type\": \"function\", \"signature\": \"(import_name: 'str', static_url_path: 'str | None' = None, static_folder: 'str | os.PathLike[str] | None' = 'static', static_host: 'str | None' = None, host_matching: 'bool' = False, subdomain_matching: 'bool' = False, template_folder: 'str | os.PathLike[str] | None' = 'templates', instance_path: 'str | None' = None, instance_relative_config: 'bool' = False, root_path: 'str | None' = None)\", \"return_type\": \"tuple[Mail, dict[str, str | int | bool]]\", \"short_description\": \"Creates and configures a Flask application with mail support, returning the application object and the configuration settings.\"}"}
{"api_id": 39, "api_name": "flask.render_template", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"create_flask_app\", \"type\": \"function\", \"signature\": \"(secret_key: 'str', template_folder: 'str') -> 'Flask'\", \"return_type\": \"Flask\", \"short_description\": \"Creates and configures a Flask application with a login system.\"}"}
{"api_id": 39, "api_name": "flask.render_template", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"renderTemplate\", \"type\": \"callable\", \"signature\": \"(template_name: 'str', context: 'dict') -> 'str'\", \"return_type\": \"Rendered template content as string\", \"short_description\": \"Renders a template with the given context and returns the rendered content.\"}"}
{"api_id": 39, "api_name": "flask.render_template", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"renderTemplate\", \"type\": \"function\", \"signature\": \"(templateName: str, context: dict) -> str\", \"return_type\": \"str\", \"short_description\": \"Renders a template with the given name and context.\"}"}
{"api_id": 39, "api_name": "flask.render_template", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"renderTemplate\", \"type\": \"function\", \"signature\": \"(templateName: str, context: dict) -> str\", \"return_type\": \"str\", \"short_description\": \"Renders a template with the given name and context.\"}"}
{"api_id": 39, "api_name": "flask.render_template", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generate_user_session\", \"type\": \"function\", \"signature\": \"(username: 'str', password: 'str') -> 'dict'\", \"return_type\": \"dict\", \"short_description\": \"Generates a user session dictionary containing user information and authentication token.\"}"}
{"api_id": 39, "api_name": "flask.render_template", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"renderTemplate\", \"type\": \"function\", \"signature\": \"(templateName: str, context: dict) -> str\", \"return_type\": \"str\", \"short_description\": \"Renders a template with the given name and context.\"}"}
{"api_id": 39, "api_name": "flask.render_template", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"renderTemplate\", \"type\": \"function\", \"signature\": \"(templateName: 'string', context: 'object') => 'string'\", \"return_type\": \"string\", \"short_description\": \"Renders a template with the given name and context.\"}"}
{"api_id": 39, "api_name": "flask.render_template", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"render_template_custom\", \"type\": \"function\", \"signature\": \"(template_name: str, context: dict) -> str\", \"return_type\": \"str\", \"short_description\": \"Renders a custom template with the given context.\"}"}
{"api_id": 39, "api_name": "flask.render_template", "task_id": "BigCodeBench/82", "solution": "{\n  \"name\": \"render_html_page\",\n  \"type\": \"callable\",\n  \"signature\": \"(template_name: 'str', **context: 't.Any') -> 'str'\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Render an HTML page using the specified template and context.\"\n}"}
{"api_id": 39, "api_name": "flask.render_template", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"renderTemplate\", \"type\": \"callable\", \"signature\": \"(template_name: 'str', context: 'dict') -> 'str'\", \"return_type\": \"str\", \"short_description\": \"Render a template with the given context.\"}"}
{"api_id": 40, "api_name": "flask.url_for", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUrl\", \"type\": \"function\", \"signature\": \"(endpoint: 'str', *, anchor: 'str | None' = None, method: 'str | None' = None, scheme: 'str | None' = None, external: 'bool | None' = None, **values: 't.Any') -> 'str'\", \"return_type\": \"str\", \"short_description\": \"Generates a URL to the given endpoint with the given values, allowing for optional parameters to control the URL's scheme, method, and externalness.\"}"}
{"api_id": 40, "api_name": "flask.url_for", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUrl\", \"type\": \"function\", \"signature\": \"(endpoint: 'str', *, _anchor: 'str | None' = None, _method: 'str | None' = None, _scheme: 'str | None' = None, _external: 'bool | None' = None, **values: 't.Any') -> 'str'\", \"return_type\": \"str\", \"short_description\": \"Generates a URL to the given endpoint with the given values. This function requires an active request or application context and calls `current_app.url_for()`.\"}"}
{"api_id": 40, "api_name": "flask.url_for", "task_id": "BigCodeBench/82", "solution": "{\n  \"name\": \"generateUrlFor\",\n  \"type\": \"function\",\n  \"signature\": \"(endpoint: 'str', *, _anchor: 'str | None' = None, _method: 'str | None' = None, _scheme: 'str | None' = None, _external: 'bool | None' = None, **values: 't.Any') -> 'str'\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Generate a URL to the given endpoint with the given values. This function requires an active request or application context and calls `current_app.url_for()`.\"\n}"}
{"api_id": 40, "api_name": "flask.url_for", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUrl\", \"type\": \"function\", \"signature\": \"(endpoint: 'str', *, anchor: 'str | None' = None, method: 'str | None' = None, scheme: 'str | None' = None, external: 'bool | None' = None, **values: 't.Any') -> 'str'\", \"return_type\": \"str\", \"short_description\": \"Generate a URL to the given endpoint with the given values. This function requires an active request or application context and calls current_app.url_for().\"}"}
{"api_id": 40, "api_name": "flask.url_for", "task_id": "BigCodeBench/82", "solution": "{\n  \"name\": \"generateUrl\",\n  \"type\": \"function\",\n  \"signature\": \"(endpoint: 'str', values: 't.Any' = {}, _anchor: 'str | None' = None, _method: 'str | None' = None, _scheme: 'str | None' = None, _external: 'bool | None' = None) -> 'str'\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Generate a URL to the given endpoint with the given values. This function requires an active request or application context and calls `current_app.url_for()`.\"\n}"}
{"api_id": 40, "api_name": "flask.url_for", "task_id": "BigCodeBench/82", "solution": "{\n  \"name\": \"generateUrl\",\n  \"type\": \"function\",\n  \"signature\": \"(endpoint: 'str', values: 't.Any', *, _anchor: 'str | None' = None, _method: 'str | None' = None, _scheme: 'str | None' = None, _external: 'bool | None' = None) -> 'str'\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Generates a URL to the given endpoint with the given values. Requires an active request or application context and calls `current_app.url_for()`.\"\n}"}
{"api_id": 40, "api_name": "flask.url_for", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUrlFor\", \"type\": \"function\", \"signature\": \"(endpoint: 'str', *, _anchor: 'str | None' = None, _method: 'str | None' = None, _scheme: 'str | None' = None, _external: 'bool | None' = None, **values: 't.Any') -> 'str'\", \"return_type\": \"str\", \"short_description\": \"Generates a URL to the given endpoint with the given values, requiring an active request or application context.\"}"}
{"api_id": 40, "api_name": "flask.url_for", "task_id": "BigCodeBench/82", "solution": "{\n  \"name\": \"generate_url\",\n  \"type\": \"function\",\n  \"signature\": \"(endpoint: 'str', *, _anchor: 'str | None' = None, _method: 'str | None' = None, _scheme: 'str | None' = None, _external: 'bool | None' = None, **values: 't.Any') -> 'str'\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Generates a URL to the given endpoint with the given values.\"\n}"}
{"api_id": 40, "api_name": "flask.url_for", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUrl\", \"type\": \"function\", \"signature\": \"(endpoint: str, *, anchor: str | None = None, method: str | None = None, scheme: str | None = None, external: bool | None = None, **values: Any) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a URL to the given endpoint with the given values. This function requires an active request or application context.\"}"}
{"api_id": 40, "api_name": "flask.url_for", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUrl\", \"type\": \"function\", \"signature\": \"(endpoint: str, *, anchor: str | None = None, method: str | None = None, scheme: str | None = None, external: bool | None = None, **values: Any) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a URL to the given endpoint with the given values. This function requires an active request or application context and calls `current_app.url_for()`.\"}"}
{"api_id": 41, "api_name": "flask.redirect", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createRedirect\", \"type\": \"function\", \"signature\": \"(location: 'str', code: 'int' = 302) -> 'BaseResponse'\", \"return_type\": \"'BaseResponse'\", \"short_description\": \"Create a redirect response object for the given location with a specified status code.\"}"}
{"api_id": 41, "api_name": "flask.redirect", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"(length: 'int') -> 'str'\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of the specified length.\"}"}
{"api_id": 41, "api_name": "flask.redirect", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createRedirect\", \"type\": \"function\", \"signature\": \"(location: 'str', code: 'int' = 302) -> 'BaseResponse'\", \"return_type\": \"'BaseResponse'\", \"short_description\": \"Creates a redirect response object to the specified location with the given status code.\"}"}
{"api_id": 41, "api_name": "flask.redirect", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createRedirectResponse\", \"type\": \"function\", \"signature\": \"(location: 'str', code: 'int' = 302, responseClass: 'type[BaseResponse] | None' = None) -> 'BaseResponse'\", \"return_type\": \"BaseResponse\", \"short_description\": \"Creates a redirect response object, optionally using a specified response class.\"}"}
{"api_id": 41, "api_name": "flask.redirect", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createRedirect\", \"type\": \"function\", \"signature\": \"(location: 'str', code: 'int' = 302) -> 'BaseResponse'\", \"return_type\": \"BaseResponse\", \"short_description\": \"Creates a redirect response object to the specified location with the given status code.\"}"}
{"api_id": 41, "api_name": "flask.redirect", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createApp\", \"type\": \"function\", \"signature\": \"(secret_key: 'str', template_folder: 'str') -> 'Flask'\", \"return_type\": \"Flask\", \"short_description\": \"Creates a new Flask application instance with the given secret key and template folder.\"}"}
{"api_id": 41, "api_name": "flask.redirect", "task_id": "BigCodeBench/82", "solution": "{\n  \"name\": \"generate_api_key\",\n  \"type\": \"function\",\n  \"signature\": \"(user_id: 'str', expires_in: 'int' = 3600) -> 'str'\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Generates a new API key for a given user ID with an optional expiration time.\"\n}"}
{"api_id": 41, "api_name": "flask.redirect", "task_id": "BigCodeBench/82", "solution": "{\n  \"name\": \"generateUserProfile\",\n  \"type\": \"function\",\n  \"signature\": \"(user_id: 'str', include_details: 'bool' = True) -> 'dict'\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Generates a user profile dictionary based on the provided user ID, optionally including detailed user information.\"\n}"}
{"api_id": 41, "api_name": "flask.redirect", "task_id": "BigCodeBench/82", "solution": "{\n  \"name\": \"create_redirect_response\",\n  \"type\": \"function\",\n  \"signature\": \"(location: 'str', code: 'int' = 302) -> 'BaseResponse'\",\n  \"return_type\": \"'BaseResponse'\",\n  \"short_description\": \"Create a redirect response object to the specified location with the given status code.\"\n}"}
{"api_id": 41, "api_name": "flask.redirect", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createRedirectResponse\", \"type\": \"function\", \"signature\": \"(location: 'str', code: 'int' = 302, responseClass: 'type[BaseResponse] | None' = None) -> 'BaseResponse'\", \"return_type\": \"BaseResponse\", \"short_description\": \"Creates a redirect response object using the specified location, status code, and response class.\"}"}
{"api_id": 42, "api_name": "flask_login.UserMixin", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUserCredentials\", \"type\": \"function\", \"signature\": \"(username: str, password: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Generates a dictionary containing user credentials with hashed password.\"}"}
{"api_id": 42, "api_name": "flask_login.UserMixin", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"getUserProfile\", \"type\": \"function\", \"signature\": \"(userId)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the user profile information for a given user ID.\"}"}
{"api_id": 42, "api_name": "flask_login.UserMixin", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"fetchUserProfile\", \"type\": \"function\", \"signature\": \"(userId)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed profile information for a user identified by userId.\"}"}
{"api_id": 42, "api_name": "flask_login.UserMixin", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"getUserProfile\", \"type\": \"function\", \"signature\": \"(user_id)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed user profile information based on the user ID.\"}"}
{"api_id": 42, "api_name": "flask_login.UserMixin", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUser\", \"type\": \"function\", \"signature\": \"(username: str, password: str) -> User\", \"return_type\": \"User\", \"short_description\": \"Creates a new user object with the given username and password.\"}"}
{"api_id": 42, "api_name": "flask_login.UserMixin", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"fetchUserProfile\", \"type\": \"function\", \"signature\": \"(userId)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves user profile information based on the provided user ID.\"}"}
{"api_id": 42, "api_name": "flask_login.UserMixin", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"fetchUserProfile\", \"type\": \"function\", \"signature\": \"(userId)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the profile information of a user given their user ID.\"}"}
{"api_id": 42, "api_name": "flask_login.UserMixin", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUser\", \"type\": \"function\", \"signature\": \"(username: str, password: str) -> User\", \"return_type\": \"User\", \"short_description\": \"Creates a new user object with the given username and password.\"}"}
{"api_id": 42, "api_name": "flask_login.UserMixin", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"getUserProfile\", \"type\": \"function\", \"signature\": \"(userId)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the profile information for a given user.\"}"}
{"api_id": 42, "api_name": "flask_login.UserMixin", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUser\", \"type\": \"function\", \"signature\": \"(username, password)\", \"return_type\": \"User\", \"short_description\": \"Creates a new user object with the given username and password.\"}"}
{"api_id": 43, "api_name": "flask_login.login_required", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUserApp\", \"type\": \"function\", \"signature\": \"(secret_key, template_folder)\", \"return_type\": \"Flask\", \"short_description\": \"Creates a Flask application with user authentication functionality.\"}"}
{"api_id": 43, "api_name": "flask_login.login_required", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUser\", \"type\": \"function\", \"signature\": \"(username, password)\", \"return_type\": \"User\", \"short_description\": \"Creates a new user object with the given username and password.\"}"}
{"api_id": 43, "api_name": "flask_login.login_required", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createUser\", \"type\": \"function\", \"signature\": \"(username, password)\", \"return_type\": \"User\", \"short_description\": \"Creates a new user with the given username and password.\"}"}
{"api_id": 43, "api_name": "flask_login.login_required", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"checkUserAuthentication\", \"type\": \"function\", \"signature\": \"(user)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given user is authenticated.\"}"}
{"api_id": 43, "api_name": "flask_login.login_required", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"checkUserAuthentication\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"bool\", \"short_description\": \"Checks if the current user is authenticated.\"}"}
{"api_id": 43, "api_name": "flask_login.login_required", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"getUserProfile\", \"type\": \"function\", \"signature\": \"(userId)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the user profile for a given user ID.\"}"}
{"api_id": 43, "api_name": "flask_login.login_required", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"fetchUserProfile\", \"type\": \"function\", \"signature\": \"(userId)\", \"return_type\": \"object\", \"short_description\": \"Retrieves detailed user profile information based on the provided user ID.\"}"}
{"api_id": 43, "api_name": "flask_login.login_required", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUser\", \"type\": \"function\", \"signature\": \"(username, password)\", \"return_type\": \"User\", \"short_description\": \"Creates a new user object with the given username and password.\"}"}
{"api_id": 43, "api_name": "flask_login.login_required", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUserApp\", \"type\": \"function\", \"signature\": \"(secret_key, template_folder)\", \"return_type\": \"app\", \"short_description\": \"Creates a Flask application with user login functionality. The app includes routes for login, logout, and a protected route. It uses Flask-Login for user management and session handling.\"}"}
{"api_id": 43, "api_name": "flask_login.login_required", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUserApp\", \"type\": \"function\", \"signature\": \"(secret_key, template_folder)\", \"return_type\": \"Flask\", \"short_description\": \"Creates a Flask application with user authentication functionality.\"}"}
{"api_id": 44, "api_name": "flask_login.logout_user", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"logoutUser\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Logs the current user out of the application.\"}"}
{"api_id": 44, "api_name": "flask_login.logout_user", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"clearUserSession\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Clears the current user's session, logging them out and redirecting to the login page.\"}"}
{"api_id": 44, "api_name": "flask_login.logout_user", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"logoutUser\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Logs the current user out and redirects them to the login page.\"}"}
{"api_id": 44, "api_name": "flask_login.logout_user", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"fetchUserProfile\", \"type\": \"function\", \"signature\": \"(userId: str)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves user profile information based on the provided user ID.\"}"}
{"api_id": 44, "api_name": "flask_login.logout_user", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"resetUserSession\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Resets the user session by logging out the current user and then logging them back in.\"}"}
{"api_id": 44, "api_name": "flask_login.logout_user", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"logoutUser\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Logs out the current user by clearing the session and optionally clearing the remember me cookie.\"}"}
{"api_id": 44, "api_name": "flask_login.logout_user", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"logoutUser\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Logs the current user out.\"}"}
{"api_id": 44, "api_name": "flask_login.logout_user", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUserSession\", \"type\": \"function\", \"signature\": \"(username: str, password: str) -> bool\", \"return_type\": \"bool\", \"short_description\": \"Creates a new user session with the provided credentials. Returns True if successful, False otherwise.\"}"}
{"api_id": 44, "api_name": "flask_login.logout_user", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"logoutUser\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Logs the current user out of the application.\"}"}
{"api_id": 44, "api_name": "flask_login.logout_user", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"clearUserSession\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Clears the user session, effectively logging the user out.\"}"}
{"api_id": 45, "api_name": "flask_login.current_user.id", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"getUserProfile\", \"type\": \"function\", \"signature\": \"getUserProfile(userId)\", \"return_type\": \"object\", \"short_description\": \"Retrieves user profile information based on the provided user ID.\"}"}
{"api_id": 45, "api_name": "flask_login.current_user.id", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"getUserProfile\", \"type\": \"GET\", \"signature\": \"/user/profile\", \"return_type\": \"JSON\", \"short_description\": \"Retrieves the user's profile information.\"}"}
{"api_id": 45, "api_name": "flask_login.current_user.id", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"getUserProfile\", \"type\": \"GET\", \"signature\": \"\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the profile information of the currently logged-in user.\"}"}
{"api_id": 45, "api_name": "flask_login.current_user.id", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"getUserProfile\", \"type\": \"GET\", \"signature\": \"\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the user profile for the currently logged-in user.\"}"}
{"api_id": 45, "api_name": "flask_login.current_user.id", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"fetchUserInfo\", \"type\": \"function\", \"signature\": \"def fetchUserInfo():\", \"return_type\": \"dict\", \"short_description\": \"Retrieves information about the currently logged-in user.\"}"}
{"api_id": 45, "api_name": "flask_login.current_user.id", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"getUserProfile\", \"type\": \"GET\", \"signature\": \"\", \"return_type\": \"JSON\", \"short_description\": \"Retrieves the user profile of the currently logged-in user.\"}"}
{"api_id": 45, "api_name": "flask_login.current_user.id", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"getUserProfile\", \"type\": \"GET\", \"signature\": \"\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the profile information of the currently logged-in user.\"}"}
{"api_id": 45, "api_name": "flask_login.current_user.id", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"getUserProfile\", \"type\": \"GET\", \"signature\": \"/profile/{user_id}\", \"return_type\": \"JSON\", \"short_description\": \"Retrieves the user profile information for a given user ID.\"}"}
{"api_id": 45, "api_name": "flask_login.current_user.id", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"getUserProfile\", \"type\": \"GET\", \"signature\": \"\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the profile of the currently logged-in user.\"}"}
{"api_id": 45, "api_name": "flask_login.current_user.id", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"getUserProfile\", \"type\": \"GET\", \"signature\": \"\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the profile information of the currently logged-in user.\"}"}
{"api_id": 46, "api_name": "flask_login.LoginManager", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"fetchUserProfile\", \"type\": \"function\", \"signature\": \"(userId)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves user profile information based on the provided user ID.\"}"}
{"api_id": 46, "api_name": "flask_login.LoginManager", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"initializeLoginManager\", \"type\": \"function\", \"signature\": \"(app=None)\", \"return_type\": \"LoginManager\", \"short_description\": \"This function initializes and returns a LoginManager instance used for handling user login functionality.\"}"}
{"api_id": 46, "api_name": "flask_login.LoginManager", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createUser\", \"type\": \"function\", \"signature\": \"(username, password)\", \"return_type\": \"User\", \"short_description\": \"Creates a new user with the given username and password.\"}"}
{"api_id": 46, "api_name": "flask_login.LoginManager", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createUserManager\", \"type\": \"function\", \"signature\": \"(app=None)\", \"return_type\": \"LoginManager\", \"short_description\": \"This function initializes and returns a LoginManager instance, which is used to manage user login functionality. The instance is not bound to a specific app by default, allowing for flexibility in app creation.\"}"}
{"api_id": 46, "api_name": "flask_login.LoginManager", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"fetchUserProfile\", \"type\": \"function\", \"signature\": \"(userId)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves user profile information based on the user ID.\"}"}
{"api_id": 46, "api_name": "flask_login.LoginManager", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createUserSession\", \"type\": \"function\", \"signature\": \"(username, password, app)\", \"return_type\": \"bool\", \"short_description\": \"Creates a user session if the credentials are valid.\"}"}
{"api_id": 46, "api_name": "flask_login.LoginManager", "task_id": "BigCodeBench/82", "solution": "{\n  \"name\": \"initializeApp\",\n  \"type\": \"function\",\n  \"signature\": \"(app=None, config=None)\",\n  \"return_type\": \"App\",\n  \"short_description\": \"Initializes the application with the given configuration and returns an App object.\"\n}"}
{"api_id": 46, "api_name": "flask_login.LoginManager", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUser\", \"type\": \"function\", \"signature\": \"(username, password)\", \"return_type\": \"User\", \"short_description\": \"Creates a new user object with the given username and password.\"}"}
{"api_id": 46, "api_name": "flask_login.LoginManager", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createLoginManager\", \"type\": \"function\", \"signature\": \"(app=None)\", \"return_type\": \"LoginManager\", \"short_description\": \"This function initializes and returns a LoginManager instance that can be used to handle user login functionality.\"}"}
{"api_id": 46, "api_name": "flask_login.LoginManager", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createApp\", \"type\": \"function\", \"signature\": \"(secret_key, template_folder)\", \"return_type\": \"app\", \"short_description\": \"Creates a new Flask application with specified secret key and template folder, and sets up the LoginManager.\"}"}
{"api_id": 47, "api_name": "flask_login.login_user", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"logoutUser\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Logs out the current user. This function does not take any parameters and returns nothing.\"}"}
{"api_id": 47, "api_name": "flask_login.login_user", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"validateCredentials\", \"type\": \"callable\", \"signature\": \"(username, password)\", \"return_type\": \"bool\", \"short_description\": \"Validates user credentials to ensure they can log in.\"}"}
{"api_id": 47, "api_name": "flask_login.login_user", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"resetUserSession\", \"type\": \"callable\", \"signature\": \"(user, remember=False, duration=None, force=False, fresh=True)\", \"return_type\": \"bool\", \"short_description\": \"Resets the session for a user. This function allows you to log a user in with specific parameters, overriding the default behavior for session management.\"}"}
{"api_id": 47, "api_name": "flask_login.login_user", "task_id": "BigCodeBench/82", "solution": "{\n  \"name\": \"setUserTheme\",\n  \"type\": \"function\",\n  \"signature\": \"(user, theme)\",\n  \"return_type\": \"bool\",\n  \"short_description\": \"Sets the theme for a user. This function updates the user's preferred theme and returns a boolean indicating success.\"\n}"}
{"api_id": 47, "api_name": "flask_login.login_user", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createUser\", \"type\": \"callable\", \"signature\": \"(username, password)\", \"return_type\": \"bool\", \"short_description\": \"Creates a new user with the given username and password. Returns ``True`` if the user is successfully created, and ``False`` otherwise.\"}"}
{"api_id": 47, "api_name": "flask_login.login_user", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"validateUserCredentials\", \"type\": \"callable\", \"signature\": \"(username, password)\", \"return_type\": \"bool\", \"short_description\": \"Validates the user credentials and logs in the user if valid.\"}"}
{"api_id": 47, "api_name": "flask_login.login_user", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"submitLoginForm\", \"type\": \"callable\", \"signature\": \"(form, user)\", \"return_type\": \"bool\", \"short_description\": \"Submits a login form for a user and logs them in if the credentials are valid.\"}"}
{"api_id": 47, "api_name": "flask_login.login_user", "task_id": "BigCodeBench/82", "solution": "{\n  \"name\": \"submitLoginForm\",\n  \"type\": \"function\",\n  \"signature\": \"(form)\",\n  \"return_type\": \"bool\",\n  \"short_description\": \"Submits a login form for user authentication.\"\n}"}
{"api_id": 47, "api_name": "flask_login.login_user", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUserToken\", \"type\": \"callable\", \"signature\": \"(user, duration=None)\", \"return_type\": \"str\", \"short_description\": \"Generates a token for the given user that can be used for authentication. The token is valid for the specified duration, if provided. If no duration is specified, a default duration is used.\"}"}
{"api_id": 47, "api_name": "flask_login.login_user", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"submitLoginForm\", \"type\": \"function\", \"signature\": \"(form)\", \"return_type\": \"bool\", \"short_description\": \"Submits a login form and attempts to log in the user. Returns True if the login is successful, otherwise False.\"}"}
{"api_id": 48, "api_name": "flask_mail.Mail", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(recipient, subject, body, sender=None)\", \"return_type\": \"None\", \"short_description\": \"Sends an email to the specified recipient with the given subject and body. Optionally, the sender can be specified.\"}"}
{"api_id": 48, "api_name": "flask_mail.Mail", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(recipients, subject, body, sender=None)\", \"return_type\": \"dict\", \"short_description\": \"Sends an email to specified recipients with the given subject and body.\"}"}
{"api_id": 48, "api_name": "flask_mail.Mail", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(recipient, subject, body, sender='no-reply@example.com')\", \"return_type\": \"None\", \"short_description\": \"Sends an email to the specified recipient with the given subject and body.\"}"}
{"api_id": 48, "api_name": "flask_mail.Mail", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(recipient, subject, body, sender='admin@example.com')\", \"return_type\": \"None\", \"short_description\": \"Sends an email to the specified recipient with the given subject and body.\"}"}
{"api_id": 48, "api_name": "flask_mail.Mail", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(recipient, subject, body, sender=None)\", \"return_type\": \"None\", \"short_description\": \"Sends an email to the specified recipient with the given subject and body.\"}"}
{"api_id": 48, "api_name": "flask_mail.Mail", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"createMailClient\", \"type\": \"function\", \"signature\": \"(config={})\", \"return_type\": \"MailClient\", \"short_description\": \"Creates a mail client with the given configuration.\"}"}
{"api_id": 48, "api_name": "flask_mail.Mail", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"createMailConfiguration\", \"type\": \"function\", \"signature\": \"(server='localhost', port=25, useTLS=False, username=None, password=None)\", \"return_type\": \"dict\", \"short_description\": \"Creates a mail configuration dictionary for use with Flask-Mail.\"}"}
{"api_id": 48, "api_name": "flask_mail.Mail", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"createMailClient\", \"type\": \"function\", \"signature\": \"(config=None)\", \"return_type\": \"tuple\", \"short_description\": \"Creates a mail client with the provided configuration.\"}"}
{"api_id": 48, "api_name": "flask_mail.Mail", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"initializeMail\", \"type\": \"function\", \"signature\": \"(app)\", \"return_type\": \"Mail\", \"short_description\": \"Initializes and returns a Mail object for email messaging.\"}"}
{"api_id": 48, "api_name": "flask_mail.Mail", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(to, subject, body, app=None)\", \"return_type\": \"bool\", \"short_description\": \"Sends an email message to the specified recipient using the provided Flask app configuration.\"}"}
{"api_id": 49, "api_name": "flask_wtf.FlaskForm", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createFlaskApp\", \"type\": \"function\", \"signature\": \"(secret_key, template_folder)\", \"return_type\": \"Flask\", \"short_description\": \"Creates a new Flask application instance with the specified secret key and template folder.\"}"}
{"api_id": 49, "api_name": "flask_wtf.FlaskForm", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createFlaskApp\", \"type\": \"function\", \"signature\": \"(secret_key, template_folder)\", \"return_type\": \"Flask\", \"short_description\": \"Creates and configures a new Flask application with provided secret key and template folder.\"}"}
{"api_id": 49, "api_name": "flask_wtf.FlaskForm", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createFlaskApp\", \"type\": \"function\", \"signature\": \"(secret_key, template_folder)\", \"return_type\": \"Flask\", \"short_description\": \"Creates and configures a Flask application with a login system.\"}"}
{"api_id": 49, "api_name": "flask_wtf.FlaskForm", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"fetchUserProfile\", \"type\": \"function\", \"signature\": \"(username)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves user profile information for the given username.\"}"}
{"api_id": 49, "api_name": "flask_wtf.FlaskForm", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createFlaskApp\", \"type\": \"function\", \"signature\": \"(secret_key, template_folder)\", \"return_type\": \"Flask\", \"short_description\": \"Creates a new Flask application with the specified secret key and template folder.\"}"}
{"api_id": 49, "api_name": "flask_wtf.FlaskForm", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateFlaskApp\", \"type\": \"function\", \"signature\": \"(secret_key, template_folder)\", \"return_type\": \"Flask\", \"short_description\": \"Generates a Flask application instance with the given secret key and template folder.\"}"}
{"api_id": 49, "api_name": "flask_wtf.FlaskForm", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"fetchUserProfile\", \"type\": \"function\", \"signature\": \"(username)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves user profile information for the given username.\"}"}
{"api_id": 49, "api_name": "flask_wtf.FlaskForm", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createFlaskApp\", \"type\": \"function\", \"signature\": \"(secret_key, template_folder)\", \"return_type\": \"Flask\", \"short_description\": \"Creates a new Flask application instance with the given secret key and template folder.\"}"}
{"api_id": 49, "api_name": "flask_wtf.FlaskForm", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"create_flask_app\", \"type\": \"function\", \"signature\": \"(secret_key, template_folder)\", \"return_type\": \"Flask\", \"short_description\": \"Creates and configures a Flask application with login functionality.\"}"}
{"api_id": 49, "api_name": "flask_wtf.FlaskForm", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUser\", \"type\": \"function\", \"signature\": \"(username, password)\", \"return_type\": \"User\", \"short_description\": \"Creates a new user object with the given username and password.\"}"}
{"api_id": 50, "api_name": "ftplib.FTP", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"downloadFtpFiles\", \"type\": \"function\", \"signature\": \"(server, user, password, directory)\", \"return_type\": \"list\", \"short_description\": \"Downloads files from an FTP server and returns a list of downloaded file names.\"}"}
{"api_id": 50, "api_name": "ftplib.FTP", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"ftpDownload\", \"type\": \"function\", \"signature\": \"(server, user, password, directory)\", \"return_type\": \"list\", \"short_description\": \"Downloads files from an FTP server to a specified directory.\"}"}
{"api_id": 50, "api_name": "ftplib.FTP", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"fetchFromFTP\", \"type\": \"function\", \"signature\": \"(server, user, password, directory)\", \"return_type\": \"list\", \"short_description\": \"Fetches a list of files from an FTP server and downloads them to the local machine.\"}"}
{"api_id": 50, "api_name": "ftplib.FTP", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"ftpConnect\", \"type\": \"function\", \"signature\": \"(host, user, password, timeout=None)\", \"return_type\": \"ftplib.FTP\", \"short_description\": \"Establishes a connection to an FTP server and logs in with the provided credentials. Optionally sets a timeout for the connection.\"}"}
{"api_id": 50, "api_name": "ftplib.FTP", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"fetchFromFTP\", \"type\": \"function\", \"signature\": \"(host, user, password, directory, timeout=None)\", \"return_type\": \"list\", \"short_description\": \"Fetches a list of files from an FTP server and downloads them to the local machine.\"}"}
{"api_id": 50, "api_name": "ftplib.FTP", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"fetchFromFTP\", \"type\": \"function\", \"signature\": \"(server, user, password, directory, timeout=None)\", \"return_type\": \"list\", \"short_description\": \"Fetches a list of files from an FTP server and downloads them to a specified directory.\"}"}
{"api_id": 50, "api_name": "ftplib.FTP", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"fetchFromFtp\", \"type\": \"function\", \"signature\": \"(server, user, password, directory, timeout=None)\", \"return_type\": \"list\", \"short_description\": \"Fetches a list of files from an FTP server and downloads them to the local machine.\"}"}
{"api_id": 50, "api_name": "ftplib.FTP", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"fetchFtpDirectory\", \"type\": \"function\", \"signature\": \"(host, user, password, directory, timeout=None)\", \"return_type\": \"list\", \"short_description\": \"Fetches a list of files from an FTP server directory.\"}"}
{"api_id": 50, "api_name": "ftplib.FTP", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"ftpDownloadFiles\", \"type\": \"function\", \"signature\": \"(server, user, password, directory)\", \"return_type\": \"list\", \"short_description\": \"Downloads files from an FTP server to a local directory.\"}"}
{"api_id": 50, "api_name": "ftplib.FTP", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"fetchFtpDirectory\", \"type\": \"function\", \"signature\": \"(server, user, password, directory)\", \"return_type\": \"list\", \"short_description\": \"Fetches a list of files from an FTP server directory.\"}"}
{"api_id": 51, "api_name": "functools.reduce", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculateFactorialSums\", \"type\": \"function\", \"signature\": \"calculateFactorialSums(numbers: list[int]) -> list[int]\", \"return_type\": \"list[int]\", \"short_description\": \"Calculates the sum of factorials for all permutations of a given list of non-negative integers.\"}"}
{"api_id": 51, "api_name": "functools.reduce", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculateFactorialSums\", \"type\": \"function\", \"signature\": \"calculateFactorialSums(numbers: List[int]) -> List[int]\", \"return_type\": \"List[int]\", \"short_description\": \"Calculates the sum of factorials for all permutations of a given list of non-negative integers.\"}"}
{"api_id": 51, "api_name": "functools.reduce", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculateSumOfFactorials\", \"type\": \"function\", \"signature\": \"def calculateSumOfFactorials(numbers: list[int]) -> list[int]\", \"return_type\": \"list[int]\", \"short_description\": \"Calculates the sum of factorials of all permutations of the given list of non-negative integers.\"}"}
{"api_id": 51, "api_name": "functools.reduce", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculateSumOfFactorials\", \"type\": \"function\", \"signature\": \"([int]) -> int\", \"return_type\": \"int\", \"short_description\": \"Calculates the sum of factorials of all elements in the given list of integers.\"}"}
{"api_id": 51, "api_name": "functools.reduce", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculateFactorialSums\", \"type\": \"function\", \"signature\": \"calculateFactorialSums(numbers: list[int]) -> list[int]\", \"return_type\": \"list[int]\", \"short_description\": \"Calculates the sum of factorials for all permutations of a given list of non-negative integers.\"}"}
{"api_id": 51, "api_name": "functools.reduce", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculateFactorialSums\", \"type\": \"function\", \"signature\": \"([int]) -> [int]\", \"return_type\": \"list\", \"short_description\": \"Calculates the sum of factorials for each permutation of the given list of non-negative integers.\"}"}
{"api_id": 51, "api_name": "functools.reduce", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculateFactorialSums\", \"type\": \"function\", \"signature\": \"(numbers: list[int]) -> tuple[list[int], list[tuple[int, ...]]]\", \"return_type\": \"tuple[list[int], list[tuple[int, ...]]]\", \"short_description\": \"Calculates the sum of factorials for all permutations of a list of non-negative integers.\"}"}
{"api_id": 51, "api_name": "functools.reduce", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculateFactorialSums\", \"type\": \"function\", \"signature\": \"def calculateFactorialSums(numbers: list[int]) -> list[int]\", \"return_type\": \"list[int]\", \"short_description\": \"Calculates the sum of factorials for all permutations of the given list of non-negative integers.\"}"}
{"api_id": 51, "api_name": "functools.reduce", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculatePermutationsSums\", \"type\": \"function\", \"signature\": \"def calculatePermutationsSums(numbers: list[int]) -> tuple[list[int], list[tuple[int, ...]]]:\", \"return_type\": \"tuple[list[int], list[tuple[int, ...]]]\", \"short_description\": \"Calculates the sum of factorials for all permutations of a list of non-negative integers and returns the sums and the list of permutations.\"}"}
{"api_id": 51, "api_name": "functools.reduce", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculateSumsOfFactorials\", \"type\": \"function\", \"signature\": \"calculateSumsOfFactorials(numbers: list[int]) -> list[int]\", \"return_type\": \"list[int]\", \"short_description\": \"Calculates the sum of factorials for all permutations of the given list of non-negative integers.\"}"}
{"api_id": 52, "api_name": "gensim.models.Word2Vec", "task_id": "BigCodeBench/657", "solution": "{\n  \"name\": \"createWord2VecModel\",\n  \"type\": \"function\",\n  \"signature\": \"(sentences=None, vector_size=100, alpha=0.025, window=5, min_count=5, max_vocab_size=None, sample=0.001, seed=1, workers=3, min_alpha=0.0001, sg=0, hs=0, negative=5, ns_exponent=0.75, cbow_mean=1, hashfxn=<built-in function hash>, epochs=5, null_word=0, trim_rule=None, sorted_vocab=1, batch_words=10000, compute_loss=False, callbacks=(), comment=None, max_final_vocab=None, shrink_windows=True)\",\n  \"return_type\": \"gensim.models.Word2Vec\",\n  \"short_description\": \"Creates a Word2Vec model using the provided sentences and parameters.\"\n}"}
{"api_id": 52, "api_name": "gensim.models.Word2Vec", "task_id": "BigCodeBench/657", "solution": "{\n  \"name\": \"createWord2VecModel\",\n  \"type\": \"function\",\n  \"signature\": \"(sentences=None, vectorSize=100, alpha=0.025, window=5, minCount=5, maxVocabSize=None, sample=0.001, seed=1, workers=3, minAlpha=0.0001, sg=0, hs=0, negative=5, nsExponent=0.75, cbowMean=1, trimRule=None, sortedVocab=1, batchWords=10000)\",\n  \"return_type\": \"gensim.models.Word2Vec\",\n  \"short_description\": \"Creates a Word2Vec model using the provided sentences and parameters.\"\n}"}
{"api_id": 52, "api_name": "gensim.models.Word2Vec", "task_id": "BigCodeBench/657", "solution": "{\"name\": \"createWord2VecModel\", \"type\": \"function\", \"signature\": \"(sentences=None, vectorSize=100, window=5, minCount=1, workers=4)\", \"return_type\": \"object\", \"short_description\": \"Creates a Word2Vec model with the specified parameters.\"}"}
{"api_id": 52, "api_name": "gensim.models.Word2Vec", "task_id": "BigCodeBench/657", "solution": "{\n  \"name\": \"createWord2VecModel\",\n  \"type\": \"function\",\n  \"signature\": \"(sentences=None, vector_size=100, alpha=0.025, window=5, min_count=1, max_vocab_size=None, sample=0.001, seed=1, workers=4, min_alpha=0.0001, sg=0, hs=0, negative=5, ns_exponent=0.75, cbow_mean=1, hashfxn=<built-in function hash>, epochs=5, null_word=0, trim_rule=None, sorted_vocab=1, batch_words=10000, compute_loss=False, callbacks=(), comment=None, max_final_vocab=None, shrink_windows=True)\",\n  \"return_type\": \"gensim.models.Word2Vec\",\n  \"short_description\": \"Creates a Word2Vec model using the provided sentences. If no sentences are provided, it returns an untrained Word2Vec model.\"\n}"}
{"api_id": 52, "api_name": "gensim.models.Word2Vec", "task_id": "BigCodeBench/657", "solution": "{\"name\": \"createWord2VecModel\", \"type\": \"function\", \"signature\": \"(sentences=None, vectorSize=100, window=5, minCount=1, workers=4)\", \"return_type\": \"Word2Vec\", \"short_description\": \"Creates a Word2Vec model with the specified parameters.\"}"}
{"api_id": 52, "api_name": "gensim.models.Word2Vec", "task_id": "BigCodeBench/657", "solution": "{\"name\": \"createWord2VecModel\", \"type\": \"function\", \"signature\": \"(sentences=None, vectorSize=100, window=5, minCount=1, workers=4)\", \"return_type\": \"gensim.models.Word2Vec\", \"short_description\": \"Creates a Word2Vec model using the provided sentences. If no sentences are provided, it initializes an empty Word2Vec model with the specified parameters.\"}"}
{"api_id": 52, "api_name": "gensim.models.Word2Vec", "task_id": "BigCodeBench/657", "solution": "{\n  \"name\": \"createWord2VecModel\",\n  \"type\": \"function\",\n  \"signature\": \"(sentences=None, vectorSize=100, alpha=0.025, window=5, minCount=5, maxVocabSize=None, sample=0.001, seed=1, workers=3, minAlpha=0.0001, sg=0, hs=0, negative=5, nsExponent=0.75, cbowMean=1, hashFn=None, epochs=5, nullWord=0, trimRule=None, sortedVocab=1, batchWords=10000, computeLoss=False, callbacks=(), comment=None, maxFinalVocab=None, shrinkWindows=True)\",\n  \"return_type\": \"gensim.models.Word2Vec\",\n  \"short_description\": \"Creates and trains a Word2Vec model using the provided sentences.\"\n}"}
{"api_id": 52, "api_name": "gensim.models.Word2Vec", "task_id": "BigCodeBench/657", "solution": "{\"name\": \"createWord2VecModel\", \"type\": \"function\", \"signature\": \"(sentences=None, vectorSize=100, window=5, minCount=1, workers=4)\", \"return_type\": \"gensim.models.Word2Vec\", \"short_description\": \"Creates and trains a Word2Vec model using the provided sentences. Returns the trained model.\"}"}
{"api_id": 52, "api_name": "gensim.models.Word2Vec", "task_id": "BigCodeBench/657", "solution": "{\n  \"name\": \"trainWord2VecModel\",\n  \"type\": \"function\",\n  \"signature\": \"(sentences=None, vector_size=100, window=5, min_count=1, workers=4)\",\n  \"return_type\": \"gensim.models.Word2Vec\",\n  \"short_description\": \"Trains a Word2Vec model using the provided sentences and configuration parameters.\"\n}"}
{"api_id": 52, "api_name": "gensim.models.Word2Vec", "task_id": "BigCodeBench/657", "solution": "{\"name\": \"createWord2VecModel\", \"type\": \"function\", \"signature\": \"(sentences=None, vectorSize=100, window=5, minCount=1, workers=4)\", \"return_type\": \"gensim.models.Word2Vec\", \"short_description\": \"Creates a Word2Vec model using the provided sentences. If no sentences are provided, it returns an untrained model.\"}"}
{"api_id": 53, "api_name": "geopandas.GeoDataFrame", "task_id": "BigCodeBench/187", "solution": "{\n  \"name\": \"generateGeodataframe\",\n  \"type\": \"function\",\n  \"signature\": \"(cityCoordinates={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'])\",\n  \"return_type\": \"geopandas.GeoDataFrame\",\n  \"short_description\": \"Generates a GeoDataFrame containing city names and their coordinates as Point geometries.\"\n}"}
{"api_id": 53, "api_name": "geopandas.GeoDataFrame", "task_id": "BigCodeBench/187", "solution": "{\n  \"name\": \"generateGeodataframe\",\n  \"type\": \"function\",\n  \"signature\": \"(cityData=None, cityList=None)\",\n  \"return_type\": \"GeoDataFrame\",\n  \"short_description\": \"Generates a GeoDataFrame containing city names and their corresponding coordinates as Point geometries.\"\n}"}
{"api_id": 53, "api_name": "geopandas.GeoDataFrame", "task_id": "BigCodeBench/187", "solution": "{\n  \"name\": \"createGeoDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, geometry=None, crs=None)\",\n  \"return_type\": \"geopandas.GeoDataFrame\",\n  \"short_description\": \"Creates a GeoDataFrame object with the specified data, geometry, and coordinate reference system.\"\n}"}
{"api_id": 53, "api_name": "geopandas.GeoDataFrame", "task_id": "BigCodeBench/187", "solution": "{\n  \"name\": \"createGeoDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, geometry=None, crs=None)\",\n  \"return_type\": \"geopandas.GeoDataFrame\",\n  \"short_description\": \"Creates a GeoDataFrame object with specified data and geometry.\"\n}"}
{"api_id": 53, "api_name": "geopandas.GeoDataFrame", "task_id": "BigCodeBench/187", "solution": "{\n  \"name\": \"createGeoDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, geometry=None, crs=None)\",\n  \"return_type\": \"geopandas.GeoDataFrame\",\n  \"short_description\": \"Creates a GeoDataFrame object from the provided data and geometry column, with an optional CRS.\"\n}"}
{"api_id": 53, "api_name": "geopandas.GeoDataFrame", "task_id": "BigCodeBench/187", "solution": "{\"name\": \"generateGeoDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, *args, geometry=None, crs=None, **kwargs)\", \"return_type\": \"geopandas.GeoDataFrame\", \"short_description\": \"Generates a GeoDataFrame object with specified data and geometry.\"}"}
{"api_id": 53, "api_name": "geopandas.GeoDataFrame", "task_id": "BigCodeBench/187", "solution": "{\"name\": \"createGeoDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, geometry=None, crs=None)\", \"return_type\": \"geopandas.GeoDataFrame\", \"short_description\": \"Creates a GeoDataFrame object with the given data and geometry, and optionally sets the coordinate reference system.\"}"}
{"api_id": 53, "api_name": "geopandas.GeoDataFrame", "task_id": "BigCodeBench/187", "solution": "{\n  \"name\": \"createGeodataframe\",\n  \"type\": \"function\",\n  \"signature\": \"(data, geometryColumn, crs='EPSG:4326')\",\n  \"return_type\": \"geopandas.GeoDataFrame\",\n  \"short_description\": \"Creates a GeoDataFrame from provided data and geometry column, with an optional CRS.\"\n}"}
{"api_id": 53, "api_name": "geopandas.GeoDataFrame", "task_id": "BigCodeBench/187", "solution": "{\"name\": \"createGeoDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, geometry=None, crs=None)\", \"return_type\": \"geopandas.GeoDataFrame\", \"short_description\": \"Creates a GeoDataFrame object with optional data, geometry, and CRS.\"}"}
{"api_id": 53, "api_name": "geopandas.GeoDataFrame", "task_id": "BigCodeBench/187", "solution": "{\"name\": \"createGeoDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, geometry=None, crs=None)\", \"return_type\": \"geopandas.GeoDataFrame\", \"short_description\": \"Creates a GeoDataFrame from provided data and geometry, with optional CRS specification.\"}"}
{"api_id": 54, "api_name": "getpass.getpass", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"fetchUserInput\", \"type\": \"function\", \"signature\": \"(prompt='Input: ', stream=None)\", \"return_type\": \"str\", \"short_description\": \"Prompts the user to enter input with an optional prompt message and output stream.\"}"}
{"api_id": 54, "api_name": "getpass.getpass", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"generateRandomPassword\", \"type\": \"function\", \"signature\": \"(length=12)\", \"return_type\": \"str\", \"short_description\": \"Generates a random password of the specified length.\"}"}
{"api_id": 54, "api_name": "getpass.getpass", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"fetchUserCredentials\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the user's email and password for authentication from a secure source.\"}"}
{"api_id": 54, "api_name": "getpass.getpass", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"generatePassword\", \"type\": \"function\", \"signature\": \"(length=12, include_digits=True, include_special=False)\", \"return_type\": \"str\", \"short_description\": \"Generates a random password of specified length with optional inclusion of digits and special characters.\"}"}
{"api_id": 54, "api_name": "getpass.getpass", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"generateRandomPassword\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a random password with a length of 12 characters.\"}"}
{"api_id": 54, "api_name": "getpass.getpass", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"generateUniqueId\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique ID suitable for use as a unique identifier.\"}"}
{"api_id": 54, "api_name": "getpass.getpass", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"generateRandomPassword\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a random password of length 12.\"}"}
{"api_id": 54, "api_name": "getpass.getpass", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"fetchUserInput\", \"type\": \"function\", \"signature\": \"(prompt='Enter text: ', stream=None)\", \"return_type\": \"str\", \"short_description\": \"Prompts the user to input text, with echo turned off. Returns the input as a string.\"}"}
{"api_id": 54, "api_name": "getpass.getpass", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"generateRandomPassword\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a random password of a specified length.\"}"}
{"api_id": 54, "api_name": "getpass.getpass", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"generateEmail\", \"type\": \"function\", \"signature\": \"(senderPassword, recipientPassword)\", \"return_type\": \"EmailMessage\", \"short_description\": \"Generates an EmailMessage object with sender and recipient passwords.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths in the specified directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/19", "solution": "{\n  \"name\": \"list_directories\",\n  \"type\": \"function\",\n  \"signature\": \"(path)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Returns a list of directories from the given path.\"\n}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths within the given directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/19", "solution": "{\n  \"name\": \"list_files_in_directory\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path, include_hidden=False)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Returns a list of file paths within the given directory.\"\n}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths in the specified directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths within the specified directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths within the specified directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/19", "solution": "{\n  \"name\": \"list_files_in_directory\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path, include_hidden=False)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Returns a list of file paths within the specified directory.\"\n}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths within the specified directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Return a list of file paths within the specified directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/123", "solution": "{\"name\": \"find_files\", \"type\": \"function\", \"signature\": \"(directory, pattern, recursive=False)\", \"return_type\": \"list\", \"short_description\": \"Searches for files in a directory that match a given pattern. Returns a list of file paths.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/123", "solution": "{\"name\": \"find_files\", \"type\": \"function\", \"signature\": \"(directory, pattern, recursive=False)\", \"return_type\": \"list\", \"short_description\": \"Searches for files matching a pattern in a directory. Returns a list of file paths.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/123", "solution": "{\"name\": \"list_files\", \"type\": \"function\", \"signature\": \"(directory_path, extension)\", \"return_type\": \"list\", \"short_description\": \"Retrieve a list of files with a specific extension from a given directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/123", "solution": "{\n  \"name\": \"find_files\",\n  \"type\": \"function\",\n  \"signature\": \"(directory, pattern, recursive=False)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Searches for files matching a specific pattern in a given directory, optionally recursively.\"\n}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/123", "solution": "{\"name\": \"find_files\", \"type\": \"function\", \"signature\": \"(directory, pattern, recursive=False)\", \"return_type\": \"list\", \"short_description\": \"Search for files matching a pattern in a directory. Supports recursive search.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/123", "solution": "{\"name\": \"find_files\", \"type\": \"function\", \"signature\": \"(directory, extension)\", \"return_type\": \"list\", \"short_description\": \"Searches for files with a specific extension in a given directory and returns a list of their paths.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/123", "solution": "{\"name\": \"find_files\", \"type\": \"function\", \"signature\": \"(directory, pattern, recursive=False)\", \"return_type\": \"list\", \"short_description\": \"Searches for files matching a specific pattern within a directory, optionally recursively.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/123", "solution": "{\"name\": \"list_files_with_extensions\", \"type\": \"callable\", \"signature\": \"(directory_path, file_extensions)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths matching the provided extensions in the specified directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/123", "solution": "{\"name\": \"find_files\", \"type\": \"function\", \"signature\": \"(pattern, recursive=False)\", \"return_type\": \"list\", \"short_description\": \"Search for files matching a given pattern. Supports recursive search.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/123", "solution": "{\"name\": \"list_files_with_extensions\", \"type\": \"function\", \"signature\": \"(directory, extensions)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths with specified extensions in a given directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"listFilesWithExtension\", \"type\": \"function\", \"signature\": \"(directory_path, extension)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths with a specified extension in a given directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"get_file_paths\", \"type\": \"function\", \"signature\": \"(directory_path, extension)\", \"return_type\": \"list\", \"short_description\": \"Retrieve a list of file paths with a specific extension from a given directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/326", "solution": "{\n  \"name\": \"list_unique_file_extensions\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path)\",\n  \"return_type\": \"Set[str]\",\n  \"short_description\": \"Returns a set of unique file extensions in the specified directory.\"\n}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"find_files\", \"type\": \"function\", \"signature\": \"(directory_path, pattern)\", \"return_type\": \"list\", \"short_description\": \"Searches for files in a directory that match a specific pattern.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"function\", \"signature\": \"(directory_path, file_extension)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths with a specific extension in a given directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path, pattern)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths matching the given pattern within the specified directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"get_file_info\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"dict\", \"short_description\": \"Returns a dictionary containing metadata about the specified file.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"list_image_files\", \"type\": \"function\", \"signature\": \"(directory_path, file_extension)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of image files with the specified extension in the given directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"find_files\", \"type\": \"function\", \"signature\": \"(directory_path, file_extension)\", \"return_type\": \"list\", \"short_description\": \"Searches for files with a specific extension in a given directory and returns their paths.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"list_files_with_extension\", \"type\": \"function\", \"signature\": \"(directory_path, extension)\", \"return_type\": \"list\", \"short_description\": \"Return a list of file paths with a specific extension in a given directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths in the specified directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"list_file_paths\", \"type\": \"function\", \"signature\": \"(pattern, recursive=False)\", \"return_type\": \"list\", \"short_description\": \"Return a list of file paths matching a pattern. Supports recursive search if specified.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"list_directory_files\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of all files in the specified directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths in the specified directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"find_files\", \"type\": \"function\", \"signature\": \"(pattern, path='.')\", \"return_type\": \"list\", \"short_description\": \"Searches for files matching the given pattern in the specified directory and returns a list of file paths.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"find_files\", \"type\": \"function\", \"signature\": \"(pattern, recursive=False)\", \"return_type\": \"list\", \"short_description\": \"Searches for files matching a given pattern in the directory tree.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"find_files\", \"type\": \"function\", \"signature\": \"(pattern, recursive=False)\", \"return_type\": \"list\", \"short_description\": \"Search for files matching the given pattern. Supports recursive search if specified.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"list_files_with_extension\", \"type\": \"function\", \"signature\": \"(directory_path, extension)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths with a specific extension in a given directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"find_files\", \"type\": \"function\", \"signature\": \"(pattern, recursive=False)\", \"return_type\": \"list\", \"short_description\": \"Searches for files matching the given pattern in the current directory and its subdirectories.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"find_files_with_extension\", \"type\": \"function\", \"signature\": \"(directory_path, extension)\", \"return_type\": \"list\", \"short_description\": \"Searches for files with a specific extension in a given directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/454", "solution": "{\n  \"name\": \"list_files_with_extension\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path, extension)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Returns a list of file paths with a specific extension in a given directory.\"\n}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"list_files_with_extension\", \"type\": \"function\", \"signature\": \"(directory_path, extension)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths with a specific extension in a given directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"listFilesWithExtension\", \"type\": \"function\", \"signature\": \"(directory_path, extension)\", \"return_type\": \"list\", \"short_description\": \"Retrieves a list of files with a specific extension from the given directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"listFilesWithExtension\", \"type\": \"function\", \"signature\": \"(directory_path, extension)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths with the specified extension in the given directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/454", "solution": "{\n  \"name\": \"find_files_with_extension\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path, file_extension)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Searches for files with a specific extension in a given directory and returns their paths.\"\n}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"listFilesWithExtension\", \"type\": \"function\", \"signature\": \"(directory_path, extension)\", \"return_type\": \"list\", \"short_description\": \"Retrieve a list of files with a specific extension from a given directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"list_files_with_extension\", \"type\": \"function\", \"signature\": \"(directory_path, extension)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths with a specific extension in a given directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"find_files_by_extension\", \"type\": \"function\", \"signature\": \"(directory_path, extension)\", \"return_type\": \"list\", \"short_description\": \"Searches for files with a specific extension in a given directory and returns a list of their paths.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"listFilesWithExtension\", \"type\": \"function\", \"signature\": \"(directory_path, file_extension)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths with a specific extension in a given directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"listFilesWithExtension\", \"type\": \"function\", \"signature\": \"(directory_path, extension)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths with a specified extension in a given directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"listFilesMatchingPattern\", \"type\": \"function\", \"signature\": \"(pattern)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths that match the given pattern.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"find_files\", \"type\": \"function\", \"signature\": \"(directory, pattern, recursive=False)\", \"return_type\": \"list\", \"short_description\": \"Searches for files in a directory that match a given pattern. If recursive is True, it searches recursively.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"listFilesMatchingPattern\", \"type\": \"function\", \"signature\": \"(pattern)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths that match the given pattern.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"list_matching_files\", \"type\": \"function\", \"signature\": \"(pattern, recursive=False)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths that match the given pattern.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"listFilesMatchingPattern\", \"type\": \"function\", \"signature\": \"(pattern)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths matching the given pattern.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"list_files_matching_pattern\", \"type\": \"function\", \"signature\": \"(pattern, root_dir=None, dir_fd=None, recursive=False)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths that match the given pattern.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/785", "solution": "{\n  \"name\": \"list_files_by_pattern\",\n  \"type\": \"function\",\n  \"signature\": \"(pattern, root_dir=None, dir_fd=None, recursive=False)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Returns a list of file paths matching the given pattern.\"\n}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"listFilesMatchingPattern\", \"type\": \"function\", \"signature\": \"(pattern, *, root_dir=None, dir_fd=None, recursive=False)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of paths matching a given pattern. Supports shell-style wildcards and recursive matching.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"listFilesMatchingPattern\", \"type\": \"function\", \"signature\": \"(pattern, *, root_dir=None, dir_fd=None, recursive=False)\", \"return_type\": \"List[str]\", \"short_description\": \"Returns a list of paths matching a given pattern. Supports shell-style wildcards and recursive directory traversal.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"listFilesMatchingPattern\", \"type\": \"function\", \"signature\": \"(pattern)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths that match the given pattern.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"listFilesWithExtensions\", \"type\": \"function\", \"signature\": \"(directory, extensions)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of files with specified extensions from a given directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"findFilesWithExt\", \"type\": \"function\", \"signature\": \"(directory, extensions)\", \"return_type\": \"list\", \"short_description\": \"Searches for files with specified extensions in a given directory and returns their paths.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"listFilesWithExtensions\", \"type\": \"function\", \"signature\": \"(directory, extensions)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of files with specified extensions in a given directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"listDirectoriesAndFiles\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of all directories and files in a given directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"findFilesWithExtensions\", \"type\": \"function\", \"signature\": \"(root_dir, extensions, *, recursive=False)\", \"return_type\": \"list\", \"short_description\": \"Searches for files with specific extensions within a directory, optionally recursively.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/857", "solution": "{\n  \"name\": \"list_files_with_extensions\",\n  \"type\": \"function\",\n  \"signature\": \"(directory, extensions)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Returns a list of files with specified extensions in a given directory.\"\n}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"findFilesWithExt\", \"type\": \"function\", \"signature\": \"(directory, extensions)\", \"return_type\": \"list\", \"short_description\": \"Searches for files with specified extensions in a given directory and returns a list of their paths.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"findFilesWithExtensions\", \"type\": \"function\", \"signature\": \"(directory, extensions)\", \"return_type\": \"list\", \"short_description\": \"Searches for files with specific extensions within a given directory and returns their paths.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"findFilesWithExtensions\", \"type\": \"function\", \"signature\": \"(directory, extensions)\", \"return_type\": \"List[str]\", \"short_description\": \"Searches for files with specified extensions in a given directory and returns a list of their paths.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/857", "solution": "{\n  \"name\": \"list_files_with_extensions\",\n  \"type\": \"function\",\n  \"signature\": \"(directory, extensions)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Retrieve a list of files with specified extensions from a given directory.\"\n}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"generateZip\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, zipName)\", \"return_type\": \"str\", \"short_description\": \"Generates a zip file containing all files with specified extensions from a given source directory.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path, file_extensions, recursive=False)\", \"return_type\": \"list\", \"short_description\": \"List all files in a directory matching specified extensions, optionally recursively.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path, *, recursive=False)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths within the specified directory, optionally recursively.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/963", "solution": "{\n  \"name\": \"list_files_with_extensions\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path, extensions, recursive=False)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"List all files with specified extensions in a given directory, optionally recursively.\"\n}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path, include_hidden=False, recursive=False)\", \"return_type\": \"list\", \"short_description\": \"Retrieve a list of files from a specified directory. The list includes files only and can include hidden files if specified.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path, include_hidden=False)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of all files in the specified directory. If include_hidden is True, hidden files are also included.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path, pattern, recursive=False)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths that match the given pattern within the specified directory. Supports recursive search if specified.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path, pattern, recursive=False)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths matching the given pattern within the specified directory. The search can be recursive.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path, *, include_hidden=False, recursive=False)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths within the specified directory. Optionally includes hidden files and supports recursive traversal.\"}"}
{"api_id": 55, "api_name": "glob.glob", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"zipFiles\", \"type\": \"function\", \"signature\": \"(source_directory, target_directory, zip_name)\", \"return_type\": \"str\", \"short_description\": \"Zips all files with specified extensions from a given source directory into a target directory under a specified zip file name.\"}"}
{"api_id": 56, "api_name": "hashlib.sha256", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"calculate_md5\", \"type\": \"callable\", \"signature\": \"(data, *, usedforsecurity=True)\", \"return_type\": \"str\", \"short_description\": \"Returns the MD5 hash of the provided data\"}"}
{"api_id": 56, "api_name": "hashlib.sha256", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generate_md5_hash\", \"type\": \"function\", \"signature\": \"(data: bytes) -> str\", \"return_type\": \"MD5 hash of the input data\", \"short_description\": \"Generates an MD5 hash for the given input data\"}"}
{"api_id": 56, "api_name": "hashlib.sha256", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generate_sha256_hash\", \"type\": \"function\", \"signature\": \"(data, *, usedforsecurity=True)\", \"return_type\": \"str\", \"short_description\": \"Generates a SHA-256 hash for the provided data.\"}"}
{"api_id": 56, "api_name": "hashlib.sha256", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"calculate_md5\", \"type\": \"callable\", \"signature\": \"(string=b'', *, usedforsecurity=True)\", \"return_type\": \"str\", \"short_description\": \"Returns an MD5 hash object; optionally initialized with a string\"}"}
{"api_id": 56, "api_name": "hashlib.sha256", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"calculate_md5\", \"type\": \"callable\", \"signature\": \"(data, *, usedforsecurity=True)\", \"return_type\": \"str\", \"short_description\": \"Calculates the MD5 hash of the provided data\"}"}
{"api_id": 56, "api_name": "hashlib.sha256", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"calculate_sha256\", \"type\": \"function\", \"signature\": \"(data, algorithm='sha256')\", \"return_type\": \"str\", \"short_description\": \"Calculates the SHA-256 hash of the provided data.\"}"}
{"api_id": 56, "api_name": "hashlib.sha256", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generate_sha256_hash\", \"type\": \"function\", \"signature\": \"(file_path: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a SHA-256 hash for the given file path.\"}"}
{"api_id": 56, "api_name": "hashlib.sha256", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generate_sha256\", \"type\": \"function\", \"signature\": \"(data, *, algorithm='sha256')\", \"return_type\": \"str\", \"short_description\": \"Generates a SHA-256 hash for the given data.\"}"}
{"api_id": 56, "api_name": "hashlib.sha256", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generateSha256\", \"type\": \"function\", \"signature\": \"(data, *, usedForSecurity=True)\", \"return_type\": \"str\", \"short_description\": \"Generates a SHA-256 hash for the given data.\"}"}
{"api_id": 56, "api_name": "hashlib.sha256", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"calculate_md5\", \"type\": \"callable\", \"signature\": \"(string=b'', *, usedforsecurity=True)\", \"return_type\": \"str\", \"short_description\": \"Returns an MD5 hash object; optionally initialized with a string\"}"}
{"api_id": 57, "api_name": "hashlib.md5", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"calculateMd5\", \"type\": \"function\", \"signature\": \"(data=b'')\", \"return_type\": \"str\", \"short_description\": \"Calculates the MD5 checksum of the provided data\"}"}
{"api_id": 57, "api_name": "hashlib.md5", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"calculateMd5\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"str\", \"short_description\": \"Calculates the MD5 hash of the provided data.\"}"}
{"api_id": 57, "api_name": "hashlib.md5", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"calculateMd5\", \"type\": \"function\", \"signature\": \"(data, algorithm='md5')\", \"return_type\": \"str\", \"short_description\": \"Calculates the MD5 hash of the given data using the specified algorithm.\"}"}
{"api_id": 57, "api_name": "hashlib.md5", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"calculateMd5\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"str\", \"short_description\": \"Calculates the MD5 hash of the given data\"}"}
{"api_id": 57, "api_name": "hashlib.md5", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"calculateMd5\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"str\", \"short_description\": \"Calculates the MD5 hash of the provided data.\"}"}
{"api_id": 57, "api_name": "hashlib.md5", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"calculateMd5\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"str\", \"short_description\": \"Calculates the MD5 hash of the provided data.\"}"}
{"api_id": 57, "api_name": "hashlib.md5", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"calculateMd5Checksum\", \"type\": \"function\", \"signature\": \"(file_path=str, *, usedForSecurity=True)\", \"return_type\": \"str\", \"short_description\": \"Calculates the MD5 checksum of a given file.\"}"}
{"api_id": 57, "api_name": "hashlib.md5", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"generateMd5Checksum\", \"type\": \"function\", \"signature\": \"(data=b'', *, usedforsecurity=True)\", \"return_type\": \"str\", \"short_description\": \"Generates an MD5 checksum from the provided data.\"}"}
{"api_id": 57, "api_name": "hashlib.md5", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"calculateMd5\", \"type\": \"function\", \"signature\": \"(string=b'', *, usedforsecurity=True)\", \"return_type\": \"str\", \"short_description\": \"Calculates the MD5 hash of a given string and returns it as a hexadecimal string.\"}"}
{"api_id": 57, "api_name": "hashlib.md5", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"calculateMd5\", \"type\": \"function\", \"signature\": \"(data=b'')\", \"return_type\": \"str\", \"short_description\": \"Calculates the MD5 checksum of the provided data\"}"}
{"api_id": 58, "api_name": "io.StringIO", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"readHtmlTable\", \"type\": \"function\", \"signature\": \"(html_content, table_id)\", \"return_type\": \"DataFrame\", \"short_description\": \"Extracts the first table with the specified ID from the given HTML content and returns it as a pandas DataFrame.\"}"}
{"api_id": 58, "api_name": "io.StringIO", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"parseHtmlTable\", \"type\": \"function\", \"signature\": \"(html, table_id)\", \"return_type\": \"DataFrame\", \"short_description\": \"Parses an HTML table from a given HTML string and returns it as a pandas DataFrame.\"}"}
{"api_id": 58, "api_name": "io.StringIO", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"extractTableData\", \"type\": \"function\", \"signature\": \"(url, table_id)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Extracts data from an HTML table identified by its ID and returns it as a Pandas DataFrame.\"}"}
{"api_id": 58, "api_name": "io.StringIO", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"fetchAndParseTable\", \"type\": \"function\", \"signature\": \"(url, table_id)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches a webpage and parses the specified HTML table, returning it as a pandas DataFrame.\"}"}
{"api_id": 58, "api_name": "io.StringIO", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"parseHtmlTable\", \"type\": \"function\", \"signature\": \"(html_content, table_id)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Parses an HTML table from a given HTML content based on the specified table ID and returns it as a pandas DataFrame.\"}"}
{"api_id": 58, "api_name": "io.StringIO", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"read_html_table\", \"type\": \"function\", \"signature\": \"(html_content, table_id)\", \"return_type\": \"DataFrame\", \"short_description\": \"Extracts the first table found in the provided HTML content and returns it as a pandas DataFrame. The table is identified by its ID.\"}"}
{"api_id": 58, "api_name": "io.StringIO", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"parseHtmlTable\", \"type\": \"function\", \"signature\": \"(html_content, table_id)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Parses an HTML table from a given HTML content and returns it as a pandas DataFrame. The table is identified by its ID.\"}"}
{"api_id": 58, "api_name": "io.StringIO", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"readTableFromUrl\", \"type\": \"function\", \"signature\": \"(url, table_id)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Extracts the first table from a webpage and returns it as a pandas DataFrame.\"}"}
{"api_id": 58, "api_name": "io.StringIO", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"parseHtmlTable\", \"type\": \"function\", \"signature\": \"(html_content, table_id)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Parses an HTML table from a given HTML content based on the specified table ID and returns it as a pandas DataFrame.\"}"}
{"api_id": 58, "api_name": "io.StringIO", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"extractTableData\", \"type\": \"function\", \"signature\": \"(url, table_id)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Extracts data from an HTML table identified by its ID.\"}"}
{"api_id": 59, "api_name": "ipaddress.IPv4Network", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"parseIpv4Range\", \"type\": \"function\", \"signature\": \"(ipv4RangeStr)\", \"return_type\": \"list\", \"short_description\": \"Parses a string representing an IPv4 network range and returns a list of IPv4Network objects.\"}"}
{"api_id": 59, "api_name": "ipaddress.IPv4Network", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"generateIpv4Addresses\", \"type\": \"function\", \"signature\": \"(networkString)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of IPv4 addresses from a network string representation.\"}"}
{"api_id": 59, "api_name": "ipaddress.IPv4Network", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"getNetworkDetails\", \"type\": \"function\", \"signature\": \"(networkAddress)\", \"return_type\": \"dict\", \"short_description\": \"Returns detailed information about an IPv4 network including network address, netmask, broadcast address, and hostmask.\"}"}
{"api_id": 59, "api_name": "ipaddress.IPv4Network", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"getNetworkHostAddresses\", \"type\": \"function\", \"signature\": \"(network)\", \"return_type\": \"list\", \"short_description\": \"Retrieves a list of all host addresses within a given IPv4 network.\"}"}
{"api_id": 59, "api_name": "ipaddress.IPv4Network", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"generateIpv4Network\", \"type\": \"function\", \"signature\": \"(address, strict=True)\", \"return_type\": \"IPv4Network\", \"short_description\": \"This function generates an IPv4Network object representing a 32-bit IPv4 network address.\"}"}
{"api_id": 59, "api_name": "ipaddress.IPv4Network", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"resolveNetworkAddresses\", \"type\": \"function\", \"signature\": \"(network, timeout=1)\", \"return_type\": \"dict\", \"short_description\": \"Resolves the host addresses within a given IPv4 network, checking for open ports if specified.\"}"}
{"api_id": 59, "api_name": "ipaddress.IPv4Network", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"parseIpRange\", \"type\": \"function\", \"signature\": \"(ipRangeString)\", \"return_type\": \"list\", \"short_description\": \"Parses a string representing an IP range and returns a list of IP addresses within that range.\"}"}
{"api_id": 59, "api_name": "ipaddress.IPv4Network", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"parseIpv4Range\", \"type\": \"function\", \"signature\": \"(ipv4RangeString)\", \"return_type\": \"list\", \"short_description\": \"Parses a string representing an IPv4 range and returns a list of IPv4Network objects.\"}"}
{"api_id": 59, "api_name": "ipaddress.IPv4Network", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"parseIpv4Range\", \"type\": \"function\", \"signature\": \"(ipv4RangeString)\", \"return_type\": \"list\", \"short_description\": \"Parses a string representing an IPv4 network range and returns a list of IPv4Network objects.\"}"}
{"api_id": 59, "api_name": "ipaddress.IPv4Network", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"resolveNetworkAddresses\", \"type\": \"function\", \"signature\": \"(networkStr, port)\", \"return_type\": \"dict\", \"short_description\": \"Resolves the IP addresses within a given network and checks if they are reachable on a specified port.\"}"}
{"api_id": 60, "api_name": "itertools.permutations", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculate_factorial_permutations\", \"type\": \"function\", \"signature\": \"(numbers: list[int])\", \"return_type\": \"tuple[list[int], list[tuple[int, ...]]]\", \"short_description\": \"Calculates the sum of factorials for each permutation of the given list of non-negative integers and returns both the sums and all permutations.\"}"}
{"api_id": 60, "api_name": "itertools.permutations", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculate_factorial_permutations\", \"type\": \"function\", \"signature\": \"(numbers: list[int])\", \"return_type\": \"tuple[list[int], list[tuple[int, ...]]]\", \"short_description\": \"Calculates the factorial sum of each permutation of the given list of non-negative integers and returns the sums along with all permutations.\"}"}
{"api_id": 60, "api_name": "itertools.permutations", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculateFactorials\", \"type\": \"function\", \"signature\": \"(numbers: list[int])\", \"return_type\": \"list[int]\", \"short_description\": \"Calculates the factorial of each number in the list and returns the list of these factorials.\"}"}
{"api_id": 60, "api_name": "itertools.permutations", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculate_factorial_sums\", \"type\": \"function\", \"signature\": \"(numbers)\", \"return_type\": \"list\", \"short_description\": \"Calculates the sum of factorials of each permutation of the given list of non-negative integers.\"}"}
{"api_id": 60, "api_name": "itertools.permutations", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculateFactorials\", \"type\": \"function\", \"signature\": \"(numbers: list[int])\", \"return_type\": \"list[int]\", \"short_description\": \"Calculates the factorial of each number in the list and returns the list of these factorials.\"}"}
{"api_id": 60, "api_name": "itertools.permutations", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculateFactorials\", \"type\": \"function\", \"signature\": \"(numbers)\", \"return_type\": \"list\", \"short_description\": \"Calculate the factorial of each number in the list and return the results as a list.\"}"}
{"api_id": 60, "api_name": "itertools.permutations", "task_id": "BigCodeBench/854", "solution": "{\n  \"name\": \"calculate_factorial_sums\",\n  \"type\": \"function\",\n  \"signature\": \"(numbers)\",\n  \"return_type\": \"tuple[list[int], list[tuple[int, ...]]]\",\n  \"short_description\": \"Calculates the sum of factorials for all permutations of a list of non-negative integers.\"\n}"}
{"api_id": 60, "api_name": "itertools.permutations", "task_id": "BigCodeBench/854", "solution": "{\n  \"name\": \"calculate_factorial_sums\",\n  \"type\": \"function\",\n  \"signature\": \"(numbers: list[int])\",\n  \"return_type\": \"list[int]\",\n  \"short_description\": \"Calculates the sum of factorials for each permutation of the input list of integers.\"\n}"}
{"api_id": 60, "api_name": "itertools.permutations", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculateFactorialSums\", \"type\": \"function\", \"signature\": \"(numbers: list[int])\", \"return_type\": \"list[int], list[tuple[int, ...]]\", \"short_description\": \"Calculates the sum of factorials for all permutations of a given list of non-negative integers. Returns a list of sums and a list of permutations.\"}"}
{"api_id": 60, "api_name": "itertools.permutations", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculate_factorial_sums\", \"type\": \"function\", \"signature\": \"(numbers: list[int])\", \"return_type\": \"tuple[list[int], list[tuple[int, ...]]]\", \"short_description\": \"Calculates the sum of factorials for each permutation of the given list of non-negative integers.\"}"}
{"api_id": 60, "api_name": "itertools.permutations", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"generate_combinations\", \"type\": \"function\", \"signature\": \"(iterable, r)\", \"return_type\": \"list\", \"short_description\": \"Generate all r-length combinations of elements in the iterable.\"}"}
{"api_id": 60, "api_name": "itertools.permutations", "task_id": "BigCodeBench/928", "solution": "{\n  \"name\": \"generate_combinations\",\n  \"type\": \"function\",\n  \"signature\": \"(iterable, r)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Generate all possible combinations of a given length r from the elements in the iterable.\"\n}"}
{"api_id": 60, "api_name": "itertools.permutations", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"generate_combinations\", \"type\": \"function\", \"signature\": \"(iterable, r)\", \"return_type\": \"list\", \"short_description\": \"Generate all possible combinations of a given length r from the iterable.\"}"}
{"api_id": 60, "api_name": "itertools.permutations", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"generate_combinations\", \"type\": \"function\", \"signature\": \"(iterable, r)\", \"return_type\": \"list\", \"short_description\": \"Generates all possible r-length combinations of elements in the iterable.\"}"}
{"api_id": 60, "api_name": "itertools.permutations", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"generate_combinations\", \"type\": \"function\", \"signature\": \"(iterable, r)\", \"return_type\": \"list\", \"short_description\": \"Generates all possible r-length combinations of elements in the iterable.\"}"}
{"api_id": 60, "api_name": "itertools.permutations", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"generate_combinations\", \"type\": \"function\", \"signature\": \"(iterable, length)\", \"return_type\": \"list\", \"short_description\": \"Generates all possible combinations of a specified length from the given iterable.\"}"}
{"api_id": 60, "api_name": "itertools.permutations", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"generate_combinations\", \"type\": \"function\", \"signature\": \"(iterable, r)\", \"return_type\": \"list\", \"short_description\": \"Generate all possible r-length combinations of elements in the iterable.\"}"}
{"api_id": 60, "api_name": "itertools.permutations", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"generate_combinations\", \"type\": \"function\", \"signature\": \"(iterable, r)\", \"return_type\": \"list\", \"short_description\": \"Generates all r-length combinations of elements in the iterable.\"}"}
{"api_id": 60, "api_name": "itertools.permutations", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"generate_combinations\", \"type\": \"function\", \"signature\": \"(iterable, r)\", \"return_type\": \"list\", \"short_description\": \"Generate all r-length combinations of elements in the iterable.\"}"}
{"api_id": 60, "api_name": "itertools.permutations", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"generate_anagrams\", \"type\": \"function\", \"signature\": \"(word: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Generate a dictionary of anagram counts for a given word.\"}"}
{"api_id": 61, "api_name": "itertools.zip_longest", "task_id": "BigCodeBench/870", "solution": "{\"name\": \"calculate_mean_values\", \"type\": \"function\", \"signature\": \"calculate_mean_values(data_list=[('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4), ('e', 5, 6.5)])\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculate the mean of numerical values in a list of tuples, filling non-numeric values with NaN.\"}"}
{"api_id": 61, "api_name": "itertools.zip_longest", "task_id": "BigCodeBench/870", "solution": "{\"name\": \"calculate_mean_values\", \"type\": \"function\", \"signature\": \"calculate_mean_values(data_list=[])\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates the mean of numerical values from each column in a list of tuples, filling non-numeric values with NaN.\"}"}
{"api_id": 61, "api_name": "itertools.zip_longest", "task_id": "BigCodeBench/870", "solution": "{\"name\": \"calculate_mean_of_numerical_values\", \"type\": \"function\", \"signature\": \"calculate_mean_of_numerical_values(data_list)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates the mean of numerical values in a list of tuples, filling non-numeric values with NaN.\"}"}
{"api_id": 61, "api_name": "itertools.zip_longest", "task_id": "BigCodeBench/870", "solution": "{\"name\": \"calculate_mean_with_fill\", \"type\": \"function\", \"signature\": \"([iterable, fillvalue])\", \"return_type\": \"list\", \"short_description\": \"Calculates the mean of numerical values in each column of the provided iterable, filling non-numeric values with the specified fillvalue.\"}"}
{"api_id": 61, "api_name": "itertools.zip_longest", "task_id": "BigCodeBench/870", "solution": "{\"name\": \"calculate_mean_by_position\", \"type\": \"function\", \"signature\": \"calculate_mean_by_position(data_list=[])\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates the mean of numerical values for each position in the provided data list, filling non-numeric values with NaN.\"}"}
{"api_id": 61, "api_name": "itertools.zip_longest", "task_id": "BigCodeBench/870", "solution": "{\"name\": \"zip_longest\", \"type\": \"function\", \"signature\": \"zip_longest(iterables, fillvalue=None)\", \"return_type\": \"zip_longest object\", \"short_description\": \"Combines multiple iterables into a single iterable of tuples, filling in fillvalue for missing values when the iterables are of unequal lengths.\"}"}
{"api_id": 61, "api_name": "itertools.zip_longest", "task_id": "BigCodeBench/870", "solution": "{\"name\": \"itertools_zip_longest\", \"type\": \"function\", \"signature\": \"itertools.zip_longest(*iterables, fillvalue=None)\", \"return_type\": \"zip_longest\", \"short_description\": \"Combines multiple iterables into a single iterable of tuples, filling in missing values with the specified fillvalue.\"}"}
{"api_id": 61, "api_name": "itertools.zip_longest", "task_id": "BigCodeBench/870", "solution": "{\"name\": \"calculate_mean_with_fill\", \"type\": \"function\", \"signature\": \"([iterable], [fillvalue=None])\", \"return_type\": \"list\", \"short_description\": \"Calculates the mean of numerical values in each column of the provided iterables, filling missing values with the specified fillvalue.\"}"}
{"api_id": 61, "api_name": "itertools.zip_longest", "task_id": "BigCodeBench/870", "solution": "{\"name\": \"calculate_mean_values\", \"type\": \"function\", \"signature\": \"calculate_mean_values(data_list=[])\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates the mean of numerical values from each column of a list of tuples, filling non-numeric values with NaN.\"}"}
{"api_id": 61, "api_name": "itertools.zip_longest", "task_id": "BigCodeBench/870", "solution": "{\"name\": \"calculate_mean_with_fill\", \"type\": \"function\", \"signature\": \"calculate_mean_with_fill(data_list, fillvalue=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates the mean of numerical values in a list of tuples, filling non-numeric values with a specified fillvalue.\"}"}
{"api_id": 62, "api_name": "itertools.product", "task_id": "BigCodeBench/1057", "solution": "{\"name\": \"generate_combinations\", \"type\": \"function\", \"signature\": \"generate_combinations(iterables, repeat=1)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of all possible combinations of the input iterables.\"}"}
{"api_id": 62, "api_name": "itertools.product", "task_id": "BigCodeBench/1057", "solution": "{\"name\": \"generate_combinations\", \"type\": \"function\", \"signature\": \"def generate_combinations(iterables, repeat=1)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of all possible combinations of the input iterables.\"}"}
{"api_id": 62, "api_name": "itertools.product", "task_id": "BigCodeBench/1057", "solution": "{\"name\": \"generate_animal_food_combinations\", \"type\": \"function\", \"signature\": \"def generate_animal_food_combinations(animals=None, foods=None):\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame of animal-food combinations.\"}"}
{"api_id": 62, "api_name": "itertools.product", "task_id": "BigCodeBench/1057", "solution": "{\"name\": \"generate_combinations\", \"type\": \"function\", \"signature\": \"(iterables, repeat=1)\", \"return_type\": \"itertools.product\", \"short_description\": \"Generates the Cartesian product of input iterables, similar to itertools.product.\"}"}
{"api_id": 62, "api_name": "itertools.product", "task_id": "BigCodeBench/1057", "solution": "{\"name\": \"generate_combinations\", \"type\": \"function\", \"signature\": \"def generate_combinations(iterables, repeat=1):\", \"return_type\": \"itertools.product\", \"short_description\": \"Generates the Cartesian product of input iterables, similar to itertools.product.\"}"}
{"api_id": 62, "api_name": "itertools.product", "task_id": "BigCodeBench/1057", "solution": "{\"name\": \"generate_animal_food_combinations\", \"type\": \"function\", \"signature\": \"def generate_animal_food_combinations(animals=None, foods=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame of animal-food combinations.\"}"}
{"api_id": 62, "api_name": "itertools.product", "task_id": "BigCodeBench/1057", "solution": "{\"name\": \"generate_combinations\", \"type\": \"function\", \"signature\": \"generate_combinations(iterables, repeat=1)\", \"return_type\": \"list\", \"short_description\": \"Generates all possible combinations of elements from the given iterables. If repeat is specified, repeats the elements of the iterables.\"}"}
{"api_id": 62, "api_name": "itertools.product", "task_id": "BigCodeBench/1057", "solution": "{\"name\": \"generate_combinations\", \"type\": \"function\", \"signature\": \"def generate_combinations(iterables, repeat=1)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of all possible combinations of the input iterables. The number of combinations is equal to the product of the lengths of the input iterables, repeated according to the repeat parameter.\"}"}
{"api_id": 62, "api_name": "itertools.product", "task_id": "BigCodeBench/1057", "solution": "{\"name\": \"generate_combinations\", \"type\": \"function\", \"signature\": \"(iterables, repeat=1)\", \"return_type\": \"iterable\", \"short_description\": \"Generates the Cartesian product of input iterables, similar to itertools.product, but without hierarchical structure.\"}"}
{"api_id": 62, "api_name": "itertools.product", "task_id": "BigCodeBench/1057", "solution": "{\"name\": \"generate_combinations\", \"type\": \"function\", \"signature\": \"generate_combinations(iterables, repeat=1)\", \"return_type\": \"iterable\", \"short_description\": \"Generates the Cartesian product of input iterables, similar to itertools.product, but with a different name and functionality.\"}"}
{"api_id": 63, "api_name": "json.dumps", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"encodeJson\", \"type\": \"function\", \"signature\": \"(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False)\", \"return_type\": \"str\", \"short_description\": \"Serializes the given Python object to a JSON formatted string.\"}"}
{"api_id": 63, "api_name": "json.dumps", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"convertToPrettyJSON\", \"type\": \"function\", \"signature\": \"(obj, *, indent=4, separators=(', ', ': '))\", \"return_type\": \"str\", \"short_description\": \"Converts an object to a pretty-printed JSON string with default settings for indentation and separators.\"}"}
{"api_id": 63, "api_name": "json.dumps", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"convertToJson\", \"type\": \"function\", \"signature\": \"(data, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False)\", \"return_type\": \"str\", \"short_description\": \"Converts the provided Python object into a JSON formatted string. This function allows for customization of the JSON serialization process through various parameters.\"}"}
{"api_id": 63, "api_name": "json.dumps", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(json_str)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON formatted string into a Python dictionary.\"}"}
{"api_id": 63, "api_name": "json.dumps", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonStr: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON formatted string into a dictionary.\"}"}
{"api_id": 63, "api_name": "json.dumps", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"formatJson\", \"type\": \"function\", \"signature\": \"(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)\", \"return_type\": \"str\", \"short_description\": \"Formats the provided Python object into a JSON formatted string.\"}"}
{"api_id": 63, "api_name": "json.dumps", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"encodeJson\", \"type\": \"function\", \"signature\": \"(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False)\", \"return_type\": \"str\", \"short_description\": \"Serializes the given Python object to a JSON formatted string. This function allows for various options to customize the serialization process.\"}"}
{"api_id": 63, "api_name": "json.dumps", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, strict=True)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary. If strict is true, raises an exception for invalid JSON.\"}"}
{"api_id": 63, "api_name": "json.dumps", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"serializeJson\", \"type\": \"function\", \"signature\": \"(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)\", \"return_type\": \"str\", \"short_description\": \"Serializes the given Python object to a JSON formatted string. This function ensures that non-basic types are handled according to the specified parameters.\"}"}
{"api_id": 63, "api_name": "json.dumps", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"serializeToJson\", \"type\": \"function\", \"signature\": \"(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)\", \"return_type\": \"str\", \"short_description\": \"Serializes the given Python object to a JSON formatted string.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseJsonString\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseInt=None, parseConstant=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseInt=None, parseConstant=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary. Offers optional hooks for customizing object and pair handling, and for parsing specific JSON number formats.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonStr, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseInt=None, parseConstant=None)\", \"return_type\": \"object\", \"short_description\": \"Parses a JSON string into a Python object with optional hooks for object and pair handling, as well as custom parsing for floats and constants.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseInt=None, parseConstant=None)\", \"return_type\": \"object\", \"short_description\": \"Parses a JSON string into a Python object using custom hooks for objects and pairs.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary using the built-in json module. The `objectHook` parameter allows for custom object creation during parsing.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None, parseFloatHook=None, parseIntHook=None, parseConstantHook=None)\", \"return_type\": \"object\", \"short_description\": \"Parses a JSON string into a Python object with optional hooks for customization.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None, parseFloatHook=None, parseIntHook=None, parseConstantHook=None)\", \"return_type\": \"object\", \"short_description\": \"Parses a JSON string into a Python object using custom hooks for various functionalities.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, object_hook=None, object_pairs_hook=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary. Optionally applies object_hook and object_pairs_hook for custom processing.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonStr, *, objectHook=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary using the given object hook.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary using the given object hook function if provided.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonStr, *, objectHook=None, objectPairsHook=None, parseFloatHook=None, parseIntHook=None, parseConstantHook=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary, allowing for optional hooks to customize the parsing process.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None, parseFloatHook=None, parseIntHook=None, parseConstantHook=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary with optional hooks for custom object handling, float parsing, integer parsing, and constant parsing.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseInt=None, parseConstant=None)\", \"return_type\": \"object\", \"short_description\": \"Parses a JSON string into a Python object with optional hooks for custom object and pairs handling, as well as custom parsing for floats and integers.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonStr, *, objectHook=None, parseFloat=None, parseInt=None, parseConstant=None)\", \"return_type\": \"object\", \"short_description\": \"Parses a JSON string into a Python object. Provides hooks for customizing JSON parsing behavior.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonStr, *, objectHook=None, objectPairsHook=None, parseFloatHook=None, parseFloatInt=None, parseConstantHook=None)\", \"return_type\": \"object\", \"short_description\": \"Parses a JSON string into a Python object with optional hooks for customization.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None)\", \"return_type\": \"object\", \"short_description\": \"Parses a JSON string into a Python object.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None, parseFloatHook=None, parseIntHook=None, parseConstantHook=None)\", \"return_type\": \"object\", \"short_description\": \"Deserializes a JSON string to a Python object using custom hooks for object literals, pairs, floats, integers, and constants.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonStr, *, objectHook=None, objectPairsHook=None, parseFloatHook=None, parseFloatInt=None, parseConstantHook=None)\", \"return_type\": \"object\", \"short_description\": \"Parses a JSON string into a Python object, allowing for custom hooks for object literals, ordered pairs, float parsing, and parsing constants.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parseJsonString\", \"type\": \"function\", \"signature\": \"(jsonString, *, object_hook=None, object_pairs_hook=None, parse_float=None, parse_int=None, parse_constant=None)\", \"return_type\": \"object\", \"short_description\": \"Parses a JSON string into a Python object using the provided hooks for customization.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonStr, *, objectHook=None, objectPairsHook=None, parseFloatHook=None, parseIntHook=None, parseConstantHook=None)\", \"return_type\": \"object\", \"short_description\": \"Parses a JSON string into a Python object with optional hooks for custom decoding.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonStr, *, cls=None, objectHook=None, parseFloat=None, parseInt=None, parseConstant=None, objectPairsHook=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary. Customizable parsing options include object hook, parse float, parse int, and parse constant.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"parseJsonToDataFrame\", \"type\": \"function\", \"signature\": \"(jsonString, *, cls=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Parses a JSON string into a Pandas DataFrame. This function handles basic JSON parsing and conversion to a DataFrame, suitable for converting JSON arrays of objects into a tabular format.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonStr, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseInt=None, parseConstant=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a dictionary. Offers optional hooks for custom object and pairs handling, as well as custom parsing for floats and integers.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, cls=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonStr, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseInt=None, parseConstant=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary with optional hooks for customizing object handling and number parsing.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"parseJsonToDict\", \"type\": \"function\", \"signature\": \"(jsonStr, *, cls=None, objectHook=None, parseFloat=None, parseInt=None, parseConstant=None, objectPairsHook=None, **kw)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a dictionary. Provides hooks for customizing JSON parsing behavior.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonStr, *, cls=None, objectHook=None, parseFloat=None, parseInt=None, parseConstant=None, objectPairsHook=None, **kw)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary. Provides hooks for customizing JSON parsing behavior.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonStr, *, cls=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary. Optionally uses a custom JSON decoder class if specified.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/458", "solution": "{\n  \"name\": \"parseJsonString\",\n  \"type\": \"function\",\n  \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseInt=None, parseConstant=None)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Parses a JSON string into a Python dictionary. Provides hooks for custom object and pairs handling, float and int parsing, and handling of special JSON constants.\"\n}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/458", "solution": "{\n  \"name\": \"parseJson\",\n  \"type\": \"function\",\n  \"signature\": \"(jsonStr, *, cls=None, objectHook=None, parseFloat=None, parseInt=None, parseConstant=None, objectPairsHook=None, **kw)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Parses a JSON string into a Python dictionary. Allows customization of object_hook and object_pairs_hook for custom decoders.\"\n}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseInt=None, parseConstant=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary, allowing for optional hooks to customize object handling and number parsing.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"parseJsonData\", \"type\": \"function\", \"signature\": \"(jsonStr, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseFloat=None, parseConstant=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary. Provides hooks for custom object and pair handling, as well as custom parsing for floats and constants.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/985", "solution": "{\n  \"name\": \"parseJsonData\",\n  \"type\": \"function\",\n  \"signature\": \"(data, *, object_hook=None, object_pairs_hook=None, parse_float=None, parse_int=None, parse_constant=None)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Parses JSON data into a Python dictionary, allowing customization of parsing behaviors through optional parameters.\"\n}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, pairsHook=None, floatParser=None, intParser=None, constantParser=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary, allowing for custom object and pairs hooks, as well as custom float and integer parsers.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseInt=None, parseConstant=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary. Provides hooks for customizing object and pair handling, as well as custom parsing for floats and integers.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseInt=None, parseConstant=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary using custom hooks for object literals and pairs.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary. This function is a more general purpose JSON parsing utility.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"parseJsonData\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseInt=None, parseConstant=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary using optional hooks for custom object and pair handling, and custom parsing for floats and ints.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseInt=None, parseConstant=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary. Provides hooks for customizing object handling and number parsing.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"parseJsonContent\", \"type\": \"function\", \"signature\": \"(content, encoding=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses JSON content from a string, handling encoding if provided.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseInt=None, parseConstant=None)\", \"return_type\": \"object\", \"short_description\": \"Parses a JSON string into a Python object. Offers flexibility through optional hooks for object and pair handling, as well as custom parsers for floats and integers.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None, parseFloatHook=None, parseFloatInt=None, parseConstantHook=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseInt=None, parseConstant=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary. Offers optional hooks for customizing object and pair handling, as well as custom parsing for floats and integers.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonStr, *, objectHook=None)\", \"return_type\": \"object\", \"short_description\": \"Parses a JSON string and allows for an optional object hook function to be applied.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonStr, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseFloat=None, parseConstant=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary. Offers optional hooks for customizing object and pair handling, as well as custom parsers for floats and constants.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseInt=None, parseConstant=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary. Offers optional hooks for object and pair manipulation.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseInt=None, parseConstant=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary. Provides hooks for customizing object handling, float parsing, integer parsing, and handling of special JSON constants.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonStr, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseInt=None, parseConstant=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary. Offers hooks for customizing object and pair handling, as well as custom parsing for floats and integers.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"parseJsonContent\", \"type\": \"function\", \"signature\": \"(content, *, encoding='utf8')\", \"return_type\": \"dict\", \"short_description\": \"Parses JSON content from a string with an optional encoding parameter to ensure proper JSON parsing.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonStr, *, objectHook=None, objectPairsHook=None, parseFloatHook=None, parseFloatInt=None, parseConstantHook=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary. Offers hooks for customizing object and pair handling, as well as custom parsing for floats and constants.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"parseJsonData\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseInt=None, parseConstant=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary with optional hooks for object and pairs handling, and custom parsers for floats and integers.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseFloat=None, parseConstant=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary. Customizable with optional hooks for object literals and pairs, and parsers for float and constant values.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseInt=None, parseConstant=None)\", \"return_type\": \"object\", \"short_description\": \"Parses a JSON string into a Python object using various hooks for customization.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, pairsHook=None, floatParser=None, intParser=None, constantParser=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary, allowing customization of object hooks, pairs hooks, float parsing, int parsing, and constant parsing.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseFloat=None, parseConstant=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary. Allows customizing object and pairs hook functions, as well as custom float and constant parsers.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, pairsHook=None, floatParser=None, intParser=None, constantParser=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary. Provides hooks for customizing object and pairs handling, float, int, and constant parsing.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None, parseFloat=None, parseInt=None, parseConstant=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary using a customizable approach for handling JSON objects and numbers.\"}"}
{"api_id": 64, "api_name": "json.loads", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonStr, *, objectHook=None, objectPairsHook=None, parseFloatHook=None, parseFloatInt=None, parseConstantHook=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary. Custom hooks can be provided for object literals, ordered pairs, float parsing, and constant parsing.\"}"}
{"api_id": 65, "api_name": "json.dump", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"jsonSerialize\", \"type\": \"function\", \"signature\": \"(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False)\", \"return_type\": \"None\", \"short_description\": \"Serializes the given object to a JSON formatted stream to the specified file-like object.\"}"}
{"api_id": 65, "api_name": "json.dump", "task_id": "BigCodeBench/287", "solution": "{\n  \"name\": \"serialize_to_json\",\n  \"type\": \"function\",\n  \"signature\": \"(data, file_path, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Serializes the given Python object to a JSON formatted stream written to the specified file path.\"\n}"}
{"api_id": 65, "api_name": "json.dump", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"json_serialize\", \"type\": \"function\", \"signature\": \"(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False)\", \"return_type\": \"None\", \"short_description\": \"Serializes the given Python object as JSON formatted data to the specified file-like object.\"}"}
{"api_id": 65, "api_name": "json.dump", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"serializeObjToJson\", \"type\": \"callable\", \"signature\": \"(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False)\", \"return_type\": \"None\", \"short_description\": \"Serializes the given Python object `obj` into a JSON formatted stream to the file pointed by `fp` (a `.write()`-supporting file-like object). This function is a direct analog of the `json.dump` function but without the ability to handle keyword arguments related to the JSON structure (like `skipkeys`, `ensure_ascii`, etc.), focusing solely on the serialization process.\"}"}
{"api_id": 65, "api_name": "json.dump", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"generateWordCloud\", \"type\": \"function\", \"signature\": \"(text, fontPath=None, width=400, height=200, margin=2, font_step=1, mode='RGBA', relative_scaling='auto', colors=None, prefer_horizontal=0.9, mask=None, scale=1, color_func=None, random_state=None, background_color='black', mode='RGBA', **kwargs)\", \"return_type\": \"PIL.Image.Image\", \"short_description\": \"Generates a word cloud image from the given text. The word cloud image can be customized with various parameters to suit the design requirements.\"}"}
{"api_id": 65, "api_name": "json.dump", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"serializeJson\", \"type\": \"function\", \"signature\": \"(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False)\", \"return_type\": \"None\", \"short_description\": \"Serializes an object into a JSON formatted stream to a file-like object.\"}"}
{"api_id": 65, "api_name": "json.dump", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"writeJson\", \"type\": \"function\", \"signature\": \"(data, filePath, *, indent=None)\", \"return_type\": \"None\", \"short_description\": \"Writes the provided data as a JSON formatted stream to the specified file path. The data is expected to be a dictionary.\"}"}
{"api_id": 65, "api_name": "json.dump", "task_id": "BigCodeBench/287", "solution": "{\n  \"name\": \"serializeObject\",\n  \"type\": \"function\",\n  \"signature\": \"(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Serializes the given Python object into a JSON formatted stream to the specified file-like object.\"\n}"}
{"api_id": 65, "api_name": "json.dump", "task_id": "BigCodeBench/287", "solution": "{\n  \"name\": \"writeJsonToFile\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, filePath, indent=None)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Serializes the provided data (typically a dictionary) into a JSON formatted stream and writes it to the specified file path. This function provides an option for pretty-printing with indentation.\"\n}"}
{"api_id": 65, "api_name": "json.dump", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"(data, format)\", \"return_type\": \"str\", \"short_description\": \"Generates a report in the specified format from the given data.\"}"}
{"api_id": 65, "api_name": "json.dump", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"extractPhoneNumbers\", \"type\": \"function\", \"signature\": \"(text: str) -> list\", \"return_type\": \"list\", \"short_description\": \"Extracts all phone numbers from the given text.\"}"}
{"api_id": 65, "api_name": "json.dump", "task_id": "BigCodeBench/1137", "solution": "{\n  \"name\": \"extractPhoneNumbers\",\n  \"type\": \"function\",\n  \"signature\": \"(text: str) -> list\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Extracts all phone numbers from the provided text.\"\n}"}
{"api_id": 65, "api_name": "json.dump", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"extractPhoneNumbers\", \"type\": \"function\", \"signature\": \"(text: str) -> list\", \"return_type\": \"list\", \"short_description\": \"Extracts phone numbers from a given text string using regular expressions.\"}"}
{"api_id": 65, "api_name": "json.dump", "task_id": "BigCodeBench/1137", "solution": "{\n  \"name\": \"extractPhoneNumbers\",\n  \"type\": \"function\",\n  \"signature\": \"(text: str) -> list\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Extracts phone numbers from a given text string using regular expressions.\"\n}"}
{"api_id": 65, "api_name": "json.dump", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"extractPhoneNumbers\", \"type\": \"function\", \"signature\": \"(text: str) -> list\", \"return_type\": \"list\", \"short_description\": \"Extracts all phone numbers from the provided text.\"}"}
{"api_id": 65, "api_name": "json.dump", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"extractPhoneNumbers\", \"type\": \"function\", \"signature\": \"(text: str) -> list\", \"return_type\": \"list\", \"short_description\": \"Extracts phone numbers from a given text string.\"}"}
{"api_id": 65, "api_name": "json.dump", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"extractPhoneNumbers\", \"type\": \"function\", \"signature\": \"(text: str) -> list\", \"return_type\": \"list\", \"short_description\": \"Extracts phone numbers from a given text string.\"}"}
{"api_id": 65, "api_name": "json.dump", "task_id": "BigCodeBench/1137", "solution": "{\n  \"name\": \"extractPhoneNumbers\",\n  \"type\": \"function\",\n  \"signature\": \"(text: str) -> list\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Extracts all phone numbers from the provided text.\"\n}"}
{"api_id": 65, "api_name": "json.dump", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"parsePhoneNumbers\", \"type\": \"function\", \"signature\": \"(text: str) -> list\", \"return_type\": \"list\", \"short_description\": \"Parses a given string to extract phone numbers. This function uses regular expressions to find all phone numbers in the input text.\"}"}
{"api_id": 65, "api_name": "json.dump", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"parsePhoneNumbers\", \"type\": \"function\", \"signature\": \"(text: str) -> list\", \"return_type\": \"list\", \"short_description\": \"Parses and extracts phone numbers from a given text string.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary. Provides hooks for custom object and pair handling.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"fetchData\", \"type\": \"function\", \"signature\": \"(url, headers=None)\", \"return_type\": \"dict\", \"short_description\": \"Fetches data from a specified URL and returns it as a dictionary. Headers can be optionally provided.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"parseJsonFile\", \"type\": \"function\", \"signature\": \"(filePath, objectHook=None, pairsHook=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON file into a Python dictionary, applying optional object and object pairs hooks.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary using a custom object hook and object pairs hook.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"fetchWeatherData\", \"type\": \"function\", \"signature\": \"(location, *, apiKey)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves current weather data for a specified location using an API key.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/526", "solution": "{\n  \"name\": \"parseJson\",\n  \"type\": \"function\",\n  \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Parses a JSON string into a Python dictionary using a custom object hook and object pairs hook.\"\n}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"fetchJsonData\", \"type\": \"function\", \"signature\": \"(filePath, *, objectHook=None, pairsHook=None)\", \"return_type\": \"dict\", \"short_description\": \"Fetches JSON data from the specified file path and allows for custom object and pairs hook functions to process the data.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/526", "solution": "{\n  \"name\": \"parseJsonData\",\n  \"type\": \"function\",\n  \"signature\": \"(jsonString, *, object_hook=None, object_pairs_hook=None)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Parses a JSON string into a Python dictionary using the given object hooks.\"\n}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None)\", \"return_type\": \"object\", \"short_description\": \"Parses a JSON string into a Python object using optional hooks for object and pairs.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/526", "solution": "{\n  \"name\": \"parseJsonData\",\n  \"type\": \"function\",\n  \"signature\": \"(data, *, object_hook=None, object_pairs_hook=None)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Parses JSON data into a Python dictionary, allowing for optional custom object and pairs hooks.\"\n}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/678", "solution": "{\n  \"name\": \"parseJsonDirectory\",\n  \"type\": \"function\",\n  \"signature\": \"(directoryPath, *, objectHook=None, objectPairsHook=None)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Parses all JSON files in the specified directory and returns a DataFrame containing the concatenated data. Custom object hooks can be provided for JSON decoding.\"\n}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"parseJsonFiles\", \"type\": \"function\", \"signature\": \"(directoryPath, *, objectHook=None, pairsHook=None)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Parses all JSON files in the specified directory and returns their contents as a single DataFrame. Custom object and pairs hooks can be provided to modify the parsing behavior.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"parseJsonDirectory\", \"type\": \"function\", \"signature\": \"(directoryPath, *, objectHook=None, objectPairsHook=None)\", \"return_type\": \"DataFrame\", \"short_description\": \"Parses all JSON files in the specified directory and returns their contents as a DataFrame. The function allows for custom object and object pairs hooks for advanced data manipulation.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"parseJsonDirectory\", \"type\": \"function\", \"signature\": \"(directoryPath, *, objectHook=None, pairsHook=None)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Parses all JSON files in a given directory and returns their contents as a single DataFrame. Optionally applies custom object and pairs hooks for JSON decoding.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"parseJsonDirectory\", \"type\": \"function\", \"signature\": \"(directoryPath, *, objectHook=None, pairsHook=None)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Parses all JSON files in a directory and returns their contents as a DataFrame. Custom object hooks can be specified to manipulate the parsed JSON objects.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"parseJsonDirectory\", \"type\": \"function\", \"signature\": \"(directoryPath, *, objectHook=None, pairsHook=None)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Parses all JSON files in the specified directory and returns their contents as a single DataFrame. Allows for custom object and pairs hooks.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"parseJsonDirectory\", \"type\": \"function\", \"signature\": \"(directoryPath, *, objectHook=None, pairsHook=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Parses all JSON files in a directory and returns their contents as a single pandas DataFrame.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/678", "solution": "{\n  \"name\": \"readAndProcessJsonFiles\",\n  \"type\": \"function\",\n  \"signature\": \"(directoryPath, *, objectHook=None, pairsHook=None, decoderClass=None)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Reads JSON files from a directory, processes them with optional hooks, and returns a DataFrame.\"\n}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"parseJsonDirectory\", \"type\": \"function\", \"signature\": \"(directoryPath, *, objectHook=None, pairsHook=None)\", \"return_type\": \"DataFrame\", \"short_description\": \"Parses JSON files from the specified directory into a single pandas DataFrame.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"parseJsonDirectory\", \"type\": \"function\", \"signature\": \"(directoryPath, *, objectHook=None, pairsHook=None)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Parses all JSON files in a directory and returns their contents as a concatenated DataFrame.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"parseJsonData\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary, allowing for optional object and object pairs hooks to customize the parsing process.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"fetchJsonData\", \"type\": \"function\", \"signature\": \"(url, *, headers=None)\", \"return_type\": \"dict\", \"short_description\": \"Fetches JSON data from a given URL and returns it as a Python dictionary. The optional headers parameter can be used to specify HTTP headers.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"parseJsonData\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary, allowing for custom object and object pairs hooks.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"parseJsonToStats\", \"type\": \"function\", \"signature\": \"(jsonData, *, objectHook=None, pairsHook=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses JSON data and calculates mean and median for each key.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"fetchWeatherData\", \"type\": \"function\", \"signature\": \"(location, *, api_key=None)\", \"return_type\": \"dict\", \"short_description\": \"Fetches current weather data for a specified location using a weather API. Returns a dictionary with weather information.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"parseJsonToStats\", \"type\": \"function\", \"signature\": \"(jsonData, *, objectHook=None, objectPairsHook=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses JSON data and computes statistical measures for each key.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"fetchData\", \"type\": \"function\", \"signature\": \"(url, *, headers=None)\", \"return_type\": \"dict\", \"short_description\": \"Fetches data from a specified URL and returns it as a Python dictionary. Headers can be optionally provided.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"parseJsonData\", \"type\": \"function\", \"signature\": \"(jsonString, *, object_hook=None, object_pairs_hook=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary. Allows for optional object and object pairs hooks to customize the parsing process.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"parseJsonData\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None, objectPairsHook=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary, allowing for optional object and object pairs hooks.\"}"}
{"api_id": 66, "api_name": "json.load", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"parseJsonData\", \"type\": \"function\", \"signature\": \"(jsonString, *, objectHook=None)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string and applies an optional object hook function to the resulting dictionary.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string and returns a dictionary. Handles JSONDecodeError by catching and raising a custom exception.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string and returns a dictionary. Throws a JsonParsingError if the JSON is invalid.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parse_json\", \"type\": \"function\", \"signature\": \"(json_string)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string and returns the corresponding Python dictionary.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parse_json\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string and returns a dictionary. Handles JSONDecodeError and other potential exceptions.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parse_json\", \"type\": \"function\", \"signature\": \"(json_str)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string and returns the corresponding Python dictionary. Raises a ValueError if the JSON string is invalid.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string and returns a dictionary. Returns None if parsing fails.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parse_json\", \"type\": \"function\", \"signature\": \"(json_string)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string and returns a dictionary.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parse_json\", \"type\": \"function\", \"signature\": \"(json_str)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string and returns a dictionary. Raises a JSONDecodeError if the JSON string is invalid.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parse_json_safely\", \"type\": \"function\", \"signature\": \"(json_str)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string safely and returns a dictionary. Returns None if parsing fails.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/273", "solution": "{\"name\": \"parse_json_safely\", \"type\": \"function\", \"signature\": \"(json_str)\", \"return_type\": \"dict\", \"short_description\": \"Safely parses a JSON string and returns a dictionary. Returns an empty dictionary if parsing fails.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parseEmailData\", \"type\": \"function\", \"signature\": \"(contentType, contentLength, emailData)\", \"return_type\": \"dict\", \"short_description\": \"Parses the incoming email data from a JSON request and validates its structure.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parseEmailData\", \"type\": \"function\", \"signature\": \"(jsonData, requiredFields)\", \"return_type\": \"dict\", \"short_description\": \"Parses JSON data to validate required fields for email composition.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"validateEmailData\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"dict\", \"short_description\": \"Validates the email data structure and returns it if valid, otherwise returns an error message.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parseEmailData\", \"type\": \"function\", \"signature\": \"(data, expected_keys)\", \"return_type\": \"dict\", \"short_description\": \"Parses JSON data and validates required keys.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(server, port, username, password, emailData)\", \"return_type\": \"None\", \"short_description\": \"Sends an email via the specified SMTP server with the given credentials and email data.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parseEmailData\", \"type\": \"function\", \"signature\": \"(jsonData)\", \"return_type\": \"dict\", \"short_description\": \"Parses JSON data to validate and structure email data.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parseEmailData\", \"type\": \"function\", \"signature\": \"(contentType, contentLength, body)\", \"return_type\": \"dict\", \"short_description\": \"Parses the incoming email data in JSON format.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parseEmailData\", \"type\": \"function\", \"signature\": \"(contentType, contentLength, requestBody)\", \"return_type\": \"dict or None\", \"short_description\": \"Parses the incoming email data from a JSON request and returns the parsed data as a dictionary or None if the content type is not application/json.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"parseEmailData\", \"type\": \"function\", \"signature\": \"(contentType, contentLength, rawData)\", \"return_type\": \"dict\", \"short_description\": \"Parses the incoming JSON email data from the HTTP request.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(server, port, username, password, emailData)\", \"return_type\": \"None\", \"short_description\": \"Sends an email using the provided SMTP server details and email data.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"parseJsonData\", \"type\": \"function\", \"signature\": \"(jsonString)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string and returns a dictionary representation of the JSON data.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"parseJsonData\", \"type\": \"function\", \"signature\": \"(jsonString)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string and returns a dictionary. Handles JSONDecodeError by raising a ValueError with a message.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"parseJsonData\", \"type\": \"function\", \"signature\": \"(jsonString)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string and returns a dictionary.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/985", "solution": "{\n  \"name\": \"parse_json_data\",\n  \"type\": \"function\",\n  \"signature\": \"(json_data, output_dir='.', file_name='country_population_report.csv')\",\n  \"return_type\": \"tuple(str, pd.DataFrame)\",\n  \"short_description\": \"Parses JSON data and writes the population data to a CSV file.\"\n}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"parseJsonData\", \"type\": \"function\", \"signature\": \"(jsonString)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string and returns a dictionary. Handles JSONDecodeError by raising a ValueError with an appropriate message.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/985", "solution": "{\n  \"name\": \"parseJsonData\",\n  \"type\": \"function\",\n  \"signature\": \"(jsonStr)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Parses the provided JSON string and returns a dictionary representation of the data.\"\n}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"parseJsonData\", \"type\": \"function\", \"signature\": \"(jsonString)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string and returns the parsed data as a dictionary.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"parseJsonData\", \"type\": \"function\", \"signature\": \"(jsonData)\", \"return_type\": \"dict\", \"short_description\": \"Parses JSON data and returns a dictionary representation.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"parseJsonData\", \"type\": \"function\", \"signature\": \"(jsonStr)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string and returns a dictionary representation of the data. Throws a JSONDecodeError if the JSON string is invalid.\"}"}
{"api_id": 67, "api_name": "json.JSONDecodeError", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"parseJsonData\", \"type\": \"function\", \"signature\": \"(jsonData)\", \"return_type\": \"dict\", \"short_description\": \"Parses the provided JSON data and returns a dictionary.\"}"}
{"api_id": 68, "api_name": "keras.layers.Dense", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createDenseLayer\", \"type\": \"function\", \"signature\": \"(units, activation=None, useBias=True, kernelInitializer='glorotUniform', biasInitializer='zeros', kernelRegularizer=None, biasRegularizer=None, activityRegularizer=None, kernelConstraint=None, biasConstraint=None)\", \"return_type\": \"Layer\", \"short_description\": \"Creates a densely-connected neural network layer with the specified parameters.\"}"}
{"api_id": 68, "api_name": "keras.layers.Dense", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createDenseLayer\", \"type\": \"function\", \"signature\": \"(units, activation=None, useBias=True, kernelInitializer='glorotUniform', biasInitializer='zeros', kernelRegularizer=None, biasRegularizer=None, activityRegularizer=None, kernelConstraint=None, biasConstraint=None)\", \"return_type\": \"object\", \"short_description\": \"Creates a Dense layer for neural networks with customizable parameters.\"}"}
{"api_id": 68, "api_name": "keras.layers.Dense", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createDenseLayer\", \"type\": \"function\", \"signature\": \"(units, activation=None, useBias=True, kernelInitializer='glorotUniform', biasInitializer='zeros', kernelRegularizer=None, biasRegularizer=None, activityRegularizer=None, kernelConstraint=None, biasConstraint=None)\", \"return_type\": \"object\", \"short_description\": \"Creates a densely-connected neural network layer with the specified parameters.\"}"}
{"api_id": 68, "api_name": "keras.layers.Dense", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createDenseLayer\", \"type\": \"function\", \"signature\": \"(units, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)\", \"return_type\": \"object\", \"short_description\": \"Creates a Dense layer with the specified parameters.\"}"}
{"api_id": 68, "api_name": "keras.layers.Dense", "task_id": "BigCodeBench/417", "solution": "{\n  \"name\": \"create_dense_layer\",\n  \"type\": \"function\",\n  \"signature\": \"(units, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, input_dim=None)\",\n  \"return_type\": \"object\",\n  \"short_description\": \"Creates a dense layer for neural network with specified parameters.\"\n}"}
{"api_id": 68, "api_name": "keras.layers.Dense", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createDenseLayer\", \"type\": \"function\", \"signature\": \"(units, activation=None, useBias=True, kernelInitializer='glorotUniform', biasInitializer='zeros', kernelRegularizer=None, biasRegularizer=None, activityRegularizer=None, kernelConstraint=None, biasConstraint=None)\", \"return_type\": \"Layer\", \"short_description\": \"Creates a densely-connected neural network layer with the specified parameters.\"}"}
{"api_id": 68, "api_name": "keras.layers.Dense", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createDenseLayer\", \"type\": \"function\", \"signature\": \"(units, activation=None, useBias=True, kernelInitializer='glorotUniform', biasInitializer='zeros', kernelRegularizer=None, biasRegularizer=None, activityRegularizer=None, kernelConstraint=None, biasConstraint=None)\", \"return_type\": \"Layer\", \"short_description\": \"Creates a densely-connected neural network layer with the specified parameters.\"}"}
{"api_id": 68, "api_name": "keras.layers.Dense", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createDenseLayer\", \"type\": \"function\", \"signature\": \"(units, activation=None, useBias=True, kernelInitializer='glorotUniform', biasInitializer='zeros', kernelRegularizer=None, biasRegularizer=None, activityRegularizer=None, kernelConstraint=None, biasConstraint=None)\", \"return_type\": \"object\", \"short_description\": \"Creates a densely-connected neural network layer with the specified parameters.\"}"}
{"api_id": 68, "api_name": "keras.layers.Dense", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createDenseLayer\", \"type\": \"function\", \"signature\": \"(units, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)\", \"return_type\": \"object\", \"short_description\": \"Creates a Dense layer with the specified parameters.\"}"}
{"api_id": 68, "api_name": "keras.layers.Dense", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createDenseLayer\", \"type\": \"function\", \"signature\": \"(units, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)\", \"return_type\": \"object\", \"short_description\": \"Creates a Dense layer with the specified parameters.\"}"}
{"api_id": 69, "api_name": "keras.models.Sequential", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createSequentialModel\", \"type\": \"function\", \"signature\": \"(layers=None, name=None)\", \"return_type\": \"tf.keras.Model\", \"short_description\": \"Creates a Sequential model for use with TensorFlow/Keras.\"}"}
{"api_id": 69, "api_name": "keras.models.Sequential", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createSequentialModel\", \"type\": \"function\", \"signature\": \"(layers=None, name=None)\", \"return_type\": \"tf.keras.Model\", \"short_description\": \"Creates a Sequential model with the given layers.\"}"}
{"api_id": 69, "api_name": "keras.models.Sequential", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createSequentialModel\", \"type\": \"function\", \"signature\": \"(layers=None, name=None)\", \"return_type\": \"tf.keras.Model\", \"short_description\": \"Creates a Sequential model from a list of layers.\"}"}
{"api_id": 69, "api_name": "keras.models.Sequential", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createSequentialModel\", \"type\": \"function\", \"signature\": \"(layers=None, name=None)\", \"return_type\": \"tf.keras.Model\", \"short_description\": \"Creates a sequential model using TensorFlow/Keras.\"}"}
{"api_id": 69, "api_name": "keras.models.Sequential", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createSequentialModel\", \"type\": \"function\", \"signature\": \"(layers=None, name=None)\", \"return_type\": \"tf.keras.Model\", \"short_description\": \"Creates a Sequential model from given layers.\"}"}
{"api_id": 69, "api_name": "keras.models.Sequential", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createSequentialModel\", \"type\": \"function\", \"signature\": \"(layers=None, name=None)\", \"return_type\": \"tf.keras.models.Sequential\", \"short_description\": \"Creates a Sequential model with the given layers.\"}"}
{"api_id": 69, "api_name": "keras.models.Sequential", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createSequentialModel\", \"type\": \"function\", \"signature\": \"(layers=None, name=None)\", \"return_type\": \"tf.keras.models.Sequential\", \"short_description\": \"Creates a Sequential model from given layers.\"}"}
{"api_id": 69, "api_name": "keras.models.Sequential", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createSequentialModel\", \"type\": \"function\", \"signature\": \"(input_dim, units, activation)\", \"return_type\": \"tf.keras.Model\", \"short_description\": \"Creates a Sequential model with a Dense layer and specified activation function.\"}"}
{"api_id": 69, "api_name": "keras.models.Sequential", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createSequentialModel\", \"type\": \"function\", \"signature\": \"(layers=None, name=None)\", \"return_type\": \"tf.keras.models.Sequential\", \"short_description\": \"Creates a Sequential model from the given layers.\"}"}
{"api_id": 69, "api_name": "keras.models.Sequential", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createSequentialModel\", \"type\": \"function\", \"signature\": \"(layers=None, name=None)\", \"return_type\": \"tf.keras.Model\", \"short_description\": \"Creates a Sequential model with the given layers.\"}"}
{"api_id": 70, "api_name": "keras.optimizers.SGD", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createOptimizer\", \"type\": \"function\", \"signature\": \"(optimizerType, learningRate=0.01, momentum=0.0, nesterov=False, name='Optimizer', **kwargs)\", \"return_type\": \"Optimizer\", \"short_description\": \"Creates an optimizer with the specified parameters for training a machine learning model.\"}"}
{"api_id": 70, "api_name": "keras.optimizers.SGD", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"generateModel\", \"type\": \"function\", \"signature\": \"(modelConfig, optimizerConfig)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a neural network model based on the provided configuration and uses the specified optimizer.\"}"}
{"api_id": 70, "api_name": "keras.optimizers.SGD", "task_id": "BigCodeBench/417", "solution": "{\n  \"name\": \"generate_neural_network\",\n  \"type\": \"function\",\n  \"signature\": \"(input_dim, output_units, activation_function, learning_rate, epochs, batch_size, validation_split)\",\n  \"return_type\": \"tuple(model, plot_ax)\",\n  \"short_description\": \"Generates a neural network model with a specified structure and trains it using the SGD optimizer. It also returns a plot of the model's loss over the training epochs.\"\n}"}
{"api_id": 70, "api_name": "keras.optimizers.SGD", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"generateModel\", \"type\": \"function\", \"signature\": \"(modelConfig, optimizerConfig)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a machine learning model with the given configuration for the optimizer and returns the model and the training history plot.\"}"}
{"api_id": 70, "api_name": "keras.optimizers.SGD", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"trainModelWithSGD\", \"type\": \"function\", \"signature\": \"(model, X_train, Y_train, epochs, batch_size, learning_rate, momentum, nesterov)\", \"return_type\": \"history\", \"short_description\": \"Trains a neural network model using the Stochastic Gradient Descent (SGD) optimizer with customizable learning rate, momentum, and Nesterov momentum.\"}"}
{"api_id": 70, "api_name": "keras.optimizers.SGD", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"generateModelAndPlot\", \"type\": \"function\", \"signature\": \"(X, Y, test_size=0.25, units=1, activation='sigmoid', epochs=200, batch_size=1)\", \"return_type\": \"tuple(model, ax)\", \"short_description\": \"Generates a neural network model and plots the training and validation loss over epochs.\"}"}
{"api_id": 70, "api_name": "keras.optimizers.SGD", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"generateModel\", \"type\": \"function\", \"signature\": \"(modelType, layers)\", \"return_type\": \"object\", \"short_description\": \"Generates a neural network model of the specified type with the given layers.\"}"}
{"api_id": 70, "api_name": "keras.optimizers.SGD", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"generateModel\", \"type\": \"function\", \"signature\": \"(modelConfig, optimizerConfig)\", \"return_type\": \"model\", \"short_description\": \"Generates a neural network model based on the provided configuration.\"}"}
{"api_id": 70, "api_name": "keras.optimizers.SGD", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createModelWithOptimizer\", \"type\": \"function\", \"signature\": \"(modelType, optimizerType, learningRate=0.01, momentum=0.0, nesterov=False)\", \"return_type\": \"tuple(model, history)\", \"short_description\": \"Creates and trains a neural network model with the specified optimizer and hyperparameters. Returns the trained model and the training history.\"}"}
{"api_id": 70, "api_name": "keras.optimizers.SGD", "task_id": "BigCodeBench/417", "solution": "{\n  \"name\": \"generateModel\",\n  \"type\": \"function\",\n  \"signature\": \"(data, target, testSize=0.25, epochs=200, batchSize=1, learningRate=0.1, activation='sigmoid')\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates and trains a simple neural network model using the provided data and parameters.\"\n}"}
{"api_id": 71, "api_name": "librosa.display.specshow", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generate_spectrogram\",\n  \"type\": \"callable\",\n  \"signature\": \"(data: 'np.ndarray', samplerate: 'int', x_axis: 'str' = 'time', y_axis: 'str' = 'log', **kwargs: 'Any') -> 'None'\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generates a spectrogram from the provided audio data and displays it using librosa's specshow function.\"\n}"}
{"api_id": 71, "api_name": "librosa.display.specshow", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generateSpectrogram\",\n  \"type\": \"callable\",\n  \"signature\": \"(data: 'np.ndarray', sr: 'float', hop_length: 'int', n_fft: 'Optional[int]' = None, win_length: 'Optional[int]' = None, fmin: 'Optional[float]' = None, fmax: 'Optional[float]' = None, auto_aspect: 'bool' = True, htk: 'bool' = False, unicode: 'bool' = True, ax: 'Optional[mplaxes.Axes]' = None, **kwargs: 'Any') -> 'QuadMesh'\",\n  \"return_type\": \"QuadMesh\",\n  \"short_description\": \"Generates a spectrogram from given audio data with customizable parameters.\"\n}"}
{"api_id": 71, "api_name": "librosa.display.specshow", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generate_spectrogram\",\n  \"type\": \"callable\",\n  \"signature\": \"(data: 'np.ndarray', *, sr: 'float' = 22050, hop_length: 'int' = 512, n_fft: 'Optional[int]' = None, win_length: 'Optional[int]' = None, fmin: 'Optional[float]' = None, fmax: 'Optional[float]' = None, tuning: 'float' = 0.0, bins_per_octave: 'int' = 12, key: 'str' = 'C:maj', Sa: 'Optional[Union[float, int]]' = None, mela: 'Optional[Union[str, int]]' = None, thaat: 'Optional[str]' = None, auto_aspect: 'bool' = True, htk: 'bool' = False, unicode: 'bool' = True, intervals: 'Optional[Union[str, np.ndarray]]' = None, unison: 'Optional[str]' = None, ax: 'Optional[mplaxes.Axes]' = None, **kwargs: 'Any') -> 'QuadMesh'\",\n  \"return_type\": \"QuadMesh\",\n  \"short_description\": \"Generates a spectrogram/chromagram/cqt/etc. from given data matrix.\"\n}"}
{"api_id": 71, "api_name": "librosa.display.specshow", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generate_spectrogram\",\n  \"type\": \"callable\",\n  \"signature\": \"(data: 'np.ndarray', sr: 'int', hop_length: 'int' = 512, n_fft: 'int' = 2048, win_length: 'Optional[int]' = None, fmin: 'Optional[float]' = None, fmax: 'Optional[float]' = None, key: 'str' = 'C:maj', auto_aspect: 'bool' = True, ax: 'Optional[mplaxes.Axes]' = None, **kwargs: 'Any') -> 'None'\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generates and displays a spectrogram from the provided audio data using librosa and matplotlib.\"\n}"}
{"api_id": 71, "api_name": "librosa.display.specshow", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generate_spectrogram\",\n  \"type\": \"callable\",\n  \"signature\": \"(data: 'np.ndarray', sr: 'int', hop_length: 'int', n_fft: 'Optional[int]' = None, win_length: 'Optional[int]' = None, x_axis: 'Optional[str]' = None, y_axis: 'Optional[str]' = None, **kwargs: 'Any') -> 'QuadMesh'\",\n  \"return_type\": \"QuadMesh\",\n  \"short_description\": \"Generates a spectrogram from the provided audio data and displays it using matplotlib.\"\n}"}
{"api_id": 71, "api_name": "librosa.display.specshow", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generate_spectrogram\",\n  \"type\": \"callable\",\n  \"signature\": \"(data: 'np.ndarray', *, sr: 'float' = 22050, hop_length: 'int' = 512, n_fft: 'Optional[int]' = None, win_length: 'Optional[int]' = None, fmin: 'Optional[float]' = None, fmax: 'Optional[float]' = None, tuning: 'float' = 0.0, bins_per_octave: 'int' = 12, key: 'str' = 'C:maj', Sa: 'Optional[Union[float, int]]' = None, mela: 'Optional[Union[str, int]]' = None, thaat: 'Optional[str]' = None, auto_aspect: 'bool' = True, htk: 'bool' = False, unicode: 'bool' = True, ax: 'Optional[mplaxes.Axes]' = None, **kwargs: 'Any') -> 'QuadMesh'\",\n  \"return_type\": \"QuadMesh\",\n  \"short_description\": \"Generates a spectrogram/chromagram/cqt/etc. from the given data matrix.\"\n}"}
{"api_id": 71, "api_name": "librosa.display.specshow", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generate_spectrogram\",\n  \"type\": \"callable\",\n  \"signature\": \"(data: 'np.ndarray', *, sr: 'int', hop_length: 'int' = 512, n_fft: 'int' = 2048, win_length: 'Optional[int]' = None, fmin: 'Optional[float]' = None, fmax: 'Optional[float]' = None, bins_per_octave: 'int' = 12, key: 'str' = 'C:maj', ax: 'Optional[mplaxes.Axes]' = None, **kwargs: 'Any') -> 'None'\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generates and displays a spectrogram for given audio data using librosa.\"\n}"}
{"api_id": 71, "api_name": "librosa.display.specshow", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generate_spectrogram\",\n  \"type\": \"callable\",\n  \"signature\": \"(data: 'np.ndarray', *, sr: 'int', hop_length: 'int' = 512, n_fft: 'int' = None, win_length: 'int' = None, fmin: 'float' = None, fmax: 'float' = None, tuning: 'float' = 0.0, bins_per_octave: 'int' = 12, key: 'str' = 'C:maj', Sa: 'float' = 0.0, mela: 'str' = None, thaat: 'str' = None, auto_aspect: 'bool' = True, htk: 'bool' = False, unicode: 'bool' = True, intervals: 'str' = None, unison: 'str' = None, ax: 'Optional[mplaxes.Axes]' = None, **kwargs: 'Any') -> 'QuadMesh'\",\n  \"return_type\": \"QuadMesh\",\n  \"short_description\": \"Generates a spectrogram/chromagram/cqt/etc. for given audio data.\"\n}"}
{"api_id": 71, "api_name": "librosa.display.specshow", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"plot_spectrogram\",\n  \"type\": \"callable\",\n  \"signature\": \"(data: 'np.ndarray', *, sr: 'float', hop_length: 'int' = 512, n_fft: 'Optional[int]' = None, win_length: 'Optional[int]' = None, fmin: 'Optional[float]' = None, fmax: 'Optional[float]' = None, tuning: 'float' = 0.0, bins_per_octave: 'int' = 12, key: 'str' = 'C:maj', Sa: 'Optional[Union[float, int]]' = None, mela: 'Optional[Union[str, int]]' = None, thaat: 'Optional[str]' = None, auto_aspect: 'bool' = True, htk: 'bool' = False, unicode: 'bool' = True, intervals: 'Optional[Union[str, np.ndarray]]' = None, unison: 'Optional[str]' = None, ax: 'Optional[mplaxes.Axes]' = None, **kwargs: 'Any') -> 'None'\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Plots a spectrogram/chromagram/cqt/etc. with customizable parameters.\"\n}"}
{"api_id": 71, "api_name": "librosa.display.specshow", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generate_spectrogram\",\n  \"type\": \"callable\",\n  \"signature\": \"(data: 'np.ndarray', sr: 'int', hop_length: 'int' = 512, x_axis: 'str' = 'time', y_axis: 'str' = 'log', **kwargs: 'Any') -> 'None'\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generates a spectrogram from the provided audio data using the specified parameters and displays it.\"\n}"}
{"api_id": 72, "api_name": "librosa.stft", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generate_spectrogram\",\n  \"type\": \"function\",\n  \"signature\": \"(audio_signal: numpy.ndarray, samplerate: int, n_fft: int = 2048, hop_length: int = 512, win_length: Optional[int] = None, window: str = 'hann', center: bool = True, pad_mode: str = 'constant', out: Optional[numpy.ndarray] = None) -> numpy.ndarray\",\n  \"return_type\": \"numpy.ndarray\",\n  \"short_description\": \"Generates a spectrogram from an audio signal using the Short-time Fourier transform (STFT).\"\n}"}
{"api_id": 72, "api_name": "librosa.stft", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generateSpectrogram\",\n  \"type\": \"callable\",\n  \"signature\": \"(data: numpy.ndarray, samplerate: int, n_fft: int = 2048, hop_length: Optional[int] = None, win_length: Optional[int] = None, window: Union[str, Tuple[Any, ...], float, Callable[[int], numpy.ndarray], Sequence[Sequence[Sequence[Sequence[Sequence[Any]]]]], numpy._array_like._SupportsArray[numpy.dtype], Sequence[numpy._array_like._SupportsArray[numpy.dtype]], Sequence[Sequence[numpy._array_like._SupportsArray[numpy.dtype]]], Sequence[Sequence[Sequence[numpy._array_like._SupportsArray[numpy.dtype]]]], Sequence[Sequence[Sequence[Sequence[Sequence[numpy._array_like._SupportsArray[numpy.dtype]]]]]]], numpy._array_like._SupportsArray[numpy.dtype], bool, int, complex, bytes, Sequence[Union[bool, int, float, complex, str, bytes]], Sequence[Sequence[Union[bool, int, float, complex, str, bytes]]], Sequence[Sequence[Sequence[Union[bool, int, float, complex, str, bytes]]]], Sequence[Sequence[Sequence[Sequence[Union[bool, int, float, complex, str, bytes]]]]]] = 'hann', center: bool = True, dtype: Union[numpy.dtype, NoneType, type, numpy._dtype_like._SupportsDType[numpy.dtype], str, Tuple[Any, int], Tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], List[Any], numpy._dtype_like._DTypeDict, Tuple[Any, Any]] = None, pad_mode: Union[typing_extensions.Literal['constant', 'edge', 'linear_ramp', 'reflect', 'symmetric', 'empty'], Callable[..., Any]] = 'constant', out: Optional[numpy.ndarray] = None) -> Tuple[numpy.ndarray, plt.Figure]\",\n  \"return_type\": \"Tuple[numpy.ndarray, plt.Figure]\",\n  \"short_description\": \"Generates a spectrogram from a given audio signal.\"\n}"}
{"api_id": 72, "api_name": "librosa.stft", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generate_spectrogram\",\n  \"type\": \"callable\",\n  \"signature\": \"(audio_data: numpy.ndarray, samplerate: int, n_fft: int = 2048, hop_length: Optional[int] = None, win_length: Optional[int] = None, window: Union[str, Tuple[Any, ...], float, Callable[[int], numpy.ndarray], Sequence[Sequence[Sequence[Sequence[Sequence[Any]]]]], numpy._array_like._SupportsArray[numpy.dtype], Sequence[numpy._array_like._SupportsArray[numpy.dtype]], Sequence[Sequence[numpy._array_like._SupportsArray[numpy.dtype]]], Sequence[Sequence[Sequence[numpy._array_like._SupportsArray[numpy.dtype]]]], Sequence[Sequence[Sequence[Sequence[Sequence[numpy._array_like._SupportsArray[numpy.dtype]]]]]], bool, int, complex, bytes, Sequence[Union[bool, int, float, complex, str, bytes]], Sequence[Sequence[Union[bool, int, float, complex, str, bytes]]], Sequence[Sequence[Sequence[Union[bool, int, float, complex, str, bytes]]]], Sequence[Sequence[Sequence[Sequence[Union[bool, int, float, complex, str, bytes]]]]]] = 'hann', center: bool = True, dtype: Union[numpy.dtype, NoneType, type, numpy._dtype_like._SupportsDType[numpy.dtype], str, Tuple[Any, int], Tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], List[Any], numpy._dtype_like._DTypeDict, Tuple[Any, Any]] = None, pad_mode: Union[typing_extensions.Literal['constant', 'edge', 'linear_ramp', 'reflect', 'symmetric', 'empty'], Callable[..., Any]] = 'constant', out: Optional[numpy.ndarray] = None) -> Tuple[numpy.ndarray, matplotlib.figure.Figure]\",\n  \"return_type\": \"Tuple[numpy.ndarray, matplotlib.figure.Figure]\",\n  \"short_description\": \"Generates a spectrogram from audio data using the Short-time Fourier transform (STFT).\"\n}"}
{"api_id": 72, "api_name": "librosa.stft", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generate_spectrogram\",\n  \"type\": \"callable\",\n  \"signature\": \"(data: numpy.ndarray, samplerate: int, M: int, N: int) -> matplotlib.figure.Figure\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Generates a spectrogram from audio data using the Short-time Fourier Transform (STFT).\"\n}"}
{"api_id": 72, "api_name": "librosa.stft", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"calculate_spectrogram\",\n  \"type\": \"function\",\n  \"signature\": \"(audio_path: str, n_fft: int = 2048, hop_length: int = 512, window: str = 'hann', center: bool = True, dtype: str = 'float32', pad_mode: str = 'constant', out: Optional[np.ndarray] = None) -> Tuple[np.ndarray, plt.Figure]\",\n  \"return_type\": \"Tuple[np.ndarray, plt.Figure]\",\n  \"short_description\": \"Calculates and displays a spectrogram from an audio file.\"\n}"}
{"api_id": 72, "api_name": "librosa.stft", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generate_spectrogram\",\n  \"type\": \"callable\",\n  \"signature\": \"(data: numpy.ndarray, samplerate: int, M: int, N: int, window_length: int = 2048, hop_length: Optional[int] = None, center: bool = True, pad_mode: str = 'constant', out: Optional[numpy.ndarray] = None) -> numpy.ndarray\",\n  \"return_type\": \"numpy.ndarray\",\n  \"short_description\": \"Generates a spectrogram from a given audio signal using the Short-time Fourier Transform (STFT).\"\n}"}
{"api_id": 72, "api_name": "librosa.stft", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculate_sound_pressure_level\", \"type\": \"function\", \"signature\": \"(data: np.ndarray, samplerate: int) -> float\", \"return_type\": \"float\", \"short_description\": \"Calculate the sound pressure level (SPL) of a given audio signal.\"}"}
{"api_id": 72, "api_name": "librosa.stft", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generate_spectrogram\",\n  \"type\": \"callable\",\n  \"signature\": \"(data: numpy.ndarray, samplerate: int, M: int, N: int) -> None\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generates a spectrogram from a given audio signal and displays it.\"\n}"}
{"api_id": 72, "api_name": "librosa.stft", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculateSoundPressureLevel\", \"type\": \"function\", \"signature\": \"(audioPath: str, windowSize: int, hopLength: int) -> Tuple[np.ndarray, plt.Figure]\", \"return_type\": \"Tuple[np.ndarray, plt.Figure]\", \"short_description\": \"Calculates the sound pressure level (SPL) and generates a spectrogram for a given audio file.\"}"}
{"api_id": 72, "api_name": "librosa.stft", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generate_spectrogram\",\n  \"type\": \"callable\",\n  \"signature\": \"(data: numpy.ndarray, samplerate: int, M: int, N: int) -> None\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generates a spectrogram from a given audio signal and displays it.\"\n}"}
{"api_id": 73, "api_name": "librosa.amplitude_to_db", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"calculate_sound_pressure_level\",\n  \"type\": \"function\",\n  \"signature\": \"(audio_file: str) -> float\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculates the sound pressure level (SPL) of an audio file.\"\n}"}
{"api_id": 73, "api_name": "librosa.amplitude_to_db", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"convert_amplitude_to_db\",\n  \"type\": \"function\",\n  \"signature\": \"(S: numpy.ndarray, *, ref: Union[float, Callable] = 1.0, amin: float = 1e-05, top_db: Optional[float] = 80.0) -> numpy.ndarray\",\n  \"return_type\": \"numpy.ndarray\",\n  \"short_description\": \"Convert an amplitude spectrogram to dB-scaled spectrogram.\"\n}"}
{"api_id": 73, "api_name": "librosa.amplitude_to_db", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"convert_amplitude_to_db\",\n  \"type\": \"function\",\n  \"signature\": \"(S: numpy.ndarray, *, ref: Union[float, Callable] = 1.0, amin: float = 1e-05, top_db: Optional[float] = 80.0) -> numpy.ndarray\",\n  \"return_type\": \"numpy.ndarray\",\n  \"short_description\": \"Convert an amplitude spectrogram to dB-scaled spectrogram.\"\n}"}
{"api_id": 73, "api_name": "librosa.amplitude_to_db", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculate_sound_pressure_level\", \"type\": \"function\", \"signature\": \"(audio_data: numpy.ndarray, samplerate: int) -> float\", \"return_type\": \"The sound pressure level (SPL) in decibels (dB).\", \"short_description\": \"Calculate the sound pressure level (SPL) of an audio signal.\"}"}
{"api_id": 73, "api_name": "librosa.amplitude_to_db", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"convert_amplitude_to_db\",\n  \"type\": \"callable\",\n  \"signature\": \"(S: numpy.ndarray, *, ref: Union[float, Callable] = 1.0, amin: float = 1e-05, top_db: Optional[float] = 80.0) -> numpy.ndarray\",\n  \"return_type\": \"numpy.ndarray\",\n  \"short_description\": \"Convert an amplitude spectrogram to dB-scaled spectrogram.\"\n}"}
{"api_id": 73, "api_name": "librosa.amplitude_to_db", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"convertAmplitudeToDb\", \"type\": \"callable\", \"signature\": \"(S: numpy.ndarray, *, ref: Union[float, Callable] = 1.0, amin: float = 1e-05, top_db: Optional[float] = 80.0) -> numpy.ndarray\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Convert an amplitude spectrogram to dB-scaled spectrogram. This function is provided for convenience and follows the same parameters as the hierarchical call, but operates on amplitude data directly.\"}"}
{"api_id": 73, "api_name": "librosa.amplitude_to_db", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"calculate_sound_pressure_level\",\n  \"type\": \"function\",\n  \"signature\": \"(data: numpy.ndarray, samplerate: int) -> float\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculate the Sound Pressure Level (SPL) of an audio signal.\"\n}"}
{"api_id": 73, "api_name": "librosa.amplitude_to_db", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generate_spectrogram\",\n  \"type\": \"function\",\n  \"signature\": \"(audio_data: numpy.ndarray, samplerate: int, M: int, N: int) -> Tuple[numpy.ndarray, plt.Figure]\",\n  \"return_type\": \"Tuple[numpy.ndarray, plt.Figure]\",\n  \"short_description\": \"Generates a spectrogram from audio data and returns both the spectrogram matrix and the matplotlib figure object.\"\n}"}
{"api_id": 73, "api_name": "librosa.amplitude_to_db", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"convert_amplitude_to_db\",\n  \"type\": \"function\",\n  \"signature\": \"(amplitude_spectrogram: numpy.ndarray, *, reference: Union[float, Callable] = 1.0, minimum_amplitude: float = 1e-05, max_decibels: Optional[float] = 80.0) -> numpy.ndarray\",\n  \"return_type\": \"numpy.ndarray\",\n  \"short_description\": \"Convert an amplitude spectrogram to dB-scaled spectrogram.\"\n}"}
{"api_id": 73, "api_name": "librosa.amplitude_to_db", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"calculate_spl\",\n  \"type\": \"function\",\n  \"signature\": \"(data: np.ndarray, samplerate: int) -> float\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculates the sound pressure level (SPL) of the given audio data.\"\n}"}
{"api_id": 74, "api_name": "lxml.html.fromstring", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"parseHtmlContent\", \"type\": \"function\", \"signature\": \"(html_content, base_url=None)\", \"return_type\": \"Element\", \"short_description\": \"Parses the provided HTML content and returns a single element/document. This function attempts to parse the content, regardless of whether it is a fragment or a document.\"}"}
{"api_id": 74, "api_name": "lxml.html.fromstring", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"parseHtmlContent\", \"type\": \"callable\", \"signature\": \"(html_content, base_url=None)\", \"return_type\": \"Element\", \"short_description\": \"Parses the HTML content and returns a single element/document. This function tries to minimally parse the provided HTML content, determining if it is a fragment or a document. base_url sets the document's base_url attribute.\"}"}
{"api_id": 74, "api_name": "lxml.html.fromstring", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"parse_html\", \"type\": \"callable\", \"signature\": \"(html_content, base_url=None)\", \"return_type\": \"lxml.html.HtmlElement\", \"short_description\": \"Parses the given HTML content and returns the root element. Optionally sets the base URL for the document.\"}"}
{"api_id": 74, "api_name": "lxml.html.fromstring", "task_id": "BigCodeBench/1015", "solution": "{\n  \"name\": \"parse_html\",\n  \"type\": \"function\",\n  \"signature\": \"(html_content, base_url=None)\",\n  \"return_type\": \"lxml.html.HtmlElement\",\n  \"short_description\": \"Parse the HTML content and return an HtmlElement object.\"\n}"}
{"api_id": 74, "api_name": "lxml.html.fromstring", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"parseHtmlContent\", \"type\": \"function\", \"signature\": \"(html, base_url=None, parser=None, **kw)\", \"return_type\": \"Element\", \"short_description\": \"Parse the HTML content, returning a single element/document.\"}"}
{"api_id": 74, "api_name": "lxml.html.fromstring", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"parseHtmlContent\", \"type\": \"function\", \"signature\": \"(html, base_url=None, parser=None, **kw)\", \"return_type\": \"Element\", \"short_description\": \"Parses the HTML content, returning a single element or document.\"}"}
{"api_id": 74, "api_name": "lxml.html.fromstring", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"parseHtmlContent\", \"type\": \"callable\", \"signature\": \"(html_content, base_url=None)\", \"return_type\": \"Element\", \"short_description\": \"Parse the HTML content, returning a single element/document. This function tries to minimally parse the provided HTML content, determining if it is a fragment or a document. base_url can be set to the document's base_url attribute if provided.\"}"}
{"api_id": 74, "api_name": "lxml.html.fromstring", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"parseHtml\", \"type\": \"function\", \"signature\": \"(htmlContent, baseUrl=None)\", \"return_type\": \"lxml.html.HtmlElement\", \"short_description\": \"Parses the provided HTML content and returns a single element/document. baseUrl sets the document's base_url attribute.\"}"}
{"api_id": 74, "api_name": "lxml.html.fromstring", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"parseHtmlContent\", \"type\": \"function\", \"signature\": \"(html_content, base_url=None)\", \"return_type\": \"Element\", \"short_description\": \"Parse the HTML content and return a single element/document. This function tries to minimally parse the provided HTML content without knowing if it is a fragment or a document. base_url sets the document's base_url attribute if provided.\"}"}
{"api_id": 74, "api_name": "lxml.html.fromstring", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"parseHtmlContent\", \"type\": \"callable\", \"signature\": \"(html_content, base_url=None)\", \"return_type\": \"lxml.html.HtmlElement\", \"short_description\": \"Parses the HTML content and returns a tree of elements.\"}"}
{"api_id": 75, "api_name": "lxml.etree.XMLSyntaxError", "task_id": "BigCodeBench/1003", "solution": "{\"name\": \"parse_xml_data\", \"type\": \"function\", \"signature\": \"(xml_data, parser=None)\", \"return_type\": \"pandas.core.frame.DataFrame\", \"short_description\": \"Parses XML data and returns it as a DataFrame.\"}"}
{"api_id": 75, "api_name": "lxml.etree.XMLSyntaxError", "task_id": "BigCodeBench/1003", "solution": "{\"name\": \"parse_xml_data\", \"type\": \"function\", \"signature\": \"(xml_data)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Parses XML data and returns a DataFrame.\"}"}
{"api_id": 75, "api_name": "lxml.etree.XMLSyntaxError", "task_id": "BigCodeBench/1003", "solution": "{\"name\": \"parse_xml\", \"type\": \"function\", \"signature\": \"(xml_data)\", \"return_type\": \"pandas.core.frame.DataFrame\", \"short_description\": \"Parses XML data and returns it as a DataFrame.\"}"}
{"api_id": 75, "api_name": "lxml.etree.XMLSyntaxError", "task_id": "BigCodeBench/1003", "solution": "{\"name\": \"parse_xml_data\", \"type\": \"function\", \"signature\": \"(xml_data, expected_structure)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Parses XML data and returns a DataFrame. Expects a specific structure to be defined.\"}"}
{"api_id": 75, "api_name": "lxml.etree.XMLSyntaxError", "task_id": "BigCodeBench/1003", "solution": "{\"name\": \"fetch_xml_data\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches and parses XML data from the given URL, returning a DataFrame.\"}"}
{"api_id": 75, "api_name": "lxml.etree.XMLSyntaxError", "task_id": "BigCodeBench/1003", "solution": "{\"name\": \"parse_xml_data\", \"type\": \"function\", \"signature\": \"(xml_data, schema=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Parses XML data and returns a DataFrame, optionally validating against an XML schema.\"}"}
{"api_id": 75, "api_name": "lxml.etree.XMLSyntaxError", "task_id": "BigCodeBench/1003", "solution": "{\"name\": \"parse_xml_data\", \"type\": \"function\", \"signature\": \"(xml_data)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Parses XML data and returns a DataFrame representation.\"}"}
{"api_id": 75, "api_name": "lxml.etree.XMLSyntaxError", "task_id": "BigCodeBench/1003", "solution": "{\"name\": \"parse_xml\", \"type\": \"function\", \"signature\": \"(xml_data)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Parses XML data and returns a DataFrame.\"}"}
{"api_id": 75, "api_name": "lxml.etree.XMLSyntaxError", "task_id": "BigCodeBench/1003", "solution": "{\"name\": \"parse_xml\", \"type\": \"function\", \"signature\": \"(xml_data)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Parses XML data and returns a DataFrame. Throws errors if XML is invalid or structure is incorrect.\"}"}
{"api_id": 75, "api_name": "lxml.etree.XMLSyntaxError", "task_id": "BigCodeBench/1003", "solution": "{\"name\": \"parse_xml\", \"type\": \"function\", \"signature\": \"(xml_data)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Parses XML data and returns it as a pandas DataFrame.\"}"}
{"api_id": 76, "api_name": "math.factorial", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculatePermutationsSum\", \"type\": \"function\", \"signature\": \"(numbers: list[int])\", \"return_type\": \"tuple[list[int], list[tuple[int, ...]]]\", \"short_description\": \"Calculates the sum of factorials for all permutations of a given list of non-negative integers.\"}"}
{"api_id": 76, "api_name": "math.factorial", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculatePermutationsSums\", \"type\": \"function\", \"signature\": \"(numbers)\", \"return_type\": \"tuple(list(int), list(list(int))\", \"short_description\": \"Calculates the sum of factorials of each permutation of the given list of non-negative integers and returns a tuple containing the sums and all permutations.\"}"}
{"api_id": 76, "api_name": "math.factorial", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculateFactorialSums\", \"type\": \"function\", \"signature\": \"(numbers: list[int])\", \"return_type\": \"tuple[list[int], list[tuple[int, ...]]]\", \"short_description\": \"Calculates the sum of factorials for all permutations of the given list of non-negative integers.\"}"}
{"api_id": 76, "api_name": "math.factorial", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculatePermutationsSums\", \"type\": \"function\", \"signature\": \"(numbers: list[int])\", \"return_type\": \"tuple[list[int], list[tuple[int, ...]]]\", \"short_description\": \"Calculates the sum of factorials for all permutations of a list of non-negative integers and returns the sums along with the permutations.\"}"}
{"api_id": 76, "api_name": "math.factorial", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculatePermutationsSum\", \"type\": \"function\", \"signature\": \"(numbers, /)\", \"return_type\": \"tuple[list[int], list[tuple[int, ...]]]\", \"short_description\": \"Calculates the sum of factorials for all permutations of a list of non-negative integers and returns the sums along with the permutations.\"}"}
{"api_id": 76, "api_name": "math.factorial", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculateSumOfFactorials\", \"type\": \"function\", \"signature\": \"(numbers)\", \"return_type\": \"list\", \"short_description\": \"Calculates the sum of factorials for each permutation of the input numbers.\"}"}
{"api_id": 76, "api_name": "math.factorial", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculatePermutationsSums\", \"type\": \"function\", \"signature\": \"(numbers)\", \"return_type\": \"Tuple[List[int], List[Tuple[int, ...]]]\", \"short_description\": \"Calculates the sum of factorials for all permutations of a given list of non-negative integers.\"}"}
{"api_id": 76, "api_name": "math.factorial", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculateFactorialSums\", \"type\": \"function\", \"signature\": \"(numbers, /)\", \"return_type\": \"tuple[list[int], list[tuple[int, ...]]]\", \"short_description\": \"Calculate the sum of factorials for all permutations of a list of non-negative integers.\"}"}
{"api_id": 76, "api_name": "math.factorial", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculateFactorialSums\", \"type\": \"function\", \"signature\": \"(numbers: list[int])\", \"return_type\": \"tuple[list[int], list[tuple[int, ...]]]\", \"short_description\": \"Calculates the sum of factorials for all permutations of the given list of non-negative integers.\"}"}
{"api_id": 76, "api_name": "math.factorial", "task_id": "BigCodeBench/854", "solution": "{\"name\": \"calculate_factorial_sums\", \"type\": \"function\", \"signature\": \"(numbers)\", \"return_type\": \"list\", \"short_description\": \"Calculates the sum of factorials for each permutation of the given list of non-negative integers.\"}"}
{"api_id": 77, "api_name": "math.pi", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"generateSineWave\", \"type\": \"function\", \"signature\": \"generate_sine_wave(frequency, sample_size=10000)\", \"return_type\": \"tuple[plt.Figure, plt.Axes]\", \"short_description\": \"Generates a sine wave plot with specified frequency and sample size.\"}"}
{"api_id": 77, "api_name": "math.pi", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"calculateFrequencySpectrum\", \"type\": \"function\", \"signature\": \"def calculateFrequencySpectrum(signal, sampleRate):\", \"return_type\": \"dict\", \"short_description\": \"Analyzes the frequency content of a given signal and returns a dictionary containing the frequency spectrum.\"}"}
{"api_id": 77, "api_name": "math.pi", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"calculateSinCos\", \"type\": \"function\", \"signature\": \"(frequency: float, sample_size: int = 10000)\", \"return_type\": \"tuple[plt.Figure, plt.Axes]\", \"short_description\": \"Calculates and plots the sine and cosine functions for a given frequency over a specified sample size.\"}"}
{"api_id": 77, "api_name": "math.pi", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"calculateFrequency\", \"type\": \"function\", \"signature\": \"def calculateFrequency(signalData, samplingRate):\", \"return_type\": \"float\", \"short_description\": \"Calculate the frequency of a given signal using the FFT (Fast Fourier Transform).\"}"}
{"api_id": 77, "api_name": "math.pi", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"generateFrequencyPlot\", \"type\": \"function\", \"signature\": \"def generateFrequencyPlot(frequency, sample_size=10000):\", \"return_type\": \"tuple(fig, ax)\", \"short_description\": \"Generates a plot of sine and cosine waves based on the given frequency and sample size.\"}"}
{"api_id": 77, "api_name": "math.pi", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"calculatePi\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"float\", \"short_description\": \"Returns the value of pi.\"}"}
{"api_id": 77, "api_name": "math.pi", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"calculateFibonacci\", \"type\": \"function\", \"signature\": \"int n\", \"return_type\": \"list\", \"short_description\": \"Calculates the first n Fibonacci numbers.\"}"}
{"api_id": 77, "api_name": "math.pi", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"calculateFibonacci\", \"type\": \"function\", \"signature\": \"def calculateFibonacci(n: int) -> list[int]\", \"return_type\": \"list[int]\", \"short_description\": \"Calculates the first n Fibonacci numbers.\"}"}
{"api_id": 77, "api_name": "math.pi", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"generateSineWave\", \"type\": \"function\", \"signature\": \"generate_sine_wave(frequency, sample_size=10000)\", \"return_type\": \"tuple(numpy.ndarray, numpy.ndarray)\", \"short_description\": \"Generates a sine and cosine wave with the specified frequency and sample size.\"}"}
{"api_id": 77, "api_name": "math.pi", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"calculateArea\", \"type\": \"function\", \"signature\": \"(radius: float) -> float\", \"return_type\": \"float\", \"short_description\": \"Calculates the area of a circle given its radius.\"}"}
{"api_id": 78, "api_name": "math.floor", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"calculate_average_population\", \"type\": \"function\", \"signature\": \"(country_data)\", \"return_type\": \"float\", \"short_description\": \"Calculates the average population of countries provided in a dictionary.\"}"}
{"api_id": 78, "api_name": "math.floor", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"generatePopulationReport\", \"type\": \"function\", \"signature\": \"(jsonData, outputDir, fileName)\", \"return_type\": \"tuple(str, pd.DataFrame)\", \"short_description\": \"Generates a CSV report of country populations from JSON data and saves it to a specified directory.\"}"}
{"api_id": 78, "api_name": "math.floor", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"generate_population_report\", \"type\": \"function\", \"signature\": \"(json_data, output_dir='.', file_name='country_population_report.csv')\", \"return_type\": \"tuple(str, pd.DataFrame)\", \"short_description\": \"Generates a CSV report of country populations from JSON data and saves it to a specified directory.\"}"}
{"api_id": 78, "api_name": "math.floor", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"fetchPopulationData\", \"type\": \"function\", \"signature\": \"(json_data, output_dir, file_name)\", \"return_type\": \"tuple\", \"short_description\": \"Fetches and processes country population data from JSON, and saves it as a CSV file.\"}"}
{"api_id": 78, "api_name": "math.floor", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"generate_report\", \"type\": \"function\", \"signature\": \"(json_data, output_dir='.', file_name='country_population_report.csv')\", \"return_type\": \"tuple[str, pd.DataFrame]\", \"short_description\": \"Generates a CSV report from JSON data containing country population information, ensuring population data is integral and handles JSON decoding errors.\"}"}
{"api_id": 78, "api_name": "math.floor", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"generate_report\", \"type\": \"function\", \"signature\": \"(data, output_dir, file_name)\", \"return_type\": \"tuple(str, pd.DataFrame)\", \"short_description\": \"Generates a country population report in CSV format from JSON data and saves it to a specified directory. Returns the file path and the DataFrame representation of the data.\"}"}
{"api_id": 78, "api_name": "math.floor", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"convertToRoman\", \"type\": \"function\", \"signature\": \"(num)\", \"return_type\": \"str\", \"short_description\": \"Converts an integer to a Roman numeral string.\"}"}
{"api_id": 78, "api_name": "math.floor", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"calculate_average_population\", \"type\": \"function\", \"signature\": \"(country_data_dict)\", \"return_type\": \"float\", \"short_description\": \"Calculates the average population of countries in a given dictionary.\"}"}
{"api_id": 78, "api_name": "math.floor", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"calculate_population_stats\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistics for population data provided in a dictionary.\"}"}
{"api_id": 78, "api_name": "math.floor", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"generate_country_population_report\", \"type\": \"function\", \"signature\": \"(json_data, output_dir='.', file_name='country_population_report.csv')\", \"return_type\": \"tuple[str, pd.DataFrame]\", \"short_description\": \"Generates a CSV report of country populations from JSON data and saves it to a specified directory.\"}"}
{"api_id": 79, "api_name": "matplotlib.pyplot.savefig", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"generateWordFrequencyPlot\", \"type\": \"function\", \"signature\": \"(file_path, save_path=None)\", \"return_type\": \"None or plt object\", \"short_description\": \"Generates a bar plot of the top 10 most frequent words from a CSV file and optionally saves it to a specified path.\"}"}
{"api_id": 79, "api_name": "matplotlib.pyplot.savefig", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"generateWordFrequencyPlot\", \"type\": \"function\", \"signature\": \"(file_path, save_path=None)\", \"return_type\": \"None or plt object\", \"short_description\": \"Reads a CSV file, counts word frequencies, generates a plot, and optionally saves it to a specified path.\"}"}
{"api_id": 79, "api_name": "matplotlib.pyplot.savefig", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"generateWordFrequencyPlot\", \"type\": \"function\", \"signature\": \"(file_path, save_path=None)\", \"return_type\": \"None or matplotlib.axes._subplots.AxesSubplot\", \"short_description\": \"Generates a bar plot of the top 10 most frequent words from a given CSV file and optionally saves it to a specified path.\"}"}
{"api_id": 79, "api_name": "matplotlib.pyplot.savefig", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"generateWordFrequencyPlot\", \"type\": \"function\", \"signature\": \"(*args, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Generates a bar plot of the top 10 most frequent words from a given text dataset and optionally saves it to a file.\"}"}
{"api_id": 79, "api_name": "matplotlib.pyplot.savefig", "task_id": "BigCodeBench/1053", "solution": "{\n  \"name\": \"plot_word_frequency\",\n  \"type\": \"callable\",\n  \"signature\": \"(*, file_path, save_path=None)\",\n  \"return_type\": \"None or plt.Axes\",\n  \"short_description\": \"Generate a bar plot of the top 10 most frequent words from a given CSV file and optionally save it.\"\n}"}
{"api_id": 79, "api_name": "matplotlib.pyplot.savefig", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"generateWordFrequencyPlot\", \"type\": \"function\", \"signature\": \"(file_path, save_path=None)\", \"return_type\": \"None or matplotlib.axes._subplots.AxesSubplot\", \"short_description\": \"Reads a CSV file, counts word frequencies, generates a plot for the top 10 words, and optionally saves the plot to a specified path.\"}"}
{"api_id": 79, "api_name": "matplotlib.pyplot.savefig", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"generateWordFrequencyPlot\", \"type\": \"callable\", \"signature\": \"(file_path: str, save_path: str = None)\", \"return_type\": \"None or matplotlib.axes._subplots.AxesSubplot\", \"short_description\": \"Generates a bar plot of the top 10 most frequent words from a CSV file and optionally saves it to a specified path.\"}"}
{"api_id": 79, "api_name": "matplotlib.pyplot.savefig", "task_id": "BigCodeBench/1053", "solution": "{\n  \"name\": \"generate_word_frequency_plot\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, **kwargs)\",\n  \"return_type\": \"None or plt\",\n  \"short_description\": \"Generates a bar plot of the top 10 most frequent words from a CSV file and optionally saves the plot to a specified path.\"\n}"}
{"api_id": 79, "api_name": "matplotlib.pyplot.savefig", "task_id": "BigCodeBench/1053", "solution": "{\n  \"name\": \"generate_word_frequency_plot\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, **kwargs)\",\n  \"return_type\": \"None or matplotlib.Axes\",\n  \"short_description\": \"Generates a bar plot of the top 10 most frequent words from a given text file and optionally saves the plot to a specified path.\"\n}"}
{"api_id": 79, "api_name": "matplotlib.pyplot.savefig", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"generateWordFrequencyChart\", \"type\": \"function\", \"signature\": \"(*args, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Generates a bar chart of the top 10 most frequent words from a CSV file, optionally saving the chart to a specified path.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/92", "solution": "{\n  \"name\": \"createFigureWithClusters\",\n  \"type\": \"function\",\n  \"signature\": \"(data, n_clusters=3)\",\n  \"return_type\": \"Tuple[np.ndarray, plt.Axes]\",\n  \"short_description\": \"Creates a figure with scatter plots to visualize K-Means clustering results.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/92", "solution": "{\n  \"name\": \"create_scatter_plot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels=None, centroids=None, cmap='viridis', alpha=0.6, title='K-Means Clustering', xlabel='Feature 1', ylabel='Feature 2', marker='x', s=200, color='red', label1='Data points', label2='Centroids')\",\n  \"return_type\": \"tuple(fig, ax)\",\n  \"short_description\": \"Create a scatter plot to visualize K-Means clustering results, including data points and centroids.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/92", "solution": "{\n  \"name\": \"create_scatter_plot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, n_clusters=3, cmap='viridis', alpha=0.6, label_data='Data points', label_centroids='Centroids')\",\n  \"return_type\": \"tuple(labels, ax)\",\n  \"short_description\": \"Creates a scatter plot to visualize K-Means clustering results, including data points and centroids.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/92", "solution": "{\n  \"name\": \"plotKMeans\",\n  \"type\": \"function\",\n  \"signature\": \"(data, n_clusters=3)\",\n  \"return_type\": \"tuple(labels, ax)\",\n  \"short_description\": \"Creates a scatter plot to visualize K-Means clustering results, including data points and centroids.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/92", "solution": "{\n  \"name\": \"create_scatter_plot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, n_clusters=3)\",\n  \"return_type\": \"tuple[numpy.ndarray, matplotlib.axes.Axes]\",\n  \"short_description\": \"Creates a scatter plot to visualize K-Means clustering results, including data points and centroids.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/92", "solution": "{\n  \"name\": \"plotKMeans\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, n_clusters=3)\",\n  \"return_type\": \"Tuple[np.ndarray, matplotlib.axes.Axes]\",\n  \"short_description\": \"Generates a scatter plot to visualize K-Means clustering results, including data points and centroids, using matplotlib.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/92", "solution": "{\n  \"name\": \"create_scatter_plot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, x_col, y_col, title='', x_label='', y_label='', cmap='viridis', alpha=0.6, marker='o', s=100, legend=True, centroids=False)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a scatter plot with optional centroids to visualize clustering results.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/92", "solution": "{\n  \"name\": \"create_scatter_plot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, n_clusters=3)\",\n  \"return_type\": \"tuple[list, matplotlib.axes.Axes]\",\n  \"short_description\": \"Create a scatter plot to visualize K-Means clustering results.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/92", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, n_clusters=3, cmap='viridis', alpha=0.6, label_data='Data points', label_centroids='Centroids', title='K-Means Clustering', xlabel='Feature 1', ylabel='Feature 2')\",\n  \"return_type\": \"tuple(labels, ax)\",\n  \"short_description\": \"Generates a scatter plot for K-Means clustering results, including centroids, with customizable labels and title.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/92", "solution": "{\"name\": \"createPlot\", \"type\": \"function\", \"signature\": \"(data, n_clusters=3)\", \"return_type\": \"tuple[list, matplotlib.axes.Axes]\", \"short_description\": \"Creates a scatter plot to visualize K-Means clustering results.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/93", "solution": "{\n  \"name\": \"createFigureWithPCA\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, n_components=2)\",\n  \"return_type\": \"tuple(pd.DataFrame, plt.Axes)\",\n  \"short_description\": \"Creates a figure with a scatter plot of the first two principal components of the given data.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/93", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(data, n_components=2)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a figure with a scatter plot of PCA transformed data.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/93", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"Object\",\n  \"short_description\": \"Create a figure and a set of subplots with customizable options.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/93", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, n_components=2)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a scatter plot using PCA transformation of the given data.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/93", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a figure and a set of subplots.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/93", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"fig: Figure, ax: Axes or array of Axes\",\n  \"short_description\": \"Create a figure and a set of subplots. This utility wrapper makes it convenient to create common layouts of subplots, including the enclosing figure object, in a single call.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/93", "solution": "{\n  \"name\": \"createFigureWithPCA\",\n  \"type\": \"function\",\n  \"signature\": \"(data, n_components=2)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a figure with a scatter plot of the first two principal components of the given data.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/93", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"Object\",\n  \"short_description\": \"Create a figure and a set of subplots, with a focus on flexibility and configurability.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/93", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(data, n_components=2)\",\n  \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\",\n  \"short_description\": \"Creates a figure and a set of subplots to visualize PCA results.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/93", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"Object\",\n  \"short_description\": \"Create a figure and a set of subplots. This utility wrapper makes it convenient to create common layouts of subplots, including the enclosing figure object, in a single call.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"createFigureAndSubplots\", \"type\": \"callable\", \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\", \"return_type\": \"Figure\", \"short_description\": \"Create a figure and a set of subplots. This utility wrapper makes it convenient to create common layouts of subplots, including the enclosing figure object, in a single call.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"createSubplots\", \"type\": \"function\", \"signature\": \"(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\", \"return_type\": \"Figure, Axes or array of Axes\", \"short_description\": \"Create a figure and a set of subplots with customizable options.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"createPlot\", \"type\": \"function\", \"signature\": \"(data, labels, title, legend, xlabel, ylabel)\", \"return_type\": \"figure\", \"short_description\": \"Creates a plot with given data, labels, title, legend, and axis labels.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"createPlot\", \"type\": \"function\", \"signature\": \"(data, labels, title, legend, xlabel, ylabel)\", \"return_type\": \"figure\", \"short_description\": \"Creates a plot with given data, labels, title, legend, x-axis label, and y-axis label.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/100", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Create a figure and a set of subplots. This function provides a convenient way to create common layouts of subplots, including the enclosing figure object, in a single call. It returns a tuple containing the figure and the array of axes.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"createFigure\", \"type\": \"callable\", \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\", \"return_type\": \"Figure\", \"short_description\": \"Create a figure and a set of subplots. This utility wrapper makes it convenient to create common layouts of subplots, including the enclosing figure object, in a single call.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"createPlotFigure\", \"type\": \"callable\", \"signature\": \"(fig_kw=None)\", \"return_type\": \"fig, ax\", \"short_description\": \"Creates a figure and a single subplot with default settings. This utility wrapper makes it convenient to create a common layout of subplots in a single call, encapsulating the figure and axes objects for easy access and customization.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/100", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"fig : `.Figure`, ax : `~.axes.Axes` or array of Axes\",\n  \"short_description\": \"Create a figure and a set of subplots, providing a high-level interface for creating common layouts.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/100", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Create a figure and a set of subplots. This utility wrapper makes it convenient to create common layouts of subplots, including the enclosing figure object, in a single call.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/100", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, labels, title, legend_labels, xlabel=None, ylabel=None, fig_size=(8, 6), dpi=100, seed=None)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a plot with the provided data, labels, title, and legend labels. Customizes the plot with optional parameters for x and y labels, figure size, DPI, and random seed for reproducibility.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/124", "solution": "{\n  \"name\": \"generatePlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, title='Default Plot', xlabel='X', ylabel='Y', bins=20, seed=None)\",\n  \"return_type\": \"tuple[matplotlib.figure.Figure, matplotlib.axes._subplots.AxesSubplot]\",\n  \"short_description\": \"Generates a histogram plot from the provided data and customizes it with title, x-axis label, y-axis label, number of bins, and a seed for reproducibility.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/124", "solution": "{\n  \"name\": \"createFigureAndSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a figure and a set of subplots with customizable options.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/124", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, title='Default Title', xlabel='', ylabel='', bins=20)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a histogram plot from the provided data and optionally customizes the plot with a title and axis labels.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/124", "solution": "{\n  \"name\": \"createFigureWithHistogram\",\n  \"type\": \"function\",\n  \"signature\": \"(data, bins=20, title='Histogram of Data', xlabel='Value', ylabel='Frequency')\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a figure with a histogram of the provided data and returns the figure and the axes object.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/124", "solution": "{\n  \"name\": \"createFigureWithHistogram\",\n  \"type\": \"function\",\n  \"signature\": \"(data, bins=20, title='Histogram of Random Numbers', xlabel='Number', ylabel='Frequency')\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a figure with a histogram of the provided data.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/124", "solution": "{\n  \"name\": \"create_histogram\",\n  \"type\": \"function\",\n  \"signature\": \"(data, bins=10, fig_kw={})\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a histogram from the provided data using matplotlib and returns the elapsed time and the histogram plot.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"createSubplots\", \"type\": \"function\", \"signature\": \"(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\", \"return_type\": \"Object\", \"short_description\": \"Creates a figure and a set of subplots with customizable options.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/124", "solution": "{\n  \"name\": \"createMatplotlibFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Create a figure and a set of subplots.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/124", "solution": "{\n  \"name\": \"generateRandomPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, size=100, seed=100)\",\n  \"return_type\": \"tuple[float, matplotlib.axes.Axes]\",\n  \"short_description\": \"Generates a histogram plot of random numbers from the provided data list and returns the execution time and the Axes object.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/124", "solution": "{\n  \"name\": \"createFigureAndSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"object\",\n  \"short_description\": \"Creates a figure and a set of subplots with customizable options.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/139", "solution": "{\n  \"name\": \"createSubplotsForHistograms\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe, title=None, xlabel=None, ylabel=None, bins=10, figsize=(10, 7))\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Creates a figure with subplots for histograms of numeric columns in a pandas DataFrame. Each subplot represents a histogram of a numeric column.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/139", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Create a figure and a set of subplots.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/139", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(numRows=1, numCols=1, shareX=False, shareY=False, squeeze=True, widthRatios=None, heightRatios=None, subplotKw=None, gridspecKw=None, **figKw)\",\n  \"return_type\": \"Object\",\n  \"short_description\": \"Creates a figure and a set of subplots with customizable options.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/139", "solution": "{\n  \"name\": \"createPlotGrid\",\n  \"type\": \"function\",\n  \"signature\": \"(data, nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True, subplot_kw=None, **fig_kw)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a figure with a grid of subplots displaying histograms for each numeric column in the given DataFrame.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/139", "solution": "{\n  \"name\": \"plotNumericHistograms\",\n  \"type\": \"function\",\n  \"signature\": \"(df)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Creates a set of histograms for each numeric column in a given pandas DataFrame.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/139", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(numRows=1, numCols=1, shareX=False, shareY=False, squeeze=True, widthRatios=None, heightRatios=None, subplotKw=None, gridspecKw=None, **figKw)\",\n  \"return_type\": \"tuple(Figure, array_of_Axes)\",\n  \"short_description\": \"Creates a figure and a set of subplots with customizable options.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/139", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(fig_kw=None)\",\n  \"return_type\": \"tuple(Figure, Axes)\",\n  \"short_description\": \"Creates a figure and a set of subplots with default settings. This utility wrapper makes it convenient to create common layouts of subplots, including the enclosing figure object, in a single call.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/139", "solution": "{\n  \"name\": \"generateSubplotGrid\",\n  \"type\": \"function\",\n  \"signature\": \"(data, title=None, xLabel=None, yLabel=None)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a grid of subplots from the provided data, allowing for customization of titles and axis labels.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/139", "solution": "{\n  \"name\": \"createSubplotsForHistograms\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"fig: '.Figure', ax: 'array of Axes'\",\n  \"short_description\": \"Creates a figure and a set of subplots, each displaying a histogram of the numeric columns in the provided DataFrame.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/139", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a figure and a set of subplots. This utility wrapper makes it convenient to create common layouts of subplots, including the enclosing figure object, in a single call.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/162", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"callable\",\n  \"signature\": \"(text, rwidth=0.8)\",\n  \"return_type\": \"ax\",\n  \"short_description\": \"Creates a histogram of word lengths from a given text.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/162", "solution": "{\n  \"name\": \"createPlotFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, title='Default Title', xLabel='', yLabel='', bins=None, rwidth=0.8, fig_num=None, clear=False)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a plot figure with histogram based on the provided data. Customize the figure with title, x-axis label, y-axis label, bin specifications, and more.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/162", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"object\",\n  \"short_description\": \"Creates a figure and a set of subplots with customizable options.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/162", "solution": "{\n  \"name\": \"createFigureWithHistogram\",\n  \"type\": \"function\",\n  \"signature\": \"(text, rwidth=0.8)\",\n  \"return_type\": \"Axes\",\n  \"short_description\": \"Creates a figure with a histogram of word lengths from a given text.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/162", "solution": "{\n  \"name\": \"createPlotFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(title='Plot', xLabel='', yLabel='', rwidth=0.8)\",\n  \"return_type\": \"tuple[Figure, Axes]\",\n  \"short_description\": \"Creates a figure with a single subplot and sets its title and axis labels.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/162", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"callable\",\n  \"signature\": \"(text, rwidth=0.8)\",\n  \"return_type\": \"ax\",\n  \"short_description\": \"Creates a histogram plot based on the word lengths in the provided text.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/162", "solution": "{\n  \"name\": \"plotWordLengths\",\n  \"type\": \"function\",\n  \"signature\": \"(text, rwidth=0.8)\",\n  \"return_type\": \"ax\",\n  \"short_description\": \"Plots a histogram of word lengths from a given text.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/162", "solution": "{\n  \"name\": \"plotWordLengthHistogram\",\n  \"type\": \"function\",\n  \"signature\": \"(text, rwidth=0.8)\",\n  \"return_type\": \"ax\",\n  \"short_description\": \"Creates a histogram to display the distribution of word lengths in a given text.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/162", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, rwidth=0.8, title='Distribution of Word Lengths', xlabel='Word Length', ylabel='Frequency')\",\n  \"return_type\": \"ax : `~.axes.Axes`\",\n  \"short_description\": \"Create a histogram to visualize the distribution of word lengths from a given text.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/162", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(text, rwidth=0.8)\",\n  \"return_type\": \"ax\",\n  \"short_description\": \"Creates a histogram of word lengths from a given text.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/214", "solution": "{\n  \"name\": \"createRandomImageWithPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(image_size=(100, 100, 3), range_low=0, range_high=255)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a random RGB image and displays it using matplotlib subplot.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/214", "solution": "{\n  \"name\": \"createRandomImage\",\n  \"type\": \"function\",\n  \"signature\": \"(size=(100, 100, 3), low=0, high=255)\",\n  \"return_type\": \"tuple(np.ndarray, plt.Axes)\",\n  \"short_description\": \"Generates a random image of specified size with pixel values in the range [low, high] and displays it using matplotlib.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/214", "solution": "{\n  \"name\": \"createRandomImage\",\n  \"type\": \"function\",\n  \"signature\": \"(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255)\",\n  \"return_type\": \"tuple(numpy.ndarray, matplotlib.axes._subplots.AxesSubplot)\",\n  \"short_description\": \"Generates a random RGB image and displays it using a new Matplotlib subplot.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/214", "solution": "{\n  \"name\": \"createRandomImage\",\n  \"type\": \"function\",\n  \"signature\": \"(size=(100, 100, 3), low=0, high=255)\",\n  \"return_type\": \"tuple(np.ndarray, plt.Axes)\",\n  \"short_description\": \"Generates a random RGB image and displays it using Matplotlib.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/214", "solution": "{\n  \"name\": \"createRandomImage\",\n  \"type\": \"function\",\n  \"signature\": \"(size=(100, 100, 3), low=0, high=255)\",\n  \"return_type\": \"tuple(np.ndarray, plt.Axes)\",\n  \"short_description\": \"Generates a random image of specified size with pixel values in the given range and displays it using matplotlib.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/214", "solution": "{\n  \"name\": \"createRandomRGBImage\",\n  \"type\": \"function\",\n  \"signature\": \"(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a random RGB image and displays it using matplotlib.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/214", "solution": "{\n  \"name\": \"createRandomImage\",\n  \"type\": \"function\",\n  \"signature\": \"(size=(100, 100, 3), low=0, high=255)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a random RGB image with the specified size and pixel value range.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/214", "solution": "{\n  \"name\": \"createRandomImage\",\n  \"type\": \"function\",\n  \"signature\": \"(size=(100, 100, 3), low=0, high=255)\",\n  \"return_type\": \"tuple(numpy.ndarray, matplotlib.figure.Figure)\",\n  \"short_description\": \"Generates a random image of specified size with pixel values in the given range and displays it using matplotlib.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/214", "solution": "{\n  \"name\": \"createRandomImage\",\n  \"type\": \"function\",\n  \"signature\": \"(size=(100, 100, 3), low=0, high=255)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a random image of specified size with pixel values in the given range.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/214", "solution": "{\n  \"name\": \"createRandomImageWithPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(image_size=(100, 100, 3), range_low=0, range_high=255)\",\n  \"return_type\": \"tuple(ax, image)\",\n  \"short_description\": \"Creates a random image of specified size with random pixel values within a given range and displays it using matplotlib.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"createFigureWithStatistics\",\n  \"type\": \"function\",\n  \"signature\": \"(data, title='Statistics Plot', xLabel='X-axis', yLabel='Y-axis', bins='auto')\",\n  \"return_type\": \"tuple[matplotlib.figure.Figure, matplotlib.axes.Axes]\",\n  \"short_description\": \"Creates a figure with a histogram and a PDF plot based on the provided data, including descriptive statistics.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"createFigureAndSubplots\",\n  \"type\": \"callable\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"Figure, Axes\",\n  \"short_description\": \"Create a figure and a set of subplots. This utility wrapper makes it convenient to create common layouts of subplots, including the enclosing figure object, in a single call.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"createFigureWithSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"Object\",\n  \"short_description\": \"Create a figure and a set of subplots. This function provides a convenient way to create common layouts of subplots, including the enclosing figure object, in a single call.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"createFigureAndSubplots\",\n  \"type\": \"callable\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"{\\'fig\\': \\'.Figure\\', \\'ax\\': \\'.Axes\\' or array of Axes}\",\n  \"short_description\": \"Create a figure and a set of subplots. This utility wrapper makes it convenient to create common layouts of subplots, including the enclosing figure object, in a single call.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"createFigureWithSubplots\",\n  \"type\": \"callable\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Create a figure and a set of subplots with specified parameters.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"createFigureAndSubplots\", \"type\": \"function\", \"signature\": \"(figSize=(8, 6), nRows=1, nCols=1, shareX=False, shareY=False, squeeze=True, subplotKw={}, gridspecKw={}, figKw={})\", \"return_type\": \"tuple(Figure, array_of_Axes)\", \"short_description\": \"Creates a figure and a grid of subplots with customizable options for sharing axes, squeezing, and additional keyword arguments for figure and subplots.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"Object\",\n  \"short_description\": \"Create a figure and a set of subplots with customizable options.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"createInteractivePlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, title='Interactive Plot', xlabel='X-axis', ylabel='Y-axis', bins='auto')\",\n  \"return_type\": \"tuple(Figure, Axes)\",\n  \"short_description\": \"Creates an interactive plot with a histogram and a PDF overlay based on the provided data.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"createFigureAndSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"object\",\n  \"short_description\": \"Create a figure and a set of subplots. This utility wrapper makes it convenient to create common layouts of subplots, including the enclosing figure object, in a single call.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"createFigureAndSubplots\",\n  \"type\": \"callable\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"fig: `.Figure`, ax: `~.axes.Axes` or array of Axes\",\n  \"short_description\": \"Create a figure and a set of subplots with customizable options.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/241", "solution": "{\n  \"name\": \"plotNormalizedData\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, title)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Plots the original and normalized data on a single graph, with labels and a title.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/241", "solution": "{\"name\": \"createPlot\", \"type\": \"function\", \"signature\": \"(data, labels=None, title=None, legend=True)\", \"return_type\": \"tuple\", \"short_description\": \"Creates a plot with the provided data and optional labels, title, and legend.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/241", "solution": "{\n  \"name\": \"plotNormalizedData\",\n  \"type\": \"function\",\n  \"signature\": \"(arr, label='Original', normalized_label='Normalized', title='Original vs. Normalized Data')\",\n  \"return_type\": \"fig, ax\",\n  \"short_description\": \"Plots the original and normalized data arrays on a single subplot for comparison.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/241", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, title)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a plot with the provided data and labels, with an optional title.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/241", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, labels=None, title=None, xlabel=None, ylabel=None, legend=False, show=True)\",\n  \"return_type\": \"Figure, Axes\",\n  \"short_description\": \"Creates a plot with the given data, optionally with labels, title, and legend. The plot can be displayed or returned.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/241", "solution": "{\n  \"name\": \"generatePlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, title)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a simple plot with the provided data and labels, and sets the title of the plot.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/241", "solution": "{\"name\": \"createPlot\", \"type\": \"callable\", \"signature\": \"(data, labels=None, title=None, legend=True)\", \"return_type\": \"fig, ax\", \"short_description\": \"Creates a figure and a plot with optional data, labels, title, and legend.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/241", "solution": "{\n  \"name\": \"plotNormalizedData\",\n  \"type\": \"function\",\n  \"signature\": \"(original)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Plots original and normalized data side by side for visual comparison.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/241", "solution": "{\n  \"name\": \"generatePlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, title, xLabel, yLabel)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a plot from the provided data with a title and axis labels.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/241", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, title)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a simple plot with original and normalized data.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/267", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, sample_rate=8000)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a plot based on the provided data, using a sine signal and Fast Fourier Transform (FFT).\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/267", "solution": "{\n  \"name\": \"plotSignalFFT\",\n  \"type\": \"function\",\n  \"signature\": \"(signal, sample_rate=8000)\",\n  \"return_type\": \"tuple(fig, ax)\",\n  \"short_description\": \"Plots the FFT of a given signal with a specified sample rate.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/267", "solution": "{\n  \"name\": \"plotFFT\",\n  \"type\": \"function\",\n  \"signature\": \"(signal, sample_rate=8000)\",\n  \"return_type\": \"tuple(numpy.ndarray, matplotlib.axes.Axes)\",\n  \"short_description\": \"Plots the Fast Fourier Transform (FFT) of a given signal with a specified sample rate.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/267", "solution": "{\n  \"name\": \"plotFFT\",\n  \"type\": \"function\",\n  \"signature\": \"(signal, sample_rate=8000)\",\n  \"return_type\": \"tuple(fig, ax)\",\n  \"short_description\": \"Plots the Fast Fourier Transform (FFT) of a given signal with a specified sample rate.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/267", "solution": "{\n  \"name\": \"createFigureWithSubplots\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, sample_rate=8000, figsize=(12, 6))\",\n  \"return_type\": \"tuple(fig, axs)\",\n  \"short_description\": \"Creates a figure with subplots based on the data provided, with a specified sample rate and figure size.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"createPlot\", \"type\": \"function\", \"signature\": \"(data, sample_rate=8000)\", \"return_type\": \"Tuple[np.ndarray, plt.Axes]\", \"short_description\": \"Creates a plot based on the given data and sample rate. This function is designed to generate a visual representation of the data using FFT and display it in a subplot.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"plotSignalFFT\", \"type\": \"function\", \"signature\": \"(signal, sample_rate=8000)\", \"return_type\": \"tuple\", \"short_description\": \"Plots the FFT of a given signal with a specified sample rate.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"plotSignalFFT\", \"type\": \"function\", \"signature\": \"(data, sample_rate=8000)\", \"return_type\": \"tuple(numpy.ndarray, matplotlib.axes.Axes)\", \"short_description\": \"Plots the FFT of a given signal.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/267", "solution": "{\n  \"name\": \"generatePlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, sample_rate=8000)\",\n  \"return_type\": \"Tuple[Any, Any]\",\n  \"short_description\": \"Generates a plot based on the provided data using a sine wave signal and Fast Fourier Transform (FFT).\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/267", "solution": "{\n  \"name\": \"createFigureWithSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(data, sample_rate=8000)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a figure with subplots based on the data provided. Each subplot represents a different signal from the data.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"plotDataDistribution\",\n  \"type\": \"function\",\n  \"signature\": \"(df, col)\",\n  \"return_type\": \"tuple(fig, axes)\",\n  \"short_description\": \"Creates a figure and a set of subplots to visualize the distribution of data in a specified column of a DataFrame.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"createFigureWithSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(dataFrame, columns, plotTypes)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a figure with subplots to visualize the distribution and relationships in a DataFrame.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"createSubplots\", \"type\": \"function\", \"signature\": \"(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\", \"return_type\": \"Figure, Axes\", \"short_description\": \"Create a figure and a set of subplots with customizable options.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"createFigureWithCustomLayout\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe, columns, plot_types)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a figure with a custom layout of subplots based on the provided dataframe and columns, with specified plot types for each subplot.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"callable\",\n  \"signature\": \"(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"Figure, Axes\",\n  \"short_description\": \"Create a figure and a set of subplots with various options to control the layout and sharing of axes.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"createPlotGrid\", \"type\": \"function\", \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, subplot_kw=None, gridspec_kw=None, **fig_kw)\", \"return_type\": \"Figure, array of Axes\", \"short_description\": \"Create a figure and a grid of subplots with customizable options.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"createFigureWithPlots\",\n  \"type\": \"function\",\n  \"signature\": \"(df, col)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a figure with subplots for visualizing the distribution of a specified column in a DataFrame.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"create_plot_grid\",\n  \"type\": \"callable\",\n  \"signature\": \"(rows, cols, data, plot_types)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a grid of plots from a DataFrame based on specified plot types for each column.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"plotWithAnalysis\",\n  \"type\": \"function\",\n  \"signature\": \"(df, col)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a figure with two subplots: one for histogram/count plot and one for boxplot/strip plot, based on the type of data in the specified column.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"create_custom_plots\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe, columns, plot_types)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates custom plots for a given DataFrame and specified columns, using a combination of matplotlib and seaborn functionalities.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/360", "solution": "{\n  \"name\": \"createSummaryPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe, title)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a summary plot for each column in the given DataFrame, showing the mean and standard deviation of each column's values. The plot includes error bars representing the standard deviation.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"createPlotOfMeansAndStds\", \"type\": \"callable\", \"signature\": \"(dataframe, *, title='Mean and Standard Deviation', xlabel='Columns', ylabel='Values')\", \"return_type\": \"tuple\", \"short_description\": \"Generates a plot of the mean and standard deviation for each column in the given DataFrame.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"createPlot\", \"type\": \"function\", \"signature\": \"(data, titles)\", \"return_type\": \"tuple\", \"short_description\": \"Creates a plot from the given data with titles for each plot.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/360", "solution": "{\n  \"name\": \"createSummaryFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe, title)\",\n  \"return_type\": \"tuple[Figure, Axes]\",\n  \"short_description\": \"Creates a summary figure with bars representing the mean and error bars for the standard deviation of each column in the provided DataFrame.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/360", "solution": "{\n  \"name\": \"create_summary_figure\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe, title='Summary Statistics', xlabel='Columns', ylabel='Values')\",\n  \"return_type\": \"Tuple[Dict[str, Dict[str, float]], Figure]\",\n  \"short_description\": \"Creates a figure summarizing mean and standard deviation for each column in the given DataFrame.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/360", "solution": "{\n  \"name\": \"generateBarCharts\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe, title='Mean and Standard Deviation', xlabel='Columns', ylabel='Values')\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates bar charts for the mean and standard deviation of each column in the given DataFrame.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/360", "solution": "{\n  \"name\": \"plotStatistics\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe, title='Mean and Standard Deviation', xlabel='Columns', ylabel='Values')\",\n  \"return_type\": \"tuple(dict, Figure)\",\n  \"short_description\": \"Generates a bar plot of mean and standard deviation for each column in the given DataFrame, along with a dictionary containing the statistics.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"generatePlotStatistics\", \"type\": \"function\", \"signature\": \"(dataframe, plotType='bar', title='Default Title', xlabel='X Axis', ylabel='Y Axis')\", \"return_type\": \"tuple\", \"short_description\": \"Generates a plot with statistics (mean and standard deviation) for each column in the given DataFrame. Supports various plot types.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"generateStatisticsPlots\", \"type\": \"function\", \"signature\": \"(dataframe, title='Mean and Standard Deviation', xlabel='Columns', ylabel='Values')\", \"return_type\": \"tuple\", \"short_description\": \"Generates a plot of mean and standard deviation for each column in a DataFrame.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/360", "solution": "{\n  \"name\": \"createPlotWithStatistics\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe, title='Mean and Standard Deviation', xlabel='Columns', ylabel='Values')\",\n  \"return_type\": \"Tuple[Dict[str, Dict[str, float]], plt.Figure]\",\n  \"short_description\": \"Creates a plot with mean and standard deviation for each column in the given DataFrame, and returns the statistics and the figure.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/367", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, title='Default Title', xlabel='', ylabel='')\",\n  \"return_type\": \"Figure, Axes\",\n  \"short_description\": \"Creates a plot from provided data with customizable title and labels.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/367", "solution": "{\n  \"name\": \"plotWeeklyActivity\",\n  \"type\": \"function\",\n  \"signature\": \"(activities)\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Creates a bar plot showing the number of activities per day of the week.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/367", "solution": "{\"name\": \"plotWeeklyActivity\", \"type\": \"callable\", \"signature\": \"(activities)\", \"return_type\": \"ax\", \"short_description\": \"Plots a bar chart representing the number of activities per day of the week for a given list of activities.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/367", "solution": "{\n  \"name\": \"generateWeeklyActivityChart\",\n  \"type\": \"function\",\n  \"signature\": \"(activities)\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Generates a bar chart showing the number of activities per day of the week.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/367", "solution": "{\n  \"name\": \"plotWeeklyActivity\",\n  \"type\": \"function\",\n  \"signature\": \"(activities)\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Creates a bar plot to display the number of activities per day of the week.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/367", "solution": "{\n  \"name\": \"plotActivityWeek\",\n  \"type\": \"function\",\n  \"signature\": \"(activities)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a bar chart showing the number of activities per day of the week.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/367", "solution": "{\n  \"name\": \"plotWeeklyActivity\",\n  \"type\": \"function\",\n  \"signature\": \"(activities)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a bar chart displaying the number of activities per day of the week.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/367", "solution": "{\"name\": \"plotWeeklyActivity\", \"type\": \"function\", \"signature\": \"(activities)\", \"return_type\": \"Axes\", \"short_description\": \"Generates a bar plot showing the number of activities per day of the week for a given list of datetime objects.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/367", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(activities)\",\n  \"return_type\": \"tuple[Figure, Axes]\",\n  \"short_description\": \"Creates a bar chart to visualize the number of activities per day of the week.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/367", "solution": "{\"name\": \"createWeeklyActivityChart\", \"type\": \"function\", \"signature\": \"(activities)\", \"return_type\": \"Axes\", \"short_description\": \"Creates a bar chart showing the number of activities per day of the week.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"createFigureWithSineAndCosine\",\n  \"type\": \"function\",\n  \"signature\": \"(frequency, sample_size=10000)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a figure with two subplots, one for sine and one for cosine functions.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"createPlotFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(title='', xlabel='', ylabel='', xlim=None, ylim=None, legend_labels=None, frequency=1, sample_size=10000)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a plot figure with sine and cosine waves, optionally with a specified title, x-axis label, y-axis label, and legend labels.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(frequency, sample_size=10000)\",\n  \"return_type\": \"tuple(Figure, Axes)\",\n  \"short_description\": \"Creates a plot with sine and cosine waves based on the given frequency and sample size.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"createPlotFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(frequency, sample_size=10000)\",\n  \"return_type\": \"tuple(fig, ax)\",\n  \"short_description\": \"Creates a plot figure with sine and cosine curves based on the given frequency and sample size.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"createPlotFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(frequency, sample_size=10000)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a plot figure with sine and cosine waves based on the given frequency and sample size.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(frequency, sample_size=10000)\",\n  \"return_type\": \"tuple(Figure, Axes)\",\n  \"short_description\": \"Creates a plot with sine and cosine waves based on the given frequency and sample size.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"create_plot\",\n  \"type\": \"callable\",\n  \"signature\": \"(frequency, sample_size=10000)\",\n  \"return_type\": \"tuple(fig, ax)\",\n  \"short_description\": \"Creates a plot with sine and cosine waves based on the given frequency and sample size.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"createFigureWithSinesAndCosines\",\n  \"type\": \"function\",\n  \"signature\": \"(frequency, sample_size=10000)\",\n  \"return_type\": \"tuple(Figure, Axes)\",\n  \"short_description\": \"Creates a figure with a subplot containing plots of sine and cosine functions based on the given frequency and sample size.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"createFigureWithSinesAndCosines\",\n  \"type\": \"function\",\n  \"signature\": \"(frequency, sample_size=10000)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a figure with subplots displaying the sine and cosine functions of a given frequency over a specified sample size.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"createPlotWithSignals\",\n  \"type\": \"function\",\n  \"signature\": \"(frequency, sample_size=10000)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a plot with sine and cosine signals based on the given frequency and sample size.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createSubplots\", \"type\": \"function\", \"signature\": \"(title=None, xLabel=None, yLabel=None, legendLabels=[], loc='upper left')\", \"return_type\": \"figure\", \"short_description\": \"Creates a figure with a set of subplots and optionally adds a title, labels, and a legend.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/417", "solution": "{\n  \"name\": \"create_subplots\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, title=None, xlabel=None, ylabel=None, legend_labels=None)\",\n  \"return_type\": \"figure\",\n  \"short_description\": \"Creates a figure with a line plot using the provided data and labels, with optional title, x-axis label, y-axis label, and legend labels.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"generateSubplots\", \"type\": \"function\", \"signature\": \"(data, labels, title='', xLabel='', yLabel='')\", \"return_type\": \"figure\", \"short_description\": \"Generates a figure with subplots to visualize data and labels. Useful for plotting metrics or results from machine learning models.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createAndPlotModel\", \"type\": \"function\", \"signature\": \"(model, history)\", \"return_type\": \"tuple\", \"short_description\": \"Creates and trains a simple neural network model, plots its training and validation loss, and returns the model and the plot axes.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createFigureWithModelTrainingPlot\", \"type\": \"function\", \"signature\": \"(model, history, title='Model Loss', xLabel='Epoch', yLabel='Loss', legendLoc='upper left')\", \"return_type\": \"tuple(fig, ax)\", \"short_description\": \"Creates a figure with a plot of the training and validation loss of a given model, based on its training history. The plot includes a title and labels for the axes, and a legend indicating the source of each data series.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/417", "solution": "{\n  \"name\": \"createTrainingVisualization\",\n  \"type\": \"function\",\n  \"signature\": \"(model, history, title='Model Loss', ylabel='Loss', xlabel='Epoch', legendLabels=['Train', 'Test'], loc='upper left')\",\n  \"return_type\": \"tuple(Figure, Axes)\",\n  \"short_description\": \"Creates a training loss visualization for a given model and history object.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createFigureAndPlot\", \"type\": \"function\", \"signature\": \"(data, labels, title, xLabel, yLabel)\", \"return_type\": \"tuple(Figure, Axes)\", \"short_description\": \"Creates a figure and a plot from given data and labels, with optional title and axis labels.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/417", "solution": "{\n  \"name\": \"generatePlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, title, xLabel, yLabel)\",\n  \"return_type\": \"Figure, Axes\",\n  \"short_description\": \"Generates a simple line plot with the given data and labels.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"createFigureAndSubplots\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"Figure, Axes\", \"short_description\": \"Creates a figure with one or more subplots, allowing for customization of layout and sharing axes among subplots.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"plotTrainingHistory\", \"type\": \"function\", \"signature\": \"(history, title='Model Loss', ylabel='Loss', xlabel='Epoch', legendLabels=['Train', 'Test'], loc='upper left')\", \"return_type\": \"Figure, Axes\", \"short_description\": \"Plots the training and validation loss from a Keras history object.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"create_plot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, title='ROC Curve', xlabel='False positive rate', ylabel='True positive rate')\",\n  \"return_type\": \"tuple(Figure, Axes)\",\n  \"short_description\": \"Create a ROC curve plot from binary classification data.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"create_plot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, title='ROC Curve', xlabel='False Positive Rate', ylabel='True Positive Rate')\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Creates a ROC curve plot from given data and labels.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"plot_roc_curve\",\n  \"type\": \"function\",\n  \"signature\": \"(y_true, y_pred, *, title='ROC Curve', legend_label='AUC = {:.3f}', legend_loc='best')\",\n  \"return_type\": \"tuple(Figure, Axes)\",\n  \"short_description\": \"Plots the ROC curve and calculates the AUC score.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"generate_roc_curve\",\n  \"type\": \"function\",\n  \"signature\": \"(y_true, y_score, *, plot=True, title='ROC Curve', xlabel='False Positive Rate', ylabel='True Positive Rate', legend_label='AUC = {:.3f}', legend_loc='best')\",\n  \"return_type\": \"Tuple[Figure, Axes]\",\n  \"short_description\": \"Generates a Receiver Operating Characteristic (ROC) curve and plots it. Optionally returns the figure and axes objects for further customization.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"plot_roc_curve\",\n  \"type\": \"function\",\n  \"signature\": \"(y_true, y_pred, *, plot=True, title='ROC Curve', ax=None)\",\n  \"return_type\": \"Axes or tuple(Figure, Axes)\",\n  \"short_description\": \"Plots the ROC curve and calculates the AUC score. Returns the Axes object if plotting is enabled, otherwise returns a tuple containing the Figure and Axes objects.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"create_figure_with_roc_curve\",\n  \"type\": \"function\",\n  \"signature\": \"(y_true, y_pred, *, title='ROC Curve', legend_label='AUC = {:.3f}', xlabel='False positive rate', ylabel='True positive rate', legend_loc='best')\",\n  \"return_type\": \"tuple[Figure, Axes]\",\n  \"short_description\": \"Create a figure with a plot of the ROC curve given true labels and predicted probabilities.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"create_figure_and_plot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, plot_type='roc', **kwargs)\",\n  \"return_type\": \"tuple(Figure, Axes)\",\n  \"short_description\": \"Create a figure and plot the given data using the specified plot type. Supports ROC curves and more plot types can be added via kwargs.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"plot_roc_curve\",\n  \"type\": \"function\",\n  \"signature\": \"(y_true, y_score, *, plot_title='ROC Curve', legend_label='AUC = {:.3f}', ax=None, figsize=(8, 6))\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Plots the ROC curve and calculates the AUC score. Returns None.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"generate_roc_curve\",\n  \"type\": \"function\",\n  \"signature\": \"(y_true, y_pred, *, plot=True)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Generates a ROC curve and computes the AUC score. Returns the ROC curve data and the AUC score.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"plotROC\", \"type\": \"function\", \"signature\": \"(y_true, y_pred, *, title='ROC curve', legend_label='AUC = {:.3f}', legend_loc='best')\", \"return_type\": \"tuple\", \"short_description\": \"Plots a Receiver Operating Characteristic (ROC) curve and calculates the Area Under the Curve (AUC).\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"create_clustered_visualization\",\n  \"type\": \"function\",\n  \"signature\": \"(data, n_clusters=3, random_state=0, n_init=10)\",\n  \"return_type\": \"tuple(np.ndarray, plt.Axes)\",\n  \"short_description\": \"Creates a scatter plot visualizing KMeans clustering on the provided data.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"create_clustered_visualization\",\n  \"type\": \"function\",\n  \"signature\": \"(P, T, n_clusters=3, random_state=0, n_init=10)\",\n  \"return_type\": \"tuple(np.ndarray, plt.Axes)\",\n  \"short_description\": \"Creates a visualization of KMeans clustering for a given tensor and point set.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"generateKMeansPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, n_clusters=3, random_state=0, n_init=10)\",\n  \"return_type\": \"tuple[np.ndarray, plt.Axes]\",\n  \"short_description\": \"Generates a KMeans clustering plot for the given data.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"generate_tensor_clusters\",\n  \"type\": \"function\",\n  \"signature\": \"(P, T, n_clusters=3, random_state=0, n_init=10)\",\n  \"return_type\": \"tuple(numpy.ndarray, matplotlib.axes.Axes)\",\n  \"short_description\": \"Generates clusters from a tensor and visualizes them using a scatter plot.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"generate_tensor_product\",\n  \"type\": \"function\",\n  \"signature\": \"(P, T, n_clusters=3, random_state=0, n_init=10)\",\n  \"return_type\": \"tuple(np.ndarray, plt.Axes)\",\n  \"short_description\": \"Generates a tensor product and performs KMeans clustering, returning the cluster results and a visualization plot.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"createFigureWithSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(fig_kw={})\",\n  \"return_type\": \"tuple[Figure, Axes]\",\n  \"short_description\": \"Creates a figure with a single subplot and applies the given keyword arguments for the figure and subplot.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"create_figure_with_subplots\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, n_clusters=3, random_state=0, n_init=10)\",\n  \"return_type\": \"tuple[np.ndarray, plt.Axes]\",\n  \"short_description\": \"Creates a figure with subplots to visualize KMeans clustering results.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"createFigureWithSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, n_clusters=3, random_state=0, n_init=10)\",\n  \"return_type\": \"Tuple[np.ndarray, plt.Axes]\",\n  \"short_description\": \"Creates a figure with subplots to visualize KMeans clustering results.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"generateSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(data, plotType, title='Default Title', xLabel='X', yLabel='Y', figSize=(10, 6))\",\n  \"return_type\": \"tuple[Figure, Axes]\",\n  \"short_description\": \"Generates a figure with a single subplot or a grid of subplots based on the provided data and plot type.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"plotKMeansClusters\",\n  \"type\": \"function\",\n  \"signature\": \"(data, clusters, title='KMeans Clustering Visualization')\",\n  \"return_type\": \"Figure, Axes\",\n  \"short_description\": \"Plots a scatter plot of the KMeans clustering result.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/445", "solution": "{\n  \"name\": \"plotVoronoi\",\n  \"type\": \"function\",\n  \"signature\": \"(points, seed=0)\",\n  \"return_type\": \"tuple(Voronoi, Axes)\",\n  \"short_description\": \"Creates a Voronoi diagram and plots it using matplotlib, with an optional seed for random jitter.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/445", "solution": "{\n  \"name\": \"createVoronoiPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(points, seed=0)\",\n  \"return_type\": \"tuple[Voronoi, Axes]\",\n  \"short_description\": \"Creates a Voronoi diagram plot from given 2D points and optionally seeds the random number generator for reproducibility.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/445", "solution": "{\n  \"name\": \"createVoronoiPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(points, seed=0)\",\n  \"return_type\": \"tuple(Voronoi, Axes)\",\n  \"short_description\": \"Creates a Voronoi diagram and plots it using matplotlib, with an optional seed for random jitter.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/445", "solution": "{\n  \"name\": \"createVoronoiPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(points, seed=0)\",\n  \"return_type\": \"tuple(Voronoi, Axes)\",\n  \"short_description\": \"Generates a Voronoi diagram and plots it using Matplotlib, with an optional seed for random jitter.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/445", "solution": "{\n  \"name\": \"createVoronoiPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(points, seed=0)\",\n  \"return_type\": \"tuple(Voronoi, Axes)\",\n  \"short_description\": \"Creates a Voronoi diagram plot from a set of 2D points, optionally seeded for reproducibility.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/445", "solution": "{\n  \"name\": \"createVoronoiPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(points, seed=0)\",\n  \"return_type\": \"tuple(Voronoi, Axes)\",\n  \"short_description\": \"Creates a Voronoi diagram plot from given 2D points and optional seed for random jitter.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/445", "solution": "{\n  \"name\": \"createVoronoiPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(points, seed=0)\",\n  \"return_type\": \"tuple(Voronoi, Axes)\",\n  \"short_description\": \"Creates a Voronoi diagram plot from a set of 2D points. Returns the Voronoi object and the Matplotlib Axes object containing the plot.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/445", "solution": "{\n  \"name\": \"generateVoronoiPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(points, seed=0)\",\n  \"return_type\": \"Tuple[Voronoi, Axes]\",\n  \"short_description\": \"Generates a Voronoi diagram and plots it using Matplotlib.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/445", "solution": "{\n  \"name\": \"generateVoronoiDiagram\",\n  \"type\": \"function\",\n  \"signature\": \"(points, seed=0)\",\n  \"return_type\": \"tuple(Voronoi, Axes)\",\n  \"short_description\": \"Generates a Voronoi diagram from a set of 2D points and plots it using Matplotlib.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/445", "solution": "{\n  \"name\": \"createVoronoiPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(points, seed=0)\",\n  \"return_type\": \"tuple(Voronoi, Axes)\",\n  \"short_description\": \"Creates a Voronoi diagram plot from a set of 2D points, with an optional random seed for jittering the points.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/477", "solution": "{\n  \"name\": \"createFigureWithSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(data, categories, seed=42)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a figure with subplots based on the provided data and categories.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"createFigureWithScatterPlots\", \"type\": \"function\", \"signature\": \"(df, categories, seed=42)\", \"return_type\": \"tuple[Figure, Axes]\", \"short_description\": \"Creates a figure with scatter plots for each category in the DataFrame.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"createSubplots\", \"type\": \"function\", \"signature\": \"(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\", \"return_type\": \"Figure, Axes\", \"short_description\": \"Create a figure and a set of subplots with customizable options.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/477", "solution": "{\n  \"name\": \"generateSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(data, categories, seed=42)\",\n  \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\",\n  \"short_description\": \"Generates a subplot for visualizing data categorized by a list of categories.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"createSubplots\", \"type\": \"function\", \"signature\": \"(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\", \"return_type\": \"Figure, Axes\", \"short_description\": \"Create a figure and a set of subplots. This utility wrapper makes it convenient to create common layouts of subplots, including the enclosing figure object, in a single call.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"createFigureAndSubplots\", \"type\": \"callable\", \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\", \"return_type\": \"Figure, Axes\", \"short_description\": \"Create a figure and a set of subplots. This utility wrapper makes it convenient to create common layouts of subplots, including the enclosing figure object, in a single call.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"createFigureAndSubplots\", \"type\": \"function\", \"signature\": \"(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True, widthRatios=None, heightRatios=None, subplotKw=None, gridspecKw=None, figKw=None)\", \"return_type\": \"Figure, Axes or array of Axes\", \"short_description\": \"Create a figure and a set of subplots with customizable options for sharing axes, squeezing, and grid dimensions.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"createPlot\", \"type\": \"function\", \"signature\": \"(data, categories)\", \"return_type\": \"tuple(fig, ax)\", \"short_description\": \"Creates a plot from given data and categories, returning a figure and axis objects.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"createSubplots\", \"type\": \"function\", \"signature\": \"(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\", \"return_type\": \"fig: Figure, ax: Axes or array of Axes\", \"short_description\": \"Create a figure and a set of subplots with customizable options.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/477", "solution": "{\n  \"name\": \"createFigureAndSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(data, categories, seed=42)\",\n  \"return_type\": \"tuple(fig, ax)\",\n  \"short_description\": \"Creates a figure with subplots grouped by categories.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"createFigure\", \"type\": \"function\", \"signature\": \"(data=None, columns=None)\", \"return_type\": \"Tuple[Figure, Axes]\", \"short_description\": \"Creates a figure with a subplot and populates it with data. This function is useful for generating visualizations directly from data.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/511", "solution": "{\n  \"name\": \"create_pie_chart\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, title='', autopct='%1.1f%%')\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a pie chart from the provided data, labels, and title. Optional autopct parameter allows customizing the percentage display.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/511", "solution": "{\n  \"name\": \"create_pie_chart\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, title='Pie Chart')\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a pie chart from the provided data, labels, and an optional title.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"createPlot\", \"type\": \"function\", \"signature\": \"(data, labels, title)\", \"return_type\": \"tuple\", \"short_description\": \"Creates a pie chart from the given data and labels, with a specified title.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/511", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a figure with a pie chart based on the provided data and column.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/511", "solution": "{\n  \"name\": \"create_pie_chart\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, title)\",\n  \"return_type\": \"figure\",\n  \"short_description\": \"Creates a pie chart with the provided data and labels, and sets the title as specified.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"createInteractivePlot\", \"type\": \"function\", \"signature\": \"(data, labels, title)\", \"return_type\": \"Figure, Axes\", \"short_description\": \"Creates an interactive plot with pie chart functionality.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/511", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a pie chart for the specified column in the given data and returns the result along with the plot axes.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/511", "solution": "{\n  \"name\": \"createFigureAndSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(data, columns, title='Default Title')\",\n  \"return_type\": \"tuple(Figure, Axes)\",\n  \"short_description\": \"Creates a figure and a set of subplots to visualize data in a flexible manner. Supports various types of plots including line, bar, scatter, and more.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/511", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(type='pie', data=None, labels=None, title=None, colors=None, autopct=None, **kwargs)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a plot of the specified type with optional customization. Returns a tuple containing the figure and the axes.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/532", "solution": "{\n  \"name\": \"plotDistribution\",\n  \"type\": \"function\",\n  \"signature\": \"(data, bins=4)\",\n  \"return_type\": \"tuple(Counter, Axes)\",\n  \"short_description\": \"Creates a histogram plot to visualize the distribution of the given data, including a normal distribution curve fitted to the data.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"generateDistributionPlot\", \"type\": \"function\", \"signature\": \"(data, bins=4, density=True, alpha=0.6, color='g')\", \"return_type\": \"tuple(Counter, Axes)\", \"short_description\": \"Generates a histogram plot of the given data along with a normal distribution curve if the data is normally distributed.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/532", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, bins=4)\",\n  \"return_type\": \"tuple(Counter, Axes)\",\n  \"short_description\": \"Creates a histogram plot to visualize the distribution of values in a DataFrame, including a normal distribution fit if applicable.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/532", "solution": "{\n  \"name\": \"createFigureWithDistribution\",\n  \"type\": \"function\",\n  \"signature\": \"(data, bins=4)\",\n  \"return_type\": \"tuple(Counter, Axes)\",\n  \"short_description\": \"Creates a figure with a histogram and a normal distribution plot representing the given data.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/532", "solution": "{\n  \"name\": \"createFigureWithHistogram\",\n  \"type\": \"function\",\n  \"signature\": \"(data, bins=4)\",\n  \"return_type\": \"Tuple[Counter, Axes]\",\n  \"short_description\": \"Creates a figure with a histogram of the given data, displaying the distribution if applicable.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/532", "solution": "{\n  \"name\": \"createFigureWithHistogram\",\n  \"type\": \"function\",\n  \"signature\": \"(data, bins=4)\",\n  \"return_type\": \"tuple(Counter, Axes)\",\n  \"short_description\": \"Creates a figure with a histogram of the provided data, optionally fitting a normal distribution curve.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/532", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, bins=4, density=True, alpha=0.6, color='g', xlabel='Value', ylabel='Frequency', title='Distribution')\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a histogram plot with optional density curve and custom labels and title.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/532", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, bins=4)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a histogram plot to visualize the distribution of given data.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/532", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, bins=4, density=True, alpha=0.6, color='g', xlabel='Value', ylabel='Frequency', title='Distribution')\",\n  \"return_type\": \"tuple(Counter, Axes)\",\n  \"short_description\": \"Creates a plot to visualize the distribution of values in a dataset, including a histogram and optionally a density curve.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/532", "solution": "{\n  \"name\": \"createFigureWithHistogram\",\n  \"type\": \"function\",\n  \"signature\": \"(data, bins=4, density=True, alpha=0.6, color='g', title='Distribution', xlabel='Value', ylabel='Frequency')\",\n  \"return_type\": \"tuple(Counter, Axes)\",\n  \"short_description\": \"Creates a figure with a histogram of the given data, optionally fitting a normal distribution and plotting it.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"createBarChart\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, labels=None, title=None, xlabel=None, ylabel=None, **kwargs)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a bar chart from the provided data and labels. This function is a utility to visualize data in a bar chart format using matplotlib.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"createFigureWithGrid\",\n  \"type\": \"function\",\n  \"signature\": \"(rows=1, cols=1, shareX=False, shareY=False, squeeze=True, widthRatios=None, heightRatios=None, subplotKw=None, gridspecKw=None, **figKw)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a figure and a grid of subplots with customizable sharing options and grid specifications.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, labels, kind='bar', **kwargs)\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Creates a plot from given data and labels using matplotlib.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"plotWithCustomLabels\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, title=None, xlabel=None, ylabel=None, kind='bar')\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Creates a bar plot with custom labels for both the x and y axes.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"createInteractivePlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, plotType='bar')\",\n  \"return_type\": \"object\",\n  \"short_description\": \"Creates an interactive plot based on the provided data and labels. Supports various plot types such as 'bar', 'line', 'scatter', etc.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"createInteractivePlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, title='Interactive Plot', xlabel='X', ylabel='Y')\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates an interactive plot with customizable options such as title, x-axis label, and y-axis label.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"plotBarChart\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, title='', xlabel='', ylabel='')\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Creates a bar chart using the provided data and labels, with an optional title and axis labels.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"createBarChart\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, title=None, xlabel=None, ylabel=None)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a bar chart from the provided data and labels. The chart can optionally have a title and axis labels.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"createInteractivePlot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, labels, plot_type='bar', **kwargs)\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Creates an interactive plot based on the provided data and labels. The plot type can be specified, and additional keyword arguments can be passed for customization.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, title='Default Title', xlabel='X Axis', ylabel='Y Axis', kind='line', **kwargs)\",\n  \"return_type\": \"tuple[matplotlib.figure.Figure, matplotlib.axes.Axes]\",\n  \"short_description\": \"Creates a plot with customizable data, labels, and plot type.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/560", "solution": "{\n  \"name\": \"plotMonthlyData\",\n  \"type\": \"function\",\n  \"signature\": \"(data)\",\n  \"return_type\": \"tuple[matplotlib.figure.Figure, matplotlib.axes.Axes]\",\n  \"short_description\": \"Creates a bar plot for monthly data with a specific year.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/560", "solution": "{\n  \"name\": \"create_plot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, plot_type='bar', figsize=(10, 6), title='Default Title', xlabel='Month', ylabel='Value')\",\n  \"return_type\": \"Axes\",\n  \"short_description\": \"Create a plot based on the provided data. This function supports bar plots by default but can be extended to other types like line, scatter, etc.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/560", "solution": "{\n  \"name\": \"plotMonthlyData\",\n  \"type\": \"function\",\n  \"signature\": \"(data)\",\n  \"return_type\": \"ax\",\n  \"short_description\": \"Creates a bar plot of monthly data from a given string input, with each month as the x-axis label and corresponding values as the bar heights.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/560", "solution": "{\n  \"name\": \"generatePlot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, fig_size=(10, 6))\",\n  \"return_type\": \"ax : `~.axes.Axes`\",\n  \"short_description\": \"Generates a bar plot from the provided data, with a specified figure size.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"plotMonthlyData\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"ax\", \"short_description\": \"Generates a bar plot for monthly data from a given string input.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/560", "solution": "{\n  \"name\": \"plotMonthlyData\",\n  \"type\": \"function\",\n  \"signature\": \"(data)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a bar plot of monthly data from a given string input.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/560", "solution": "{\n  \"name\": \"create_figure_with_subplots\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a figure and a set of subplots with the provided data, suitable for bar chart visualization.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/560", "solution": "{\n  \"name\": \"plotMonthlyData\",\n  \"type\": \"function\",\n  \"signature\": \"(data)\",\n  \"return_type\": \"ax\",\n  \"short_description\": \"Creates a bar plot for monthly data from a given string.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/560", "solution": "{\n  \"name\": \"create_figure_with_subplots\",\n  \"type\": \"function\",\n  \"signature\": \"(data)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a figure with subplots based on the provided data, suitable for plotting time-series data.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/560", "solution": "{\n  \"name\": \"createFigureWithBars\",\n  \"type\": \"function\",\n  \"signature\": \"(data)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a figure and a bar chart from the provided monthly data.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/574", "solution": "{\n  \"name\": \"createFigureWithSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(data, func, p0=[1, 1], num=None, clear=False)\",\n  \"return_type\": \"tuple[matplotlib.figure.Figure, matplotlib.axes.Axes]\",\n  \"short_description\": \"Creates a figure with subplots to visualize the provided data, fitted with a given function.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"createMatplotlibFigure\", \"type\": \"function\", \"signature\": \"(fig_kw=None)\", \"return_type\": \".Figure\", \"short_description\": \"Creates a new figure with optional keyword arguments.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/574", "solution": "{\n  \"name\": \"createFigureAndSubplots\",\n  \"type\": \"callable\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"fig: `.Figure`, ax: `~.axes.Axes` or array of Axes\",\n  \"short_description\": \"Create a figure and a set of subplots with customizable options.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/574", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"Figure, Axes or array of Axes\",\n  \"short_description\": \"Create a figure and a set of subplots with customizable options.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/574", "solution": "{\n  \"name\": \"plotDataWithFit\",\n  \"type\": \"function\",\n  \"signature\": \"(data, fitFunction, initialParams, fig_kw=None)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a figure and a plot of data along with a fit function.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/574", "solution": "{\n  \"name\": \"createPlotWithCurveFit\",\n  \"type\": \"function\",\n  \"signature\": \"(data, fitFunc, initParams, *args, **kwargs)\",\n  \"return_type\": \"tuple(fig, ax)\",\n  \"short_description\": \"Creates a plot with data and a curve fitted to the data using the provided function and initial parameters.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/574", "solution": "{\n  \"name\": \"plotDataWithFit\",\n  \"type\": \"function\",\n  \"signature\": \"(data_x, data_y, fit_function, initial_parameters, *, fig_kw=None)\",\n  \"return_type\": \"tuple[Figure, Axes]\",\n  \"short_description\": \"Creates a figure and an Axes object to plot the data along with a curve fitted to the data using the provided function and initial parameters.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/574", "solution": "{\n  \"name\": \"createFigureWithSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"tuple(Figure, Axes or array of Axes)\",\n  \"short_description\": \"Creates a figure and a set of subplots, similar to plt.subplots but with a different name and functionality.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/574", "solution": "{\n  \"name\": \"createFigureWithSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(data, fitFunc, params, labels, xlabel, ylabel, legendLocation)\",\n  \"return_type\": \"figure\",\n  \"short_description\": \"Creates a figure with subplots to visualize the data, fitted curve, and additional details.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/574", "solution": "{\n  \"name\": \"plotDataWithFit\",\n  \"type\": \"function\",\n  \"signature\": \"(data, fitFunc, fitParams, title='Plot of Data with Fit', xlabel='x', ylabel='y', legendLabels=None)\",\n  \"return_type\": \"Axes\",\n  \"short_description\": \"Creates a plot of given data with a curve fitted to the data using the provided function and parameters. The plot includes labels for the axes and a legend if labels are provided.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/579", "solution": "{\n  \"name\": \"createFigureWithBars\",\n  \"type\": \"function\",\n  \"signature\": \"(labels, values, title='', xlabel='', ylabel='', num=None, clear=False)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a figure with a bar chart. Optionally, it can set a title, x-axis label, y-axis label, specify a figure number, and clear an existing figure with the same number.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/579", "solution": "{\n  \"name\": \"createFigureWithBars\",\n  \"type\": \"function\",\n  \"signature\": \"(labels, values, title=None, xlabel=None, ylabel=None)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a figure with a bar chart using the provided labels and values. Optionally, you can add a title, x-axis label, and y-axis label.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/579", "solution": "{\n  \"name\": \"createFigureWithBars\",\n  \"type\": \"callable\",\n  \"signature\": \"(labels, values, title='Default Title', xlabel='Label', ylabel='Count', num=None, clear=False)\",\n  \"return_type\": \"fig: `.Figure`, ax: `~.axes.Axes`\",\n  \"short_description\": \"Creates a figure with a bar plot. The function accepts labels and values for the plot, with optional parameters for title, x-axis label, y-axis label, figure number, and whether to clear the existing figure.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/579", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, labels, title='', xLabel='', yLabel='', chartType='bar')\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a plot based on the provided data, labels, and other optional parameters.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"createSubplots\", \"type\": \"function\", \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\", \"return_type\": \"object\", \"short_description\": \"Creates a figure and a set of subplots. This utility wrapper makes it convenient to create common layouts of subplots, including the enclosing figure object, in a single call.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/579", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, title='Default Title', xLabel='X Axis', yLabel='Y Axis')\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a plot with the provided data, labels, and optional title and axis labels.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/579", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"callable\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"Object\",\n  \"short_description\": \"Create a figure and a set of subplots with customizable options.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/579", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, labels, title=None, xlabel=None, ylabel=None, **kwargs)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a simple plot with the provided data and labels.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"plotWordFrequency\", \"type\": \"function\", \"signature\": \"(wordList, title='Word Frequency Plot')\", \"return_type\": \"tuple\", \"short_description\": \"Creates a bar plot to visualize the frequency of words in a given list. Accepts an optional title for the plot.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/579", "solution": "{\n  \"name\": \"plotWordFrequency\",\n  \"type\": \"function\",\n  \"signature\": \"(csv_file, n=10)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a bar plot showing the frequency of the most common words in a given CSV file.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"createFigureWithDistributionPlot\", \"type\": \"function\", \"signature\": \"(data, bins='auto', alpha=0.6, color='g', num=None, clear=False)\", \"return_type\": \"fig\", \"short_description\": \"Creates a figure with a histogram plot of the given data along with a normal distribution curve fitted to the data.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"createSubplots\", \"type\": \"function\", \"signature\": \"(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\", \"return_type\": \"Figure, Axes or array of Axes\", \"short_description\": \"Create a figure and a set of subplots with customizable options.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"createFigureWithDistributionPlot\", \"type\": \"function\", \"signature\": \"(data, bins='auto', alpha=0.6, color='g', linewidth=2)\", \"return_type\": \"Figure\", \"short_description\": \"Creates a figure with a histogram of the given data overlaid with a probability density function (PDF) of a normal distribution fitted to the data.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/582", "solution": "{\n  \"name\": \"create_histogram_with_fit\",\n  \"type\": \"function\",\n  \"signature\": \"(data, bins='auto', density=True, alpha=0.6, color='g', linewidth=2, num=None, clear=False)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Create a histogram with a normal distribution fit overlayed.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/582", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, bins='auto', density=True, alpha=0.6, color='g')\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a plot from the given data using a histogram and a normal distribution curve.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"create_plot\", \"type\": \"function\", \"signature\": \"(data, title='Default Title', bins='auto', density=True, alpha=0.6, color='g')\", \"return_type\": \"Figure\", \"short_description\": \"Creates a plot from given data with optional title, bin specification, and styling options.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/582", "solution": "{\n  \"name\": \"plot_histogram_with_fit\",\n  \"type\": \"function\",\n  \"signature\": \"(data, bins='auto', density=True, alpha=0.6, color='g', num=None, clear=False)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a figure with a histogram of the given data, fitted with a normal distribution, and returns the figure object.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/582", "solution": "{\n  \"name\": \"create_histogram_with_fit\",\n  \"type\": \"function\",\n  \"signature\": \"(data, bins='auto', density=True, alpha=0.6, color='g', linewidth=2, num=None, clear=False)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a histogram with a normal distribution fit and plots it. This API call provides a high-level interface to create a histogram with a fitted normal distribution without needing to explicitly call multiple subplots and axes methods.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/582", "solution": "{\n  \"name\": \"create_histogram_with_fit\",\n  \"type\": \"function\",\n  \"signature\": \"(data, bins='auto', density=True, alpha=0.6, color='g', linewidth=2, num=None, clear=False)\",\n  \"return_type\": \"tuple(fig, ax)\",\n  \"short_description\": \"Creates a histogram of the given data with a normal distribution fit and returns the figure and axes objects.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/582", "solution": "{\n  \"name\": \"createFigureWithDistributionPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, bins='auto', alpha=0.6, color='g', linewidth=2, num=None, clear=False)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a figure with a histogram and a probability density function plot of the provided data.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/637", "solution": "{\n  \"name\": \"create_plot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, title='Default Title', x_label='X Axis', y_label='Y Axis', figsize=(10, 7), legend_labels=None, bar_width=0.4, colors=None)\",\n  \"return_type\": \"Tuple[Figure, Axes]\",\n  \"short_description\": \"Creates a bar plot with customizable title, labels, figure size, and colors.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/637", "solution": "{\n  \"name\": \"create_plot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, title, x_label, y_label)\",\n  \"return_type\": \"tuple(Figure, Axes)\",\n  \"short_description\": \"Creates a plot from the given data with customizable title, x-axis label, and y-axis label.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/637", "solution": "{\n  \"name\": \"create_plots\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, plot_type, *args, **kwargs)\",\n  \"return_type\": \"tuple[matplotlib.figure.Figure, matplotlib.axes.Axes]\",\n  \"short_description\": \"Generates a figure and a set of subplots based on the provided data and plot type.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/637", "solution": "{\n  \"name\": \"create_plot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, title, x_label, y_label)\",\n  \"return_type\": \"Tuple[Figure, Axes]\",\n  \"short_description\": \"Creates a bar plot using the provided data, with a specified title and axis labels.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/637", "solution": "{\n  \"name\": \"plot_student_grades\",\n  \"type\": \"function\",\n  \"signature\": \"(students, courses, grades)\",\n  \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\",\n  \"short_description\": \"Creates a bar plot showing the average grades and the count of students who passed each course.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/637", "solution": "{\n  \"name\": \"create_plot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, title='Default Title', x_label='X Axis', y_label='Y Axis', kind='line', **kwargs)\",\n  \"return_type\": \"Tuple[Figure, Axes]\",\n  \"short_description\": \"Creates a plot from the given data using Matplotlib, with customizable title, labels, and plot type.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/637", "solution": "{\n  \"name\": \"plot_student_grades\",\n  \"type\": \"function\",\n  \"signature\": \"(df, title='Student Grades Analysis', colors={'average': 'b', 'pass_counts': 'g'})\",\n  \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\",\n  \"short_description\": \"Creates a bar plot to analyze student grades, showing both the average grades and counts of passing grades.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/637", "solution": "{\n  \"name\": \"create_plot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, title=None, x_label=None, y_label=None)\",\n  \"return_type\": \"tuple(Figure, Axes)\",\n  \"short_description\": \"Creates a plot from the given data and optionally adds a title and labels for the x and y axes.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/637", "solution": "{\n  \"name\": \"create_plot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, title='Default Title', x_label='X Axis', y_label='Y Axis', fig_size=(10, 7), bar_width=0.4, colors=['b', 'g'])\",\n  \"return_type\": \"Tuple[Figure, Axes]\",\n  \"short_description\": \"Generates a bar plot from the provided data with customizable title, labels, figure size, bar width, and colors.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/637", "solution": "{\n  \"name\": \"plot_student_grades\",\n  \"type\": \"function\",\n  \"signature\": \"(df, title='Student Grades', pass_threshold=60)\",\n  \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\",\n  \"short_description\": \"Creates a bar plot showing average grades and counts of students passing a given threshold.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/897", "solution": "{\n  \"name\": \"createHistogram\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, bins=None, edgecolor=None, title=None, xlabel=None, ylabel=None, **fig_kw)\",\n  \"return_type\": \"fig : `.Figure`, ax : `~.axes.Axes`\",\n  \"short_description\": \"Create a histogram from the provided data with customizable options for bins, colors, and labels.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/897", "solution": "{\n  \"name\": \"plotDiceHistogram\",\n  \"type\": \"function\",\n  \"signature\": \"(rolls, seed=None)\",\n  \"return_type\": \"tuple(list, Axes)\",\n  \"short_description\": \"Creates a histogram of dice rolls and returns the frequencies and the Axes object.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/897", "solution": "{\n  \"name\": \"createDiceHistogram\",\n  \"type\": \"function\",\n  \"signature\": \"(rolls, seed=None)\",\n  \"return_type\": \"Tuple[np.ndarray, matplotlib.axes._axes.Axes]\",\n  \"short_description\": \"Creates a histogram of dice rolls and returns the frequencies and the Axes object.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/897", "solution": "{\n  \"name\": \"create_figure_with_histogram\",\n  \"type\": \"function\",\n  \"signature\": \"(data, bins=None, title=None, xlabel=None, ylabel=None, seed=None)\",\n  \"return_type\": \"tuple(Figure, Axes)\",\n  \"short_description\": \"Creates a figure with a histogram of the provided data. Optionally, allows setting a title, x-axis label, y-axis label, and seed for reproducibility.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/897", "solution": "{\n  \"name\": \"plotDiceHistogram\",\n  \"type\": \"function\",\n  \"signature\": \"(outcomes, seed=None)\",\n  \"return_type\": \"tuple(list(int), matplotlib.axes.Axes)\",\n  \"short_description\": \"Creates a histogram of dice roll outcomes and returns the frequencies and the Axes object.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/897", "solution": "{\n  \"name\": \"createDiceHistogram\",\n  \"type\": \"function\",\n  \"signature\": \"(rolls, seed=None)\",\n  \"return_type\": \"Tuple[np.ndarray, plt.Axes]\",\n  \"short_description\": \"Creates a histogram of dice rolls, displaying the frequency of each outcome.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"generateHistogram\", \"type\": \"function\", \"signature\": \"(data, bins=None, edgecolor=None, title=None, xlabel=None, ylabel=None)\", \"return_type\": \"tuple[Figure, Axes]\", \"short_description\": \"Generates a histogram from the provided data and customizes it with optional parameters.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/897", "solution": "{\n  \"name\": \"plotDiceHistogram\",\n  \"type\": \"function\",\n  \"signature\": \"(rolls, seed=None)\",\n  \"return_type\": \"Tuple[np.ndarray, matplotlib.axes._axes.Axes]\",\n  \"short_description\": \"Creates a histogram of dice rolls and returns the frequencies and the Axes object.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/897", "solution": "{\n  \"name\": \"createDiceHistogram\",\n  \"type\": \"function\",\n  \"signature\": \"(rolls, seed=None)\",\n  \"return_type\": \"tuple[list[int], matplotlib.axes.Axes]\",\n  \"short_description\": \"Creates a histogram of dice rolls, with an optional seed for reproducibility.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/897", "solution": "{\n  \"name\": \"generateDiceHistogram\",\n  \"type\": \"function\",\n  \"signature\": \"(rolls, seed=None)\",\n  \"return_type\": \"Tuple[np.ndarray, matplotlib.axes._axes.Axes]\",\n  \"short_description\": \"Generates a histogram of dice rolls and returns the frequencies and the Axes object.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"createFigureWithSubplots\", \"type\": \"callable\", \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\", \"return_type\": \"Figure\", \"short_description\": \"Create a figure and a set of subplots with customizable options.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/914", "solution": "{\n  \"name\": \"createFigureWithSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(data, x_column, y_column, future_days=7)\",\n  \"return_type\": \"object\",\n  \"short_description\": \"Creates a figure with subplots to visualize historical and predicted data.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/914", "solution": "{\n  \"name\": \"plotPredictedPrices\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe, target_column, prediction_days)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a plot showing historical and predicted prices of a given target column over a specified number of prediction days.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/914", "solution": "{\n  \"name\": \"createFigureWithSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(data, x_column, y_column, future_days=7, num=None, clear=False)\",\n  \"return_type\": \"object\",\n  \"short_description\": \"Creates a figure with subplots to visualize historical and predicted data.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/914", "solution": "{\n  \"name\": \"plotPredictedPrices\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe, num_future_days)\",\n  \"return_type\": \"object\",\n  \"short_description\": \"Plots the historical and predicted closing prices of a stock using a linear regression model.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/914", "solution": "{\n  \"name\": \"createFigureWithSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(data, x_column, y_columns, title='Default Title', x_label='X Axis', y_label='Y Axis', figsize=(10, 6))\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a figure and a set of subplots to visualize given data with specified columns for plotting.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/914", "solution": "{\n  \"name\": \"plotPredictedPrices\",\n  \"type\": \"function\",\n  \"signature\": \"(df, model, days_ahead=7)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a plot to visualize the predicted future prices based on historical data and a fitted model.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"plotPredictedPrices\", \"type\": \"function\", \"signature\": \"(df)\", \"return_type\": \"tuple(list, object)\", \"short_description\": \"Creates a plot showing the historical and predicted closing prices of a stock over the next week. Returns a tuple containing the predicted prices and the Axes object of the plot.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/914", "solution": "{\n  \"name\": \"createFigureWithSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(data, x_column, y_column, future_days=7, **fig_kw)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Creates a figure and subplots to visualize historical and predicted data.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/914", "solution": "{\n  \"name\": \"plotTimeSeries\",\n  \"type\": \"function\",\n  \"signature\": \"(data, future_days=7)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a plot of a time series, including predictions for future dates.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/915", "solution": "{\n  \"name\": \"createFigureAndSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(fig_size=(10, 5), xlabel='', ylabel='', title='', legend_loc='best')\",\n  \"return_type\": \"tuple(Figure, Axes)\",\n  \"short_description\": \"Creates a figure and a set of subplots with specified dimensions, labels, and title, and includes a legend at the best location.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/915", "solution": "{\n  \"name\": \"createFigureAndSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(figsize=(10, 5), sharex=False, sharey=False, squeeze=True, **fig_kw)\",\n  \"return_type\": \"tuple(Figure, Axes or array of Axes)\",\n  \"short_description\": \"Creates a figure and a set of subplots with customizable parameters for layout and sharing.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/915", "solution": "{\n  \"name\": \"createPlotWithOutliers\",\n  \"type\": \"function\",\n  \"signature\": \"(dataFrame, zThreshold=2)\",\n  \"return_type\": \"tuple(DataFrame, Axes)\",\n  \"short_description\": \"Creates a plot highlighting outliers in the 'closing_price' column of the given DataFrame based on a Z-Score threshold.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/915", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(data, xLabel, yLabel, title, legendLoc, figSize)\",\n  \"return_type\": \"object\",\n  \"short_description\": \"Creates a figure and a set of subplots to visualize data.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/915", "solution": "{\n  \"name\": \"plotOutliers\",\n  \"type\": \"function\",\n  \"signature\": \"(df, z_threshold=2)\",\n  \"return_type\": \"tuple(DataFrame, Axes)\",\n  \"short_description\": \"Creates a plot to identify outliers in the 'closing_price' column of a DataFrame based on a Z-Score threshold.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/915", "solution": "{\n  \"name\": \"createPlotWithOutliers\",\n  \"type\": \"function\",\n  \"signature\": \"(data, zThreshold=2, figSize=(10, 5))\",\n  \"return_type\": \"tuple(DataFrame, Axes)\",\n  \"short_description\": \"Creates a plot highlighting outliers in a given dataset based on Z-Score. The plot includes lines for normal values and markers for outliers.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/915", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, zThreshold=2, figSize=(10, 5))\",\n  \"return_type\": \"tuple(DataFrame, Axes)\",\n  \"short_description\": \"Creates a plot to identify outliers in a given dataset based on Z-Score.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/915", "solution": "{\"name\": \"createPlot\", \"type\": \"function\", \"signature\": \"(data, zThreshold=2)\", \"return_type\": \"tuple\", \"short_description\": \"Creates a plot to identify outliers in the given data based on Z-Score.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/915", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, zThreshold=2, figSize=(10, 5))\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a plot to identify outliers in a given dataset based on Z-Score.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/915", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, targetColumn, zThreshold=2, figSize=(10, 5))\",\n  \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\",\n  \"short_description\": \"Creates a plot to identify outliers in a specified target column based on Z-Score.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"createFigureWithPlots\",\n  \"type\": \"function\",\n  \"signature\": \"(figsize=(12, 6), nrows=1, ncols=2, sharex=False, sharey=False, squeeze=True, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Create a figure with a grid of subplots suitable for combining multiple plot types.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Create a figure and a set of subplots with specified parameters.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"create_plot_grid\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Create a figure and a set of subplots in a grid layout.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Create a figure and a set of subplots. This utility wrapper makes it convenient to create common layouts of subplots, including the enclosing figure object, in a single call.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Create a figure and a set of subplots with the specified parameters.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"Object\",\n  \"short_description\": \"Create a figure and a set of subplots with specified parameters. This utility wrapper makes it convenient to create common layouts of subplots.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"createMatplotlibAxes\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a figure and a set of subplots with specified parameters.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Create a figure and a set of subplots. This utility wrapper makes it convenient to create common layouts of subplots, including the enclosing figure object, in a single call.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"createSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a figure and a set of subplots with customizable options.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"createFigureWithMultiplePlots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=2, figsize=(12, 6), sharex=False, sharey=False, squeeze=True, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a figure with a specified number of subplots, each with a specific plot type.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/917", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, title=None, xlabel=None, ylabel=None, legend_labels=None)\",\n  \"return_type\": \"tuple(figure, axes)\",\n  \"short_description\": \"Creates a figure and a plot with the provided data. This function is designed to provide a high-level interface for creating plots with minimal code, focusing on flexibility and readability.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/917", "solution": "{\n  \"name\": \"generateForecastPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(df, steps=7, order=(5, 1, 0))\",\n  \"return_type\": \"Tuple[List[float], Axes]\",\n  \"short_description\": \"Generates a forecast plot for time series data using ARIMA model and returns the forecasted values and the Axes object.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"createSubplots\", \"type\": \"callable\", \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, subplot_kw=None, fig_kw=None)\", \"return_type\": \"Tuple[Figure, Axes]\", \"short_description\": \"Creates a figure and a set of subplots with adjustable parameters for sharing axes and additional figure-level keywords.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"generateTimeSeriesPlot\", \"type\": \"function\", \"signature\": \"(data, forecastSteps)\", \"return_type\": \"Tuple[List[float], Axes]\", \"short_description\": \"Generates a time series plot with historical data and forecasts.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/917", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, title=None, xLabel=None, yLabel=None)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a plot with the provided data and labels.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/917", "solution": "{\n  \"name\": \"plotForecast\",\n  \"type\": \"function\",\n  \"signature\": \"(df, model_fit)\",\n  \"return_type\": \"Tuple[List[float], Axes]\",\n  \"short_description\": \"Plots the historical closing prices along with the forecasted prices using an ARIMA model.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"createPlot\", \"type\": \"function\", \"signature\": \"(data, title='', xLabel='', yLabel='', legendLabels=[]) -> (figure, axes)\", \"return_type\": \"tuple\", \"short_description\": \"Creates a figure and a single subplot for visualizing time series data. The function is designed to be used for plotting forecasted data alongside historical data.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/917", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, title=None, xlabel=None, ylabel=None)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a plot from the given data with an optional title, x-axis label, and y-axis label.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/917", "solution": "{\n  \"name\": \"plotForecast\",\n  \"type\": \"callable\",\n  \"signature\": \"(df, model_fit, steps=7)\",\n  \"return_type\": \"Tuple[List[float], Axes]\",\n  \"short_description\": \"Plots the historical data and forecasted values from an ARIMA model, returning the forecasted values and the Axes object of the plot.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/917", "solution": "{\n  \"name\": \"plotForecast\",\n  \"type\": \"function\",\n  \"signature\": \"(df, ax=None)\",\n  \"return_type\": \"Tuple[List[float], Axes]\",\n  \"short_description\": \"Plots the historical closing prices along with the forecasted prices for the next 7 days. Returns a tuple containing the forecasted values as a list and the Axes object of the plot.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"plotCategorySales\", \"type\": \"callable\", \"signature\": \"(sales_df, fig_size=(12, 8))\", \"return_type\": \"fig, ax\", \"short_description\": \"Creates a line plot to visualize category-wise sales trends from a given DataFrame.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/942", "solution": "{\n  \"name\": \"plotCategorySales\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe, categories, title='Category-wise Sales Trends', xlabel='Date', ylabel='Sales', figsize=(12, 8))\",\n  \"return_type\": \"tuple(Figure, Axes)\",\n  \"short_description\": \"Creates a line plot to visualize category-wise sales trends from a given DataFrame.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/942", "solution": "{\n  \"name\": \"createFigureWithTrends\",\n  \"type\": \"function\",\n  \"signature\": \"(data, title='Category-wise Sales Trends', figsize=(12, 8))\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a figure with a line plot showing category-wise sales trends.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/942", "solution": "{\n  \"name\": \"createFigureAndPlot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, title=None, xlabel=None, ylabel=None, legend=True, figsize=(12, 8))\",\n  \"return_type\": \"Tuple[Figure, Axes]\",\n  \"short_description\": \"Creates a figure and a plot from the provided data. This function is useful for quickly generating line plots with optional customization options.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/942", "solution": "{\n  \"name\": \"create_sales_report\",\n  \"type\": \"function\",\n  \"signature\": \"(start_date='2016-01-01', periods=13, freq='WOM-2FRI', categories=['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports'])\",\n  \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\",\n  \"short_description\": \"Generates a sales report with category-wise sales trends plotted.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/942", "solution": "{\n  \"name\": \"createFigureWithTrends\",\n  \"type\": \"function\",\n  \"signature\": \"(data, title='Category-wise Sales Trends', figsize=(12, 8))\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a figure with a plot of category-wise sales trends from given data.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/942", "solution": "{\n  \"name\": \"createFigureWithTrends\",\n  \"type\": \"function\",\n  \"signature\": \"(data, title, xlabel, ylabel, legend_labels)\",\n  \"return_type\": \"Figure, Axes\",\n  \"short_description\": \"Creates a figure with a line plot for each category in the data, with a title, x-axis label, y-axis label, and a legend.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/942", "solution": "{\n  \"name\": \"generateSalesReport\",\n  \"type\": \"function\",\n  \"signature\": \"(start_date='2016-01-01', periods=13, freq='WOM-2FRI', categories=['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports'])\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a sales report with category-wise sales trends visualization.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/942", "solution": "{\n  \"name\": \"plotCategorySalesTrends\",\n  \"type\": \"function\",\n  \"signature\": \"(sales_df, fig_size=(12, 8))\",\n  \"return_type\": \"tuple(fig, ax)\",\n  \"short_description\": \"Generates a line plot of category-wise sales trends from a given DataFrame, with an optional custom figure size.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/942", "solution": "{\n  \"name\": \"plot_category_sales\",\n  \"type\": \"function\",\n  \"signature\": \"(sales_df, ax)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a bar plot to visualize category-wise sales trends from a given DataFrame.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/955", "solution": "{\n  \"name\": \"createWordFrequencyPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(mystrings, text)\",\n  \"return_type\": \"ax\",\n  \"short_description\": \"Creates a bar plot showing the frequency of words from the list in the provided text.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/955", "solution": "{\n  \"name\": \"createWordFrequencyPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(mystrings, text)\",\n  \"return_type\": \"ax\",\n  \"short_description\": \"Creates a bar plot of word frequencies from a given text based on a list of words to ignore.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/955", "solution": "{\n  \"name\": \"plotWordFrequencies\",\n  \"type\": \"function\",\n  \"signature\": \"(mystrings, text)\",\n  \"return_type\": \"ax\",\n  \"short_description\": \"Creates a bar chart to visualize the frequency of words in the given text.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/955", "solution": "{\n  \"name\": \"plotWordFrequencies\",\n  \"type\": \"function\",\n  \"signature\": \"(mystrings, text)\",\n  \"return_type\": \"ax\",\n  \"short_description\": \"Plots the frequencies of words from a list in a bar chart.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/955", "solution": "{\n  \"name\": \"createWordFrequencyPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(mystrings, text)\",\n  \"return_type\": \"ax\",\n  \"short_description\": \"Creates a bar plot showing the frequency of words from 'mystrings' in 'text'.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/955", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, title='', xLabel='', yLabel='')\",\n  \"return_type\": \"tuple(fig, ax)\",\n  \"short_description\": \"Creates a bar plot with the provided data and labels, and optionally sets a title and labels for the axes.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"createBarChart\", \"type\": \"function\", \"signature\": \"(data, labels=None, title=None, xlabel=None, ylabel=None)\", \"return_type\": \"Axes\", \"short_description\": \"Creates a bar chart with the provided data and optional labels and title.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/955", "solution": "{\n  \"name\": \"plotWordFrequencies\",\n  \"type\": \"function\",\n  \"signature\": \"(mystrings, text)\",\n  \"return_type\": \"ax\",\n  \"short_description\": \"Plots the frequencies of words from a list of strings on a bar chart.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/955", "solution": "{\n  \"name\": \"generateWordFrequencyPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(mystrings, text)\",\n  \"return_type\": \"ax\",\n  \"short_description\": \"Generates a bar plot of word frequencies from a given text, replacing spaces with underscores in words specified in mystrings.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"createVisualFrequencyPlot\", \"type\": \"function\", \"signature\": \"(text, mystrings)\", \"return_type\": \"matplotlib.axes.Axes\", \"short_description\": \"Creates a visual frequency plot from the given text and list of words to replace in the text.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/1004", "solution": "{\"name\": \"createPlot\", \"type\": \"function\", \"signature\": \"(data, labels, title)\", \"return_type\": \"figure\", \"short_description\": \"Creates a plot from given data and labels with a specified title.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/1004", "solution": "{\n  \"name\": \"generatePlot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, title, xlabel, ylabel)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a bar plot based on the provided data, title, and axis labels.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/1004", "solution": "{\"name\": \"createVisualization\", \"type\": \"function\", \"signature\": \"(data, title, xLabel, yLabel)\", \"return_type\": \"tuple(Figure, Axes)\", \"short_description\": \"Creates a visualization from the provided data and configures it with the given title and axis labels.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/1004", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, title, xLabel, yLabel)\",\n  \"return_type\": \"fig, ax\",\n  \"short_description\": \"Creates a figure and a single subplot with provided data, title, and axis labels.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/1004", "solution": "{\n  \"name\": \"plotTopWords\",\n  \"type\": \"function\",\n  \"signature\": \"(word_freq, title='Top 10 Most Common Words', xlabel='Words', ylabel='Frequency')\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Plots a bar chart of the top 10 most common words from a given word frequency counter.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/1004", "solution": "{\n  \"name\": \"generateWordFrequencyChart\",\n  \"type\": \"function\",\n  \"signature\": \"(text, num_words=10)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a bar chart displaying the frequency of the top `num_words` most common words in the provided text.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/1004", "solution": "{\"name\": \"generateWordFrequencyPlot\", \"type\": \"function\", \"signature\": \"(text, topN=10)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a plot of the top N most common words in the provided text.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/1004", "solution": "{\n  \"name\": \"generatePlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, title, xLabel, yLabel)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a bar plot based on the provided data and labels.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/1004", "solution": "{\n  \"name\": \"plotTopWords\",\n  \"type\": \"callable\",\n  \"signature\": \"(word_freq, top_n=10)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Plots the top N most common words from a given word frequency counter.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/1004", "solution": "{\"name\": \"plotTopWords\", \"type\": \"callable\", \"signature\": \"(word_freq, title='Top 10 Most Common Words', x_label='Words', y_label='Frequency')\", \"return_type\": \"tuple(Figure, Axes)\", \"short_description\": \"Plots the top 10 most common words from a given word frequency dictionary.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/1085", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, *, title=None, xlabel=None, ylabel=None, legend=None, fig_size=(8, 6))\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a simple plot with the provided data. This function is useful for quickly visualizing data in a variety of formats.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/1085", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, title='Default Title', xlabel='X', ylabel='Y', xscale='linear', yscale='linear', figsize=(8, 6))\",\n  \"return_type\": \"tuple(Figure, Axes)\",\n  \"short_description\": \"Create a plot with customizable features, including data, title, labels, scales, and figure size.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/1085", "solution": "{\n  \"name\": \"plotMostCommonWords\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, n=10)\",\n  \"return_type\": \"tuple[list[tuple[str, int]], plt.Axes]\",\n  \"short_description\": \"Creates a bar plot of the most common words from the provided text data.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/1085", "solution": "{\"name\": \"plotWordFrequencies\", \"type\": \"function\", \"signature\": \"(word_counts, num_words=10)\", \"return_type\": \"tuple[list[tuple[str, int]], matplotlib.axes.Axes]\", \"short_description\": \"Plots the frequency of the most common words from a given Counter object.\"}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/1085", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, *, title='', xlabel='', ylabel='', xscale='linear', yscale='linear', legend=None, figsize=(6, 4))\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a simple line plot with customizable features.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/1085", "solution": "{\n  \"name\": \"plotWordFrequency\",\n  \"type\": \"function\",\n  \"signature\": \"(text, *, num_words=10)\",\n  \"return_type\": \"tuple(list, Axes)\",\n  \"short_description\": \"Plots the frequency of the most common words in the provided text.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/1085", "solution": "{\n  \"name\": \"generatePlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, title='Default Title', xlabel='X Axis', ylabel='Y Axis', figsize=(8, 6))\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a plot with the given data and customizations.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/1085", "solution": "{\n  \"name\": \"createFigureWithSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Create a figure and a set of subplots with specified parameters.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/1085", "solution": "{\n  \"name\": \"createPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, *, title='', xLabel='', yLabel='', figsize=(10, 5))\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a plot from given data with optional title and labels, and specified figure size.\"\n}"}
{"api_id": 80, "api_name": "matplotlib.pyplot.subplots", "task_id": "BigCodeBench/1085", "solution": "{\n  \"name\": \"createFigureAndSubplots\",\n  \"type\": \"function\",\n  \"signature\": \"(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None, **fig_kw)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a figure and a set of subplots. This utility wrapper makes it convenient to create common layouts of subplots, including the enclosing figure object, in a single call.\"\n}"}
{"api_id": 81, "api_name": "matplotlib.pyplot.legend", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"draw_legend\", \"type\": \"callable\", \"signature\": \"(*args, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Draws a legend on the current Axes based on the provided artists and labels.\"}"}
{"api_id": 81, "api_name": "matplotlib.pyplot.legend", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"create_legend\",\n  \"type\": \"callable\",\n  \"signature\": \"(*args, **kwargs)\",\n  \"return_type\": \"Legend\",\n  \"short_description\": \"Creates a legend for the current plot, allowing for customization of the legend's appearance and positioning.\"\n}"}
{"api_id": 81, "api_name": "matplotlib.pyplot.legend", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"draw_legend\",\n  \"type\": \"callable\",\n  \"signature\": \"(*args, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Draws a legend for the current plot.\"\n}"}
{"api_id": 81, "api_name": "matplotlib.pyplot.legend", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"plot_legend\", \"type\": \"callable\", \"signature\": \"(*args, **kwargs)\", \"return_type\": \"Legend\", \"short_description\": \"Plots a legend for a given matplotlib plot.\"}"}
{"api_id": 81, "api_name": "matplotlib.pyplot.legend", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"plot_legend\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, **kwargs)\",\n  \"return_type\": \"Legend\",\n  \"short_description\": \"Create and place a legend on the Axes for the current plot.\"\n}"}
{"api_id": 81, "api_name": "matplotlib.pyplot.legend", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"draw_legend\", \"type\": \"callable\", \"signature\": \"(*args, **kwargs)\", \"return_type\": \"matplotlib.legend.Legend\", \"short_description\": \"Place a legend on the Axes. This function provides full control over the legend placement and appearance.\"}"}
{"api_id": 81, "api_name": "matplotlib.pyplot.legend", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"create_legend\",\n  \"type\": \"callable\",\n  \"signature\": \"(*args, **kwargs)\",\n  \"return_type\": \"Legend\",\n  \"short_description\": \"Create a legend for the current plot, allowing for customization of legend properties.\"\n}"}
{"api_id": 81, "api_name": "matplotlib.pyplot.legend", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"plotLegend\", \"type\": \"callable\", \"signature\": \"(*args, **kwargs)\", \"return_type\": \"Legend\", \"short_description\": \"Adds a legend to the current matplotlib plot.\"}"}
{"api_id": 81, "api_name": "matplotlib.pyplot.legend", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"draw_legend\", \"type\": \"callable\", \"signature\": \"(*args, **kwargs)\", \"return_type\": \"matplotlib.legend.Legend\", \"short_description\": \"Draws a legend on the current Axes with optional customization.\"}"}
{"api_id": 81, "api_name": "matplotlib.pyplot.legend", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"draw_legend\",\n  \"type\": \"callable\",\n  \"signature\": \"(*args, **kwargs)\",\n  \"return_type\": \"matplotlib.legend.Legend\",\n  \"short_description\": \"Draws a legend on the Axes with the specified artists and labels.\"\n}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"plotHistogramAndPdf\", \"type\": \"function\", \"signature\": \"(data, title='Histogram with PDF', bins='auto')\", \"return_type\": \"None\", \"short_description\": \"Plots a histogram and a probability density function (PDF) based on the provided data. The plot is displayed and then closed to avoid display outside the function.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"plotHistogramWithPDF\", \"type\": \"callable\", \"signature\": \"(data, xlabel='', ylabel='', title='')\", \"return_type\": \"None\", \"short_description\": \"Generates a histogram and PDF plot for the given data and customizes it with labels and title.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"plotHistogramWithPDF\", \"type\": \"function\", \"signature\": \"(data, title='Histogram with PDF', legendLabels=['Histogram', 'PDF'], bins='auto')\", \"return_type\": \"tuple\", \"short_description\": \"Generates a histogram and a probability density function (PDF) plot for the given data and displays it.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"closeFigure\", \"type\": \"callable\", \"signature\": \"(figure)\", \"return_type\": \"None\", \"short_description\": \"Closes a given figure window. This function is used to manually close a figure that has been created and displayed.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"saveFigureToFile\", \"type\": \"callable\", \"signature\": \"(fig, filePath, format='png')\", \"return_type\": \"None\", \"short_description\": \"Saves a figure to a specified file path in a given format.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"plotHistogramAndPDF\", \"type\": \"callable\", \"signature\": \"(data, xlabel='', ylabel='', title='')\", \"return_type\": \"dict\", \"short_description\": \"Generates a histogram and PDF plot for the given data and returns statistical metrics and plot details.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"plotHistogramAndPdf\", \"type\": \"function\", \"signature\": \"(data, bins='auto')\", \"return_type\": \"tuple\", \"short_description\": \"Plots a histogram and a probability density function (PDF) for the given data.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"plotHistogramWithPDF\", \"type\": \"function\", \"signature\": \"(data, xlabel=None, ylabel=None, title=None)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a histogram and PDF plot from the provided data and customizes it with labels and title.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"plotHistogramAndPdf\", \"type\": \"callable\", \"signature\": \"(data, title=None, xlabel=None, ylabel=None)\", \"return_type\": \"tuple(numpy.ndarray, dict, matplotlib.axes._axes.Axes)\", \"short_description\": \"Plots a histogram and a probability density function (PDF) based on the given data.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"plotHistogramWithPdf\", \"type\": \"function\", \"signature\": \"(data, xlabel='', ylabel='', title='')\", \"return_type\": \"tuple(numpy.ndarray, dict, matplotlib.axes._axes.Axes)\", \"short_description\": \"Plots a histogram and a PDF from given data, with optional labels for x, y, and title.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"plot_bar_chart\", \"type\": \"callable\", \"signature\": \"(data, labels, title=None)\", \"return_type\": \".Axes\", \"short_description\": \"Generates a bar chart from the provided data and labels. Optionally, a title can be added to the chart.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"generatePlot\", \"type\": \"function\", \"signature\": \"(data, labels, columns)\", \"return_type\": \".Axes\", \"short_description\": \"Generates a bar plot from given data, labels, and columns.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"plotBarChart\", \"type\": \"function\", \"signature\": \"(data, labels, title='', xlabel='', ylabel='')\", \"return_type\": \".Axes\", \"short_description\": \"Generates a bar chart using the provided data and labels, with optional title and axis labels.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"save_figure_to_file\", \"type\": \"callable\", \"signature\": \"(fig, filename, format='png')\", \"return_type\": \"None\", \"short_description\": \"Save the given figure to a file with the specified format.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"generate_bar_chart\", \"type\": \"function\", \"signature\": \"(data, labels, title='Default Title')\", \"return_type\": \"None\", \"short_description\": \"Generates a bar chart using the provided data and labels. The chart is displayed and the function does not return a value.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"save_figure\", \"type\": \"callable\", \"signature\": \"(fig, filename, format='png')\", \"return_type\": \"None\", \"short_description\": \"Save the current figure to a file. This function allows specifying the format and quality of the saved image.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"plotBarChart\", \"type\": \"function\", \"signature\": \"(data, labels, title=None)\", \"return_type\": \"object\", \"short_description\": \"Generates a bar chart from the provided data and labels. Optionally, a title can be added to the chart.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"generate_bar_chart\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, labels, title='Default Title')\",\n  \"return_type\": \"object\",\n  \"short_description\": \"Generates a bar chart using the provided data and labels. Optionally takes a title for the chart.\"\n}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"plotBarChart\", \"type\": \"callable\", \"signature\": \"(data, labels, title='', xlabel='', ylabel='')\", \"return_type\": \".Axes\", \"short_description\": \"Creates a bar chart from the provided data and labels. The chart can be customized with an optional title and axis labels.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"saveFigureToFile\", \"type\": \"callable\", \"signature\": \"(fig, filename, format='png')\", \"return_type\": \"None\", \"short_description\": \"Save a figure to a file. This function allows you to specify the figure to save, the filename including the path, and the format in which to save the image.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"closeFigure\", \"type\": \"function\", \"signature\": \"(fig=None)\", \"return_type\": \"None\", \"short_description\": \"Closes a figure window. The figure to close can be specified by figure number, name, or current figure.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"saveFigure\", \"type\": \"callable\", \"signature\": \"(fig, filename)\", \"return_type\": \"None\", \"short_description\": \"Save the given figure to a specified file.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"generate_bar_chart\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"Axes\", \"short_description\": \"Generates a bar chart from the provided data and displays it.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"toggleFigureVisibility\", \"type\": \"callable\", \"signature\": \"(fig=None, visible=True)\", \"return_type\": \"None\", \"short_description\": \"Toggle the visibility of a figure window. This function allows you to hide or show a figure that has been previously created.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"generateBarChart\", \"type\": \"function\", \"signature\": \"(data, title)\", \"return_type\": \"None\", \"short_description\": \"Generates a bar chart from the provided monthly data.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"generate_bar_chart\", \"type\": \"function\", \"signature\": \"(data, title, xlabel, ylabel)\", \"return_type\": \"None\", \"short_description\": \"Generates a bar chart from the provided data and labels.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"generate_bar_chart\", \"type\": \"function\", \"signature\": \"(data, title)\", \"return_type\": \"None\", \"short_description\": \"Generates a bar chart from the provided data and sets the title.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"generateChart\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \".Axes\", \"short_description\": \"Generates a bar chart based on the provided monthly data.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"generateChart\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"None\", \"short_description\": \"Generates a bar chart based on the provided monthly data.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"generateBarChart\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"None\", \"short_description\": \"Generates a bar chart from the provided data and returns None. The chart is not displayed but saved as a file instead.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"save_plots_to_file\", \"type\": \"callable\", \"signature\": \"(plots, file_path, format='png')\", \"return_type\": \"None\", \"short_description\": \"Save multiple plots to a file. The plots can be either matplotlib figures or Seaborn objects.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"generate_match_results\", \"type\": \"function\", \"signature\": \"(teams, goals, penalties, penalty_cost)\", \"return_type\": \"tuple(DataFrame, list(plots))\", \"short_description\": \"Generates match results and plots for each team, including goals and penalty costs, using bar plots. Returns the results as a DataFrame and a list of plots.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"plot_close\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Close all currently open matplotlib plots.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"plot_close\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Close all active plots.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"plot_close\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Close all open figures.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"generate_match_results\", \"type\": \"function\", \"signature\": \"(goals, penalties)\", \"return_type\": \"tuple\", \"short_description\": \"Generates match results for a set of teams based on the number of goals and penalties, and returns the results along with the generated plots.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"reset_plots\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Reset all plots and close all figure windows.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"save_plots_to_file\", \"type\": \"callable\", \"signature\": \"(plots, file_path)\", \"return_type\": \"None\", \"short_description\": \"Saves multiple plots to a file. Takes a list of plots and a file path as arguments.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"save_plots_to_file\", \"type\": \"callable\", \"signature\": \"(plots, file_path)\", \"return_type\": \"None\", \"short_description\": \"Save multiple plots to a file.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"save_plots_to_file\", \"type\": \"callable\", \"signature\": \"(plot_list, file_path, format='png')\", \"return_type\": \"None\", \"short_description\": \"Save a list of plots to a file. This function provides a way to save multiple plots to a specified file in different formats.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"closeAllFigures\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Closes all open figure windows.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"clear_plots\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Clears all existing figure windows.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"clear_plots\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Clears all figure windows. This function closes all open figure windows.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"reset_plots\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Resets all figure windows by clearing all plots and closing all figures.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"save_figure\", \"type\": \"callable\", \"signature\": \"(fig=None, filename=None, format=None)\", \"return_type\": \"None\", \"short_description\": \"Save the current figure to a file. This function allows specifying the figure to save, the filename, and the format (e.g., 'png', 'jpg', 'pdf').\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"clear_plots\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Clears all existing figure windows.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"save_figure\", \"type\": \"callable\", \"signature\": \"(figure, file_path, format='png')\", \"return_type\": \"None\", \"short_description\": \"Save the current figure to a specified file path and format.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"close_all_figures\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Closes all open figure windows.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"plot_close\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Closes all currently open figure windows.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"plot_close\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Close the current figure or all figures if specified.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"save_figure\", \"type\": \"callable\", \"signature\": \"(fig, filename, format='png')\", \"return_type\": \"None\", \"short_description\": \"Save a figure to a file. This function allows specifying the figure to save and the filename along with the format.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"close_figure\", \"type\": \"callable\", \"signature\": \"(figure=None)\", \"return_type\": \"None\", \"short_description\": \"Close a specified figure window. Accepts a figure instance, figure number, or 'all' to close all figures.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"save_figure\", \"type\": \"callable\", \"signature\": \"(fig, filename, format='png')\", \"return_type\": \"None\", \"short_description\": \"Save the given figure to a file. This function allows specifying the format and ensures the figure is saved correctly.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"save_figure\", \"type\": \"callable\", \"signature\": \"(fig, filename, format='png')\", \"return_type\": \"None\", \"short_description\": \"Save a figure to a specified file with the given format.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"save_figure\", \"type\": \"callable\", \"signature\": \"(fig, filename, format='png')\", \"return_type\": \"None\", \"short_description\": \"Save a figure to a file. This function provides more control over the file format and quality compared to the built-in plt.savefig method.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"save_figure\", \"type\": \"callable\", \"signature\": \"(fig, filename, format='png')\", \"return_type\": \"None\", \"short_description\": \"Save a figure to a file. This function allows specifying the figure to save, the filename, and the format of the image.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"generate_plots\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame)\", \"return_type\": \"tuple\", \"short_description\": \"Generates and returns a tuple of Seaborn plots for analysis.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"save_figure\", \"type\": \"callable\", \"signature\": \"(fig, filename, format='png')\", \"return_type\": \"None\", \"short_description\": \"Save a figure to a specified file with the given format.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"save_figure\", \"type\": \"callable\", \"signature\": \"(fig, filename, format='png')\", \"return_type\": \"None\", \"short_description\": \"Save the given figure to a file. This function provides control over the file format and can be used to save figures in various formats.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"close_figures\", \"type\": \"callable\", \"signature\": \"(figures=None)\", \"return_type\": \"None\", \"short_description\": \"Closes one or more figure windows. If 'figures' is None, it closes all currently open figures. If 'figures' is a list, it closes each figure specified in the list.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"plotTopWords\", \"type\": \"function\", \"signature\": \"(df_top, save_path=None)\", \"return_type\": \"None or `.Axes`\", \"short_description\": \"Plots a bar chart of the top words based on their frequency and optionally saves the plot to a file.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"generateWordFrequencyChart\", \"type\": \"function\", \"signature\": \"(dataFrame, savePath=None)\", \"return_type\": \"None or matplotlib.pyplot.Axes\", \"short_description\": \"Generates a bar chart of the top 10 most frequent words in a given DataFrame's text column.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"generateWordFrequencyPlot\", \"type\": \"function\", \"signature\": \"(textData, stopWords, savePath=None)\", \"return_type\": \"None or matplotlib.figure.Figure\", \"short_description\": \"Generates a bar plot of the word frequencies for the given text data, excluding stop words. Optionally saves the plot to a file.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"plotWordFrequency\", \"type\": \"function\", \"signature\": \"(dataframe, savePath=None)\", \"return_type\": \"None or matplotlib.axes._subplots.AxesSubplot\", \"short_description\": \"Plots the frequency of the top 10 words from a given DataFrame and optionally saves the plot to a specified path.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"plotTopWords\", \"type\": \"function\", \"signature\": \"(df_top, save_path=None)\", \"return_type\": \"None or matplotlib.axes._axes.Axes\", \"short_description\": \"Plots a bar chart of the top 10 words by frequency from a DataFrame and optionally saves it to a file.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"generateWordFrequencyPlot\", \"type\": \"function\", \"signature\": \"(textData, stopWords, savePath=None)\", \"return_type\": \"None or matplotlib.pyplot.Figure\", \"short_description\": \"Generates a bar plot of the frequency of the top 10 words in the provided text data, optionally saving the plot to a file.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"plotWordFrequency\", \"type\": \"function\", \"signature\": \"(df, savePath=None)\", \"return_type\": \"None or matplotlib.axes._subplots.AxesSubplot\", \"short_description\": \"Plots the frequency of the top 10 words in a given DataFrame and optionally saves the plot to a file.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"plotWordFrequency\", \"type\": \"callable\", \"signature\": \"(df_top, save_path=None)\", \"return_type\": \"None or str\", \"short_description\": \"Plots a bar chart of the top 10 words by frequency from a given DataFrame and optionally saves it to a file.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"plotTopWords\", \"type\": \"function\", \"signature\": \"(dataframe, save_path=None)\", \"return_type\": \"None or `.Axes`\", \"short_description\": \"Plots the top 10 frequently occurring words in the text data from a given DataFrame and optionally saves the plot to a specified path.\"}"}
{"api_id": 82, "api_name": "matplotlib.pyplot.close", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"plotWordFrequency\", \"type\": \"function\", \"signature\": \"(dataframe, save_path=None)\", \"return_type\": \"None or matplotlib.axes._axes.Axes\", \"short_description\": \"Plots the frequency of the top 10 words in a given DataFrame and optionally saves the plot to a file.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"get_current_figure\", \"type\": \"property\", \"signature\": \"()\", \"return_type\": \"Figure\", \"short_description\": \"Retrieve the current Figure object.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"get_current_figure\", \"type\": \"property\", \"signature\": \"()\", \"return_type\": \"Figure\", \"short_description\": \"Get the current Figure object.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"get_current_figure\", \"type\": \"property\", \"signature\": \"()\", \"return_type\": \"Figure\", \"short_description\": \"Get the current Figure. If no figure exists, a new one is created.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"get_current_figure\", \"type\": \"property\", \"signature\": \"()\", \"return_type\": \"Figure\", \"short_description\": \"Get the current Figure.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"get_current_figure\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"Figure\", \"short_description\": \"Returns the current Figure object. If no Figure exists, it creates one.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"get_current_figure\", \"type\": \"property\", \"signature\": \"()\", \"return_type\": \"Figure\", \"short_description\": \"Retrieve the current Figure object. If no Figure exists, it creates a new one.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"get_current_axes\",\n  \"type\": \"function\",\n  \"signature\": \"()\",\n  \"return_type\": \"Axes\",\n  \"short_description\": \"Retrieves the current Axes object on the current figure.\"\n}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"get_current_axes\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"Axes\", \"short_description\": \"Retrieves the current Axes object on the current figure.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"get_current_axes\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"Axes\", \"short_description\": \"Retrieve the current Axes instance on the current figure.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"get_current_axes\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"Axes\", \"short_description\": \"Retrieves the current Axes instance on the current figure.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"getFigureAxes\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"Axes\", \"short_description\": \"Retrieves the current Axes instance for the active figure, creating one if none exists.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"getFigureAxes\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"Axes\", \"short_description\": \"Retrieve the current Axes instance from the active figure, creating one if none exists.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"get_current_axes\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"Axes\", \"short_description\": \"Retrieves the current Axes object on the current figure.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"getFigureAxes\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"Axes\", \"short_description\": \"Retrieves the current Axes instance associated with the current figure. If no Axes exists, a new one is created.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"get_current_axes\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"Axes\", \"short_description\": \"Retrieves the current Axes instance on the current figure.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"get_current_axes\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"Axes\", \"short_description\": \"Retrieves the current Axes instance on the current figure.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"getFigureAxes\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"Axes\", \"short_description\": \"Retrieve the current Axes instance for the active figure.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"plotHistogram\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"Axes\", \"short_description\": \"Plots a histogram of the given data and returns the current Axes.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"getFigureAxes\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"object\", \"short_description\": \"Retrieves the current Axes instance from the current figure or creates a new one if none exists.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"plotHistogram\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"Axes\", \"short_description\": \"Generates a histogram plot for the given data and returns the Axes instance.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"get_current_axes\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"Axes\", \"short_description\": \"Retrieve the current Axes object on the current figure.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"get_current_axes\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"Axes\", \"short_description\": \"Retrieves the current Axes object on the current figure. If no Axes exists, a new one is created.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"get_current_axes\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"Axes\", \"short_description\": \"Retrieve the current Axes object on the current figure.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/636", "solution": "{\n  \"name\": \"get_current_axes\",\n  \"type\": \"callable\",\n  \"signature\": \"()\",\n  \"return_type\": \"matplotlib.axes._axes.Axes\",\n  \"short_description\": \"Retrieves the current Axes object associated with the current figure. If no Axes exists, a new one is created.\"\n}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"get_current_axes\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"Axes\", \"short_description\": \"Retrieves the current Axes object on the current figure.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/636", "solution": "{\n  \"name\": \"get_current_axes\",\n  \"type\": \"function\",\n  \"signature\": \"()\",\n  \"return_type\": \"object\",\n  \"short_description\": \"Retrieves the current Axes instance on the current figure.\"\n}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"get_current_axes\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"Axes\", \"short_description\": \"Retrieves the current Axes object associated with the current figure.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/636", "solution": "{\n  \"name\": \"get_current_axes\",\n  \"type\": \"function\",\n  \"signature\": \"()\",\n  \"return_type\": \"object\",\n  \"short_description\": \"Retrieves the current Axes instance associated with the current figure.\"\n}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"get_current_axes\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"matplotlib.axes.Axes\", \"short_description\": \"Returns the current Axes object associated with the current figure.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"get_current_axes\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"object\", \"short_description\": \"Retrieves the current Axes object associated with the current figure. If no Axes exists, a new one is created.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"get_current_figure\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"Figure\", \"short_description\": \"Retrieve the current Figure object in the pyplot figure stack.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"get_current_axes\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"Axes\", \"short_description\": \"Retrieves the current Axes instance associated with the current figure in Matplotlib.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"get_current_axes\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"Axes\", \"short_description\": \"Retrieves the current Axes instance associated with the current figure in Matplotlib.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"get_current_figure\",\n  \"type\": \"function\",\n  \"signature\": \"()\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Retrieves the current Figure object in Matplotlib.\"\n}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"get_current_axes\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"Axes\", \"short_description\": \"Retrieves the current Axes instance associated with the current figure in Matplotlib.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"get_current_axes\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"Axes\", \"short_description\": \"Retrieves the current Axes object on the current figure.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"get_current_axes\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"Axes\", \"short_description\": \"Retrieve the current Axes instance on the current figure.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"get_current_axes\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"Axes\", \"short_description\": \"Retrieves the current Axes instance associated with the current figure in Matplotlib.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"get_current_figure\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"Figure\", \"short_description\": \"Get the current Figure object.\"}"}
{"api_id": 83, "api_name": "matplotlib.pyplot.gca", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"get_current_axes\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"Axes\", \"short_description\": \"Retrieves the current Axes instance associated with the current figure in Matplotlib.\"}"}
{"api_id": 84, "api_name": "matplotlib.axes.Axes", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"plotForecast\", \"type\": \"function\", \"signature\": \"(data, forecast, ax)\", \"return_type\": \"None\", \"short_description\": \"Plots historical data along with forecasted values on the provided Axes instance.\"}"}
{"api_id": 84, "api_name": "matplotlib.axes.Axes", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"plotTimeSeriesForecast\", \"type\": \"function\", \"signature\": \"(data, forecast, dates, label1, label2)\", \"return_type\": \"None\", \"short_description\": \"Plots a time series with forecasted values on a single Axes instance.\"}"}
{"api_id": 84, "api_name": "matplotlib.axes.Axes", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"generateARIMAForecastPlot\", \"type\": \"function\", \"signature\": \"(data: pd.DataFrame, steps: int) => (List[float], Axes)\", \"return_type\": \"A list of forecasted values and the Axes object used for plotting.\", \"short_description\": \"Generates an ARIMA forecast plot from given data and returns the forecasted values and the Axes object used for plotting.\"}"}
{"api_id": 84, "api_name": "matplotlib.axes.Axes", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"plotForecast\", \"type\": \"function\", \"signature\": \"(fig, ax, historicalData, forecast)\", \"return_type\": \"None\", \"short_description\": \"Plots historical and forecasted data on the provided Axes object.\"}"}
{"api_id": 84, "api_name": "matplotlib.axes.Axes", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"plotTimeSeriesForecast\", \"type\": \"function\", \"signature\": \"(dataFrame, steps, labelX, labelY)\", \"return_type\": \"Tuple[List[float], plt.Axes]\", \"short_description\": \"Plots a time series forecast based on historical data using a given number of forecast steps. The function takes a DataFrame, the number of steps to forecast, and labels for the x and y axes.\"}"}
{"api_id": 84, "api_name": "matplotlib.axes.Axes", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"plotForecast\", \"type\": \"function\", \"signature\": \"(fig, ax, historicalData, forecastData, dates)\", \"return_type\": \"None\", \"short_description\": \"Plots historical and forecasted data on a given matplotlib Axes object.\"}"}
{"api_id": 84, "api_name": "matplotlib.axes.Axes", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"plotTimeSeriesForecast\", \"type\": \"function\", \"signature\": \"(data, model, steps)\", \"return_type\": \"Tuple[List[float], plt.Axes]\", \"short_description\": \"Plots a time series forecast using an ARIMA model and returns the forecasted values and the Axes object used for plotting.\"}"}
{"api_id": 84, "api_name": "matplotlib.axes.Axes", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"plotTimeSeriesForecast\", \"type\": \"function\", \"signature\": \"(dataFrame, steps, forecast)\", \"return_type\": \"Tuple[List[float], Axes]\", \"short_description\": \"Plots a time series forecast based on historical data using ARIMA model. Returns a tuple containing the forecasted values and the Axes object of the plot.\"}"}
{"api_id": 84, "api_name": "matplotlib.axes.Axes", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"plotForecast\", \"type\": \"function\", \"signature\": \"(ax, historicalData, forecastData, dates)\", \"return_type\": \"None\", \"short_description\": \"Plots historical and forecasted data on a given Axes instance.\"}"}
{"api_id": 84, "api_name": "matplotlib.axes.Axes", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"generateTimeSeriesForecast\", \"type\": \"function\", \"signature\": \"(data, modelOrder, forecastSteps)\", \"return_type\": \"Tuple[List[float], Axes]\", \"short_description\": \"Generates a time series forecast using an ARIMA model and returns the forecasted values and the plot axes.\"}"}
{"api_id": 85, "api_name": "matplotlib.pyplot.imshow", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"displayWordCloud\",\n  \"type\": \"callable\",\n  \"signature\": \"(text, width=800, height=400, background_color='white', max_words=200, font_path=None, mode='RGB', min_font_size=4, max_font_size=None, relative_scaling='auto', normalize_plurals=True, contour_width=0, contour_color='black', repeat=False, scale=1, color_func=None, regexp=None, collocations=True, colormap=None, embed_font=True, figsize=(10, 5), axis_off=True, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generates and displays a word cloud from the provided text using the Matplotlib library.\"\n}"}
{"api_id": 85, "api_name": "matplotlib.pyplot.imshow", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"generateWordCloudImage\",\n  \"type\": \"function\",\n  \"signature\": \"(text)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generates a word cloud image from the provided text and displays it using matplotlib.\"\n}"}
{"api_id": 85, "api_name": "matplotlib.pyplot.imshow", "task_id": "BigCodeBench/34", "solution": "{\"name\": \"generateWordCloud\", \"type\": \"callable\", \"signature\": \"(text)\", \"return_type\": \"PIL.Image.Image\", \"short_description\": \"Generates a word cloud image from the provided text.\"}"}
{"api_id": 85, "api_name": "matplotlib.pyplot.imshow", "task_id": "BigCodeBench/34", "solution": "{\"name\": \"generateWordCloud\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"None\", \"short_description\": \"Generates a word cloud visualization from the provided text and displays it using matplotlib.\"}"}
{"api_id": 85, "api_name": "matplotlib.pyplot.imshow", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"generateWordCloud\",\n  \"type\": \"callable\",\n  \"signature\": \"(text, width=None, height=None, max_words=None, font_path=None, font_step=None, min_font_size=None, max_font_size=None, random_state=None, background_color=None, max_font_width=None, **kwargs)\",\n  \"return_type\": \"WordCloud\",\n  \"short_description\": \"Generate a word cloud image from the provided text.\"\n}"}
{"api_id": 85, "api_name": "matplotlib.pyplot.imshow", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"generateWordCloud\",\n  \"type\": \"function\",\n  \"signature\": \"(text, width=800, height=400, background_color='white', colormap='viridis', contour_width=0, contour_color='black', max_words=200, font_path=None, min_font_size=4, max_font_size=None, random_state=None, scale=1, color_func=None, mode='RGB', relative_scaling='auto', regexp=None, collocations=True, pause=0, **kwargs)\",\n  \"return_type\": \"WordCloud\",\n  \"short_description\": \"Generates a word cloud from the provided text, allowing for customization of various parameters to control the appearance and behavior of the word cloud.\"\n}"}
{"api_id": 85, "api_name": "matplotlib.pyplot.imshow", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"generateWordCloud\",\n  \"type\": \"function\",\n  \"signature\": \"(text)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generates a word cloud visualization from the provided text.\"\n}"}
{"api_id": 85, "api_name": "matplotlib.pyplot.imshow", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"generateWordCloud\",\n  \"type\": \"function\",\n  \"signature\": \"(text, width=800, height=400, background_color='white', colormap='viridis', max_words=200, font_path=None, min_font_size=4, max_font_size=None, scale=1, random_state=None, **kwargs)\",\n  \"return_type\": \"PIL.Image.Image\",\n  \"short_description\": \"Generates a word cloud image from the given text.\"\n}"}
{"api_id": 85, "api_name": "matplotlib.pyplot.imshow", "task_id": "BigCodeBench/34", "solution": "{\"name\": \"generateWordCloudImage\", \"type\": \"function\", \"signature\": \"(text, backgroundColor='white', width=800, height=400, maxWords=200, fontPath=None, preferHorizontal=0.9, mask=None, scale=1, colorFunction=None, normalizeFontSize=False, **kwargs)\", \"return_type\": \"PIL.Image.Image\", \"short_description\": \"Generates an image of a word cloud from the provided text. The image is returned as a PIL (Pillow) image object.\"}"}
{"api_id": 85, "api_name": "matplotlib.pyplot.imshow", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"generateWordCloud\",\n  \"type\": \"function\",\n  \"signature\": \"(text)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generates a word cloud visualization from the provided text.\"\n}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"setGlobalFont\",\n  \"type\": \"method\",\n  \"signature\": \"(fontFamily, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets the global font for all plots. *fontFamily* is the name of the font family to be set. Additional keyword arguments can be used to customize the font properties.\"\n}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"setGlobalFont\",\n  \"type\": \"method\",\n  \"signature\": \"(fontFamily)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets the global font for all plots to the specified family.\"\n}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"setGlobalFont\",\n  \"type\": \"function\",\n  \"signature\": \"(fontFamily, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets the global font for all plots. *fontFamily* is the name of the font family to be set. *kwargs* can be used to set other font properties such as weight and size.\"\n}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"setGlobalFont\",\n  \"type\": \"function\",\n  \"signature\": \"(fontFamily, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets the global font for all plots. *fontFamily* is the font family to be set, e.g., 'Arial'. Additional keyword arguments can be passed to customize the font properties.\"\n}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"setGlobalFont\",\n  \"type\": \"callable\",\n  \"signature\": \"(fontFamily, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Set the global font for all plots. *fontFamily* is the name of the font family to be set. *kwargs* can be used to set additional font properties.\"\n}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"setGlobalFont\",\n  \"type\": \"callable\",\n  \"signature\": \"(fontFamily, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets the global font for all plots. *fontFamily* is the name of the font family to be set. *kwargs* can be used to set additional font properties like weight and size.\"\n}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"setGlobalFont\",\n  \"type\": \"function\",\n  \"signature\": \"(fontFamily, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets the global font for all plots. *fontFamily* is the name of the font family to be set. *kwargs* allows for setting additional font properties.\"\n}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"setGlobalFont\",\n  \"type\": \"function\",\n  \"signature\": \"(fontFamily)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets the global font for all plots. *fontFamily* should be a string representing the font name.\"\n}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"setGlobalFont\",\n  \"type\": \"method\",\n  \"signature\": \"(fontFamily)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets the global font for all plots to the specified font family. This function does not return any value.\"\n}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/99", "solution": "{\"name\": \"setGlobalFont\", \"type\": \"function\", \"signature\": \"(family)\", \"return_type\": \"None\", \"short_description\": \"Sets the global font for all plots. *family* is the font family name.\"}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"setRcParams\", \"type\": \"callable\", \"signature\": \"(group, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Sets the current `.rcParams` for Matplotlib. *group* specifies the grouping for the rc parameters, and *kwargs* provides key-value pairs to update the parameters. This function supports abbreviation and grouping for ease of use.\"}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"setCurrentRcParams\", \"type\": \"callable\", \"signature\": \"(group, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Set the current `.rcParams` for the Matplotlib library. *group* specifies the grouping for the rc parameters, and *kwargs* are key-value pairs for specific parameters. This function supports abbreviated aliases for quick access.\"}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/100", "solution": "{\n  \"name\": \"setRcParams\",\n  \"type\": \"callable\",\n  \"signature\": \"(group, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets the current `.rcParams` for Matplotlib. *group* specifies the grouping for the rc parameters, such as lines or axes. *kwargs* allows for setting multiple parameters at once. This function supports abbreviated properties like 'lw' for linewidth and 'c' for color.\"\n}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"setRcParams\", \"type\": \"callable\", \"signature\": \"(group, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Set the current `.rcParams`. *group* is the grouping for the rc, e.g., for ``lines.linewidth`` the group is ``lines``, for ``axes.facecolor``, the group is ``axes``, and so on. *kwargs* is a dictionary of attribute name/value pairs. This function supports both full attribute names and their aliases for convenience. Note that it does not support nested groups or lists/tuples for groups.\"}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"setRcParameters\", \"type\": \"callable\", \"signature\": \"(group, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Sets the current `.rcParams` for Matplotlib. *group* is the grouping for the rc, where settings can be specified. *kwargs* are keyword arguments for setting specific parameters within the group. This function allows for easy customization of Matplotlib's appearance settings without delving into the hierarchical structure.\"}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"setRcParameters\", \"type\": \"callable\", \"signature\": \"(group, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Set the current `.rcParams` for Matplotlib. *group* is the grouping for the rc, e.g., for `lines.linewidth` the group is `lines`, for `axes.facecolor`, the group is `axes`. *kwargs* provides key-value pairs to update the parameters. This function does not return anything but modifies the current state of `.rcParams`.\"}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/100", "solution": "{\n  \"name\": \"setCurrentRcParams\",\n  \"type\": \"callable\",\n  \"signature\": \"(group, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Set the current `.rcParams` for Matplotlib. *group* specifies the grouping for the rc parameters, and *kwargs* provides key-value pairs for specific properties. This function supports groupings and abbreviated properties for convenience.\"\n}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/100", "solution": "{\n  \"name\": \"setCurrentRcParams\",\n  \"type\": \"callable\",\n  \"signature\": \"(group, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Set the current `.rcParams` for the Matplotlib library. *group* specifies the grouping for the rcParams, and *kwargs* is a dictionary of attribute name/value pairs. This API call supports abbreviated properties and groupings for convenience.\"\n}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"setRcParams\", \"type\": \"callable\", \"signature\": \"(group, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Sets the current `.rcParams` for Matplotlib. *group* specifies the grouping for the rc parameters, and *kwargs* provides key-value pairs for attribute name/value settings. This function supports both abbreviated aliases and nested group settings.\"}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/100", "solution": "{\n  \"name\": \"setFontConfig\",\n  \"type\": \"function\",\n  \"signature\": \"(fontFamily, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets the font configuration for the current plot. *fontFamily* is the font family to be set. *kwargs* can be used to set additional font properties such as weight and size.\"\n}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"setFontStyle\",\n  \"type\": \"callable\",\n  \"signature\": \"(font_dict)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets the font style for all text in the current matplotlib figure. The *font_dict* parameter should be a dictionary specifying the font properties, such as family, weight, and size.\"\n}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"setMatplotlibFont\",\n  \"type\": \"callable\",\n  \"signature\": \"(font_config)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets the font configuration for the current matplotlib plot. *font_config* is a dictionary where keys are font properties (like 'family' or 'weight') and values are the corresponding settings.\"\n}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"setFontStyle\", \"type\": \"callable\", \"signature\": \"(fontName, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Sets the font style for all text elements in the plot. *fontName* is the name of the font family to be used. **kwargs* can be used to specify additional font properties such as weight and size. Example usage: setFontStyle('Arial', weight='bold', size='larger') sets the font to Arial with bold weight and larger size.\"}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"setMatplotlibFont\",\n  \"type\": \"function\",\n  \"signature\": \"(font_dict)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets the current font configuration for matplotlib plots using a dictionary.\"\n}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"setFontArial\", \"type\": \"callable\", \"signature\": \"(font_dict)\", \"return_type\": \"None\", \"short_description\": \"Sets the font to Arial for the current matplotlib plot configuration. *font_dict* is a dictionary specifying the font properties.\"}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"setFontArial\", \"type\": \"function\", \"signature\": \"(fontDict)\", \"return_type\": \"None\", \"short_description\": \"Sets the font to Arial for all text elements in the current matplotlib plot.\"}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"setFontStyle\", \"type\": \"callable\", \"signature\": \"(fontDict)\", \"return_type\": \"None\", \"short_description\": \"Sets the font style for all text in plots using the specified dictionary. The dictionary should contain font properties such as 'family', 'weight', and 'size'. This function modifies the global font settings for matplotlib.\"}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"setFontConfig\", \"type\": \"callable\", \"signature\": \"(fontDict)\", \"return_type\": \"None\", \"short_description\": \"Sets the font configuration globally for all plots. The *fontDict* parameter is a dictionary specifying the font family, weight, and size.\"}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"setMatplotlibFont\", \"type\": \"callable\", \"signature\": \"(font_config)\", \"return_type\": \"None\", \"short_description\": \"Set the default font configuration for Matplotlib plots. *font_config* is a dictionary specifying the font properties, such as family, weight, and size.\"}"}
{"api_id": 86, "api_name": "matplotlib.pyplot.rc", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"setFontConfig\",\n  \"type\": \"callable\",\n  \"signature\": \"(font_config)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets the global font configuration for the current matplotlib plot. *font_config* should be a dictionary specifying the font properties.\"\n}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/108", "solution": "{\n  \"name\": \"set_y_axis_label\",\n  \"type\": \"callable\",\n  \"signature\": \"(ylabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Set the label for the y-axis with various formatting options.\"\n}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/108", "solution": "{\n  \"name\": \"set_y_label\",\n  \"type\": \"function\",\n  \"signature\": \"(ylabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Set the label for the y-axis.\"\n}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"setYLabel\", \"type\": \"function\", \"signature\": \"(ylabel, fontdict=None, labelpad=None, loc=None, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Set the label for the y-axis. This function is a high-level alternative for setting the y-axis label, font properties, and positioning.\"}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/108", "solution": "{\n  \"name\": \"set_y_label\",\n  \"type\": \"function\",\n  \"signature\": \"(ylabel, fontdict=None, labelpad=None, loc=None, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets the label for the y-axis in a plot.\"\n}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/108", "solution": "{\n  \"name\": \"plot_time_series\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe, frequency, decomposition_model)\",\n  \"return_type\": \"tuple(decomposition_result, plot_axis)\",\n  \"short_description\": \"Plots a time series and performs seasonal decomposition. Accepts a DataFrame, frequency, and decomposition model to visualize and analyze time series data.\"\n}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"setYLabel\", \"type\": \"function\", \"signature\": \"(ylabel, fontdict=None, labelpad=None, loc=None, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Set the label for the y-axis with various optional parameters to customize the appearance.\"}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"setYLabel\", \"type\": \"function\", \"signature\": \"(yLabel, fontDict=None, labelPad=None, loc=None, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Sets the label for the y-axis. This function provides a high-level alternative to setting the label position and appearance directly through parameters.\"}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"setYLabel\", \"type\": \"function\", \"signature\": \"(ylabel, fontdict=None, labelpad=None, loc=None, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Set the label for the y-axis. This function is a high-level alternative for setting the y-axis label, allowing for easier customization of the label's appearance and position.\"}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/108", "solution": "{\n  \"name\": \"set_y_axis_label\",\n  \"type\": \"callable\",\n  \"signature\": \"(ylabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Set the label for the y-axis.\"\n}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"setYLabel\", \"type\": \"function\", \"signature\": \"(ylabel, fontdict=None, labelpad=None, loc=None, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Set the label for the y-axis.\"}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotAgeDistribution\", \"type\": \"function\", \"signature\": \"(df)\", \"return_type\": \"(Counter, plt.Axes)\", \"short_description\": \"Plots the distribution of ages for names that appear more than once in the DataFrame.\"}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotAgeDistribution\", \"type\": \"function\", \"signature\": \"(data, ages)\", \"return_type\": \"None\", \"short_description\": \"Plots a histogram of the ages for duplicate names in the given data.\"}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/530", "solution": "{\n  \"name\": \"generate_age_distribution_chart\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe, title, xlabel, ylabel)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generates a histogram to display the distribution of ages for duplicate names in a given DataFrame.\"\n}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotAgesForDuplicateNames\", \"type\": \"function\", \"signature\": \"(df)\", \"return_type\": \"tuple(Counter, plt.Axes)\", \"short_description\": \"Plots a histogram of ages for names that appear more than once in the DataFrame, and returns a counter of age counts and the Axes object of the plot.\"}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotAgeDistribution\", \"type\": \"function\", \"signature\": \"(dataframe, ageColumn)\", \"return_type\": \"tuple(Counter, plt.Axes)\", \"short_description\": \"Plots a histogram of the specified age column in the given dataframe to visualize the distribution of ages, specifically highlighting duplicates.\"}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotAgeDistribution\", \"type\": \"function\", \"signature\": \"(data, ages)\", \"return_type\": \"plt.Figure\", \"short_description\": \"Plots a histogram of the ages for duplicate names in the given data.\"}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotAgeDistribution\", \"type\": \"function\", \"signature\": \"(dataframe, title)\", \"return_type\": \"None\", \"short_description\": \"Plots a histogram of the ages in the given DataFrame, grouped by names that appear more than once. The plot is titled with the provided title.\"}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotAgeDistribution\", \"type\": \"function\", \"signature\": \"(dataframe, target_column)\", \"return_type\": \"tuple(Counter, plt.Axes)\", \"short_description\": \"Plots a histogram of the ages for names that appear more than once in the given dataframe.\"}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/530", "solution": "{\n  \"name\": \"plotAgeDistributionForDuplicateNames\",\n  \"type\": \"callable\",\n  \"signature\": \"(df: pd.DataFrame)\",\n  \"return_type\": \"(Counter, plt.Axes)\",\n  \"short_description\": \"Plots the age distribution for rows with duplicate names in a DataFrame and returns a Counter of ages and the Axes object of the plot.\"\n}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/530", "solution": "{\n  \"name\": \"generate_age_distribution_chart\",\n  \"type\": \"function\",\n  \"signature\": \"(df: pd.DataFrame, age_column: str, name_column: str)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generates a histogram to visualize the distribution of ages for names that appear more than once in the given DataFrame.\"\n}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generate_traffic_data\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple(str, matplotlib.axes._axes.Axes)\", \"short_description\": \"Generates a CSV file with simulated traffic data and plots the data using matplotlib.\"}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"plotTrafficData\", \"type\": \"function\", \"signature\": \"(df, title, xlabel, ylabel)\", \"return_type\": \"None\", \"short_description\": \"Plots a line chart for traffic data from a DataFrame. The chart includes a title and labels for the x and y axes.\"}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"setYLabel\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, labelpad=None, loc=None, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Sets the label for the y-axis. This is a high-level alternative for passing parameters *y* and *horizontalalignment*.\"}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"set_ylabel\", \"type\": \"function\", \"signature\": \"(ylabel, fontdict=None, labelpad=None, loc=None, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Set the label for the y-axis.\"}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"set_ylabel\", \"type\": \"function\", \"signature\": \"(ylabel, fontdict=None, labelpad=None, loc=None, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Set the label for the y-axis.\"}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"set_y_axis_label\", \"type\": \"callable\", \"signature\": \"(label, fontdict=None, labelpad=None, loc=None, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Set the label for the y-axis with a specified text, optionally configuring font, padding, and location.\"}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple[str, plt.Axes]\", \"short_description\": \"Generates traffic data and plots it over time using matplotlib.\"}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"set_y_label\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, labelpad=None, loc=None, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Set the label for the y-axis with various options for customization.\"}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple\", \"short_description\": \"Generates a CSV file with simulated traffic data and plots it using matplotlib.\"}"}
{"api_id": 87, "api_name": "matplotlib.pyplot.ylabel", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"plot_traffic_data\",\n  \"type\": \"function\",\n  \"signature\": \"()\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Plots the traffic data from the CSV file, showing the count of vehicles over time.\"\n}"}
{"api_id": 88, "api_name": "matplotlib.pyplot.colorbar", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generate_spectrogram\",\n  \"type\": \"callable\",\n  \"signature\": \"(matrix, samplerate, title='Spectrogram')\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Generates a spectrogram from a matrix and displays a colorbar for amplitude visualization.\"\n}"}
{"api_id": 88, "api_name": "matplotlib.pyplot.colorbar", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generateSpectrogram\",\n  \"type\": \"function\",\n  \"signature\": \"(matrix, samplerate, title='Spectrogram')\",\n  \"return_type\": \"figure\",\n  \"short_description\": \"Generates a spectrogram from a matrix and displays a colorbar for amplitude visualization.\"\n}"}
{"api_id": 88, "api_name": "matplotlib.pyplot.colorbar", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generate_spectrogram\",\n  \"type\": \"function\",\n  \"signature\": \"(matrix, samplerate, x_axis='time', y_axis='log')\",\n  \"return_type\": \"figure\",\n  \"short_description\": \"Generates a spectrogram from a given matrix and samplerate, with customizable axes labels.\"\n}"}
{"api_id": 88, "api_name": "matplotlib.pyplot.colorbar", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generateSpectrogram\",\n  \"type\": \"callable\",\n  \"signature\": \"(matrix, samplerate, x_axis='time', y_axis='log')\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Generates a spectrogram from a matrix and displays it with a colorbar.\"\n}"}
{"api_id": 88, "api_name": "matplotlib.pyplot.colorbar", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generate_spectrogram\",\n  \"type\": \"function\",\n  \"signature\": \"(matrix, samplerate)\",\n  \"return_type\": \"figure\",\n  \"short_description\": \"Generates a spectrogram from a matrix and sample rate, and adds a colorbar to the plot.\"\n}"}
{"api_id": 88, "api_name": "matplotlib.pyplot.colorbar", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generate_spectrogram\",\n  \"type\": \"function\",\n  \"signature\": \"(data, samplerate, matrix, axis='log')\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generates a spectrogram from a given audio data and matrix, and adds a colorbar to the plot.\"\n}"}
{"api_id": 88, "api_name": "matplotlib.pyplot.colorbar", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generate_spectrogram\",\n  \"type\": \"function\",\n  \"signature\": \"(matrix, samplerate, x_axis='time', y_axis='log', format='%+2.0f dB')\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Generates a spectrogram from a given matrix and samplerate, and adds a colorbar with a specified format.\"\n}"}
{"api_id": 88, "api_name": "matplotlib.pyplot.colorbar", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generateSpectrogram\",\n  \"type\": \"function\",\n  \"signature\": \"(matrix, samplerate, x_axis='time', y_axis='log')\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Generates a spectrogram from a given matrix and samplerate, and adds a colorbar to the plot.\"\n}"}
{"api_id": 88, "api_name": "matplotlib.pyplot.colorbar", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generateSpectrogram\",\n  \"type\": \"function\",\n  \"signature\": \"(data, samplerate, M, N, L)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Generates a spectrogram from audio data and returns a matplotlib Figure object.\"\n}"}
{"api_id": 88, "api_name": "matplotlib.pyplot.colorbar", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generate_spectrogram\",\n  \"type\": \"function\",\n  \"signature\": \"(matrix, samplerate, x_axis='time', y_axis='log')\",\n  \"return_type\": \"figure\",\n  \"short_description\": \"Generates a spectrogram from a matrix and displays it with a colorbar.\"\n}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"generateBarChart\", \"type\": \"callable\", \"signature\": \"(data: dict[tuple[str], int], title: str)\", \"return_type\": \"Optional[matplotlib.axes._axes.Axes]\", \"short_description\": \"Generates a bar chart from the provided data dictionary and optionally sets a title.\"}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"generateDuplicatePlot\", \"type\": \"function\", \"signature\": \"(csvFilePath: str)\", \"return_type\": \"(duplicates: Counter, ax: Optional[Axes])\", \"short_description\": \"Generates a bar plot of duplicate entries from a CSV file using matplotlib.\"}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/528", "solution": "{\n  \"name\": \"plot_duplicates\",\n  \"type\": \"function\",\n  \"signature\": \"(*, title=None, xlabel=None, ylabel=None, legend=True)\",\n  \"return_type\": \"tuple[Counter, plt.Axes]\",\n  \"short_description\": \"Plots the duplicates found in a CSV file using a bar chart. Returns the count of duplicates and the Axes object of the plot.\"\n}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"plotDuplicateEntries\", \"type\": \"function\", \"signature\": \"(*, title=None, xlabel=None, ylabel=None)\", \"return_type\": \"tuple\", \"short_description\": \"Plots a bar graph of duplicate entries from a CSV file.\"}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"plotDuplicateEntries\", \"type\": \"callable\", \"signature\": \"(duplicates: Counter, title: str, xlabel: str, ylabel: str)\", \"return_type\": \"None\", \"short_description\": \"Plots the duplicate entries found in a CSV file using a bar chart with a title and axis labels.\"}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"plotDuplicateEntries\", \"type\": \"function\", \"signature\": \"(duplicates, ax=None)\", \"return_type\": \"Tuple[Counter, Optional[plt.Axes]]\", \"short_description\": \"Plots the duplicate entries from a CSV file using matplotlib.\"}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"generate_plot\", \"type\": \"function\", \"signature\": \"(data, title, x_label, y_label)\", \"return_type\": \"None\", \"short_description\": \"Generates a simple bar plot using the provided data and labels.\"}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"generate_bar_chart\", \"type\": \"callable\", \"signature\": \"(data, title='Bar Chart', xlabel='X Axis', ylabel='Y Axis')\", \"return_type\": \"matplotlib.axes._subplots.AxesSubplot\", \"short_description\": \"Generates a bar chart from the provided data and optionally customizes the title and labels.\"}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/528", "solution": "{\n  \"name\": \"generate_duplicate_plot\",\n  \"type\": \"function\",\n  \"signature\": \"(csv_file_path, *args, **kwargs)\",\n  \"return_type\": \"tuple[Counter, plt.Axes]\",\n  \"short_description\": \"Generates a bar plot of duplicate entries found in a CSV file using matplotlib.\"\n}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"plotDuplicates\", \"type\": \"callable\", \"signature\": \"(duplicates: dict, title: str = 'Duplicate Entries')\", \"return_type\": \"None\", \"short_description\": \"Plots a bar chart of duplicate entries. Returns None.\"}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"plot_traffic_data\", \"type\": \"callable\", \"signature\": \"(data: pd.DataFrame, title: str, xlabel: str, ylabel: str)\", \"return_type\": \"plt\", \"short_description\": \"Plots a line chart for vehicle traffic data with a given title, x-axis label, and y-axis label.\"}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generate_traffic_data\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple(str, plt.Axes)\", \"short_description\": \"Generates a CSV file with traffic data and plots it using matplotlib.\"}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generate_traffic_data\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple(str, plt.Axes)\", \"short_description\": \"Generates a CSV file with simulated traffic data and plots it using matplotlib.\"}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generate_traffic_data\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple\", \"short_description\": \"Generates a CSV file with random traffic data for a given number of hours and plots the data using matplotlib.\"}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"plot_traffic_data\",\n  \"type\": \"function\",\n  \"signature\": \"(*, title='Traffic Data Over Time', xlabel='Time', ylabel='Vehicle Count', tight_layout=True, show=True)\",\n  \"return_type\": \"tuple(str, matplotlib.axes._axes.Axes)\",\n  \"short_description\": \"Plots the traffic data from a CSV file, applying a tight layout and optionally showing the plot.\"\n}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generate_traffic_data\", \"type\": \"function\", \"signature\": \"(*, hours, output_dir='./output')\", \"return_type\": \"tuple[str, matplotlib.axes._subplots.AxesSubplot]\", \"short_description\": \"Generates a CSV file with simulated traffic data and plots the data using matplotlib.\"}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generate_traffic_data\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple(str, matplotlib.axes._subplots.AxesSubplot)\", \"short_description\": \"Generates a CSV file with traffic data and plots it using matplotlib.\"}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"generate_traffic_data\",\n  \"type\": \"function\",\n  \"signature\": \"(hours, output_dir='./output')\",\n  \"return_type\": \"tuple(str, plt.Axes)\",\n  \"short_description\": \"Generates a CSV file with random traffic data and plots it using matplotlib.\"\n}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"generate_traffic_data\",\n  \"type\": \"function\",\n  \"signature\": \"(hours, output_dir='./output')\",\n  \"return_type\": \"tuple(str, matplotlib.axes._axes.Axes)\",\n  \"short_description\": \"Generates a CSV file with random traffic data for a given number of hours and plots the data using matplotlib.\"\n}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"plot_traffic_data\", \"type\": \"callable\", \"signature\": \"(data_file_path, output_dir='./output')\", \"return_type\": \"tuple(str, matplotlib.axes._axes.Axes)\", \"short_description\": \"Plots traffic data from a CSV file using matplotlib and adjusts the layout for better visualization.\"}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"generateCharts\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame)\", \"return_type\": \"tuple\", \"short_description\": \"Generates and displays box plot and histogram for the given DataFrame.\"}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data: pd.DataFrame) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures for numerical columns in a DataFrame.\"}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"generateChartLayout\", \"type\": \"callable\", \"signature\": \"(fig, axes, pad=1.08, h_pad=None, w_pad=None, rect=None)\", \"return_type\": \"None\", \"short_description\": \"Adjust the padding between and around subplots in a figure and its axes.\"}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"apply_color_palette\",\n  \"type\": \"callable\",\n  \"signature\": \"(palette_name, seed=None)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Applies a specified color palette from seaborn to all plots in the current matplotlib figure.\"\n}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"generate_plot_grid\", \"type\": \"callable\", \"signature\": \"(rows, cols, data, plot_types)\", \"return_type\": \"list\", \"short_description\": \"Creates a grid of plots (e.g., box plots, histograms) from the provided data.\"}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"plot_box_and_hist\",\n  \"type\": \"function\",\n  \"signature\": \"(df: pd.DataFrame, ax: plt.Axes = None)\",\n  \"return_type\": \"tuple[plt.Axes, plt.Axes]\",\n  \"short_description\": \"Creates a figure with a box plot and histogram of a DataFrame's closing prices.\"\n}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"plotAdjustLayout\", \"type\": \"callable\", \"signature\": \"(fig, pad=1.08, h_pad=None, w_pad=None, rect=None)\", \"return_type\": \"None\", \"short_description\": \"Adjust the padding between and around subplots in a given figure.\"}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"generate_plot_grid\", \"type\": \"callable\", \"signature\": \"(rows: int, cols: int, figsize: tuple = (12, 8), data: pd.DataFrame, x_col: str, y_col: str = None, kind: str = 'scatter', kde: bool = False)\", \"return_type\": \"list\", \"short_description\": \"Generate a grid of plots using Seaborn's `.pairplot()` for all numeric columns or specific columns if provided.\"}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"function\", \"signature\": \"(data: pd.DataFrame) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures for each numeric column in the provided DataFrame.\"}"}
{"api_id": 89, "api_name": "matplotlib.pyplot.tight_layout", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"plotGridAdjustLayout\", \"type\": \"callable\", \"signature\": \"(*, pad=1.08, h_pad=None, w_pad=None, rect=None)\", \"return_type\": \"None\", \"short_description\": \"Adjusts the padding between and around subplots in a grid of plots.\"}"}
{"api_id": 90, "api_name": "matplotlib.pyplot.plot", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"plotData\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, data=None, **kwargs)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Plots multiple datasets on a single plot, with optional data labeling and customization.\"\n}"}
{"api_id": 90, "api_name": "matplotlib.pyplot.plot", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"plotRandomWalk\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, data=None, **kwargs)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Plots a random walk based on the provided data.\"\n}"}
{"api_id": 90, "api_name": "matplotlib.pyplot.plot", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"plot_random_walk\",\n  \"type\": \"function\",\n  \"signature\": \"(*, data=None, title=None, figsize=None)\",\n  \"return_type\": \"tuple[dict, plt.Axes]\",\n  \"short_description\": \"Plots a random walk and returns descriptive statistics and the Axes object.\"\n}"}
{"api_id": 90, "api_name": "matplotlib.pyplot.plot", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"plotRandomWalk\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, seed=0, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Plots a random walk generated with a given seed.\"\n}"}
{"api_id": 90, "api_name": "matplotlib.pyplot.plot", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"plotRandomWalk\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, seed=0, **kwargs)\",\n  \"return_type\": \"tuple[dict, Axes]\",\n  \"short_description\": \"Generates and plots a random walk based on the given number of elements and optional seed, then returns descriptive statistics and the Axes object.\"\n}"}
{"api_id": 90, "api_name": "matplotlib.pyplot.plot", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"plotRandomWalk\",\n  \"type\": \"function\",\n  \"signature\": \"(data, **kwargs)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Plots a random walk generated from a given list of elements.\"\n}"}
{"api_id": 90, "api_name": "matplotlib.pyplot.plot", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"plotRandomWalk\", \"type\": \"function\", \"signature\": \"elements, seed=0\", \"return_type\": \"dict, Axes\", \"short_description\": \"Generates and plots a random walk based on the given number of elements and seed, then returns descriptive statistics and the Axes object.\"}"}
{"api_id": 90, "api_name": "matplotlib.pyplot.plot", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"plotRandomWalk\",\n  \"type\": \"callable\",\n  \"signature\": \"(*, data=None, title='Random Walk', figsize=(10, 6), **kwargs)\",\n  \"return_type\": \"dict, Axes\",\n  \"short_description\": \"Plots a random walk and returns descriptive statistics and the Axes object.\"\n}"}
{"api_id": 90, "api_name": "matplotlib.pyplot.plot", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"plotData\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, data=None, **kwargs)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Plots multiple sets of data from various data structures, including lists, numpy arrays, and pandas DataFrames.\"\n}"}
{"api_id": 90, "api_name": "matplotlib.pyplot.plot", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"plotRandomWalk\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, seed=0, **kwargs)\",\n  \"return_type\": \"tuple[dict, matplotlib.axes._axes.Axes]\",\n  \"short_description\": \"Plots a random walk and returns descriptive statistics and the Axes object.\"\n}"}
{"api_id": 90, "api_name": "matplotlib.pyplot.plot", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"plotData\",\n  \"type\": \"callable\",\n  \"signature\": \"(*args, scalex=True, scaley=True, data=None, **kwargs)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Plots multiple sets of data points with optional formatting and scaling options.\"\n}"}
{"api_id": 90, "api_name": "matplotlib.pyplot.plot", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"plotDataWithFit\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, target_value, data=None, **kwargs)\",\n  \"return_type\": \"tuple[list, plt.Axes]\",\n  \"short_description\": \"Plots data points and a fitted curve for a specified target value.\"\n}"}
{"api_id": 90, "api_name": "matplotlib.pyplot.plot", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"plotDataPoints\",\n  \"type\": \"callable\",\n  \"signature\": \"(*args, target_value, scalex=True, scaley=True, data=None, **kwargs)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Plots the indices of a target value in an array as points on a graph.\"\n}"}
{"api_id": 90, "api_name": "matplotlib.pyplot.plot", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"plotData\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, scalex=True, scaley=True, **kwargs)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Plots data points or lines with optional formatting. This function is designed to plot data efficiently without the hierarchical structure of the matplotlib.pyplot.plot function.\"\n}"}
{"api_id": 90, "api_name": "matplotlib.pyplot.plot", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"plotDataPoints\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, target_value, **kwargs)\",\n  \"return_type\": \"tuple(list, matplotlib.axes._subplots.AxesSubplot)\",\n  \"short_description\": \"Plots data points from an array based on a target value, fitting a curve to the selected points and displaying the fit on the graph.\"\n}"}
{"api_id": 90, "api_name": "matplotlib.pyplot.plot", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"plotData\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, scalex=True, scaley=True, data=None, **kwargs)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Plots data points or lines. Accepts multiple datasets and supports various formatting options.\"\n}"}
{"api_id": 90, "api_name": "matplotlib.pyplot.plot", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"plotData\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, scalex=True, scaley=True, **kwargs)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Plots data points and fits a function to the data.\"\n}"}
{"api_id": 90, "api_name": "matplotlib.pyplot.plot", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"plotData\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, scalex=True, scaley=True, **kwargs)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Plots data points and fits a curve to the provided data.\"\n}"}
{"api_id": 90, "api_name": "matplotlib.pyplot.plot", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"plotData\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, scalex=True, scaley=True, data=None, **kwargs)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Plots data points and fits a function to the data.\"\n}"}
{"api_id": 90, "api_name": "matplotlib.pyplot.plot", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"plotDataPoints\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, scalex=True, scaley=True, data=None, **kwargs)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Plots data points from provided arrays or labels if data is provided.\"\n}"}
{"api_id": 91, "api_name": "matplotlib.pyplot.gcf", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"get_current_figure\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"figure\", \"short_description\": \"Retrieves the current figure object from the matplotlib figure stack.\"}"}
{"api_id": 91, "api_name": "matplotlib.pyplot.gcf", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"get_current_figure\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"Figure\", \"short_description\": \"Retrieves the current figure object from the pyplot figure stack.\"}"}
{"api_id": 91, "api_name": "matplotlib.pyplot.gcf", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"generate_spectrogram\", \"type\": \"function\", \"signature\": \"(matrix, samplerate)\", \"return_type\": \"figure\", \"short_description\": \"Generates a spectrogram from a given matrix and samplerate.\"}"}
{"api_id": 91, "api_name": "matplotlib.pyplot.gcf", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"get_current_figure\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"figure\", \"short_description\": \"Retrieves the current figure object used by matplotlib.pyplot. If no figure exists, it creates a new one.\"}"}
{"api_id": 91, "api_name": "matplotlib.pyplot.gcf", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"get_current_figure\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"figure\", \"short_description\": \"Retrieves the current figure object from the matplotlib figure stack. If no figure exists, it creates a new one.\"}"}
{"api_id": 91, "api_name": "matplotlib.pyplot.gcf", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"get_current_figure\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"Figure\", \"short_description\": \"Retrieves the current figure object used by matplotlib.pyplot.\"}"}
{"api_id": 91, "api_name": "matplotlib.pyplot.gcf", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"generate_spectrogram\", \"type\": \"function\", \"signature\": \"(matrix, samplerate)\", \"return_type\": \"figure\", \"short_description\": \"Generates a spectrogram from a given matrix and samplerate.\"}"}
{"api_id": 91, "api_name": "matplotlib.pyplot.gcf", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"get_current_figure\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"figure\", \"short_description\": \"Retrieve the current figure object from the matplotlib figure stack.\"}"}
{"api_id": 91, "api_name": "matplotlib.pyplot.gcf", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"generate_spectrogram\", \"type\": \"function\", \"signature\": \"(matrix, samplerate)\", \"return_type\": \"figure\", \"short_description\": \"Generates a spectrogram from a given matrix and samplerate.\"}"}
{"api_id": 91, "api_name": "matplotlib.pyplot.gcf", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"generate_spectrogram\", \"type\": \"function\", \"signature\": \"(matrix, samplerate)\", \"return_type\": \"figure\", \"short_description\": \"Generates a spectrogram from a given matrix and samplerate.\"}"}
{"api_id": 92, "api_name": "matplotlib.pyplot.xticks", "task_id": "BigCodeBench/560", "solution": "{\n  \"name\": \"plotMonthlyData\",\n  \"type\": \"function\",\n  \"signature\": \"(data, title='Monthly Data')\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Plots monthly data from a string input, where each entry is in the format 'YYYY-MM-DD' and separated by commas. The data is represented as a bar chart with months on the x-axis and values on the y-axis.\"\n}"}
{"api_id": 92, "api_name": "matplotlib.pyplot.xticks", "task_id": "BigCodeBench/560", "solution": "{\n  \"name\": \"plotBarChart\",\n  \"type\": \"function\",\n  \"signature\": \"(data, title='Monthly Data', xlabel='Month', ylabel='Value', rotation=None)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Plots a bar chart with the provided data and customizes it with a title, labels, and rotation for x-axis labels.\"\n}"}
{"api_id": 92, "api_name": "matplotlib.pyplot.xticks", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"plotMonthlyData\", \"type\": \"function\", \"signature\": \"(data, title='Monthly Data', xlabel='Month', ylabel='Value')\", \"return_type\": \"ax\", \"short_description\": \"Plots bar chart for monthly data with customizable labels and title.\"}"}
{"api_id": 92, "api_name": "matplotlib.pyplot.xticks", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"setPlotTitle\", \"type\": \"function\", \"signature\": \"(title, ax=None)\", \"return_type\": \"None\", \"short_description\": \"Sets the title of the plot. If no axes is provided, the current axes is used.\"}"}
{"api_id": 92, "api_name": "matplotlib.pyplot.xticks", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"plotMonthlyData\", \"type\": \"function\", \"signature\": \"(data, title='Monthly Data')\", \"return_type\": \"matplotlib.axes.Axes\", \"short_description\": \"Plots a bar chart for monthly data with customizable title.\"}"}
{"api_id": 92, "api_name": "matplotlib.pyplot.xticks", "task_id": "BigCodeBench/560", "solution": "{\n  \"name\": \"plotMonthlyData\",\n  \"type\": \"function\",\n  \"signature\": \"(data, *args, **kwargs)\",\n  \"return_type\": \"Axes\",\n  \"short_description\": \"Plots monthly data from a string input, handling the data to create a bar chart with appropriate labels and title.\"\n}"}
{"api_id": 92, "api_name": "matplotlib.pyplot.xticks", "task_id": "BigCodeBench/560", "solution": "{\n  \"name\": \"plotMonthlyData\",\n  \"type\": \"function\",\n  \"signature\": \"(data, title)\",\n  \"return_type\": \"Axes\",\n  \"short_description\": \"Plots bar chart for monthly data with specified title.\"\n}"}
{"api_id": 92, "api_name": "matplotlib.pyplot.xticks", "task_id": "BigCodeBench/560", "solution": "{\n  \"name\": \"plotMonthData\",\n  \"type\": \"function\",\n  \"signature\": \"(data, title)\",\n  \"return_type\": \"Axes\",\n  \"short_description\": \"Plots bar graph for monthly data with customizable title.\"\n}"}
{"api_id": 92, "api_name": "matplotlib.pyplot.xticks", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"plotMonthlyData\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"Axes\", \"short_description\": \"Plots monthly data from a string input and returns the Axes object for further customization.\"}"}
{"api_id": 92, "api_name": "matplotlib.pyplot.xticks", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"setMonthLabels\", \"type\": \"function\", \"signature\": \"(labels=None)\", \"return_type\": \"None\", \"short_description\": \"Set or update the labels for the x-axis months in a bar chart.\"}"}
{"api_id": 93, "api_name": "matplotlib.pyplot.axis", "task_id": "BigCodeBench/34", "solution": "{\"name\": \"generateWordCloud\", \"type\": \"function\", \"signature\": \"(text: str, width: int = 800, height: int = 400, background_color: str = 'white')\", \"return_type\": \"None\", \"short_description\": \"Generates a word cloud from the provided text and displays it using matplotlib.\"}"}
{"api_id": 93, "api_name": "matplotlib.pyplot.axis", "task_id": "BigCodeBench/34", "solution": "{\"name\": \"generateWordCloud\", \"type\": \"function\", \"signature\": \"(text: str)\", \"return_type\": \"None\", \"short_description\": \"Generates a word cloud visualization from the provided text.\"}"}
{"api_id": 93, "api_name": "matplotlib.pyplot.axis", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"generateWordCloud\",\n  \"type\": \"function\",\n  \"signature\": \"(text, format='png', background_color='black', max_words=200, stopwords=None, **kwargs)\",\n  \"return_type\": \"PIL.Image.Image\",\n  \"short_description\": \"Generates a word cloud from the provided text and returns it as an image.\"\n}"}
{"api_id": 93, "api_name": "matplotlib.pyplot.axis", "task_id": "BigCodeBench/34", "solution": "{\"name\": \"generateWordCloud\", \"type\": \"function\", \"signature\": \"(text, fontPath=None, width=400, height=200, margin=2, ranks_only=None, prefer_horizontal=0.9, mask=None, scale=1, color_func=None, max_words=200, min_font_size=4, stopwords=None, random_state=None, background_color='black', max_font_size=None, font_step=1, mode='RGB', relative_scaling='auto', norm_factor=None, **kwargs)\", \"return_type\": \"WordCloud\", \"short_description\": \"Generates a word cloud from the given text.\"}"}
{"api_id": 93, "api_name": "matplotlib.pyplot.axis", "task_id": "BigCodeBench/34", "solution": "{\"name\": \"generateWordCloud\", \"type\": \"function\", \"signature\": \"(text, size=None, background_color=None, max_words=None, max_font_size=None, random_state=None, font_path=None, prefer_horizontal=0.9, mask=None, scale=1, color_func=None, max_layout_tries=20, **kwargs)\", \"return_type\": \"WordCloud\", \"short_description\": \"Generates a word cloud from the provided text.\"}"}
{"api_id": 93, "api_name": "matplotlib.pyplot.axis", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"generateWordCloud\",\n  \"type\": \"function\",\n  \"signature\": \"(text, emit=True)\",\n  \"return_type\": \"WordCloud\",\n  \"short_description\": \"Generates a word cloud visualization from the provided text.\"\n}"}
{"api_id": 93, "api_name": "matplotlib.pyplot.axis", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"plotWordCloud\",\n  \"type\": \"function\",\n  \"signature\": \"(text, figsize=(10, 5), showAxis=False)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generates a word cloud visualization from the provided text and plots it with the specified figure size. Optionally hides the axis for a cleaner look.\"\n}"}
{"api_id": 93, "api_name": "matplotlib.pyplot.axis", "task_id": "BigCodeBench/34", "solution": "{\"name\": \"generateWordCloud\", \"type\": \"function\", \"signature\": \"(text: str, size: tuple = (10, 5), fontPath: str = None, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Generates a word cloud visualization from the provided text.\"}"}
{"api_id": 93, "api_name": "matplotlib.pyplot.axis", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"generateWordCloud\",\n  \"type\": \"function\",\n  \"signature\": \"(text, width=800, height=400, background_color='white')\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generates a word cloud from the provided text and displays it using matplotlib.\"\n}"}
{"api_id": 93, "api_name": "matplotlib.pyplot.axis", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"generateWordCloud\",\n  \"type\": \"function\",\n  \"signature\": \"(text, fontPath=None, width=400, height=200, margin=2, ranks_only=None, prefer_horizontal=0.9, mask=None, scale=1, color_func=None, max_words=200, min_font_size=4, stopwords=None, random_state=None, background_color='black', max_font_size=None, font_step=1, mode='RGB', relative_scaling='auto', regexp=None, collocations=True, normalize_plurals=True, contour_width=0, contour_color='black', repeat=False, include_numbers=False, min_word_length=0)\",\n  \"return_type\": \"WordCloud\",\n  \"short_description\": \"Generates a word cloud from the given text. This function allows customization of various parameters to tailor the word cloud to your needs.\"\n}"}
{"api_id": 94, "api_name": "matplotlib.pyplot.xlim", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"plotDistribution\", \"type\": \"function\", \"signature\": \"(data, bins=None)\", \"return_type\": \"tuple(Counter, Axes)\", \"short_description\": \"Generates a histogram and normal distribution plot for the given data.\"}"}
{"api_id": 94, "api_name": "matplotlib.pyplot.xlim", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"plotHistogram\", \"type\": \"function\", \"signature\": \"(data, bins=None)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a histogram plot for the given data with optional bin specification.\"}"}
{"api_id": 94, "api_name": "matplotlib.pyplot.xlim", "task_id": "BigCodeBench/532", "solution": "{\n  \"name\": \"plotDistribution\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Plots a histogram of the given data along with a normal distribution curve fitted to the data.\"\n}"}
{"api_id": 94, "api_name": "matplotlib.pyplot.xlim", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"plotDistribution\", \"type\": \"function\", \"signature\": \"(data, bins=4)\", \"return_type\": \"tuple(Counter, Axes)\", \"short_description\": \"Generates a histogram and normal distribution plot for the given data, with optional bin specification.\"}"}
{"api_id": 94, "api_name": "matplotlib.pyplot.xlim", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"plotDistribution\", \"type\": \"function\", \"signature\": \"(df, bins=4)\", \"return_type\": \"tuple(Counter, Axes)\", \"short_description\": \"Generates a histogram plot of the distribution of values in the DataFrame, along with a normal distribution curve if applicable.\"}"}
{"api_id": 94, "api_name": "matplotlib.pyplot.xlim", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"plotDistribution\", \"type\": \"function\", \"signature\": \"(data, bins=4)\", \"return_type\": \"tuple(Counter, Axes)\", \"short_description\": \"Generates a histogram of the given data along with a normal distribution curve fitted to the data. Returns a tuple containing a Counter of duplicate values and the Axes object of the plot.\"}"}
{"api_id": 94, "api_name": "matplotlib.pyplot.xlim", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"getSetXlim\", \"type\": \"function\", \"signature\": \"(*args, **kwargs)\", \"return_type\": \"tuple\", \"short_description\": \"Get or set the x limits of the current axes.\"}"}
{"api_id": 94, "api_name": "matplotlib.pyplot.xlim", "task_id": "BigCodeBench/532", "solution": "{\n  \"name\": \"plotDistribution\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Plots a histogram of the distribution of values in a DataFrame along with a fitted normal distribution curve.\"\n}"}
{"api_id": 94, "api_name": "matplotlib.pyplot.xlim", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"setPlotTitle\", \"type\": \"callable\", \"signature\": \"(title)\", \"return_type\": \"None\", \"short_description\": \"Sets the title of the current plot.\"}"}
{"api_id": 94, "api_name": "matplotlib.pyplot.xlim", "task_id": "BigCodeBench/532", "solution": "{\n  \"name\": \"plotDistribution\",\n  \"type\": \"function\",\n  \"signature\": \"(df, bins=4)\",\n  \"return_type\": \"tuple(Counter, Axes)\",\n  \"short_description\": \"Generates a histogram with a normal distribution curve overlay for the given DataFrame.\"\n}"}
{"api_id": 95, "api_name": "matplotlib.pyplot.Axes", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"plot_kmeans_clusters\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, title='KMeans Clustering Visualization')\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Plots a scatter plot of the given data points colored by their cluster labels.\"\n}"}
{"api_id": 95, "api_name": "matplotlib.pyplot.Axes", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"generatePlotFromTensor\", \"type\": \"function\", \"signature\": \"(tensor, clusters, randomState, init)\", \"return_type\": \"Tuple[np.ndarray, plt.Axes]\", \"short_description\": \"Generates a scatter plot from a given tensor using KMeans clustering and returns the cluster labels and the Axes object.\"}"}
{"api_id": 95, "api_name": "matplotlib.pyplot.Axes", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"plotKMeansClusters\", \"type\": \"function\", \"signature\": \"(data, clusters, ax=None)\", \"return_type\": \"plt.Axes\", \"short_description\": \"Plots a scatter plot of KMeans clustering results on an existing Axes instance or creates a new one if not provided.\"}"}
{"api_id": 95, "api_name": "matplotlib.pyplot.Axes", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"plotClusterVisualization\", \"type\": \"function\", \"signature\": \"(data, clusters, ax)\", \"return_type\": \"None\", \"short_description\": \"Plots a scatter plot of the cluster visualization on the provided Axes instance.\"}"}
{"api_id": 95, "api_name": "matplotlib.pyplot.Axes", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"plotKMeansClustering\", \"type\": \"function\", \"signature\": \"(data, n_clusters=3, random_state=0, n_init=10)\", \"return_type\": \"plt.Axes\", \"short_description\": \"Plots a KMeans clustering visualization on a 2D scatter plot.\"}"}
{"api_id": 95, "api_name": "matplotlib.pyplot.Axes", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"generateClusterPlot\", \"type\": \"function\", \"signature\": \"(data, clusters, title)\", \"return_type\": \"None\", \"short_description\": \"Generates a scatter plot to visualize KMeans clustering results.\"}"}
{"api_id": 95, "api_name": "matplotlib.pyplot.Axes", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"plotKMeansClustering\", \"type\": \"function\", \"signature\": \"(data, clusters, randomState, initIters)\", \"return_type\": \"(plt.Axes, np.ndarray)\", \"short_description\": \"Plots a KMeans clustering visualization from provided data and cluster parameters.\"}"}
{"api_id": 95, "api_name": "matplotlib.pyplot.Axes", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"generate_clustered_visualization\",\n  \"type\": \"function\",\n  \"signature\": \"(data, n_clusters, random_state, n_init)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a KMeans clustering visualization from given data and returns a tuple containing the cluster labels and the Axes object of the plot.\"\n}"}
{"api_id": 95, "api_name": "matplotlib.pyplot.Axes", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"plot_kmeans_clusters\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, title='KMeans Clustering Visualization')\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Plots a scatter plot of the given data points colored by their cluster labels.\"\n}"}
{"api_id": 95, "api_name": "matplotlib.pyplot.Axes", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"generateClusteringPlot\", \"type\": \"function\", \"signature\": \"(data, n_clusters=3, random_state=0, n_init=10)\", \"return_type\": \"(cluster_labels, axes)\", \"short_description\": \"Generates a KMeans clustering plot for the given data and returns the cluster labels and the Axes object.\"}"}
{"api_id": 95, "api_name": "matplotlib.pyplot.Axes", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"generateAgeDistributionPlot\", \"type\": \"function\", \"signature\": \"(data, names)\", \"return_type\": \"None\", \"short_description\": \"Generates a histogram plot to display the distribution of ages for given names.\"}"}
{"api_id": 95, "api_name": "matplotlib.pyplot.Axes", "task_id": "BigCodeBench/530", "solution": "{\n  \"name\": \"generatePlotForDuplicates\",\n  \"type\": \"function\",\n  \"signature\": \"(df: pd.DataFrame, duplicates_df: pd.DataFrame, duplicate_names: List[str])\",\n  \"return_type\": \"plt.Figure\",\n  \"short_description\": \"Generates a histogram plot to visualize the distribution of ages for names that appear more than once in the given DataFrame.\"\n}"}
{"api_id": 95, "api_name": "matplotlib.pyplot.Axes", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotAgeDistributionForDuplicateNames\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame)\", \"return_type\": \"(Counter, plt.Axes)\", \"short_description\": \"Generates a histogram of ages for names that appear more than once in the DataFrame.\"}"}
{"api_id": 95, "api_name": "matplotlib.pyplot.Axes", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotAgeDistributionForDuplicateNames\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame, duplicate_names: List[str], duplicates_df: pd.DataFrame) -> Tuple[Counter, plt.Axes]\", \"return_type\": \"Tuple[Counter, plt.Axes]\", \"short_description\": \"Plots the age distribution for individuals with duplicate names and returns the count of ages and the Axes object of the plot.\"}"}
{"api_id": 95, "api_name": "matplotlib.pyplot.Axes", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotAgeDistribution\", \"type\": \"function\", \"signature\": \"(data, ages)\", \"return_type\": \"plt.Figure\", \"short_description\": \"Plots a histogram of the ages for duplicate names in the given data.\"}"}
{"api_id": 95, "api_name": "matplotlib.pyplot.Axes", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotDuplicateAges\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> Tuple[Counter, Optional[plt.Axes]]\", \"return_type\": \"Tuple[Counter, Optional[plt.Axes]]\", \"short_description\": \"Plots a histogram of ages for names that appear more than once in the DataFrame.\"}"}
{"api_id": 95, "api_name": "matplotlib.pyplot.Axes", "task_id": "BigCodeBench/530", "solution": "{\n  \"name\": \"plotDuplicateAges\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe, title)\",\n  \"return_type\": \"plt.Figure\",\n  \"short_description\": \"Creates a histogram of ages for names that appear more than once in the given DataFrame.\"\n}"}
{"api_id": 95, "api_name": "matplotlib.pyplot.Axes", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotAgeDistributionForDuplicateNames\", \"type\": \"function\", \"signature\": \"(dataframe, duplicates_counter)\", \"return_type\": \"tuple\", \"short_description\": \"Plots a histogram of ages for names that appear more than once in the given dataframe and returns a counter of ages and the corresponding Axes object.\"}"}
{"api_id": 95, "api_name": "matplotlib.pyplot.Axes", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"generateHistogram\", \"type\": \"function\", \"signature\": \"(data, title, xLabel, yLabel)\", \"return_type\": \"plt.Axes\", \"short_description\": \"Generates a histogram plot on the given Axes object with the specified title and labels for the axes.\"}"}
{"api_id": 95, "api_name": "matplotlib.pyplot.Axes", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotAgeDistributionForDuplicateNames\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame)\", \"return_type\": \"(Counter, plt.Axes)\", \"short_description\": \"Plots a histogram of the ages for names that appear more than once in the DataFrame.\"}"}
{"api_id": 96, "api_name": "matplotlib.pyplot.subplot", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"plotDataWithOutliers\", \"type\": \"function\", \"signature\": \"data, column, outlierZScore\", \"return_type\": \"tuple\", \"short_description\": \"Plots the original and cleaned data with outliers highlighted. Returns the original data, cleaned data, and outlier indices.\"}"}
{"api_id": 96, "api_name": "matplotlib.pyplot.subplot", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"plotOutliers\", \"type\": \"callable\", \"signature\": \"(data, column, outlierZScore)\", \"return_type\": \"tuple\", \"short_description\": \"Plots the original and cleaned data with outliers highlighted, and returns the original data, cleaned data, and outlier indices.\"}"}
{"api_id": 96, "api_name": "matplotlib.pyplot.subplot", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"plotDataWithOutliers\", \"type\": \"callable\", \"signature\": \"(data, column, outlierZScore)\", \"return_type\": \"None\", \"short_description\": \"Generates a plot comparing the original data with outliers to the data without outliers.\"}"}
{"api_id": 96, "api_name": "matplotlib.pyplot.subplot", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"plotDataWithOutliers\", \"type\": \"callable\", \"signature\": \"(*args, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Plots the original and cleaned data for visualization purposes.\"}"}
{"api_id": 96, "api_name": "matplotlib.pyplot.subplot", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"plotDataWithOutliers\", \"type\": \"callable\", \"signature\": \"(data, column, outlierZScore)\", \"return_type\": \"None\", \"short_description\": \"Plots the data before and after the removal of outliers, highlighting the outliers on both plots.\"}"}
{"api_id": 96, "api_name": "matplotlib.pyplot.subplot", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"plotDataWithOutliers\", \"type\": \"function\", \"signature\": \"(data, column, outlierZScore)\", \"return_type\": \"None\", \"short_description\": \"Plots the original and cleaned data with outliers highlighted.\"}"}
{"api_id": 96, "api_name": "matplotlib.pyplot.subplot", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"plotOutliers\", \"type\": \"function\", \"signature\": \"(data, column, outlierZScore)\", \"return_type\": \"tuple[np.ndarray, np.ndarray, tuple]\", \"short_description\": \"Plots the data with and without outliers identified by Z-scores, highlighting outliers in the original data.\"}"}
{"api_id": 96, "api_name": "matplotlib.pyplot.subplot", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"plotDataWithOutliers\", \"type\": \"callable\", \"signature\": \"(data, column, outlierZScore)\", \"return_type\": \"None\", \"short_description\": \"Plots the original and cleaned data with and without outliers, highlighting the outliers in the original data.\"}"}
{"api_id": 96, "api_name": "matplotlib.pyplot.subplot", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"plot_data_with_outliers\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, column, outlier_z_score)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Plots the original data with outliers and the data with outliers removed, highlighting the differences.\"\n}"}
{"api_id": 96, "api_name": "matplotlib.pyplot.subplot", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"plotOutliers\", \"type\": \"callable\", \"signature\": \"(data, column, outlierZScore)\", \"return_type\": \"tuple\", \"short_description\": \"Plots a scatter plot of the data with and without outliers, highlighting the outliers in the original data.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"setAxesTitle\",\n  \"type\": \"function\",\n  \"signature\": \"(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)\",\n  \"return_type\": \"Text\",\n  \"short_description\": \"Set a title for the Axes. Customize the appearance and position of the title text.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"plotDataWithOutliers\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, outlier_z_score)\",\n  \"return_type\": \"tuple(np.ndarray, np.ndarray, tuple)\",\n  \"short_description\": \"Plots the original and cleaned data to visualize the effect of outlier removal. Returns the original data, cleaned data, and outlier indices.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"plotDataComparison\",\n  \"type\": \"function\",\n  \"signature\": \"(originalData, cleanedData, outliers)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Compares the original data with the cleaned data by plotting two scatter plots side by side, highlighting outliers in the original data.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"plotDataOutliers\", \"type\": \"function\", \"signature\": \"(data, column, outlierZScore)\", \"return_type\": \"tuple(list, list, tuple)\", \"short_description\": \"Plots the data with and without outliers and returns the original and cleaned data along with the indices of the outliers.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"plotOutliersAnalysis\", \"type\": \"function\", \"signature\": \"(data, column, outlierZScore)\", \"return_type\": \"tuple\", \"short_description\": \"Plots a comparison of data with and without outliers based on the Z-score threshold.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"setAxesTitle\", \"type\": \"callable\", \"signature\": \"(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)\", \"return_type\": \".Text\", \"short_description\": \"Set a title for the Axes. This function allows you to set the title of an Axes with various customization options.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"plotOutliers\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, outlier_z_score)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Plots a scatter plot of the data before and after removing outliers based on Z-scores.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"plotDataWithOutliers\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, outlierZScore)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Plots the original and cleaned data, highlighting outliers.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"setPlotTitle\", \"type\": \"callable\", \"signature\": \"(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)\", \"return_type\": \".Text\", \"short_description\": \"Set a title for the Axes. This function allows setting the title of a plot with various customization options.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"setPlotTitle\",\n  \"type\": \"callable\",\n  \"signature\": \"(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)\",\n  \"return_type\": \".Text\",\n  \"short_description\": \"Set a title for the Axes. Customize the appearance and position of the title text.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"setAxesTitle\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)\", \"return_type\": \"Text\", \"short_description\": \"Set a title for the Axes. This function allows customization of the title's appearance and positioning.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/108", "solution": "{\n  \"name\": \"set_time_series_title\",\n  \"type\": \"function\",\n  \"signature\": \"(ax, title_text, fontdict=None, loc='center', pad=None)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets a title for the given Axes object. This function allows customization of the title's text, font, and location.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"set_time_series_title\", \"type\": \"function\", \"signature\": \"(ax, title_label)\", \"return_type\": \"None\", \"short_description\": \"Sets a title for the given Axes object in a time series plot.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/108", "solution": "{\n  \"name\": \"plot_time_series_decomposition\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe, frequency='D', model='multiplicative')\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Plots a time series decomposition for a given DataFrame.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/108", "solution": "{\n  \"name\": \"set_time_series_title\",\n  \"type\": \"function\",\n  \"signature\": \"(ax, title_label)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets a title for the Axes object provided, enhancing the visualization with a descriptive label.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"set_time_series_title\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, loc='center', pad=None, y=None, **kwargs)\", \"return_type\": \"Text\", \"short_description\": \"Set a title for the time series plot.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"set_time_series_title\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)\", \"return_type\": \"Text\", \"short_description\": \"Set a title for the time series plot.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/108", "solution": "{\n  \"name\": \"set_time_series_title\",\n  \"type\": \"function\",\n  \"signature\": \"(ax, title_text, fontdict=None, loc='center', y=None, pad=None)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets a title for the given Axes object. The title is positioned in the center above the Axes.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"setAxesTitle\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, loc=None, pad=None, y=None, **kwargs)\", \"return_type\": \"Text\", \"short_description\": \"Set a title for the Axes. This function allows for customization of the title's appearance and positioning.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/108", "solution": "{\n  \"name\": \"set_time_series_title\",\n  \"type\": \"function\",\n  \"signature\": \"(ax, title_text)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Set a title for the Axes object to represent the time series decomposition.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"set_axis_labels\",\n  \"type\": \"function\",\n  \"signature\": \"(x_label, y_label)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets the labels for the X and Y axes of the current Axes instance.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"plot_random_walk\",\n  \"type\": \"function\",\n  \"signature\": \"(data, title='Random Walk', line_color='blue', marker_style='o', marker_size=5)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Plots a line graph with markers representing a random walk dataset, optionally with a specified title and custom line and marker styles.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"set_axis_labels\",\n  \"type\": \"function\",\n  \"signature\": \"(x_label, y_label)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Set labels for the X and Y axes of the current Axes instance.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"setAxesTitle\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, loc=None, pad=None, y=None, **kwargs)\", \"return_type\": \"Text\", \"short_description\": \"Set a title for the Axes.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"set_custom_title\",\n  \"type\": \"function\",\n  \"signature\": \"(label, fontdict=None, loc='center', pad=None, y=None, **kwargs)\",\n  \"return_type\": \".Text\",\n  \"short_description\": \"Set a custom title for the Axes with a specified location.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"set_random_walk_title\",\n  \"type\": \"callable\",\n  \"signature\": \"(title_label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)\",\n  \"return_type\": \".Text\",\n  \"short_description\": \"Set a title for the random walk plot.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"setAxesTitle\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, loc=None, pad=None, y=None, **kwargs)\", \"return_type\": \"Text\", \"short_description\": \"Sets a title for the Axes. This function allows customization of the title's appearance and positioning.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"set_custom_title\",\n  \"type\": \"callable\",\n  \"signature\": \"(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)\",\n  \"return_type\": \".Text\",\n  \"short_description\": \"Set a custom title for the Axes with specific positioning and formatting.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"set_random_walk_title\",\n  \"type\": \"function\",\n  \"signature\": \"(title_label)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets a title for a random walk plot.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"set_axis_title\",\n  \"type\": \"function\",\n  \"signature\": \"(axis, label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Set a title for the specified axis of the Axes.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"set_spectrogram_title\",\n  \"type\": \"function\",\n  \"signature\": \"(title_text, fontdict=None, loc=None, pad=None, y=None, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets a title for the spectrogram plot in a Jupyter notebook or similar environment.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generate_spectrogram\",\n  \"type\": \"function\",\n  \"signature\": \"(matrix, samplerate, title=None)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Generates a spectrogram from a matrix and optionally sets a title for the plot.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generate_spectrogram\",\n  \"type\": \"function\",\n  \"signature\": \"(matrix, samplerate)\",\n  \"return_type\": \"figure\",\n  \"short_description\": \"Generates a spectrogram from a given matrix and samplerate, and returns the resulting figure.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generateSpectrogram\",\n  \"type\": \"function\",\n  \"signature\": \"(matrix, samplerate)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Generates a spectrogram from a given matrix and sample rate.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"set_spectrogram_title\",\n  \"type\": \"function\",\n  \"signature\": \"(label, fontdict=None, loc=None, pad=None, y=None, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Set a title for the spectrogram displayed in a matplotlib figure.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"set_spectrogram_title\",\n  \"type\": \"function\",\n  \"signature\": \"(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Set a title for the spectrogram displayed in a Matplotlib plot.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generateSpectrogram\",\n  \"type\": \"function\",\n  \"signature\": \"(data, samplerate, title='Spectrogram', x_axis='time', y_axis='log')\",\n  \"return_type\": \"figure\",\n  \"short_description\": \"Generates a spectrogram from the provided audio data and displays it with the specified title and axis settings.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"generateSpectrogram\",\n  \"type\": \"function\",\n  \"signature\": \"(matrix, samplerate)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Generates a spectrogram from a given matrix and samplerate.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"generate_spectrogram\", \"type\": \"function\", \"signature\": \"(matrix, samplerate, title_text)\", \"return_type\": \"figure\", \"short_description\": \"Generates a spectrogram from a matrix and displays it with a given title.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"generateMatrix\", \"type\": \"function\", \"signature\": \"(L, M, N)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Generates a matrix of dimensions M x N using the elements in L.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/302", "solution": "{\"name\": \"setAxesTitle\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)\", \"return_type\": \"Text\", \"short_description\": \"Sets a title for the Axes. This function allows customization of the title's appearance and position.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/302", "solution": "{\"name\": \"setPlotTitle\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)\", \"return_type\": \"Text\", \"short_description\": \"Sets a title for the Axes. Allows customization of title text appearance and positioning.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/302", "solution": "{\"name\": \"setAxesTitle\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, loc=None, pad=None, y=None, **kwargs)\", \"return_type\": \".Text\", \"short_description\": \"Set a title for the Axes. This function allows you to set the title of the Axes with various options to customize the appearance and position.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"set_axis_title\",\n  \"type\": \"function\",\n  \"signature\": \"(axis, title)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets the title for a given axis. This function allows customization of the title's appearance and positioning.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"set_correlation_heatmap_title\",\n  \"type\": \"function\",\n  \"signature\": \"(correlation_matrix, heatmap_instance)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets a title for the correlation heatmap Axes.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/302", "solution": "{\"name\": \"setAxesTitle\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)\", \"return_type\": \"Text\", \"short_description\": \"Sets a title for the Axes. Allows customization of the title text's appearance and position.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"set_title\",\n  \"type\": \"function\",\n  \"signature\": \"(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)\",\n  \"return_type\": \"Text\",\n  \"short_description\": \"Set a title for the Axes.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"set_correlation_heatmap_title\",\n  \"type\": \"callable\",\n  \"signature\": \"(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)\",\n  \"return_type\": \".Text\",\n  \"short_description\": \"Set a title for the Correlation Heatmap Axes.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"set_correlation_title\",\n  \"type\": \"function\",\n  \"signature\": \"(title_label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)\",\n  \"return_type\": \"Text\",\n  \"short_description\": \"Set a title for the correlation heatmap displayed by the plotting library.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/302", "solution": "{\"name\": \"setAxesTitle\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)\", \"return_type\": \"Text\", \"short_description\": \"Sets a title for the Axes. Allows customization of the title's appearance and position.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"plotLineChart\", \"type\": \"function\", \"signature\": \"(data, x_column, y_columns)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a line chart for the given data and returns the plot and summary statistics.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"setAxesTitle\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, loc=None, pad=None, y=None, **kwargs)\", \"return_type\": \"Text\", \"short_description\": \"Sets a title for the Axes. Allows customization of the title's label, font, and position.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"setAxesTitle\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, loc=None, pad=None, *, y=None)\", \"return_type\": \"Text\", \"short_description\": \"Sets a title for the Axes. The title can be centered, aligned to the left, or to the right edge of the Axes.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"setChartTitle\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, loc='center', pad=None, y=None)\", \"return_type\": \"Text\", \"short_description\": \"Sets a title for the Axes, positioned above the Axes in the center.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"setAxesTitle\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, loc='center', y=None, pad=None, **kwargs)\", \"return_type\": \"Text\", \"short_description\": \"Sets a title for the Axes. Allows customization of the title's label, font, position, and spacing. The title can be centered, left-aligned, or right-aligned.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"setAxesTitle\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)\", \"return_type\": \"Text\", \"short_description\": \"Set a title for the Axes.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/513", "solution": "{\n  \"name\": \"set_title\",\n  \"type\": \"function\",\n  \"signature\": \"(label, fontdict=None, loc=None, pad=None, y=None, **kwargs)\",\n  \"return_type\": \"Text\",\n  \"short_description\": \"Set a title for the Axes.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"setAxesTitle\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)\", \"return_type\": \"Text\", \"short_description\": \"Set a title for the Axes. This function allows you to set the title of the Axes with various customization options.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"setAxesTitle\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, loc=None, pad=None, y=None, **kwargs)\", \"return_type\": \".Text\", \"short_description\": \"Sets a title for the Axes. Allows customization of the title's label, font, and position.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/513", "solution": "{\n  \"name\": \"set_custom_title\",\n  \"type\": \"function\",\n  \"signature\": \"(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)\",\n  \"return_type\": \"Text\",\n  \"short_description\": \"Set a custom title for the Axes with a specified label, font properties, and location.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"setAxesTitle\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)\", \"return_type\": \"Text\", \"short_description\": \"Set a title for the Axes. This function allows you to set the title of an Axes in a matplotlib plot.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"setAxesTitle\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, loc=None, pad=None, y=None, **kwargs)\", \"return_type\": \"Text\", \"short_description\": \"Sets a title for the Axes. This function allows you to customize the title's appearance, position, and other properties.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotAgeDistributionForDuplicateNames\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame)\", \"return_type\": \"(Counter, plt.Axes)\", \"short_description\": \"Generates a histogram plot of the ages for names that appear more than once in the DataFrame, and returns a Counter of ages and the Axes object of the plot.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"setAxesTitle\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, loc=None, pad=None, y=None, **kwargs)\", \"return_type\": \"Text\", \"short_description\": \"Set a title for the Axes. This function allows you to set the title of an Axes with various customizable options.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/530", "solution": "{\n  \"name\": \"plotAgesForDuplicateNames\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe, name_column, age_column)\",\n  \"return_type\": \"tuple(Counter, plt.Axes)\",\n  \"short_description\": \"Plots a histogram of ages for rows with duplicate names and returns a counter of ages and the associated plot axes.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/530", "solution": "{\n  \"name\": \"plotDistributionForDuplicateNames\",\n  \"type\": \"function\",\n  \"signature\": \"(df: pd.DataFrame, duplicate_names: List[str], min_age: int, max_age: int)\",\n  \"return_type\": \"plt.Figure\",\n  \"short_description\": \"Creates a histogram plot to display the distribution of ages for names that appear more than once in the DataFrame.\"\n}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"setAxesTitle\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, loc=None, pad=None, y=None)\", \"return_type\": \"Text\", \"short_description\": \"Set a title for the Axes. This function allows you to set the title of an Axes with various customization options.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"setAxesTitle\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, loc=None, pad=None, y=None, **kwargs)\", \"return_type\": \"Text\", \"short_description\": \"Sets a title for the Axes. The title can be centered, aligned to the left, or right edge, and customization options are provided for the text appearance.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"setAxesTitle\", \"type\": \"callable\", \"signature\": \"(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)\", \"return_type\": \".Text\", \"short_description\": \"Set a title for the Axes. This function allows you to set the title of an Axes with various customization options.\"}"}
{"api_id": 97, "api_name": "matplotlib.pyplot.title", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"setPlotTitle\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, loc='center', y=None, pad=None)\", \"return_type\": \"Text\", \"short_description\": \"Sets a title for the current Axes in a matplotlib plot.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"displayFigures\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Display all open figures. This function will display all currently open figures in a window, allowing the user to interact with them.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"displayFigures\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Displays all open figures. This function is a non-blocking call that updates the GUI main loop to show all figures immediately.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"plotDataWithOutliers\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, outlierZScore)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Plots the original and cleaned data with outliers highlighted.\"\n}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"plotOutliers\", \"type\": \"function\", \"signature\": \"(data, column, outlierZScore)\", \"return_type\": \"Tuple[np.ndarray, np.ndarray, np.ndarray]\", \"short_description\": \"Plots a comparison of data with and without outliers based on Z-scores. Returns the original and cleaned data along with the indices of the outliers.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"plotOutliers\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, outlier_z_score)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Plots the original and cleaned data with outliers highlighted, and returns the original and cleaned data along with the indices of the outliers.\"\n}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"displayFigures\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Display all open figures without blocking the execution.\"\n}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"display_data_visualization\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Display interactive visualizations of data before and after outlier removal.\"\n}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"display_figures\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Display all open figures, allowing for non-blocking behavior.\"\n}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"displayFigures\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Displays all open figures. This function will block the execution until all figure windows are closed.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"displayFigures\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Display all open figures. This function iterates through all figures and displays them in a window.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"plot_bar_chart\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, title='', xlabel='', ylabel='')\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Plots a bar chart with the provided data and labels. The chart can optionally be titled and have labels for the x and y axes.\"\n}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"plot_bar_chart\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, title='', xlabel='', ylabel='')\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Creates a bar chart from the provided data and labels. The chart can optionally be given a title and axis labels.\"\n}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"display_figures\",\n  \"type\": \"function\",\n  \"signature\": \"()\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Display all open figures, blocking the execution until all figures are closed if specified.\"\n}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"plot_bar_chart\",\n  \"type\": \"function\",\n  \"signature\": \"(data, labels, title='', xlabel='', ylabel='')\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generates a bar chart from the provided data and labels, with optional title and axis labels.\"\n}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"displayFigures\", \"type\": \"function\", \"signature\": \"(*args, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Displays all open figures. If no figures are open, it does nothing.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"displayFigures\", \"type\": \"function\", \"signature\": \"(*args, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Display all open figures without blocking the main loop.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"displayFigures\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Display all currently open figures. This function iterates through all figures and renders them in a GUI window.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"plotGraph\", \"type\": \"function\", \"signature\": \"(data, labels, kind, title)\", \"return_type\": \"None\", \"short_description\": \"Generates a plot of the given data using the specified kind of plot and labels. Title is optional.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"plot_bar_chart\",\n  \"type\": \"function\",\n  \"signature\": \"data, labels, title='', xlabel='', ylabel=''\",\n  \"return_type\": \"object\",\n  \"short_description\": \"Generates a bar chart from provided data and labels, with optional title and axis labels.\"\n}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"plot_bar_chart\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generate a bar chart from provided data and display it.\"\n}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/567", "solution": "{\n  \"name\": \"display_figures\",\n  \"type\": \"function\",\n  \"signature\": \"()\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Display all open figures. This function is designed to show all figures currently open in a matplotlib environment.\"\n}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"displayFigures\", \"type\": \"function\", \"signature\": \"(*args, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Display all open figures. This function takes optional arguments to control the display behavior, such as blocking or non-blocking display.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/567", "solution": "{\n  \"name\": \"displayFigures\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Display all open figures. This function allows for non-blocking display of figures and supports optional parameters to control the display behavior.\"\n}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"displayFigures\", \"type\": \"function\", \"signature\": \"(*args, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Display all open figures. This function will block the execution until all figures are closed unless specified otherwise.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"displayFigures\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Display all open figures. This function will block the execution until all figure windows are closed.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"displayFigures\", \"type\": \"function\", \"signature\": \"(*args, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Displays all currently open figures. This call blocks until all figure windows are closed unless explicitly disabled.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"plotHistogram\", \"type\": \"function\", \"signature\": \"(data, title=None, xlabel=None, ylabel=None, bins=None)\", \"return_type\": \"None\", \"short_description\": \"Generates a histogram for the provided data and displays it. Optionally, you can provide a title, x-axis label, and y-axis label.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"displayFigures\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Display all open figures. This function will block the execution until all figure windows are closed.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"displayFigures\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Display all currently open figures. This function will block the execution until all figure windows are closed.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/567", "solution": "{\n  \"name\": \"plot_histogram\",\n  \"type\": \"function\",\n  \"signature\": \"data\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Creates a histogram from the provided data and displays it.\"\n}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"generateTrafficData\",\n  \"type\": \"function\",\n  \"signature\": \"(hours, output_dir='./output')\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a CSV file with simulated traffic data and optionally displays a line plot of the data.\"\n}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"generateTrafficData\",\n  \"type\": \"function\",\n  \"signature\": \"(hours, output_dir='./output')\",\n  \"return_type\": \"tuple[str, plt.Axes]\",\n  \"short_description\": \"Generates a CSV file with simulated traffic data and plots the data using matplotlib.\"\n}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"generateTrafficData\",\n  \"type\": \"function\",\n  \"signature\": \"(hours, output_dir='./output')\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a CSV file with simulated traffic data and plots the data over time using matplotlib.\"\n}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"displayFigures\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Displays all open figures. If no figures are open, it does nothing.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple[str, plt.Axes]\", \"short_description\": \"Generates a CSV file with traffic data and plots the data using matplotlib.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple\", \"short_description\": \"Generates a CSV file with simulated traffic data and plots the data using matplotlib.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"generateTrafficData\",\n  \"type\": \"function\",\n  \"signature\": \"(hours, output_dir='./output')\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a CSV file with simulated traffic data and optionally displays a line plot of the data.\"\n}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple[str, plt.Axes]\", \"short_description\": \"Generates a CSV file with simulated traffic data and plots the data using matplotlib.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"displayFigures\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Displays all open figures. If no figures are open, it does nothing.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"displayFigures\",\n  \"type\": \"callable\",\n  \"signature\": \"(*args, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Display all open figures without blocking the execution.\"\n}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"displayFigures\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Display all open figures without blocking the execution.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"displayFigures\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Displays all currently open figures.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"displayFigures\",\n  \"type\": \"function\",\n  \"signature\": \"()\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Display all open figures. This function will show all currently open figures in a non-blocking manner, allowing the user to continue executing other code without waiting for the figures to be closed.\"\n}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"plot_fit_results\",\n  \"type\": \"function\",\n  \"signature\": \"(array, target_value)\",\n  \"return_type\": \"tuple(numpy.ndarray, matplotlib.axes._axes.Axes)\",\n  \"short_description\": \"Plots the results of fitting a curve to the data based on a target value, displaying the plot.\"\n}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"displayFigures\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Display all open figures. This function will block the execution until all figures are closed.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"displayFigures\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"None\", \"short_description\": \"Display all open figures. This function will show all currently open figures in a blocking or non-blocking manner based on the interactive mode. It is useful for finalizing plots and ensuring they are visible to the user.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"displayFigures\",\n  \"type\": \"function\",\n  \"signature\": \"(*args, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Display all currently open figures. If no figures are open, it will open a new one.\"\n}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"plotTaskResults\", \"type\": \"function\", \"signature\": \"(array, target_value)\", \"return_type\": \"tuple\", \"short_description\": \"Plots the results of a task function, including the original data points and the fitted curve, and returns the optimal parameters and the axis object.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"displayFigures\", \"type\": \"callable\", \"signature\": \"(*args, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Display all open figures. This function takes optional arguments to control the display behavior.\"}"}
{"api_id": 98, "api_name": "matplotlib.pyplot.show", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"displayFigures\",\n  \"type\": \"callable\",\n  \"signature\": \"(*args, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Display all currently open matplotlib figures.\"\n}"}
{"api_id": 99, "api_name": "matplotlib.pyplot.xlabel", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotDuplicateAgesDistribution\", \"type\": \"function\", \"signature\": \"(dataframe, duplicateNames)\", \"return_type\": \"tuple(Counter, plt.Axes)\", \"short_description\": \"Plots a histogram of ages for duplicate names in a DataFrame and returns a counter of age counts and the Axes object of the plot.\"}"}
{"api_id": 99, "api_name": "matplotlib.pyplot.xlabel", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotAgeDistribution\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame)\", \"return_type\": \"(Counter, plt.Axes)\", \"short_description\": \"Plots a histogram of the ages for names that appear more than once in the DataFrame.\"}"}
{"api_id": 99, "api_name": "matplotlib.pyplot.xlabel", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotAgeDistributionForDuplicateNames\", \"type\": \"function\", \"signature\": \"(df)\", \"return_type\": \"(Counter, plt.Axes)\", \"short_description\": \"Plots a histogram of ages for names that appear more than once in the DataFrame, along with setting the x-axis label for the plot.\"}"}
{"api_id": 99, "api_name": "matplotlib.pyplot.xlabel", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotDuplicateAgesDistribution\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame)\", \"return_type\": \"(Counter, plt.Axes)\", \"short_description\": \"Plots the distribution of ages for names that appear more than once in the DataFrame.\"}"}
{"api_id": 99, "api_name": "matplotlib.pyplot.xlabel", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotAgeDistribution\", \"type\": \"function\", \"signature\": \"(df)\", \"return_type\": \"(Counter, plt.Axes)\", \"short_description\": \"Plots the distribution of ages for names that appear more than once in the DataFrame.\"}"}
{"api_id": 99, "api_name": "matplotlib.pyplot.xlabel", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotAgeDistribution\", \"type\": \"function\", \"signature\": \"(data, ages)\", \"return_type\": \"tuple[Counter, plt.Axes]\", \"short_description\": \"Plots a histogram of the ages for duplicate names in the given DataFrame and returns a counter of age counts and the Axes object of the plot.\"}"}
{"api_id": 99, "api_name": "matplotlib.pyplot.xlabel", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotAgeDistributionForDuplicateNames\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> Tuple[Counter, plt.Axes]\", \"return_type\": \"Tuple[Counter, plt.Axes]\", \"short_description\": \"Plots a histogram of ages for names that appear more than once in the DataFrame, highlighting the distribution for duplicate names.\"}"}
{"api_id": 99, "api_name": "matplotlib.pyplot.xlabel", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotAgeDistribution\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame)\", \"return_type\": \"(Counter, plt.Axes)\", \"short_description\": \"Plots a histogram of the ages for names that appear more than once in the DataFrame.\"}"}
{"api_id": 99, "api_name": "matplotlib.pyplot.xlabel", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotAgeDistribution\", \"type\": \"function\", \"signature\": \"(data, names)\", \"return_type\": \"None\", \"short_description\": \"Plots a histogram of ages for given names, highlighting duplicates.\"}"}
{"api_id": 99, "api_name": "matplotlib.pyplot.xlabel", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"setXLabel\", \"type\": \"function\", \"signature\": \"(label, fontdict=None, labelpad=None, loc=None, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Sets the label for the x-axis.\"}"}
{"api_id": 99, "api_name": "matplotlib.pyplot.xlabel", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"set_y_label\",\n  \"type\": \"callable\",\n  \"signature\": \"(ylabel, fontdict=None, *, loc=None, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Set the label for the y-axis.\"\n}"}
{"api_id": 99, "api_name": "matplotlib.pyplot.xlabel", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"setXLabel\", \"type\": \"callable\", \"signature\": \"(label, fontdict=None, labelpad=None, loc=None, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Set the label for the x-axis. This function is a high-level alternative for setting the label, allowing for easier control over label properties.\"}"}
{"api_id": 99, "api_name": "matplotlib.pyplot.xlabel", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"setXLabel\", \"type\": \"function\", \"signature\": \"(xlabel, fontdict=None, labelpad=None, loc=None, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Sets the label for the x-axis. This is a high-level function to easily set the x-axis label with various options for customization.\"}"}
{"api_id": 99, "api_name": "matplotlib.pyplot.xlabel", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"plotTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"Tuple[str, Optional[plt.Axes]]\", \"short_description\": \"Plots traffic data over time from a CSV file and returns the file path and the Axes object of the plot.\"}"}
{"api_id": 99, "api_name": "matplotlib.pyplot.xlabel", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"set_xlabel\", \"type\": \"function\", \"signature\": \"(xlabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)\", \"return_type\": \"None\", \"short_description\": \"Set the label for the x-axis. This function provides a high-level way to set the label without needing to directly interact with the Axes object.\"}"}
{"api_id": 99, "api_name": "matplotlib.pyplot.xlabel", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"generate_traffic_data\",\n  \"type\": \"function\",\n  \"signature\": \"(hours, output_dir='./output')\",\n  \"return_type\": \"tuple(str, plt.Axes)\",\n  \"short_description\": \"Generates a CSV file containing simulated traffic data and plots it using matplotlib.\"\n}"}
{"api_id": 99, "api_name": "matplotlib.pyplot.xlabel", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"set_y_label\",\n  \"type\": \"function\",\n  \"signature\": \"(label, fontdict=None, labelpad=None, *, loc=None, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Set the label for the y-axis.\"\n}"}
{"api_id": 99, "api_name": "matplotlib.pyplot.xlabel", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"set_ylabel\",\n  \"type\": \"callable\",\n  \"signature\": \"(ylabel, fontdict=None, *, loc=None, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Set the label for the y-axis.\"\n}"}
{"api_id": 99, "api_name": "matplotlib.pyplot.xlabel", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"set_x_axis_label\",\n  \"type\": \"callable\",\n  \"signature\": \"(label, fontdict=None, labelpad=None, loc=None, **kwargs)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Set the label for the x-axis. This function provides a high-level way to set the label text, font properties, and positioning options for the x-axis in a plot.\"\n}"}
{"api_id": 99, "api_name": "matplotlib.pyplot.xlabel", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"plotTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple\", \"short_description\": \"Generates a line plot of traffic data over time for specified vehicle types and saves the data to a CSV file.\"}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(title=None, size=(10, 5), dpi=100, *, backgroundColor='white', borderColor='black', showFrame=True, FigureClass=None, clear=False, layout=None, **kwargs)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Create a new figure with customizable options or activate an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(title=None, size=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, clear=False, layout=None, **kwargs)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a new figure or activates an existing figure with customizable options.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/34", "solution": "{\"name\": \"createFigure\", \"type\": \"function\", \"signature\": \"(size=None, dpi=None, faceColor=None, edgeColor=None, frameOn=True, figureClass=None, clear=False, **kwargs)\", \"return_type\": \"Figure\", \"short_description\": \"Creates a new figure with customizable options. If a figure with the specified identifier already exists, it activates that figure. If no identifier is provided, it creates a new figure.\"}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(size=None, dpi=None, faceColor=None, edgeColor=None, hasFrame=True, customClass=None, clearExisting=False, **kwargs)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a new figure with customizable options or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(title=None, size=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, FigureClass=<class 'matplotlib.figure.Figure'>, clear=False, **kwargs)\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with customizable options or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(title=None, size=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, FigureClass=None, clear=False, layout=None, **kwargs)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a new figure with customizable options or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(title=None, size=None, dpi=None, facecolor=None, edgecolor=None, showFrame=True, figureClass=None, clear=False, **kwargs)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Create a new figure with customizable options or activate an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(title=None, size=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, FigureClass=None, clear=False, layout=None, **kwargs)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Create a new figure with customizable options or activate an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(title=None, size=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, clear=False, **kwargs)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Create a new figure with customizable options.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"generateWordCloud\",\n  \"type\": \"function\",\n  \"signature\": \"(text, figsize=(10, 5), font_path=None, width=None, height=None, max_words=200, min_font_size=4, max_font_size=None, font_step=1, relative_scaling='auto', stopwords=None, random_state=None, background_color='black', colormap=None, collocations=True, color_func=None, **kwargs)\",\n  \"return_type\": \"WordCloud\",\n  \"short_description\": \"Generates a word cloud from the given text and displays it in a matplotlib figure of specified size.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/37", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(size=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, FigureClass=<class 'matplotlib.figure.Figure'>, clear=False, layout=None, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with customizable options or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/37", "solution": "{\n  \"name\": \"create_figure\",\n  \"type\": \"function\",\n  \"signature\": \"(title=None, size=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, clear=False, **kwargs)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a new figure or activates an existing figure with customizable options.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/37", "solution": "{\n  \"name\": \"create_figure\",\n  \"type\": \"callable\",\n  \"signature\": \"(figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, clear=False, **kwargs)\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with customizable parameters or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/37", "solution": "{\"name\": \"createNewFigure\", \"type\": \"function\", \"signature\": \"(figureSize=None, dpi=None, faceColor=None, edgeColor=None, frameOn=True, figureClass=None, clear=False)\", \"return_type\": \"Figure\", \"short_description\": \"Creates a new figure with customizable parameters or activates an existing figure.\"}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/37", "solution": "{\"name\": \"createNewFigure\", \"type\": \"function\", \"signature\": \"(figureSize=None, dpi=None, faceColor=None, edgeColor=None, frameOn=True, clear=False)\", \"return_type\": \"Figure\", \"short_description\": \"Creates a new figure with specified dimensions, background and edge colors, and whether the frame is drawn. Optionally clears an existing figure if specified.\"}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/37", "solution": "{\n  \"name\": \"create_figure\",\n  \"type\": \"callable\",\n  \"signature\": \"(figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, clear=False, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with customizable parameters.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/37", "solution": "{\n  \"name\": \"createNewPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(title, data, size, color)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a new plot with the given title, data, size, and color.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/37", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(size=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, FigureClass=None, clear=False, layout=None, **kwargs)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a new figure with customizable parameters or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/37", "solution": "{\n  \"name\": \"create_figure\",\n  \"type\": \"callable\",\n  \"signature\": \"(figsize=None, dpi=None, facecolor=None, edgecolor=None, clear=False, **kwargs)\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with customizable parameters.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/37", "solution": "{\n  \"name\": \"create_figure\",\n  \"type\": \"callable\",\n  \"signature\": \"(figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, clear=False, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with customizable parameters or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(title=None, size=None, dpi=None, faceColor=None, edgeColor=None, frameOn=True, figureClass=None, clear=False)\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with the specified parameters or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"createPlotWithOutliers\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, outlierZScore)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Creates a plot comparing the original data with outliers to the data without outliers.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(title=None, width=None, height=None, dpi=None, facecolor=None, edgecolor=None, clear=False, **kwargs)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a new figure with the specified parameters and returns it. The figure can be optionally cleared if it already exists.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"plotDataWithOutliers\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, outlierZScore)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Plots the data before and after the removal of outliers, highlighting the outliers in red.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"createAndPlotFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(title=None, figsize=None, dpi=None, *, facecolor=None, edgecolor=None, frameon=True, clear=False, layout=None, **kwargs)\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Create a new figure with an optional title and plot size, optionally clear an existing figure, and return the created figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(figureNumber=None, figureSize=None, dpiValue=None, faceColor=None, edgeColor=None, frameOn=True, figureClass=None, clear=False, **kwargs)\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Create a new figure with optional parameters to customize its appearance and behavior.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"createPlotWithOutliers\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, outlierZScore, figsize=(10, 5))\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Creates a plot showing the data before and after the removal of outliers based on Z-score.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"createPlotWithOutliers\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, outlierZScore)\",\n  \"return_type\": \"void\",\n  \"short_description\": \"Creates a plot to visualize data before and after the removal of outliers based on Z-scores.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"createPlotWithOutliers\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, outlierZScore)\",\n  \"return_type\": \"void\",\n  \"short_description\": \"Creates a plot to visualize the impact of outlier removal on a dataset.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"createPlotWithOutliers\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, outlierZScore, figsize=(10, 5))\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Creates a plot to visualize data with and without outliers, given a dataset, a column index, and a Z-score threshold for outlier detection.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(num=None, figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, FigureClass=<class 'matplotlib.figure.Figure'>, clear=False, layout=None, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with customizable parameters or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"createPlotFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(dataUrl=None, seed=42)\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new matplotlib figure with a heatmap of the correlation matrix from a given dataset.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(size=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, clear=False, **kwargs)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a new figure with customizable parameters or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(title=None, size=None, resolution=None, faceColor=None, edgeColor=None, hasFrame=True, customClass=None, clearExisting=False, layout=None, **kwargs)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a new figure with customizable options or activates an existing one.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(figsize=None, dpi=None, *, facecolor=None, edgecolor=None, frameon=True, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with customizable options.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"createFigure\", \"type\": \"callable\", \"signature\": \"(figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, clear=False, layout=None, **kwargs)\", \"return_type\": \"Figure\", \"short_description\": \"Creates a new figure with customizable parameters and returns it.\"}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(size=None, dpi=None, facecolor=None, edgecolor=None, clear=False, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with customizable options such as size, DPI, face color, edge color, and whether to clear an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"createFigure\", \"type\": \"function\", \"signature\": \"(title=None, size=None, resolution=None, faceColor=None, edgeColor=None, frameOn=True, figureClass=None, clear=False, layout=None)\", \"return_type\": \"Figure\", \"short_description\": \"Create a new figure with customizable parameters or activate an existing figure. The figure can be cleared if it already exists.\"}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(size=None, dpi=None, faceColor=None, edgeColor=None, frameOn=True, clear=False, layout=None, **kwargs)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a new figure with the specified parameters or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(title=None, width=None, height=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, FigureClass=<class 'matplotlib.figure.Figure'>, clear=False, layout=None, **kwargs)\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Create a new figure with customizable options or activate an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(size=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, figureClass=None, clear=False, **kwargs)\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with customizable parameters or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"createNewPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(title='New Plot', size=(10, 6), dpi=100, facecolor='white', edgecolor='black', frameon=True, plotData=None, **kwargs)\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with a specified title, size, and other optional parameters.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(figureSize=None, dpi=None, faceColor=None, edgeColor=None, frameOn=True, figureClass=<class 'matplotlib.figure.Figure'>, clear=False, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with customizable options or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(title=None, figsize=None, dpi=None, *, facecolor=None, edgecolor=None, frameon=True, clear=False, layout=None, **kwargs)\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with the specified parameters or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, FigureClass=<class 'matplotlib.figure.Figure'>, clear=False, layout=None, **kwargs)\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with customizable parameters or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(size=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, FigureClass=<class 'matplotlib.figure.Figure'>, clear=False, layout=None, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with customizable options or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(title=None, figsize=None, dpi=None, *, facecolor=None, edgecolor=None, clear=False, **kwargs)\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with an optional title and custom parameters.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"createNewFigure\", \"type\": \"function\", \"signature\": \"(figSize=None, dpi=None, faceColor=None, edgeColor=None, frameOn=True, figureClass=None, clear=False, **kwargs)\", \"return_type\": \"Figure\", \"short_description\": \"Creates a new figure with specified parameters and returns it. The figure can be configured with various options including size, resolution, colors, and more.\"}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(title=None, size=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, FigureClass=None, clear=False, layout=None, **kwargs)\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with customizable options or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(size=None, dpi=None, faceColor=None, edgeColor=None, frameOn=True, figureClass=None, clear=False, layout=None, **kwargs)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a new figure with customizable options or activates an existing one.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(title=None, size=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, clear=False, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Create a new figure with customizable options or activate an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/302", "solution": "{\"name\": \"createFigure\", \"type\": \"function\", \"signature\": \"(title=None, size=None, dpi=None, faceColor=None, edgeColor=None, frameOn=True, figureClass=None, clear=False, layout=None, **kwargs)\", \"return_type\": \"Figure\", \"short_description\": \"Creates a new figure with optional parameters to customize its appearance and behavior.\"}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(title=None, size=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, clear=False, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with the specified title, size, and other optional parameters.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(title=None, size=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, FigureClass=None, clear=False, layout=None, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Create a new figure with a specified title, size, and DPI, optionally clearing an existing figure with the same identifier.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(title=None, size=None, dpi=None, facecolor=None, edgecolor=None, clear=False, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with customizable options or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/302", "solution": "{\"name\": \"createFigure\", \"type\": \"callable\", \"signature\": \"(title=None, figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, clear=False, layout=None, **kwargs)\", \"return_type\": \"~matplotlib.figure.Figure\", \"short_description\": \"Create a new figure with the specified parameters and optionally clear it if it already exists.\"}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"function\",\n  \"signature\": \"()\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure, or activates an existing figure, providing a unique identifier or using default values.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(title=None, size=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, clear=False, **kwargs)\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Create a new figure with optional parameters to customize its appearance and behavior.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(figureId=None, figureSize=None, dpi=None, faceColor=None, edgeColor=None, frameOn=True, figureClass=None, clear=False, layout=None, **kwargs)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a new figure with the specified parameters or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/302", "solution": "{\"name\": \"createFigure\", \"type\": \"function\", \"signature\": \"(title=None, size=None, dpi=None, faceColor=None, edgeColor=None, frameOn=True, figureClass=None, clear=False, layout=None, **kwargs)\", \"return_type\": \"~matplotlib.figure.Figure\", \"short_description\": \"Create a new figure with customizable options, or activate an existing figure. Returns the created or activated figure.\"}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/367", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(title=None, size=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, clear=False, layout=None, **kwargs)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a new figure with the specified parameters, or activates an existing figure if it already exists.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/367", "solution": "{\"name\": \"createFigure\", \"type\": \"function\", \"signature\": \"(title=None, size=None, dpi=None, faceColor=None, edgeColor=None, frameOn=True, figureClass=None, clear=False, layout=None, **kwargs)\", \"return_type\": \"Figure\", \"short_description\": \"Creates a new figure with customizable options or activates an existing figure.\"}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/367", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(title=None, xLabel=None, yLabel=None, data=None)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a new figure with optional title, x-axis label, y-axis label, and data for plotting.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/367", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(title=None, xlabel=None, ylabel=None, figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, FigureClass=<class 'matplotlib.figure.Figure'>, clear=False, **kwargs)\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Create a new figure with customizable options.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/367", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(title=None, size=None, dpi=None, faceColor=None, edgeColor=None, frameOn=True, figureClass=None, clear=False, **kwargs)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a new figure or activates an existing figure with customizable options.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/367", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(title=None, xlabel=None, ylabel=None, *, figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, clear=False, **kwargs)\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Create a new figure with customizable options.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/367", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(figureSize=None, dpi=None, faceColor=None, edgeColor=None, frameOn=True, figureClass=None, clear=False)\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with customizable parameters or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/367", "solution": "{\n  \"name\": \"create_figure\",\n  \"type\": \"callable\",\n  \"signature\": \"(title=None, x_label=None, y_label=None, data=None)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a new figure with optional title, x-axis label, y-axis label, and bar data.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/367", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(figureSize=None, resolution=None, faceColor=None, edgeColor=None, includeFrame=True, customClass=None, clearExisting=False)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a new figure with customizable parameters or activates an existing one.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/367", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(figsize=None, dpi=None, *, facecolor=None, edgecolor=None, frameon=True, clear=False, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with specified parameters or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"createFigureWithPlots\",\n  \"type\": \"function\",\n  \"signature\": \"(frequency, sample_size=10000)\",\n  \"return_type\": \"tuple[`~matplotlib.figure.Figure`, `~matplotlib.axes.Axes`]\",\n  \"short_description\": \"Creates a new figure with plots of sine and cosine functions based on the given frequency and sample size.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"createFigure\", \"type\": \"function\", \"signature\": \"(size=None, dpi=None, faceColor=None, edgeColor=None, frameOn=True, figureClass=None, clear=False, layout=None, **kwargs)\", \"return_type\": \"Figure\", \"short_description\": \"Creates a new figure with customizable parameters or activates an existing figure.\"}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"createMatplotlibFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(frequency, sampleSize=10000)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a new matplotlib figure with sine and cosine plots based on the given frequency and sample size.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(title=None, size=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, clear=False, layout=None, **kwargs)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a new figure with the specified parameters or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"createFigure\", \"type\": \"function\", \"signature\": \"(figureSize=None, dpi=None, faceColor=None, edgeColor=None, frameOn=True, figureClass=None, clear=False, **kwargs)\", \"return_type\": \"Figure\", \"short_description\": \"Create a new figure with customizable parameters.\"}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(title=None, width=None, height=None, dpi=None, facecolor=None, edgecolor=None, clear=False, **kwargs)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a new figure with the specified parameters or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(title=None, figsize=(6.4, 4.8), dpi=100, facecolor='w', edgecolor='k', frameon=True, clear=False, **kwargs)\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with the specified title, size, and appearance options.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"createNewFigure\", \"type\": \"function\", \"signature\": \"(figureNumber=None, figureSize=None, dpi=None, faceColor=None, edgeColor=None, frameOn=True, figureClass=None, clear=False, layout=None, **kwargs)\", \"return_type\": \"Figure\", \"short_description\": \"Creates a new figure or activates an existing figure with the specified parameters.\"}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"createNewPlot\", \"type\": \"function\", \"signature\": \"(title=None, figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, clear=False, layout=None, **kwargs)\", \"return_type\": \"Figure\", \"short_description\": \"Create a new plot figure with optional title, size, and layout options.\"}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"createFigure\", \"type\": \"function\", \"signature\": \"(figureSize=None, dpi=None, faceColor=None, edgeColor=None, frameOn=True, figureClass=None, clear=False, **kwargs)\", \"return_type\": \"Figure\", \"short_description\": \"Creates a new figure with customizable parameters or activates an existing figure.\"}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/567", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(size=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, figureClass=<class 'matplotlib.figure.Figure'>, clear=False, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with customizable options or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/567", "solution": "{\n  \"name\": \"create_figure\",\n  \"type\": \"callable\",\n  \"signature\": \"(figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, clear=False, **kwargs)\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Create a new figure with customizable options or activate an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/567", "solution": "{\n  \"name\": \"create_figure\",\n  \"type\": \"callable\",\n  \"signature\": \"(figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, FigureClass=<class 'matplotlib.figure.Figure'>, clear=False, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Create a new figure with customizable options or activate an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/567", "solution": "{\n  \"name\": \"create_figure\",\n  \"type\": \"callable\",\n  \"signature\": \"(figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, FigureClass=<class 'matplotlib.figure.Figure'>, clear=False, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Create a new figure with customizable parameters.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/567", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(title=None, size=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, clear=False, **kwargs)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a new figure with the specified parameters or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/567", "solution": "{\n  \"name\": \"create_figure\",\n  \"type\": \"function\",\n  \"signature\": \"(figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, FigureClass=None, clear=False, **kwargs)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Create a new figure with customizable parameters.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/567", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(num=None, figsize=None, dpi=None, *, facecolor=None, edgecolor=None, frameon=True, FigureClass=<class 'matplotlib.figure.Figure'>, clear=False, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Create a new figure with customizable parameters or activate an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/567", "solution": "{\n  \"name\": \"create_figure\",\n  \"type\": \"callable\",\n  \"signature\": \"(figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, clear=False, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with customizable parameters or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"createFigure\", \"type\": \"function\", \"signature\": \"(figureSize=None, dpi=None, faceColor=None, edgeColor=None, frameOn=True, figureClass=None, clear=False, **kwargs)\", \"return_type\": \"Figure\", \"short_description\": \"Creates a new figure with customizable parameters or activates an existing figure.\"}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/567", "solution": "{\n  \"name\": \"create_figure\",\n  \"type\": \"callable\",\n  \"signature\": \"(figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, clear=False, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Create a new figure with customizable parameters.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"createFigure\", \"type\": \"callable\", \"signature\": \"(num=None, figsize=None, dpi=None, *, facecolor=None, edgecolor=None, frameon=True, FigureClass=<class 'matplotlib.figure.Figure'>, clear=False, **kwargs)\", \"return_type\": \"~matplotlib.figure.Figure\", \"short_description\": \"Create a new figure with optional parameters or activate an existing figure.\"}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(num=None, figsize=None, dpi=None, *, facecolor=None, edgecolor=None, frameon=True, FigureClass=<class 'matplotlib.figure.Figure'>, clear=False, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with the specified parameters, or activates an existing figure if it already exists.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"createActivateFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(num=None, figsize=None, dpi=None, *, facecolor=None, edgecolor=None, frameon=True, FigureClass=<class 'matplotlib.figure.Figure'>, clear=False, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Create a new figure, or activate an existing figure. This function allows for the customization of various attributes such as size, resolution, colors, and more.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"createNewFigure\", \"type\": \"function\", \"signature\": \"(figureNum=None, figureSize=None, dpi=None, faceColor=None, edgeColor=None, frameOn=True, figureClass=None, clear=False, **kwargs)\", \"return_type\": \"Figure\", \"short_description\": \"Creates a new figure with specified parameters or activates an existing figure. The function returns the created or activated figure.\"}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(num=None, figsize=None, dpi=None, *, facecolor=None, edgecolor=None, frameon=True, FigureClass=<class 'matplotlib.figure.Figure'>, clear=False, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure or activates an existing figure with the specified parameters.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"createFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(width=None, height=None, resolution=None, faceColor=None, edgeColor=None, hasFrame=True, customClass=None, shouldClear=False, layout=None, **kwargs)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a new figure with customizable parameters or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(num=None, figsize=None, dpi=None, *, facecolor=None, edgecolor=None, frameon=True, FigureClass=<class 'matplotlib.figure.Figure'>, clear=False, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure with the specified parameters or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(figureNum=None, figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, figureClass=None, clear=False, **kwargs)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a new figure with the specified parameters or activates an existing figure.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"createNewFigure\",\n  \"type\": \"function\",\n  \"signature\": \"(num=None, figsize=None, dpi=None, *, facecolor=None, edgecolor=None, frameon=True, FigureClass=<class 'matplotlib.figure.Figure'>, clear=False, layout=None, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure or activates an existing figure with customizable options.\"\n}"}
{"api_id": 100, "api_name": "matplotlib.pyplot.figure", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"createOrActivateFigure\",\n  \"type\": \"callable\",\n  \"signature\": \"(num=None, figsize=None, dpi=None, *, facecolor=None, edgecolor=None, frameon=True, FigureClass=<class 'matplotlib.figure.Figure'>, clear=False, **kwargs)\",\n  \"return_type\": \"~matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a new figure or activates an existing figure with the specified parameters.\"\n}"}
{"api_id": 101, "api_name": "matplotlib.pyplot.scatter", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"plotOutliers\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, outlierZScore)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Plots a scatter plot of the data before and after the removal of outliers based on Z-scores.\"\n}"}
{"api_id": 101, "api_name": "matplotlib.pyplot.scatter", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"plotDataOutliers\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, outlierZScore, plot=True)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Plots the original and cleaned data, highlighting outliers. This function uses Z-scores to identify and remove outliers before plotting.\"\n}"}
{"api_id": 101, "api_name": "matplotlib.pyplot.scatter", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"plotScatterData\", \"type\": \"function\", \"signature\": \"(data, xIndex, yIndex, outlierThreshold)\", \"return_type\": \"None\", \"short_description\": \"Plots a scatter plot of the data, highlighting outliers based on Z-score threshold.\"}"}
{"api_id": 101, "api_name": "matplotlib.pyplot.scatter", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"plotDataWithOutliers\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, outlierZScore)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Plots a scatter plot of the data with and without outliers for a specified column, using the Z-score method for outlier detection.\"\n}"}
{"api_id": 101, "api_name": "matplotlib.pyplot.scatter", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"plotDataWithOutliers\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, outlierZScore)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Plots a scatter plot of the data before and after removing outliers based on Z-scores.\"\n}"}
{"api_id": 101, "api_name": "matplotlib.pyplot.scatter", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"plotDataWithOutliers\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, outlierZScore)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Plots a scatter plot of the data with and without outliers based on the specified column and Z-score threshold.\"\n}"}
{"api_id": 101, "api_name": "matplotlib.pyplot.scatter", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"plotDataOutliers\", \"type\": \"function\", \"signature\": \"(data, column, outlierZScore)\", \"return_type\": \"tuple\", \"short_description\": \"Plots a scatter plot of the data before and after removing outliers based on Z-scores.\"}"}
{"api_id": 101, "api_name": "matplotlib.pyplot.scatter", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"plotOutliers\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, outlierZScore)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Plots a scatter plot of the data before and after removing outliers based on Z-scores.\"\n}"}
{"api_id": 101, "api_name": "matplotlib.pyplot.scatter", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"plotOutliers\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, outlierZScore)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Plots a scatter plot of the data with and without outliers identified by Z-scores.\"\n}"}
{"api_id": 101, "api_name": "matplotlib.pyplot.scatter", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"plotScatterData\",\n  \"type\": \"function\",\n  \"signature\": \"(data, xColumn, yColumn, outlierThreshold)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Plots a scatter plot of the data based on the specified columns, highlighting outliers.\"\n}"}
{"api_id": 102, "api_name": "nltk.download", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"extractTopics\", \"type\": \"function\", \"signature\": \"(texts, num_topics)\", \"return_type\": \"List[List[str]]\", \"short_description\": \"Extracts topics from a list of texts using Non-negative Matrix Factorization (NMF).\"}"}
{"api_id": 102, "api_name": "nltk.download", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"fetchTextTopics\", \"type\": \"callable\", \"signature\": \"(texts, num_topics)\", \"return_type\": \"list\", \"short_description\": \"Extracts topics from a list of texts using Non-negative Matrix Factorization (NMF).\"}"}
{"api_id": 102, "api_name": "nltk.download", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"extractTopics\", \"type\": \"callable\", \"signature\": \"(texts, num_topics)\", \"return_type\": \"list\", \"short_description\": \"Extracts topics from a list of texts using Non-negative Matrix Factorization (NMF).\"}"}
{"api_id": 102, "api_name": "nltk.download", "task_id": "BigCodeBench/655", "solution": "{\n  \"name\": \"extractTopics\",\n  \"type\": \"function\",\n  \"signature\": \"(texts, num_topics)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Extracts topics from a list of texts using Non-negative Matrix Factorization (NMF).\"\n}"}
{"api_id": 102, "api_name": "nltk.download", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"extractTopics\", \"type\": \"callable\", \"signature\": \"(texts, numTopics)\", \"return_type\": \"List[List[str]]\", \"short_description\": \"Extracts the main topics from a list of texts using Non-negative Matrix Factorization (NMF).\"}"}
{"api_id": 102, "api_name": "nltk.download", "task_id": "BigCodeBench/655", "solution": "{\n  \"name\": \"calculateTopics\",\n  \"type\": \"callable\",\n  \"signature\": \"(texts, num_topics)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Calculates topics from a list of texts using Non-negative Matrix Factorization (NMF).\"\n}"}
{"api_id": 102, "api_name": "nltk.download", "task_id": "BigCodeBench/655", "solution": "{\n  \"name\": \"extractTopics\",\n  \"type\": \"callable\",\n  \"signature\": \"(texts, num_topics)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Extracts the main topics from a list of texts using Non-negative Matrix Factorization (NMF).\"\n}"}
{"api_id": 102, "api_name": "nltk.download", "task_id": "BigCodeBench/655", "solution": "{\n  \"name\": \"extractTopics\",\n  \"type\": \"callable\",\n  \"signature\": \"(texts, num_topics)\",\n  \"return_type\": \"List[List[str]]\",\n  \"short_description\": \"Extracts the main topics from a list of texts using Non-negative Matrix Factorization (NMF).\"\n}"}
{"api_id": 102, "api_name": "nltk.download", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"generateTopics\", \"type\": \"callable\", \"signature\": \"(texts, numTopics)\", \"return_type\": \"List[List[str]]\", \"short_description\": \"Extracts topics from a list of texts using Non-negative Matrix Factorization (NMF).\"}"}
{"api_id": 102, "api_name": "nltk.download", "task_id": "BigCodeBench/655", "solution": "{\n  \"name\": \"generateTopics\",\n  \"type\": \"callable\",\n  \"signature\": \"(texts, num_topics)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Generates topics based on the provided texts using Non-negative Matrix Factorization (NMF).\"\n}"}
{"api_id": 103, "api_name": "nltk.corpus.stopwords.words", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"extractTopics\", \"type\": \"callable\", \"signature\": \"(texts, num_topics)\", \"return_type\": \"list\", \"short_description\": \"Extracts topics from a list of texts using Non-negative Matrix Factorization (NMF).\"}"}
{"api_id": 103, "api_name": "nltk.corpus.stopwords.words", "task_id": "BigCodeBench/655", "solution": "{\n  \"name\": \"extract_topics\",\n  \"type\": \"callable\",\n  \"signature\": \"(texts, num_topics)\",\n  \"return_type\": \"List[List[str]]\",\n  \"short_description\": \"Extracts topics from a list of texts using Non-negative Matrix Factorization (NMF).\"\n}"}
{"api_id": 103, "api_name": "nltk.corpus.stopwords.words", "task_id": "BigCodeBench/655", "solution": "{\n  \"name\": \"generateTopics\",\n  \"type\": \"function\",\n  \"signature\": \"(texts, num_topics)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Extracts topics from a list of texts using Non-negative Matrix Factorization (NMF).\"\n}"}
{"api_id": 103, "api_name": "nltk.corpus.stopwords.words", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"extractTopics\", \"type\": \"function\", \"signature\": \"(texts, num_topics)\", \"return_type\": \"list\", \"short_description\": \"Extracts the main topics from a list of texts using Non-negative Matrix Factorization (NMF).\"}"}
{"api_id": 103, "api_name": "nltk.corpus.stopwords.words", "task_id": "BigCodeBench/655", "solution": "{\n  \"name\": \"fetch_stopwords\",\n  \"type\": \"function\",\n  \"signature\": \"()\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Retrieves a list of stopwords from the nltk corpus.\"\n}"}
{"api_id": 103, "api_name": "nltk.corpus.stopwords.words", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"extractTopics\", \"type\": \"callable\", \"signature\": \"(texts, num_topics)\", \"return_type\": \"list\", \"short_description\": \"Extracts topics from a list of texts using Non-negative Matrix Factorization (NMF).\"}"}
{"api_id": 103, "api_name": "nltk.corpus.stopwords.words", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"extractTopics\", \"type\": \"function\", \"signature\": \"(texts, numTopics)\", \"return_type\": \"List[List[str]]\", \"short_description\": \"Extracts the main topics from a list of texts using Non-negative Matrix Factorization (NMF).\"}"}
{"api_id": 103, "api_name": "nltk.corpus.stopwords.words", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"extractTopicsFromTexts\", \"type\": \"function\", \"signature\": \"(texts, numTopics)\", \"return_type\": \"list\", \"short_description\": \"Extracts topics from a list of texts using Non-negative Matrix Factorization (NMF).\"}"}
{"api_id": 103, "api_name": "nltk.corpus.stopwords.words", "task_id": "BigCodeBench/655", "solution": "{\n  \"name\": \"extractTopics\",\n  \"type\": \"function\",\n  \"signature\": \"(texts, num_topics)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Extracts the main topics from a list of texts using Non-Negative Matrix Factorization (NMF).\"\n}"}
{"api_id": 103, "api_name": "nltk.corpus.stopwords.words", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"extractTopics\", \"type\": \"function\", \"signature\": \"(texts, num_topics)\", \"return_type\": \"list\", \"short_description\": \"Extracts the main topics from a list of texts using Non-negative Matrix Factorization (NMF).\"}"}
{"api_id": 103, "api_name": "nltk.corpus.stopwords.words", "task_id": "BigCodeBench/657", "solution": "{\"name\": \"generateWordCloud\", \"type\": \"callable\", \"signature\": \"(text, font_path=None, width=800, height=400, margin=2, scale=1)\", \"return_type\": \"image\", \"short_description\": \"Generates a word cloud image from the provided text.\"}"}
{"api_id": 103, "api_name": "nltk.corpus.stopwords.words", "task_id": "BigCodeBench/657", "solution": "{\"name\": \"generateWordVectors\", \"type\": \"function\", \"signature\": \"(texts, stopwords=None)\", \"return_type\": \"Word2Vec\", \"short_description\": \"Generates word vectors for the given list of texts using the Word2Vec model.\"}"}
{"api_id": 103, "api_name": "nltk.corpus.stopwords.words", "task_id": "BigCodeBench/657", "solution": "{\"name\": \"generateWordVectors\", \"type\": \"function\", \"signature\": \"(texts, stopwords=None)\", \"return_type\": \"Word2Vec\", \"short_description\": \"Generates word vectors using the Word2Vec model from the provided texts, excluding stopwords.\"}"}
{"api_id": 103, "api_name": "nltk.corpus.stopwords.words", "task_id": "BigCodeBench/657", "solution": "{\"name\": \"fetchStopwords\", \"type\": \"function\", \"signature\": \"(lang='en')\", \"return_type\": \"list\", \"short_description\": \"Fetches the list of stopwords for a given language.\"}"}
{"api_id": 103, "api_name": "nltk.corpus.stopwords.words", "task_id": "BigCodeBench/657", "solution": "{\"name\": \"generateWordVectors\", \"type\": \"function\", \"signature\": \"(texts, stopwords=None)\", \"return_type\": \"Word2Vec\", \"short_description\": \"Generates word vectors using the Word2Vec model from the Gensim library. Takes a list of texts and an optional list of stopwords.\"}"}
{"api_id": 103, "api_name": "nltk.corpus.stopwords.words", "task_id": "BigCodeBench/657", "solution": "{\"name\": \"generateWordVectors\", \"type\": \"function\", \"signature\": \"(texts, stopwords=None)\", \"return_type\": \"Word2Vec\", \"short_description\": \"Generates word vectors using the Word2Vec model from Gensim for the given list of texts, excluding stopwords.\"}"}
{"api_id": 103, "api_name": "nltk.corpus.stopwords.words", "task_id": "BigCodeBench/657", "solution": "{\"name\": \"fetchStopwords\", \"type\": \"function\", \"signature\": \"(language='english')\", \"return_type\": \"list\", \"short_description\": \"Fetches the list of stopwords for a given language.\"}"}
{"api_id": 103, "api_name": "nltk.corpus.stopwords.words", "task_id": "BigCodeBench/657", "solution": "{\"name\": \"extractKeywords\", \"type\": \"callable\", \"signature\": \"(text, num_keywords=5)\", \"return_type\": \"list\", \"short_description\": \"Extracts the most relevant keywords from the given text using a simple keyword extraction algorithm.\"}"}
{"api_id": 103, "api_name": "nltk.corpus.stopwords.words", "task_id": "BigCodeBench/657", "solution": "{\"name\": \"generateWordVectors\", \"type\": \"function\", \"signature\": \"(texts, stopwords=None)\", \"return_type\": \"Word2Vec\", \"short_description\": \"Generates word vectors for the given list of texts using the Word2Vec model, excluding stopwords if provided.\"}"}
{"api_id": 103, "api_name": "nltk.corpus.stopwords.words", "task_id": "BigCodeBench/657", "solution": "{\"name\": \"fetchStopwords\", \"type\": \"function\", \"signature\": \"(language='english')\", \"return_type\": \"list\", \"short_description\": \"Fetches the list of stopwords for a given language.\"}"}
{"api_id": 104, "api_name": "nltk.word_tokenize", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"calculate_word_frequency\", \"type\": \"function\", \"signature\": \"(text, language='english')\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in the given text, excluding punctuation, using NLTK for tokenization.\"}"}
{"api_id": 104, "api_name": "nltk.word_tokenize", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"generate_word_frequencies\", \"type\": \"function\", \"signature\": \"(text, language='english')\", \"return_type\": \"dict\", \"short_description\": \"Generate a dictionary of word frequencies from the provided text, tokenized by NLTK's recommended word tokenizer.\"}"}
{"api_id": 104, "api_name": "nltk.word_tokenize", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"calculate_word_frequencies\", \"type\": \"function\", \"signature\": \"(text_list, language='english')\", \"return_type\": \"dict\", \"short_description\": \"Calculates word frequencies from a list of texts using NLTK's word tokenizer. The function tokenizes each text separately and combines the results to compute a single set of word frequencies.\"}"}
{"api_id": 104, "api_name": "nltk.word_tokenize", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"calculate_word_frequency\", \"type\": \"function\", \"signature\": \"(text, language='english')\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in the given text using NLTK's word tokenizer, ignoring punctuation and language-specific characters.\"}"}
{"api_id": 104, "api_name": "nltk.word_tokenize", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"calculate_word_frequency\", \"type\": \"function\", \"signature\": \"(text, language='english')\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in the given text, excluding punctuation.\"}"}
{"api_id": 104, "api_name": "nltk.word_tokenize", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"extract_word_frequencies\", \"type\": \"function\", \"signature\": \"(text, language='english')\", \"return_type\": \"dict\", \"short_description\": \"Extracts word frequencies from the given text using NLTK's word tokenizer.\"}"}
{"api_id": 104, "api_name": "nltk.word_tokenize", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"calculate_word_frequency\", \"type\": \"function\", \"signature\": \"(text, language='english')\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in the given text using NLTK's word tokenizer.\"}"}
{"api_id": 104, "api_name": "nltk.word_tokenize", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"extract_word_frequencies\", \"type\": \"function\", \"signature\": \"(text, language='english', remove_punctuation=True)\", \"return_type\": \"dict\", \"short_description\": \"Extracts word frequencies from a given text using NLTK's word tokenizer. Optionally removes punctuation.\"}"}
{"api_id": 104, "api_name": "nltk.word_tokenize", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"calculate_word_frequencies\", \"type\": \"function\", \"signature\": \"(text, language='english', ignore_punctuation=True)\", \"return_type\": \"dict\", \"short_description\": \"Calculate word frequencies in a given text, optionally ignoring punctuation.\"}"}
{"api_id": 104, "api_name": "nltk.word_tokenize", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"calculate_word_frequencies\", \"type\": \"function\", \"signature\": \"(text, language='english', remove_punctuation=True)\", \"return_type\": \"dict\", \"short_description\": \"Calculate word frequencies in a given text.\"}"}
{"api_id": 105, "api_name": "numpy.nan", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"def calculateStatistics(column_data)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, min, and max of the given column data.\"}"}
{"api_id": 105, "api_name": "numpy.nan", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"convertToFloat\", \"type\": \"utility\", \"signature\": \"value\", \"return_type\": \"float\", \"short_description\": \"Converts a given string or number to a floating point number, if possible.\"}"}
{"api_id": 105, "api_name": "numpy.nan", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"convertToFloat\", \"type\": \"utility\", \"signature\": \"convertToFloat(value: Union[str, float]) -> float\", \"return_type\": \"float\", \"short_description\": \"Converts a string or float to a floating point number, if possible.\"}"}
{"api_id": 105, "api_name": "numpy.nan", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"convertStringToFloat\", \"type\": \"utility\", \"signature\": \"(value)\", \"return_type\": \"float\", \"short_description\": \"Converts a string or number to a floating point number if possible.\"}"}
{"api_id": 105, "api_name": "numpy.nan", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"convertToFloat\", \"type\": \"function\", \"signature\": \"convert_to_float(value)\", \"return_type\": \"float\", \"short_description\": \"Converts a string or number to a floating point number, if possible.\"}"}
{"api_id": 105, "api_name": "numpy.nan", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"convertStringToNumber\", \"type\": \"function\", \"signature\": \"convert_string_to_number(value: str|float) -> float\", \"return_type\": \"float\", \"short_description\": \"Converts a string or number to a floating point number, if possible.\"}"}
{"api_id": 105, "api_name": "numpy.nan", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"convertStringToFloat\", \"type\": \"utility\", \"signature\": \"str_or_num\", \"return_type\": \"float\", \"short_description\": \"Converts a string or number to a floating point number if possible.\"}"}
{"api_id": 105, "api_name": "numpy.nan", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"convertToFloat\", \"type\": \"utility\", \"signature\": \"convertToFloat(value: str|float) -> float\", \"return_type\": \"float\", \"short_description\": \"Converts a string or number to a floating point number, if possible.\"}"}
{"api_id": 105, "api_name": "numpy.nan", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"convertStringToFloat\", \"type\": \"utility\", \"return_type\": \"float\", \"signature\": \"(value)\", \"short_description\": \"Converts a string or number to a floating point number, if possible.\"}"}
{"api_id": 105, "api_name": "numpy.nan", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"convertToFloat\", \"type\": \"utility\", \"signature\": \"value\", \"return_type\": \"float\", \"short_description\": \"Converts a given value to a floating point number if possible.\"}"}
{"api_id": 106, "api_name": "numpy.ndarray", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"calculateTensorProduct\", \"type\": \"function\", \"signature\": \"(P: np.ndarray, T: np.ndarray, axes: tuple) -> np.ndarray\", \"return_type\": \"np.ndarray\", \"short_description\": \"Calculates the tensor product of two tensors along specified axes.\"}"}
{"api_id": 106, "api_name": "numpy.ndarray", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"calculateTensorProduct\", \"type\": \"function\", \"signature\": \"(P: np.ndarray, T: np.ndarray, axes: tuple) -> np.ndarray\", \"return_type\": \"np.ndarray\", \"short_description\": \"Calculates the tensor product of two arrays along specified axes.\"}"}
{"api_id": 106, "api_name": "numpy.ndarray", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"calculateTensorProduct\", \"type\": \"function\", \"signature\": \"def calculateTensorProduct(P: np.ndarray, T: np.ndarray, tensor_shape: tuple, n_clusters: int = 3, random_state: int = 0, n_init: int = 10) -> (np.ndarray, plt.Axes):\", \"return_type\": \"(np.ndarray, plt.Axes)\", \"short_description\": \"Calculates the tensor product of two arrays and performs KMeans clustering on the result, returning the cluster labels and the plotted axes.\"}"}
{"api_id": 106, "api_name": "numpy.ndarray", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"generateTensorProduct\", \"type\": \"function\", \"signature\": \"(P: np.ndarray, T: np.ndarray, tensor_shape: tuple, axes: tuple) -> np.ndarray\", \"return_type\": \"np.ndarray\", \"short_description\": \"Generates the tensor product of two arrays along specified axes.\"}"}
{"api_id": 106, "api_name": "numpy.ndarray", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"calculateTensorProduct\", \"type\": \"function\", \"signature\": \"(P: np.ndarray, T: np.ndarray, axes: tuple) -> np.ndarray\", \"return_type\": \"np.ndarray\", \"short_description\": \"Calculates the tensor product of two tensors along specified axes.\"}"}
{"api_id": 106, "api_name": "numpy.ndarray", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"calculateTensorProduct\", \"type\": \"function\", \"signature\": \"(P: np.ndarray, T: np.ndarray, axes: tuple) -> np.ndarray\", \"return_type\": \"np.ndarray\", \"short_description\": \"Calculates the tensor product of two arrays along specified axes.\"}"}
{"api_id": 106, "api_name": "numpy.ndarray", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"calculateTensorProduct\", \"type\": \"function\", \"signature\": \"def calculateTensorProduct(P: np.ndarray, T: np.ndarray, n_clusters: int = 3, random_state: int = 0, n_init: int = 10) -> Tuple[np.ndarray, plt.Axes]:\", \"return_type\": \"Tuple[np.ndarray, plt.Axes]\", \"short_description\": \"Calculates the tensor product of two tensors and performs KMeans clustering on the result, visualizing the clusters with a scatter plot.\"}"}
{"api_id": 106, "api_name": "numpy.ndarray", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"computeTensorProduct\", \"type\": \"function\", \"signature\": \"(P: np.ndarray, T: np.ndarray) -> np.ndarray\", \"return_type\": \"np.ndarray\", \"short_description\": \"Computes the tensor product of two arrays P and T along specified axes.\"}"}
{"api_id": 106, "api_name": "numpy.ndarray", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"calculateTensorProduct\", \"type\": \"function\", \"signature\": \"def calculateTensorProduct(P: np.ndarray, T: np.ndarray, n_clusters: int = 3, random_state: int = 0, n_init: int = 10) -> (np.ndarray, plt.Axes):\", \"return_type\": \"(np.ndarray, plt.Axes)\", \"short_description\": \"Calculates the tensor product of two tensors and performs KMeans clustering on the result, visualizing the clusters using a scatter plot.\"}"}
{"api_id": 106, "api_name": "numpy.ndarray", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"calculateTensorProduct\", \"type\": \"function\", \"signature\": \"(P: np.ndarray, T: np.ndarray, axes: tuple) -> np.ndarray\", \"return_type\": \"np.ndarray\", \"short_description\": \"Calculates the tensor product of two arrays along specified axes.\"}"}
{"api_id": 106, "api_name": "numpy.ndarray", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"generateVoronoiDiagram\", \"type\": \"function\", \"signature\": \"(points, seed=0)\", \"return_type\": \"tuple(Voronoi, plt.Axes)\", \"short_description\": \"Generates a Voronoi diagram from a set of 2D points and plots it using matplotlib.\"}"}
{"api_id": 106, "api_name": "numpy.ndarray", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"generateVoronoiDiagram\", \"type\": \"function\", \"signature\": \"generateVoronoiDiagram(points, seed=0)\", \"return_type\": \"tuple(Voronoi, plt.Axes)\", \"short_description\": \"Generates a Voronoi diagram from a set of 2D points and plots it using matplotlib.\"}"}
{"api_id": 106, "api_name": "numpy.ndarray", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"createVoronoiDiagram\", \"type\": \"function\", \"signature\": \"(points: np.ndarray, seed: int = 0) -> Tuple[Voronoi, plt.Axes]\", \"return_type\": \"Tuple[Voronoi, plt.Axes]\", \"short_description\": \"Creates a Voronoi diagram from a given set of 2D points and plots it using matplotlib.\"}"}
{"api_id": 106, "api_name": "numpy.ndarray", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"generateVoronoiDiagram\", \"type\": \"function\", \"signature\": \"(points, seed=0)\", \"return_type\": \"tuple(Voronoi, plt.Axes)\", \"short_description\": \"Generates a Voronoi diagram from a given set of 2D points and plots it using matplotlib.\"}"}
{"api_id": 106, "api_name": "numpy.ndarray", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"generateVoronoiDiagram\", \"type\": \"function\", \"signature\": \"generateVoronoiDiagram(points, seed=0)\", \"return_type\": \"tuple(Voronoi, plt.Axes)\", \"short_description\": \"Generates a Voronoi diagram from a set of 2D points and plots it using matplotlib.\"}"}
{"api_id": 106, "api_name": "numpy.ndarray", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"calculateVoronoi\", \"type\": \"function\", \"signature\": \"calculateVoronoi(points, seed=0)\", \"return_type\": \"tuple(Voronoi, Axes)\", \"short_description\": \"Calculates the Voronoi diagram for a given set of 2D points and plots it using matplotlib.\"}"}
{"api_id": 106, "api_name": "numpy.ndarray", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"generateVoronoiDiagram\", \"type\": \"function\", \"signature\": \"generateVoronoiDiagram(points, seed=0)\", \"return_type\": \"tuple(Voronoi, AxesSubplot)\", \"short_description\": \"Generates a Voronoi diagram from a set of 2D points and plots it using matplotlib.\"}"}
{"api_id": 106, "api_name": "numpy.ndarray", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"calculateVoronoiDiagram\", \"type\": \"function\", \"signature\": \"def calculateVoronoiDiagram(points, seed=0):\", \"return_type\": \"tuple(Voronoi, plt.Axes)\", \"short_description\": \"Calculates the Voronoi diagram for a given set of 2D points and plots it. Returns the Voronoi object and the matplotlib Axes object.\"}"}
{"api_id": 106, "api_name": "numpy.ndarray", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"calculateVoronoi\", \"type\": \"function\", \"signature\": \"calculateVoronoi(points, seed=0)\", \"return_type\": \"tuple(Voronoi, matplotlib.axes._axes.Axes)\", \"short_description\": \"Computes the Voronoi diagram for a set of 2D points and plots it.\"}"}
{"api_id": 106, "api_name": "numpy.ndarray", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"calculateVoronoiDiagram\", \"type\": \"function\", \"signature\": \"calculateVoronoiDiagram(points, seed=0)\", \"return_type\": \"tuple\", \"short_description\": \"Calculates the Voronoi diagram for a given set of 2D points and plots it. Returns a tuple containing the Voronoi object and the matplotlib Axes object.\"}"}
{"api_id": 107, "api_name": "numpy.cumsum", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"calculate_cumulative_sum\",\n  \"type\": \"function\",\n  \"signature\": \"(array, axis=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Calculates the cumulative sum of the elements along a given axis.\"\n}"}
{"api_id": 107, "api_name": "numpy.cumsum", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"calculate_descriptive_statistics\",\n  \"type\": \"function\",\n  \"signature\": \"(data, percentiles=[0.05, 0.25, 0.5, 0.75, 0.95])\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Calculates descriptive statistics for a given dataset, including specified percentiles.\"\n}"}
{"api_id": 107, "api_name": "numpy.cumsum", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generateRandomWalk\", \"type\": \"function\", \"signature\": \"(elements, seed=0)\", \"return_type\": \"tuple(dict, plt.Axes)\", \"short_description\": \"Generates a random walk and returns descriptive statistics and the plot axis.\"}"}
{"api_id": 107, "api_name": "numpy.cumsum", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generateRandomWalk\", \"type\": \"function\", \"signature\": \"(length, seed=0)\", \"return_type\": \"dict, matplotlib.axes._axes.Axes\", \"short_description\": \"Generates a random walk of a specified length and plots it. Returns descriptive statistics and a reference to the plot axis.\"}"}
{"api_id": 107, "api_name": "numpy.cumsum", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"calculate_cumulative_sum\",\n  \"type\": \"function\",\n  \"signature\": \"(array, axis=None, dtype=None, out=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Calculate the cumulative sum of the elements along a given axis.\"\n}"}
{"api_id": 107, "api_name": "numpy.cumsum", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"calculateCumulativeSum\", \"type\": \"callable\", \"signature\": \"(array, axis=None, dtype=None, out=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the cumulative sum of the elements along a specified axis of the input array.\"}"}
{"api_id": 107, "api_name": "numpy.cumsum", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"calculate_cumsum\", \"type\": \"function\", \"signature\": \"(array, axis=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the cumulative sum of elements along a specified axis in an array.\"}"}
{"api_id": 107, "api_name": "numpy.cumsum", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"calculate_descriptive_stats\", \"type\": \"function\", \"signature\": \"(data, percentiles=[0.05, 0.25, 0.5, 0.75, 0.95])\", \"return_type\": \"dict\", \"short_description\": \"Calculate descriptive statistics for a given dataset.\"}"}
{"api_id": 107, "api_name": "numpy.cumsum", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"calculateCumsum\", \"type\": \"callable\", \"signature\": \"(array, axis=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the cumulative sum of the elements along a specified axis of the input array.\"}"}
{"api_id": 107, "api_name": "numpy.cumsum", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"calculateCumsum\", \"type\": \"function\", \"signature\": \"(array, axis=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the cumulative sum of the elements along a specified axis.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"generateUniformSamples\",\n  \"type\": \"function\",\n  \"signature\": \"(start, stop, num=50, endpoint=True, dtype=None, axis=0)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Generates a specified number of uniformly spaced samples over a given interval.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"generateUniformSamples\",\n  \"type\": \"function\",\n  \"signature\": \"(start, stop, num=50, endpoint=True, dtype=None, axis=0)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Generates a specified number of uniformly spaced samples over a specified interval.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"generateRandomNumbers\", \"type\": \"function\", \"signature\": \"(count, min, max)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random numbers within a specified range.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"generateEquallySpacedValues\", \"type\": \"function\", \"signature\": \"(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values over a specified interval.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"generateRandomNumbers\",\n  \"type\": \"function\",\n  \"signature\": \"(count, min, max)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Generates a list of random numbers within a specified range.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"generatePoints\", \"type\": \"function\", \"signature\": \"(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced numbers over a specified interval.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"generateRandomNumbers\",\n  \"type\": \"function\",\n  \"signature\": \"(count, min, max)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Generates a list of random numbers within a specified range.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"generateUniformSamples\", \"type\": \"function\", \"signature\": \"(start, stop, num=50)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a specified number of uniformly spaced samples over a given interval.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"calculateStats\",\n  \"type\": \"function\",\n  \"signature\": \"(arr)\",\n  \"return_type\": \"{'mean': float, 'std': float, 'min': float, 'max': float}\",\n  \"short_description\": \"Calculates the mean, standard deviation, minimum, and maximum of an array.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"generateEquallySpacedNumbers\", \"type\": \"function\", \"signature\": \"(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a specified number of evenly spaced samples over a given interval.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/267", "solution": "{\n  \"name\": \"generate_signal\",\n  \"type\": \"function\",\n  \"signature\": \"(data, sample_rate=8000)\",\n  \"return_type\": \"tuple(ndarray, Axes)\",\n  \"short_description\": \"Generates a signal based on the values in `data` and plots its FFT.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateFFT\", \"type\": \"function\", \"signature\": \"(signal, sample_rate=8000)\", \"return_type\": \"tuple[ndarray, Axes]\", \"short_description\": \"Performs a Fast Fourier Transform (FFT) on the given signal and plots the result.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateFFT\", \"type\": \"callable\", \"signature\": \"(signal, sampleRate=8000)\", \"return_type\": \"Tuple[np.ndarray, plt.Axes]\", \"short_description\": \"Perform a Fast Fourier Transform (FFT) on the provided signal and plot the result. This function is designed to analyze the frequency content of a given signal.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"generateSignal\", \"type\": \"callable\", \"signature\": \"(data, sample_rate=8000)\", \"return_type\": \"tuple(ndarray, Axes)\", \"short_description\": \"Generates a signal based on the values in `data` and plots its FFT.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/267", "solution": "{\n  \"name\": \"generateSignal\",\n  \"type\": \"function\",\n  \"signature\": \"(data, sample_rate=8000)\",\n  \"return_type\": \"tuple(ndarray, Axes)\",\n  \"short_description\": \"Generates a signal based on the values in `data` and plots its FFT.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateFFT\", \"type\": \"callable\", \"signature\": \"(signal, sampleRate=8000)\", \"return_type\": \"tuple[ndarray, plt.Axes]\", \"short_description\": \"Performs a Fast Fourier Transform (FFT) on the provided signal and plots the result. Returns the FFT data and the plot axis.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/267", "solution": "{\n  \"name\": \"generate_sinusoidal_signal\",\n  \"type\": \"function\",\n  \"signature\": \"(data, sample_rate=8000)\",\n  \"return_type\": \"tuple(ndarray, Axes)\",\n  \"short_description\": \"Generates a sinusoidal signal based on the provided data and plots its FFT.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateSignalFFT\", \"type\": \"function\", \"signature\": \"(signal, sampleRate)\", \"return_type\": \"Tuple[np.ndarray, plt.Axes]\", \"short_description\": \"Calculate the Fast Fourier Transform (FFT) of a given signal and plot the result.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"generateSignal\", \"type\": \"function\", \"signature\": \"(data, sampleRate=8000)\", \"return_type\": \"tuple(ndarray, Axes)\", \"short_description\": \"Generates a signal from a dictionary of data values and plots its FFT.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateFourierTransform\", \"type\": \"function\", \"signature\": \"(signal)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the Fast Fourier Transform (FFT) of the given signal.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"generateHarmonic\",\n  \"type\": \"function\",\n  \"signature\": \"(frequency, sample_size=10000)\",\n  \"return_type\": \"tuple(ndarray, ndarray)\",\n  \"short_description\": \"Generates arrays representing the sine and cosine waves at a specified frequency over a range of angles.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"generateSineWave\", \"type\": \"function\", \"signature\": \"(frequency, sampleSize=10000)\", \"return_type\": \"Tuple[Figure, Axes]\", \"short_description\": \"Generates a sine wave plot with specified frequency and sample size.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"generate_waveforms\",\n  \"type\": \"function\",\n  \"signature\": \"(frequency, sample_size=10000)\",\n  \"return_type\": \"tuple(Figure, Axes)\",\n  \"short_description\": \"Generates and plots sine and cosine waveforms based on the given frequency and sample size.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"generateWaveform\", \"type\": \"function\", \"signature\": \"(frequency, sample_size=10000)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a waveform with specified frequency and sample size.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"calculateHarmonics\", \"type\": \"function\", \"signature\": \"(frequency, sampleSize=10000)\", \"return_type\": \"tuple\", \"short_description\": \"Calculates the sine and cosine values for given frequency and sample size.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"generate_sine_wave\",\n  \"type\": \"function\",\n  \"signature\": \"(frequency, sample_size=10000)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a sine wave with the specified frequency and sample size.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"generateSineWave\", \"type\": \"function\", \"signature\": \"(frequency, sampleSize=10000)\", \"return_type\": \"Tuple[Figure, Axes]\", \"short_description\": \"Generates a sine wave plot based on the given frequency and sample size.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"generate_waveforms\",\n  \"type\": \"function\",\n  \"signature\": \"(frequency, sample_size=10000)\",\n  \"return_type\": \"tuple(figure, axes)\",\n  \"short_description\": \"Generates and plots a sine and cosine waveform based on the given frequency and sample size.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"generate_waveforms\",\n  \"type\": \"function\",\n  \"signature\": \"(frequency, sample_size=10000)\",\n  \"return_type\": \"tuple(Figure, Axes)\",\n  \"short_description\": \"Generates and plots a sine and cosine waveform based on the given frequency and sample size.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"generateFrequencyPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(frequency, sample_size=10000)\",\n  \"return_type\": \"tuple(Figure, Axes)\",\n  \"short_description\": \"Generates a plot of sine and cosine waves for a given frequency and sample size.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculateDistributionStats\", \"type\": \"function\", \"signature\": \"(data, bins=4)\", \"return_type\": \"tuple(Counter, Axes)\", \"short_description\": \"Calculates the distribution statistics and plots a histogram with a normal distribution curve.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculateDistributionStats\", \"type\": \"function\", \"signature\": \"(data, bins=4)\", \"return_type\": \"tuple(Counter, plt.Axes)\", \"short_description\": \"Calculates the distribution statistics and plots the histogram with a fitted normal distribution curve.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"generateEquallySpacedNumbers\", \"type\": \"function\", \"signature\": \"(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced numbers over a specified interval.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculateDistributionStats\", \"type\": \"function\", \"signature\": \"(data, bins=4)\", \"return_type\": \"tuple(Counter, Axes)\", \"short_description\": \"Analyzes the distribution of data values and plots a histogram with a normal distribution overlay.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/532", "solution": "{\n  \"name\": \"generateRandomNumbers\",\n  \"type\": \"function\",\n  \"signature\": \"(count, min, max)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Generates a list of random numbers within a specified range.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/532", "solution": "{\n  \"name\": \"calculate_distribution\",\n  \"type\": \"function\",\n  \"signature\": \"(data, bins=4)\",\n  \"return_type\": \"tuple(Counter, Axes)\",\n  \"short_description\": \"Calculates and visualizes the distribution of given data using a histogram and optionally fits a normal distribution.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"generateUniformData\", \"type\": \"function\", \"signature\": \"(start, stop, num=50)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates evenly spaced numbers over a specified interval.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"generateRandomNumbers\", \"type\": \"function\", \"signature\": \"(count, min, max)\", \"return_type\": \"list[float]\", \"short_description\": \"Generates a specified number of random floating-point numbers within a given range.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"generateUniformSamples\", \"type\": \"function\", \"signature\": \"(start, stop, num=50)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a specified number of uniformly spaced samples within a given interval.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/532", "solution": "{\n  \"name\": \"generate_evenly_spaced_samples\",\n  \"type\": \"callable\",\n  \"signature\": \"(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Generates evenly spaced samples over a specified interval.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/574", "solution": "{\n  \"name\": \"generateRandomNumbers\",\n  \"type\": \"function\",\n  \"signature\": \"(count, min, max)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Generates a list of random numbers within a specified range.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/574", "solution": "{\n  \"name\": \"generate_random_points\",\n  \"type\": \"function\",\n  \"signature\": \"(num_points, min_value, max_value)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Generates a specified number of random points within a given range.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/574", "solution": "{\n  \"name\": \"calculateAverage\",\n  \"type\": \"function\",\n  \"signature\": \"(dataArray, axis=0)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Calculates the average of elements along a specified axis of the input array.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"calculateHarmonics\", \"type\": \"function\", \"signature\": \"(amplitude, frequency, numSamples)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Generates a signal composed of multiple harmonic components.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"calculateHarmonics\", \"type\": \"function\", \"signature\": \"(frequency, amplitude, numHarmonics)\", \"return_type\": \"list\", \"short_description\": \"Calculates the first N harmonics of a given sine wave.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"calculateSineWithNoise\", \"type\": \"function\", \"signature\": \"(amplitude, frequency, phase, length, noiseLevel)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a noisy sine wave based on given parameters.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/574", "solution": "{\n  \"name\": \"calculateSineWave\",\n  \"type\": \"function\",\n  \"signature\": \"(amplitude, frequency, phase, numPoints, noiseLevel=0.2)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Generates a sine wave with added noise for a specified number of points.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/574", "solution": "{\n  \"name\": \"calculateAverage\",\n  \"type\": \"function\",\n  \"signature\": \"(dataArray, axis=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Calculates the average of elements along a specified axis of the input array.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"calculateFrequencies\", \"type\": \"function\", \"signature\": \"(data, method='fft')\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the frequency spectrum of a given time-domain signal using the specified method.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/574", "solution": "{\n  \"name\": \"calculateHarmonicMean\",\n  \"type\": \"function\",\n  \"signature\": \"(dataArray)\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculates the harmonic mean of the given data array.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(size=1000)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Generates a random dataset of specified size from a normal distribution.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"generateRandomPoints\", \"type\": \"function\", \"signature\": \"(count, min, max)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random points within a specified range.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(size=1000)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Generates a random dataset of specified size using a normal distribution.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"generateRandomNumbers\", \"type\": \"function\", \"signature\": \"(count, min, max)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random numbers within a specified range.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/582", "solution": "{\n  \"name\": \"generate_random_data\",\n  \"type\": \"function\",\n  \"signature\": \"(size=1000)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Generates random data from a normal distribution.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"generateRandomPoints\", \"type\": \"function\", \"signature\": \"(count, min, max)\", \"return_type\": \"list\", \"short_description\": \"Generates a specified number of random points within a given range.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"generate_random_points\", \"type\": \"function\", \"signature\": \"(num_points, min_value, max_value)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random points uniformly distributed between `min_value` and `max_value`.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/582", "solution": "{\n  \"name\": \"calculate_norm_fit\",\n  \"type\": \"function\",\n  \"signature\": \"(data, num_bins=50)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Calculates and visualizes a normal distribution fit to the provided data, with an option to specify the number of bins for the histogram.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/582", "solution": "{\n  \"name\": \"calculateNormalDistribution\",\n  \"type\": \"function\",\n  \"signature\": \"(data, bins='auto', num=50, endpoint=True, retstep=False, dtype=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Calculate and plot a normal distribution based on the provided data.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"generateRandomNumbers\", \"type\": \"function\", \"signature\": \"(count, min, max)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random numbers within a specified range.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"generateRandomNumbers\", \"type\": \"function\", \"signature\": \"(count, min, max)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random numbers within a specified range.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"generateRandomNumbers\", \"type\": \"function\", \"signature\": \"(count, min, max)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random numbers within a specified range.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"generateRandomPoints\", \"type\": \"function\", \"signature\": \"(numPoints, minVal, maxVal)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random points within a specified range.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"generateRandomArray\", \"type\": \"function\", \"signature\": \"(size, dtype=float)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a random array of specified size and data type.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"generateRandomArray\", \"type\": \"function\", \"signature\": \"(size, dtype='float64')\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a random array of specified size and data type.\"}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"calculate_exponential_fit\",\n  \"type\": \"function\",\n  \"signature\": \"(data_array, target_value, num_points=50, endpoint=True, retstep=False, dtype=None, axis=0)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Performs an exponential fit on a given data array and plots the result.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"generateRandomPoints\",\n  \"type\": \"function\",\n  \"signature\": \"(numPoints, minValue, maxValue)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Generates a list of random points within a specified range.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"calculate_exponential_fit\",\n  \"type\": \"function\",\n  \"signature\": \"(array, target_value)\",\n  \"return_type\": \"tuple(list, plt.Axes)\",\n  \"short_description\": \"Performs an exponential curve fitting on a given array based on a target value and plots the results.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"generate_color_palette\",\n  \"type\": \"function\",\n  \"signature\": \"(base_color, num_colors, scheme='sequential')\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Generates a list of color palette shades based on a given base color and palette scheme.\"\n}"}
{"api_id": 108, "api_name": "numpy.linspace", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"generateRandomNumbers\", \"type\": \"function\", \"signature\": \"(count, min, max)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random numbers within a specified range.\"}"}
{"api_id": 109, "api_name": "numpy.median", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculateMedian\", \"type\": \"callable\", \"signature\": \"(array_like, axis=None, out=None, overwrite_input=False, keepdims=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the median along the specified axis of the input array.\"}"}
{"api_id": 109, "api_name": "numpy.median", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculate_descriptive_stats\", \"type\": \"callable\", \"signature\": \"(data, axis=None, keepdims=False)\", \"return_type\": \"dict\", \"short_description\": \"Calculate the mean, median, and standard deviation along the specified axis. Returns a dictionary with the calculated statistics.\"}"}
{"api_id": 109, "api_name": "numpy.median", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"callable\", \"signature\": \"(data, axis=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes mean, median, and standard deviation along the specified axis.\"}"}
{"api_id": 109, "api_name": "numpy.median", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculateMedian\", \"type\": \"callable\", \"signature\": \"(array_like, axis=None, out=None, overwrite_input=False, keepdims=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the median along the specified axis of the input array.\"}"}
{"api_id": 109, "api_name": "numpy.median", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"callable\", \"signature\": \"(data, axis=None, keepdims=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes mean, median, and standard deviation along the specified axis.\"}"}
{"api_id": 109, "api_name": "numpy.median", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculateStats\", \"type\": \"function\", \"signature\": \"(data, columnName)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the mean, median, and standard deviation for a specified column in a DataFrame.\"}"}
{"api_id": 109, "api_name": "numpy.median", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"callable\", \"signature\": \"(data, axis=None)\", \"return_type\": \"dict\", \"short_description\": \"Calculates mean, median, and standard deviation for the given data along the specified axis.\"}"}
{"api_id": 109, "api_name": "numpy.median", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, axis=None, keepdims=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes mean, median, and standard deviation for the given data along the specified axis.\"}"}
{"api_id": 109, "api_name": "numpy.median", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(dataArray, axis=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the mean, median, and standard deviation along the specified axis of the input array.\"}"}
{"api_id": 109, "api_name": "numpy.median", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculateStats\", \"type\": \"callable\", \"signature\": \"(array_like, axis=None, out=None, overwrite_input=False, keepdims=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate statistical measures such as mean, median, and standard deviation along a specified axis.\"}"}
{"api_id": 109, "api_name": "numpy.median", "task_id": "BigCodeBench/763", "solution": "{\n  \"name\": \"calculate_mode\",\n  \"type\": \"callable\",\n  \"signature\": \"(a, axis=None, out=None, overwrite_input=False, keepdims=False)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Compute the mode along the specified axis.\"\n}"}
{"api_id": 109, "api_name": "numpy.median", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculateMedian\", \"type\": \"callable\", \"signature\": \"(data, axis=None, out=None, overwrite_input=False, keepdims=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the median of the array elements along the specified axis.\"}"}
{"api_id": 109, "api_name": "numpy.median", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"function\", \"signature\": \"(data, key)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the mean and median for a given key's values in a list of dictionaries.\"}"}
{"api_id": 109, "api_name": "numpy.median", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculate_descriptive_stats\", \"type\": \"callable\", \"signature\": \"(data, key=None)\", \"return_type\": \"dict\", \"short_description\": \"Calculate the mean and median for each key in the provided data.\"}"}
{"api_id": 109, "api_name": "numpy.median", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculateMedian\", \"type\": \"function\", \"signature\": \"(data, axis=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the median of the input data along the specified axis. This function is designed to provide a straightforward and efficient way to calculate the median of an array or along specified axes.\"}"}
{"api_id": 109, "api_name": "numpy.median", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"callable\", \"signature\": \"(data, key)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the mean and median for the values associated with a given key in the provided data.\"}"}
{"api_id": 109, "api_name": "numpy.median", "task_id": "BigCodeBench/763", "solution": "{\n  \"name\": \"calculate_correlation\",\n  \"type\": \"callable\",\n  \"signature\": \"(array1, array2, axis=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Compute the Pearson correlation coefficient between two arrays along the specified axis.\"\n}"}
{"api_id": 109, "api_name": "numpy.median", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"callable\", \"signature\": \"(data, key)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the mean and median for a given key in a list of dictionaries.\"}"}
{"api_id": 109, "api_name": "numpy.median", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"callable\", \"signature\": \"(data, statistic='mean')\", \"return_type\": \"dict\", \"short_description\": \"Calculates the specified statistical measure (mean or median) for each key in the provided data.\"}"}
{"api_id": 109, "api_name": "numpy.median", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculate_descriptive_stats\", \"type\": \"function\", \"signature\": \"(data, stats_type)\", \"return_type\": \"dict\", \"short_description\": \"Calculates and returns descriptive statistics (mean, median) for the given data.\"}"}
{"api_id": 110, "api_name": "numpy.bincount", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"calculateBincount\", \"type\": \"function\", \"signature\": \"calculateBincount(x, weights=None, minlength=0)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the bincount of non-negative integers, optionally weighted.\"}"}
{"api_id": 110, "api_name": "numpy.bincount", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"calculateDiceFrequencies\", \"type\": \"callable\", \"signature\": \"calculateDiceFrequencies(rolls, seed=None)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequencies of each dice roll outcome. Optionally, you can specify a seed for reproducibility.\"}"}
{"api_id": 110, "api_name": "numpy.bincount", "task_id": "BigCodeBench/897", "solution": "{\n  \"name\": \"calculateBincount\",\n  \"type\": \"function\",\n  \"signature\": \"(x, weights=None, minlength=0)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Calculates the count of each value in an array of non-negative integers, optionally weighted.\"\n}"}
{"api_id": 110, "api_name": "numpy.bincount", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"calculateBincount\", \"type\": \"function\", \"signature\": \"calculateBincount(x, weights=None, minlength=0)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the bincount of non-negative integers in an array. It can also accept weights for weighted counting.\"}"}
{"api_id": 110, "api_name": "numpy.bincount", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"calculateBins\", \"type\": \"function\", \"signature\": \"calculateBins(x, weights=None, minlength=0)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the frequency of each value in a non-negative integer array.\"}"}
{"api_id": 110, "api_name": "numpy.bincount", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"calculateFrequencies\", \"type\": \"function\", \"signature\": \"calculateFrequencies(rolls, seed=None)\", \"return_type\": \"list\", \"short_description\": \"Calculates the frequencies of each outcome in a sequence of dice rolls.\"}"}
{"api_id": 110, "api_name": "numpy.bincount", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"calculateBincount\", \"type\": \"function\", \"signature\": \"calculateBincount(x, weights=None, minlength=0)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the number of occurrences of each value in an array of non-negative integers, with optional weights.\"}"}
{"api_id": 110, "api_name": "numpy.bincount", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"calculateBincount\", \"type\": \"function\", \"signature\": \"calculateBincount(x, weights=None, minlength=0)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the number of occurrences of each value in an array of non-negative integers, with optional weighting.\"}"}
{"api_id": 110, "api_name": "numpy.bincount", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"calculateFrequencies\", \"type\": \"function\", \"signature\": \"calculateFrequencies(rolls, seed=None)\", \"return_type\": \"list\", \"short_description\": \"Calculates the frequency of each outcome when rolling a dice a specified number of times.\"}"}
{"api_id": 110, "api_name": "numpy.bincount", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"calculateBincount\", \"type\": \"callable\", \"signature\": \"(x, weights=None, minlength=0)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the bincount of non-negative integers in an array.\"}"}
{"api_id": 111, "api_name": "numpy.tensordot", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"calculateTensorProduct\", \"type\": \"callable\", \"signature\": \"(tensor1, tensor2, axes=2)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the tensor dot product along specified axes between two tensors.\"}"}
{"api_id": 111, "api_name": "numpy.tensordot", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"tensorConcatenate\", \"type\": \"callable\", \"signature\": \"(tensor1, tensor2)\", \"return_type\": \"ndarray\", \"short_description\": \"Concatenates two tensors along their first axis.\"}"}
{"api_id": 111, "api_name": "numpy.tensordot", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"computeTensorDot\", \"type\": \"callable\", \"signature\": \"(tensorA, tensorB, axes)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the tensor dot product of two tensors along specified axes.\"}"}
{"api_id": 111, "api_name": "numpy.tensordot", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"computeTensorDot\", \"type\": \"callable\", \"signature\": \"(a, b, axes=2)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the tensor dot product along specified axes.\"}"}
{"api_id": 111, "api_name": "numpy.tensordot", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"computeTensorDot\", \"type\": \"callable\", \"signature\": \"(tensorA, tensorB, axes=2)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the tensor dot product along specified axes between two tensors.\"}"}
{"api_id": 111, "api_name": "numpy.tensordot", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"calculateTensorDot\", \"type\": \"function\", \"signature\": \"(a, b, axes=2)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the tensor dot product along specified axes. This function is a high-level abstraction that simplifies the process of tensor contraction.\"}"}
{"api_id": 111, "api_name": "numpy.tensordot", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"calculateTensorProduct\",\n  \"type\": \"callable\",\n  \"signature\": \"(tensorA, tensorB, axes=2)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Computes the tensor dot product along specified axes between two tensors.\"\n}"}
{"api_id": 111, "api_name": "numpy.tensordot", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"computeTensorDot\", \"type\": \"callable\", \"signature\": \"(a, b, axes=2)\", \"return_type\": \"ndarray\", \"short_description\": \"Compute tensor dot product along specified axes. This function takes two tensors, `a` and `b`, and an array of axes to sum over, returning the tensor dot product of the input.\"}"}
{"api_id": 111, "api_name": "numpy.tensordot", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"computeTensorDot\",\n  \"type\": \"callable\",\n  \"signature\": \"(tensorA, tensorB, axes=2)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Computes the tensor dot product along specified axes for two tensors.\"\n}"}
{"api_id": 111, "api_name": "numpy.tensordot", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"calculateTensorProduct\",\n  \"type\": \"callable\",\n  \"signature\": \"(tensor1, tensor2, axes=2)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Computes the tensor product of two tensors along specified axes.\"\n}"}
{"api_id": 112, "api_name": "numpy.cos", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"calculateTrigValues\", \"type\": \"function\", \"signature\": \"calculateTrigValues(frequency, sampleSize=10000)\", \"return_type\": \"tuple\", \"short_description\": \"Calculates sine and cosine values for a given frequency over a specified sample size.\"}"}
{"api_id": 112, "api_name": "numpy.cos", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"calculateTrigValues\",\n  \"type\": \"function\",\n  \"signature\": \"(frequency, sample_size=10000)\",\n  \"return_type\": \"tuple[np.ndarray, np.ndarray]\",\n  \"short_description\": \"Calculates the sine and cosine values for a given frequency and sample size.\"\n}"}
{"api_id": 112, "api_name": "numpy.cos", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"calculateSineAndCosine\", \"type\": \"function\", \"signature\": \"calculateSineAndCosine(frequency, sampleSize=10000)\", \"return_type\": \"tuple\", \"short_description\": \"Calculates the sine and cosine values for a given frequency and sample size.\"}"}
{"api_id": 112, "api_name": "numpy.cos", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"calculateSineAndCosine\", \"type\": \"function\", \"signature\": \"calculateSineAndCosine(frequency, sampleSize=10000)\", \"return_type\": \"tuple\", \"short_description\": \"Calculates the sine and cosine values of a given frequency over a specified sample size.\"}"}
{"api_id": 112, "api_name": "numpy.cos", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"calculateCosines\", \"type\": \"function\", \"signature\": \"calculateCosines(frequency, sample_size=10000)\", \"return_type\": \"tuple(numpy.ndarray, numpy.ndarray)\", \"short_description\": \"Calculates the cosine values for a given frequency over a specified sample size.\"}"}
{"api_id": 112, "api_name": "numpy.cos", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"calculateCosine\", \"type\": \"function\", \"signature\": \"calculate_cosine(x)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the cosine of the input array.\"}"}
{"api_id": 112, "api_name": "numpy.cos", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"calculateSineAndCosine\", \"type\": \"function\", \"signature\": \"calculateSineAndCosine(frequency: float, sampleSize: int) -> Tuple[np.ndarray, np.ndarray]\", \"return_type\": \"Tuple[np.ndarray, np.ndarray]\", \"short_description\": \"Calculates the sine and cosine values for a given frequency and sample size.\"}"}
{"api_id": 112, "api_name": "numpy.cos", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"generateCosineWave\", \"type\": \"function\", \"signature\": \"generate_cosine_wave(frequency, sample_size=10000)\", \"return_type\": \"tuple[np.ndarray, np.ndarray, matplotlib.figure.Figure, matplotlib.axes._subplots.Axes]\", \"short_description\": \"Generates a cosine wave with the specified frequency and sample size, and plots it using matplotlib.\"}"}
{"api_id": 112, "api_name": "numpy.cos", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"calculateCosineValues\", \"type\": \"function\", \"signature\": \"calculate_cosine_values(x)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the cosine values of the input array in radians.\"}"}
{"api_id": 112, "api_name": "numpy.cos", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"calculateCosine\", \"type\": \"function\", \"signature\": \"calculateCosine(x)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the cosine of the elements in the input array.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"calculate_statistics\",\n  \"type\": \"callable\",\n  \"signature\": \"(arr, ddof=0)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Calculates the mean, standard deviation, minimum, and maximum of the elements in the given array.\"\n}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"callable\", \"signature\": \"(arr)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures including mean, standard deviation, minimum, and maximum from a given array.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"compute_statistics\",\n  \"type\": \"function\",\n  \"signature\": \"(arr, ddof=0)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Computes mean, standard deviation, minimum, and maximum of an array.\"\n}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"computeStatistics\", \"type\": \"callable\", \"signature\": \"(arr)\", \"return_type\": \"dict\", \"short_description\": \"Computes basic statistical measures including mean, standard deviation, minimum, and maximum for a given array.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"function\", \"signature\": \"(arr)\", \"return_type\": \"{'mean': float, 'std': float, 'min': float, 'max': float}\", \"short_description\": \"Calculates the mean, standard deviation, minimum, and maximum of the given array.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculate_stats\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, ddof=0, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the statistical measures (mean, standard deviation, min, max) along the specified axis.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateStandardDeviation\", \"type\": \"callable\", \"signature\": \"(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the standard deviation of the elements along the specified axis.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateStandardDeviation\", \"type\": \"callable\", \"signature\": \"(array_like, axis=None, dtype=None, out=None, ddof=0, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the standard deviation along the specified axis of the given array.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateStats\", \"type\": \"function\", \"signature\": \"(arr)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures including mean, standard deviation, minimum, and maximum for a given array.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculate_descriptive_stats\", \"type\": \"callable\", \"signature\": \"(arr, axis=None, dtype=None, out=None, ddof=0, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the mean, standard deviation, minimum, and maximum of the array elements along the specified axis.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"calculate_correlation_matrix\", \"type\": \"callable\", \"signature\": \"(dataframe, method='pearson', min_periods=1)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates the correlation matrix for the given DataFrame using the specified method.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"calculateStats\", \"type\": \"function\", \"signature\": \"(dataframe, column_name)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the mean and standard deviation for a specified column in a DataFrame.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"callable\", \"signature\": \"(data, axis=None, dtype=None, out=None, ddof=0, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the standard deviation along the specified axis of the input data.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"callable\", \"signature\": \"(data, axis=None, dtype=None, out=None, ddof=0, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the standard deviation along the specified axis of the given data.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"calculate_mean_and_std\", \"type\": \"callable\", \"signature\": \"(dataframe, column_name)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the mean and standard deviation for a specified column in a DataFrame.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, ddof=0, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the standard deviation along the specified axis of the input data.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"calculateStats\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, ddof=0, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the mean and standard deviation for the given data along the specified axis. Returns the results as an array.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"callable\", \"signature\": \"(data, axis=None, dtype=None, out=None, ddof=0, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the mean and standard deviation of the given data along the specified axis.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/360", "solution": "{\n  \"name\": \"calculate_correlation\",\n  \"type\": \"callable\",\n  \"signature\": \"(dataframe, columns=None)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Calculate the Pearson correlation coefficients between specified columns of a DataFrame.\"\n}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"calculate_correlation\", \"type\": \"function\", \"signature\": \"(array1, array2, axis=None, dtype=None, out=None, ddof=0, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the Pearson correlation coefficient between two arrays along the specified axis.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculate_descriptive_stats\", \"type\": \"callable\", \"signature\": \"(data, axis=None, dtype=None, out=None, ddof=0, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the mean, median, and standard deviation of the given data along a specified axis. This function provides a comprehensive set of statistical measures to understand the distribution of the data.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"callable\", \"signature\": \"(data, axis=None, dtype=None, out=None, ddof=0, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Compute various statistical measures including mean, median, and standard deviation for the given data along a specified axis.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, ddof=0, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the standard deviation along the specified axis of the input data. This function provides a flexible way to compute statistical measures like mean and median as well.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, ddof=0, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the standard deviation, variance, mean, and median of the given data along a specified axis. This function provides a comprehensive statistical analysis for a dataset.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculate_descriptive_stats\", \"type\": \"callable\", \"signature\": \"(array_like, axis=None, dtype=None, out=None, ddof=0, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the mean, median, and standard deviation of the input array along the specified axis.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"callable\", \"signature\": \"(data, axis=None, dtype=None, out=None, ddof=0, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the mean, median, and standard deviation of the given data along the specified axis. This function provides a comprehensive statistical summary that includes measures of central tendency and dispersion.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, ddof=0, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the standard deviation along the specified axis of the input data.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, ddof=0, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the standard deviation, variance, mean, and median of the provided data along the specified axis. This function is designed to provide a comprehensive statistical analysis of the input data.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, ddof=0, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the standard deviation along the specified axis of the given data array.\"}"}
{"api_id": 113, "api_name": "numpy.std", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculate_descriptive_stats\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, ddof=0, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the mean, median, and standard deviation of the given data along a specified axis.\"}"}
{"api_id": 114, "api_name": "numpy.nanmedian", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateMode\", \"type\": \"callable\", \"signature\": \"(a, axis=None, out=None, overwrite_input=False, keepdims=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Compute the mode (most frequent value) along the specified axis, while ignoring NaNs.\"}"}
{"api_id": 114, "api_name": "numpy.nanmedian", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateDescriptiveStats\", \"type\": \"function\", \"signature\": \"(dataArray, axis=None, keepdims=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes descriptive statistics including mean and median for each element along a specified axis, while handling NaNs appropriately.\"}"}
{"api_id": 114, "api_name": "numpy.nanmedian", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateStats\", \"type\": \"function\", \"signature\": \"(data, key)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the mean and median for a specified key in the provided data.\"}"}
{"api_id": 114, "api_name": "numpy.nanmedian", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(dataArray, key)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the mean and median for each key in the data array.\"}"}
{"api_id": 114, "api_name": "numpy.nanmedian", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, key)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the mean and median for a specified key in the given data.\"}"}
{"api_id": 114, "api_name": "numpy.nanmedian", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"callable\", \"signature\": \"(data, key=None)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the mean and median for numerical values associated with a specific key in a list of dictionaries, optionally filtered by a key.\"}"}
{"api_id": 114, "api_name": "numpy.nanmedian", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateDescriptiveStats\", \"type\": \"callable\", \"signature\": \"(data, axis=None, keepdims=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Compute descriptive statistics including mean, median, and standard deviation along the specified axis, while handling NaNs.\"}"}
{"api_id": 114, "api_name": "numpy.nanmedian", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateAveragesAndMedians\", \"type\": \"function\", \"signature\": \"(dataList, key)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the mean and median for each key in the data list, ignoring non-numeric values.\"}"}
{"api_id": 114, "api_name": "numpy.nanmedian", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateMedian\", \"type\": \"callable\", \"signature\": \"(data, axis=None, out=None, overwrite_input=False, keepdims=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the median along the specified axis, while ignoring NaNs. This function is useful for scenarios where you need to calculate the median of an array, especially when dealing with potential NaN values.\"}"}
{"api_id": 114, "api_name": "numpy.nanmedian", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateStats\", \"type\": \"callable\", \"signature\": \"(data, key)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the mean and median for a specific key in the data.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"generateRandomSeed\", \"type\": \"callable\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Generates a random seed for use in various random number generation functions.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"callable\", \"signature\": \"setRandomSeed(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Sets the seed for NumPy's random number generation.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"generateRandomSeed\", \"type\": \"callable\", \"signature\": \"generateRandomSeed(seed=None)\", \"return_type\": \"int\", \"short_description\": \"Generates a random seed value.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"generateRandomSeed\", \"type\": \"callable\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Generates a random seed for use in random number generation.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"generate_random_seed\", \"type\": \"function\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Generates a random seed using a cryptographic secure random number generator.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"generate_seed\", \"type\": \"callable\", \"signature\": \"generate_seed(seed_value=None)\", \"return_type\": \"int\", \"short_description\": \"Generate a seed value for random number generation. If no seed value is provided, a random seed is generated.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"generate_seed\", \"type\": \"function\", \"signature\": \"generate_seed(seed_value: int) -> None\", \"return_type\": \"None\", \"short_description\": \"Generates a seed value for random number generation.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"generate_seed\", \"type\": \"callable\", \"signature\": \"generate_seed(seed=None)\", \"return_type\": \"int\", \"short_description\": \"Generates a random seed using the system's entropy source.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"callable\", \"signature\": \"(seed: int)\", \"return_type\": \"None\", \"short_description\": \"Sets the seed for numpy's random number generation.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"generateSeedSequence\", \"type\": \"function\", \"signature\": \"(seed=None)\", \"return_type\": \"SeedSequence\", \"short_description\": \"Creates a SeedSequence object, which can be used to initialize various random number generators.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generate_random_walk\", \"type\": \"function\", \"signature\": \"generate_random_walk(elements, seed=0)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a random walk with specified number of elements and optional seed for reproducibility.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generate_random_walk\", \"type\": \"function\", \"signature\": \"elements, seed=0\", \"return_type\": \"dict, matplotlib.axes._axes.Axes\", \"short_description\": \"Generates a random walk with the specified number of elements and seed, and returns descriptive statistics and the plot axis.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generate_random_walk\", \"type\": \"function\", \"signature\": \"generate_random_walk(elements, seed=0)\", \"return_type\": \"tuple(dict, plt.Axes)\", \"short_description\": \"Generates a random walk and returns descriptive statistics along with the plot axis.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generate_random_walk\", \"type\": \"function\", \"signature\": \"(elements, seed=0)\", \"return_type\": \"dict, matplotlib.axes._axes.Axes\", \"short_description\": \"Generates a random walk and returns descriptive statistics along with the plot axis.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generate_random_walk\", \"type\": \"function\", \"signature\": \"(elements, seed=0)\", \"return_type\": \"tuple(dict, plt.Axes)\", \"short_description\": \"Generates a random walk and returns descriptive statistics along with the plot axes.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generate_random_seed\", \"type\": \"function\", \"signature\": \"generate_random_seed(seed=None)\", \"return_type\": \"int\", \"short_description\": \"Generate a random seed using a cryptographic secure random number generator.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generate_random_walk\", \"type\": \"function\", \"signature\": \"generate_random_walk(elements, seed=0)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a random walk with specified elements and seed, and returns descriptive statistics and the plot axis.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generate_random_walk\", \"type\": \"function\", \"signature\": \"elements, seed=0\", \"return_type\": \"tuple\", \"short_description\": \"Generates a random walk and returns descriptive statistics and the plot axis.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generateRandomWalk\", \"type\": \"function\", \"signature\": \"(elements: int, seed: int = 0)\", \"return_type\": \"Tuple[Dict, plt.Axes]\", \"short_description\": \"Generates a random walk and returns descriptive statistics and the plot axis.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generate_random_walk\", \"type\": \"function\", \"signature\": \"generate_random_walk(elements, seed=0)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a random walk with given number of elements and a specified seed.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"(seed, image_size, range_low, range_high)\", \"return_type\": \"Tuple[Axes, np.ndarray]\", \"short_description\": \"Generates a random RGB image with specified parameters.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"def generateRandomImage(seed: int, image_size: tuple, range_low: int, range_high: int)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a random RGB image based on the provided parameters.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"(seed, image_size, range_low, range_high)\", \"return_type\": \"tuple(ax, image)\", \"short_description\": \"Generates a random RGB image based on the given parameters.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"set_global_seed\", \"type\": \"callable\", \"signature\": \"(seed: int)\", \"return_type\": \"None\", \"short_description\": \"Sets the global seed for random number generators to ensure reproducibility.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"setRandomSeeds\", \"type\": \"function\", \"signature\": \"setRandomSeeds(seed=42)\", \"return_type\": \"None\", \"short_description\": \"Sets the random seed for both Python's built-in random module and NumPy's random number generation.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generate_random_image\", \"type\": \"function\", \"signature\": \"(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255)\", \"return_type\": \"tuple(ax, image)\", \"short_description\": \"Generates a random RGB image with specified size and pixel value range, using random and numpy seeding.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generate_random_image\", \"type\": \"function\", \"signature\": \"(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255)\", \"return_type\": \"Tuple[Axes, np.ndarray]\", \"short_description\": \"Generates a random RGB image based on the provided parameters.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/214", "solution": "{\n  \"name\": \"generate_random_image\",\n  \"type\": \"function\",\n  \"signature\": \"(seed: int, image_size: tuple, range_low: int, range_high: int)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a random RGB image with the specified size and pixel value range.\"\n}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generate_random_image\", \"type\": \"function\", \"signature\": \"(seed=None, image_size=(100, 100, 3), range_low=0, range_high=255)\", \"return_type\": \"tuple(ax, image)\", \"short_description\": \"Generates a random RGB image with specified size and pixel range.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"(seed, image_size, range_low, range_high)\", \"return_type\": \"tuple(ax, image)\", \"short_description\": \"Generates a random RGB image with specified size and intensity range.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"generateRandomPoints\", \"type\": \"function\", \"signature\": \"generateRandomPoints(numPoints, minCoord, maxCoord, seed=None)\", \"return_type\": \"np.ndarray\", \"short_description\": \"Generates an array of random 2D points within a specified range.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"generateVoronoiDiagram\", \"type\": \"function\", \"signature\": \"generateVoronoiDiagram(points, seed=0)\", \"return_type\": \"tuple(Voronoi, plt.Axes)\", \"short_description\": \"Generates a Voronoi diagram from a set of 2D points, optionally seeding the random number generator for reproducibility.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"generate_voronoi_diagram\", \"type\": \"function\", \"signature\": \"generate_voronoi_diagram(points, seed=0)\", \"return_type\": \"tuple(Voronoi, Axes)\", \"short_description\": \"Generates a Voronoi diagram from a set of 2D points, with an optional seed for reproducibility.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"generateVoronoiDiagram\", \"type\": \"function\", \"signature\": \"generate_voronoi_diagram(points, seed=0)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a Voronoi diagram from a set of 2D points, with an optional seed for reproducibility.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"generateVoronoiDiagram\", \"type\": \"function\", \"signature\": \"generateVoronoiDiagram(points, seed=0)\", \"return_type\": \"Tuple[Voronoi, plt.Axes]\", \"short_description\": \"Generates a Voronoi diagram from given 2D points and plots it using matplotlib.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"generateRandomPoints\", \"type\": \"function\", \"signature\": \"generateRandomPoints(numPoints: int, seed: int = None) -> np.ndarray\", \"return_type\": \"np.ndarray\", \"short_description\": \"Generates a specified number of random 2D points with an optional seed for reproducibility.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"generate_voronoi_diagram\", \"type\": \"function\", \"signature\": \"generate_voronoi_diagram(points, seed=0)\", \"return_type\": \"tuple(Voronoi, plt.Axes)\", \"short_description\": \"Generates a Voronoi diagram from a set of 2D points, with an optional seed for random jitter.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"generate_voronoi_diagram\", \"type\": \"function\", \"signature\": \"generate_voronoi_diagram(points, seed=0)\", \"return_type\": \"tuple(Voronoi, Axes)\", \"short_description\": \"Generates a Voronoi diagram from a set of 2D points and plots it using matplotlib.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"generate_voronoi_diagram\", \"type\": \"function\", \"signature\": \"generate_voronoi_diagram(points, seed=0)\", \"return_type\": \"tuple(Voronoi, Axes)\", \"short_description\": \"Generates a Voronoi diagram from a set of 2D points and plots it, optionally seeding the random number generator for reproducibility.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"generate_voronoi_diagram\", \"type\": \"function\", \"signature\": \"generate_voronoi_diagram(points, seed=0)\", \"return_type\": \"tuple(Voronoi, Axes)\", \"short_description\": \"Generates a Voronoi diagram from a set of 2D points, with an optional seed for random jitter.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateRandomMatrix\", \"type\": \"function\", \"signature\": \"size: (int, int), min_val: int, max_val: int\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Generates a random matrix of specified size with values within a given range.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateRandomSeed\", \"type\": \"callable\", \"signature\": \"generateRandomSeed(seed=None)\", \"return_type\": \"int\", \"short_description\": \"Generate a random seed for use in random number generation.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateRandomSeed\", \"type\": \"function\", \"signature\": \"generateRandomSeed(length: int, includeUpper: bool, includeLower: bool, includeDigits: bool, includeSpecial: bool, seed: int | None = None)\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of the specified length with the inclusion of uppercase letters, lowercase letters, digits, and special characters.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generate_random_seed\", \"type\": \"callable\", \"signature\": \"generate_random_seed(seed=None)\", \"return_type\": \"int\", \"short_description\": \"Generates a random seed using a cryptographic secure random number generator.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateRandomSeed\", \"type\": \"callable\", \"signature\": \"generateRandomSeed(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Generates a random seed and optionally seeds the numpy random number generator with it.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateRandomSeed\", \"type\": \"function\", \"signature\": \"generateRandomSeed(seed=None)\", \"return_type\": \"int\", \"short_description\": \"Generates a random seed value.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateRandomSeed\", \"type\": \"callable\", \"signature\": \"generateRandomSeed(seed=None)\", \"return_type\": \"int\", \"short_description\": \"Generates a random seed and optionally sets it for numpy's random number generator.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateRandomColors\", \"type\": \"function\", \"signature\": \"generateRandomColors(count: int, seed: Optional[int] = None) -> List[str]\", \"return_type\": \"List[str]\", \"short_description\": \"Generates a list of random colors in hexadecimal format.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateRandomCategories\", \"type\": \"function\", \"signature\": \"(N, CATEGORIES, seed)\", \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\", \"short_description\": \"Generates a DataFrame with random data and plots a scatter plot grouped by categories. Uses numpy for random number generation and matplotlib for plotting.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateRandomSeed\", \"type\": \"function\", \"signature\": \"generateRandomSeed(length=12, characters='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789')\", \"return_type\": \"str\", \"short_description\": \"Generates a random seed string of the specified length using the given character set.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generate_random_data\", \"type\": \"function\", \"signature\": \"generate_random_data(num_points, mean, std_dev, seed=None)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Generates a DataFrame with random normal distributed data points.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(start_time, end_time, step, trend, seed=42)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random normal values and timestamps.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generateRandomSeed\", \"type\": \"callable\", \"signature\": \"(seed=None)\", \"return_type\": \"int\", \"short_description\": \"Generates a random seed value.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generateRandomNormal\", \"type\": \"function\", \"signature\": \"generateRandomNormal(count, mean=0.0, std_dev=1.0)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Generates an array of random numbers from a normal distribution with specified mean and standard deviation.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generateRandomNormal\", \"type\": \"function\", \"signature\": \"generate_random_normal(size: int, mean: float = 0.0, std_dev: float = 1.0)\", \"return_type\": \"np.ndarray\", \"short_description\": \"Generates an array of normally distributed random numbers with the specified mean and standard deviation.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generateRandomSeed\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"int\", \"short_description\": \"Generates a random seed for use in random number generation.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generateRandomNormal\", \"type\": \"function\", \"signature\": \"size\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of random numbers from a normal distribution with a specified size.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"generateRandomData(numPoints, mean, stdDev, trend)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random data points following a normal distribution, optionally with a trend applied.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"callable\", \"signature\": \"seed(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Sets the seed for NumPy's random number generation.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generate_random_values\", \"type\": \"function\", \"signature\": \"generate_random_values(size: int, mean: float, std_dev: float) -> List[float]\", \"return_type\": \"List[float]\", \"short_description\": \"Generates a list of random values from a normal distribution.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generateRandomStockPrices\", \"type\": \"function\", \"signature\": \"generate_random_stock_prices(days_in_past, stock_names, random_seed)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Generates a DataFrame of random stock prices for a given number of past days and a list of stock names.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generateRandomStockPrices\", \"type\": \"function\", \"signature\": \"generateRandomStockPrices(daysInPast: int, stockNames: list[str], randomSeed: int) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame of random stock prices for specified days and stock names, using a specified random seed for reproducibility.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generateRandomPrices\", \"type\": \"function\", \"signature\": \"generateRandomPrices(daysInPast, stockNames, randomSeed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random stock prices for a given number of days and list of stock names, using a specified random seed for reproducibility.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generateRandomStockPrices\", \"type\": \"function\", \"signature\": \"(days_in_past: int, stock_names: List[str], random_seed: int) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame of random stock prices for a given number of days and stock names, using a specified random seed for reproducibility.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generateRandomPrices\", \"type\": \"function\", \"signature\": \"generate_random_prices(days_in_past: int, stock_names: list[str], random_seed: int) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame of random stock prices based on the given parameters.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generateRandomStockPrices\", \"type\": \"function\", \"signature\": \"days_in_past, stock_names, random_seed\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Generates a DataFrame of random stock prices based on the given parameters.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generateRandomPrices\", \"type\": \"function\", \"signature\": \"generate_random_prices(days_in_past: int, stock_names: List[str], random_seed: int) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame with random stock prices for a given number of days and stock names, using a specified random seed for reproducibility.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generateRandomStockPrices\", \"type\": \"function\", \"signature\": \"generateRandomStockPrices(daysInPast, stockNames, randomSeed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame of random stock prices for a specified number of days and stock names, using a specified random seed for reproducibility.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generateRandomPrices\", \"type\": \"function\", \"signature\": \"generateRandomPrices(daysInPast, stockNames, randomSeed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random stock prices for the specified number of days and stock names, using a specified random seed for reproducibility.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generateRandomPrices\", \"type\": \"function\", \"signature\": \"(daysInPast: int, stockNames: List[str], randomSeed: int) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame of random stock prices for a specified number of days and stock names, using a given random seed for reproducibility.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"generate_random_plot\", \"type\": \"function\", \"signature\": \"generate_random_plot(data, column_names)\", \"return_type\": \"None\", \"short_description\": \"Generates a random plot from given data and column names.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"generateRandomPlot\", \"type\": \"function\", \"signature\": \"generate_random_plot(data, column_names)\", \"return_type\": \"plt.Axes\", \"short_description\": \"Generates a bar plot from random data based on provided column names and data.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"set_seed\",\n  \"type\": \"callable\",\n  \"signature\": \"(seed=None)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets the seed for NumPy's random number generators. This is a convenience function for legacy reasons and is recommended to be used with caution as it may not be thread-safe.\"\n}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"generateRandomPlot\", \"type\": \"function\", \"signature\": \"(list a, list b)\", \"return_type\": \"plt.Axes\", \"short_description\": \"Generates a bar plot using random data for the given lists of indices and column names.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"generateRandomPlot\", \"type\": \"function\", \"signature\": \"generate_random_plot(data, column_names)\", \"return_type\": \"plt.Axes\", \"short_description\": \"Generates a bar plot of random data with specified column names.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"generateRandomPlot\", \"type\": \"function\", \"signature\": \"(list a, list b)\", \"return_type\": \"plt.Axes\", \"short_description\": \"Generates a bar plot using random data based on the provided lists. The plot is displayed and the axes object is returned.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"generate_random_data\", \"type\": \"function\", \"signature\": \"generate_random_data(num_rows, num_cols, seed=None)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Generates a DataFrame with random numbers and specified number of rows and columns.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"generateRandomPlot\", \"type\": \"function\", \"signature\": \"generateRandomPlot(data, labels, seed=None)\", \"return_type\": \"matplotlib.axes.Axes\", \"short_description\": \"Generates a bar plot using the provided data and labels. Optionally, a seed can be provided for reproducibility.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"generate_random_matrix\", \"type\": \"function\", \"signature\": \"(rows, cols)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Generates a random matrix with specified dimensions, filled with standard normal distributed values.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"generatePlotData\", \"type\": \"function\", \"signature\": \"(list a, list b)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame for plotting from two lists of data and column names.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"generateRandomData(startYear=1980, endYear=2000, emailDomain='example.com', latinNames=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'], otherNames=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], rngSeed=None)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random data including names, dates of birth, and emails based on given parameters.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateUniqueRandomNames\", \"type\": \"function\", \"signature\": \"start_year, end_year, email_domain, latin_names, other_names, rng_seed\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame with unique random names, dates of birth, and emails based on specified parameters and a seed for random number generation.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"generateRandomData(startYear=int, endYear=int, emailDomain=str, latinNames=list, otherNames=list, rngSeed=int)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Generates a DataFrame with random data including names, dates of birth, and emails, based on provided parameters and a seed for random number generation.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"start_year=1980, end_year=2000, email_domain='example.com', latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'], other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], rng_seed=None\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame with random data based on given parameters, including seeding for reproducibility.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(start_year, end_year, email_domain, latin_names, other_names, rng_seed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random data including names, dates of birth, and emails.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(start_year, end_year, email_domain, latin_names, other_names, rng_seed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random personal details, including names, dates of birth, and emails, based on specified parameters and a seed for random number generation.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"generateRandomData(startYear=1980, endYear=2000, emailDomain='example.com', latinNames=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'], otherNames=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], rngSeed=None)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random data based on provided parameters.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(start_year, end_year, email_domain, latin_names, other_names, rng_seed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random data including names, dates of birth, and emails.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"start_year, end_year, email_domain, latin_names, other_names, rng_seed\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame with random data including names, dates of birth, and emails.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"generateRandomData(startYear=1980, endYear=2000, emailDomain='example.com', latinNames=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'], otherNames=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], rngSeed=None)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random data based on the provided parameters.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"generateReport(start_date, periods, freq, categories)\", \"return_type\": \"tuple(DataFrame, Axes)\", \"short_description\": \"Generates a report of sales data for specified categories over a given period, using a random seed for reproducibility.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateRandomSales\", \"type\": \"function\", \"signature\": \"generate_random_sales(start_date='2016-01-01', periods=13, freq='WOM-2FRI', categories=['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports'])\", \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\", \"short_description\": \"Generates a DataFrame of random sales data and plots a category-wise sales trend.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateRandomReport\", \"type\": \"function\", \"signature\": \"generateRandomReport(start_date, periods, freq, categories)\", \"return_type\": \"tuple(DataFrame, plt.Axes)\", \"short_description\": \"Generates a random sales report with reproducible sales figures and plots category-wise sales trends.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/942", "solution": "{\n  \"name\": \"generateRandomSalesReport\",\n  \"type\": \"function\",\n  \"signature\": \"generateRandomSalesReport(startDate='2016-01-01', periods=13, freq='WOM-2FRI', categories=['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports'])\",\n  \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\",\n  \"short_description\": \"Generates a random sales report for specified categories over a given period, ensuring reproducible sales figures.\"\n}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateRandomSales\", \"type\": \"function\", \"signature\": \"generateRandomSales(start_date, periods, freq, categories)\", \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\", \"short_description\": \"Generates a DataFrame of random sales data and plots a category-wise sales trend chart.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateRandomSales\", \"type\": \"function\", \"signature\": \"generateRandomSales(startDate, periods, freq, categories)\", \"return_type\": \"tuple(DataFrame, Axes)\", \"short_description\": \"Generates a DataFrame of random sales data for specified categories and plots a trend chart using Matplotlib.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateRandomSalesReport\", \"type\": \"function\", \"signature\": \"generate_random_sales_report(start_date=None, periods=None, freq=None, categories=None)\", \"return_type\": \"tuple(DataFrame, Axes)\", \"short_description\": \"Generates a random sales report with reproducible sales figures. Uses numpy's random seed for reproducibility.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateRandomReport\", \"type\": \"function\", \"signature\": \"generateRandomReport(startDate, periods, freq, categories)\", \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\", \"short_description\": \"Generates a random sales report with reproducible data and plots category-wise sales trends.\"}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/942", "solution": "{\n  \"name\": \"generate_sales_report\",\n  \"type\": \"function\",\n  \"signature\": \"generate_sales_report(start_date='2016-01-01', periods=13, freq='WOM-2FRI', categories=['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports'])\",\n  \"return_type\": \"tuple[pd.DataFrame, plt.Axes]\",\n  \"short_description\": \"Generates a sales report with category-wise sales trends, using a specified date range and categories.\"\n}"}
{"api_id": 115, "api_name": "numpy.random.seed", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateRandomSeed\", \"type\": \"function\", \"signature\": \"generateRandomSeed(seedValue: int)\", \"return_type\": \"None\", \"short_description\": \"Generates a random seed and applies it to numpy's random number generation for reproducibility.\"}"}
{"api_id": 116, "api_name": "numpy.log10", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculate_spl\", \"type\": \"function\", \"signature\": \"calculate_spl(data)\", \"return_type\": \"float\", \"short_description\": \"Calculate the sound pressure level (SPL) of the audio data.\"}"}
{"api_id": 116, "api_name": "numpy.log10", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"calculate_spl\",\n  \"type\": \"function\",\n  \"signature\": \"calculate_spl(data)\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculates the sound pressure level (SPL) of the given audio data.\"\n}"}
{"api_id": 116, "api_name": "numpy.log10", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculate_spl\", \"type\": \"function\", \"signature\": \"calculate_spl(audio_file_path: str) -> float\", \"return_type\": \"float\", \"short_description\": \"Calculates the sound pressure level (SPL) of an audio file.\"}"}
{"api_id": 116, "api_name": "numpy.log10", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculateSpl\", \"type\": \"function\", \"signature\": \"calculate_spl(data)\", \"return_type\": \"float\", \"short_description\": \"Calculates the sound pressure level (SPL) of the given audio data.\"}"}
{"api_id": 116, "api_name": "numpy.log10", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculate_spl\", \"type\": \"function\", \"signature\": \"(data, samplerate)\", \"return_type\": \"float\", \"short_description\": \"Calculate the Sound Pressure Level (SPL) of an audio signal.\"}"}
{"api_id": 116, "api_name": "numpy.log10", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculate_spl\", \"type\": \"function\", \"signature\": \"calculate_spl(data, samplerate)\", \"return_type\": \"float\", \"short_description\": \"Calculate the sound pressure level (SPL) from audio data.\"}"}
{"api_id": 116, "api_name": "numpy.log10", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculate_sound_pressure_level\", \"type\": \"function\", \"signature\": \"(data, samplerate)\", \"return_type\": \"float\", \"short_description\": \"Calculates the sound pressure level (SPL) of an audio signal.\"}"}
{"api_id": 116, "api_name": "numpy.log10", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"calculate_spl\",\n  \"type\": \"function\",\n  \"signature\": \"calculate_spl(data, samplerate)\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculate the sound pressure level (SPL) from audio data.\"\n}"}
{"api_id": 116, "api_name": "numpy.log10", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"generateMatrix\", \"type\": \"function\", \"signature\": \"def generateMatrix(L, M, N):\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a matrix of dimensions MxN with elements from the list L.\"}"}
{"api_id": 116, "api_name": "numpy.log10", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculateLog10\", \"type\": \"function\", \"signature\": \"calculateLog10(array_like)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the base 10 logarithm of the input array, element-wise.\"}"}
{"api_id": 117, "api_name": "numpy.floor", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"calculateAges\", \"type\": \"function\", \"signature\": \"calculateAges(df: pd.DataFrame) -> Tuple[Counter, Optional[plt.Axes]]\", \"return_type\": \"Tuple[Counter, Optional[plt.Axes]]\", \"short_description\": \"Calculates the age distribution for duplicate names in a DataFrame and returns a counter of age counts and a Matplotlib axis for plotting.\"}"}
{"api_id": 117, "api_name": "numpy.floor", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"calculateFloor\", \"type\": \"callable\", \"signature\": \"x\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the floor of the input, element-wise.\"}"}
{"api_id": 117, "api_name": "numpy.floor", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"calculateAges\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> (Counter, plt.Axes)\", \"return_type\": \"tuple\", \"short_description\": \"Calculates the floor of ages and checks for duplicates, then returns a counter and plot axes.\"}"}
{"api_id": 117, "api_name": "numpy.floor", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"calculateFloorValues\", \"type\": \"function\", \"signature\": \"calculate_floor_values(data)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the floor values for a given dataset and returns a dictionary with counts of ages for duplicate names.\"}"}
{"api_id": 117, "api_name": "numpy.floor", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"calculateAverages\", \"type\": \"function\", \"signature\": \"calculate_averages(data: list[float]) -> float\", \"return_type\": \"float\", \"short_description\": \"Calculates the average of a list of numbers.\"}"}
{"api_id": 117, "api_name": "numpy.floor", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"calculateAges\", \"type\": \"callable\", \"signature\": \"x: pd.DataFrame\", \"return_type\": \"(Counter, plt.Axes)\", \"short_description\": \"Calculates the age distribution for duplicate names in a DataFrame and returns a counter of age counts and a Matplotlib Axes object for plotting.\"}"}
{"api_id": 117, "api_name": "numpy.floor", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"calculateAges\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> (Counter, plt.Axes)\", \"return_type\": \"Tuple[Counter, plt.Axes]\", \"short_description\": \"Calculates the age distribution for duplicate names in a DataFrame and returns a counter of ages and a matplotlib axis object for plotting.\"}"}
{"api_id": 117, "api_name": "numpy.floor", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"calculateAgeDistribution\", \"type\": \"function\", \"signature\": \"calculateAgeDistribution(df: pd.DataFrame) -> (Counter, plt.Axes)\", \"return_type\": \"Tuple[Counter, Optional[plt.Axes]]\", \"short_description\": \"Calculates the distribution of ages for names that appear more than once in the DataFrame and returns a Counter of age counts and a matplotlib Axes object for plotting the histogram.\"}"}
{"api_id": 117, "api_name": "numpy.floor", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"calculateAverages\", \"type\": \"function\", \"signature\": \"calculateAverages(data: list[float]) -> list[float]\", \"return_type\": \"list[float]\", \"short_description\": \"Calculates the average of a list of numbers.\"}"}
{"api_id": 117, "api_name": "numpy.floor", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"calculateAges\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> (Counter, plt.Axes)\", \"return_type\": \"A function that takes a DataFrame and returns a tuple containing a Counter and a Matplotlib Axes object.\", \"short_description\": \"Calculates the age distribution for names in a DataFrame and plots a histogram of duplicate names.\"}"}
{"api_id": 118, "api_name": "numpy.nanmean", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculate_nan_mean\", \"type\": \"callable\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the arithmetic mean along the specified axis, ignoring NaNs. This function is designed to handle arrays of numbers, providing a robust mean calculation that excludes NaN values.\"}"}
{"api_id": 118, "api_name": "numpy.nanmean", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculate_correlation\", \"type\": \"callable\", \"signature\": \"(data1, data2)\", \"return_type\": \"float\", \"short_description\": \"Calculates the Pearson correlation coefficient between two datasets.\"}"}
{"api_id": 118, "api_name": "numpy.nanmean", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateAverages\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the arithmetic mean along the specified axis, including handling of NaNs, and returns the result.\"}"}
{"api_id": 118, "api_name": "numpy.nanmean", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculate_nan_mean\", \"type\": \"callable\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the arithmetic mean along the specified axis, ignoring NaNs. This function is designed to provide a high-level, non-hierarchical approach to calculating the mean while handling NaN values appropriately.\"}"}
{"api_id": 118, "api_name": "numpy.nanmean", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculate_weighted_mean\", \"type\": \"callable\", \"signature\": \"(data, weights)\", \"return_type\": \"float\", \"short_description\": \"Calculates the weighted mean of the provided data using the specified weights.\"}"}
{"api_id": 118, "api_name": "numpy.nanmean", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculate_nanmean\", \"type\": \"callable\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the arithmetic mean along the specified axis, ignoring NaNs.\"}"}
{"api_id": 118, "api_name": "numpy.nanmean", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, key)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the mean and median for a given key in the data.\"}"}
{"api_id": 118, "api_name": "numpy.nanmean", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculate_nan_mean\", \"type\": \"callable\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Compute the arithmetic mean along the specified axis, ignoring NaNs. This function is designed to handle arrays where NaNs are to be ignored in the calculation of the mean. It provides flexibility in specifying the axis along which the mean is computed, the data type for the computation, and whether to keep the dimensions of the array in the result.\"}"}
{"api_id": 118, "api_name": "numpy.nanmean", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, key)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the mean and median for a given key in a list of dictionaries, handling NaN values appropriately.\"}"}
{"api_id": 118, "api_name": "numpy.nanmean", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculate_nanmean\", \"type\": \"function\", \"signature\": \"(array, axis=None, dtype=None, out=None, keepdims=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the arithmetic mean along the specified axis, ignoring NaNs.\"}"}
{"api_id": 118, "api_name": "numpy.nanmean", "task_id": "BigCodeBench/870", "solution": "{\"name\": \"calculate_weighted_mean\", \"type\": \"callable\", \"signature\": \"(data, weights)\", \"return_type\": \"float\", \"short_description\": \"Computes the weighted mean of an array of data points using corresponding weights.\"}"}
{"api_id": 118, "api_name": "numpy.nanmean", "task_id": "BigCodeBench/870", "solution": "{\"name\": \"calculate_nanmean\", \"type\": \"callable\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the arithmetic mean along the specified axis, ignoring NaNs.\"}"}
{"api_id": 118, "api_name": "numpy.nanmean", "task_id": "BigCodeBench/870", "solution": "{\"name\": \"calculate_nanmean\", \"type\": \"callable\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Compute the arithmetic mean along the specified axis, ignoring NaNs.\"}"}
{"api_id": 118, "api_name": "numpy.nanmean", "task_id": "BigCodeBench/870", "solution": "{\"name\": \"calculate_weighted_mean\", \"type\": \"callable\", \"signature\": \"(data, weights)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the weighted mean of the data along the specified axis, ignoring NaNs. The weights determine the relative contribution of each element in the data.\"}"}
{"api_id": 118, "api_name": "numpy.nanmean", "task_id": "BigCodeBench/870", "solution": "{\"name\": \"calculate_nanmean\", \"type\": \"callable\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the arithmetic mean along the specified axis, ignoring NaNs. Returns the average of the array elements, with options to specify the axis, data type, and output array.\"}"}
{"api_id": 118, "api_name": "numpy.nanmean", "task_id": "BigCodeBench/870", "solution": "{\"name\": \"calculate_nanmean\", \"type\": \"callable\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the arithmetic mean along the specified axis, ignoring NaNs. This function is designed to handle data arrays and provide a robust mean calculation while skipping non-numeric values.\"}"}
{"api_id": 118, "api_name": "numpy.nanmean", "task_id": "BigCodeBench/870", "solution": "{\"name\": \"calculate_weighted_mean\", \"type\": \"callable\", \"signature\": \"(data, weights, axis=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the weighted mean along the specified axis of the input data.\"}"}
{"api_id": 118, "api_name": "numpy.nanmean", "task_id": "BigCodeBench/870", "solution": "{\"name\": \"calculate_nanmean\", \"type\": \"function\", \"signature\": \"(array, axis=None, dtype=None, out=None, keepdims=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the arithmetic mean along the specified axis, ignoring NaNs. Returns the average of the array elements, with float64 intermediate and return values used for integer inputs.\"}"}
{"api_id": 118, "api_name": "numpy.nanmean", "task_id": "BigCodeBench/870", "solution": "{\"name\": \"calculate_weighted_mean\", \"type\": \"callable\", \"signature\": \"(data, weights)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the weighted mean of the given data along the specified axis, ignoring NaNs.\"}"}
{"api_id": 118, "api_name": "numpy.nanmean", "task_id": "BigCodeBench/870", "solution": "{\"name\": \"calculate_nanmean\", \"type\": \"callable\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the arithmetic mean along the specified axis, ignoring NaNs. This function is designed to handle data arrays and provides flexibility with optional parameters.\"}"}
{"api_id": 119, "api_name": "numpy.zeros", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"createRandomImage\", \"type\": \"function\", \"signature\": \"createRandomImage(size=(100, 100, 3), low=0, high=255)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Creates a random image of specified size with pixel values in the given range.\"}"}
{"api_id": 119, "api_name": "numpy.zeros", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"createRandomImage\", \"type\": \"function\", \"signature\": \"createRandomImage(imageSize: tuple, rangeLow: int, rangeHigh: int, seed: int = 42) -> np.ndarray\", \"return_type\": \"np.ndarray\", \"short_description\": \"Generates a random image of specified size with pixel values in the given range.\"}"}
{"api_id": 119, "api_name": "numpy.zeros", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"generate_random_image(size=(100, 100, 3), low=0, high=255)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Generates a random image of specified size with pixel values in the given range.\"}"}
{"api_id": 119, "api_name": "numpy.zeros", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"generate_random_image(size, dtype=np.uint8)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Generates a random image of the specified size and data type.\"}"}
{"api_id": 119, "api_name": "numpy.zeros", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255)\", \"return_type\": \"ax, image\", \"short_description\": \"Generates a random RGB image with the specified size and intensity range.\"}"}
{"api_id": 119, "api_name": "numpy.zeros", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"generateRandomImage(imageSize=(100, 100, 3), rangeLow=0, rangeHigh=255)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a random RGB image of the specified size with pixel values in the given range.\"}"}
{"api_id": 119, "api_name": "numpy.zeros", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"generateRandomImage(imageSize=(100, 100, 3), rangeLow=0, rangeHigh=255)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Generates a random RGB image of the specified size with pixel values in the given range.\"}"}
{"api_id": 119, "api_name": "numpy.zeros", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"createRandomImage\", \"type\": \"function\", \"signature\": \"(seed=None, image_size=None, range_low=0, range_high=255)\", \"return_type\": \"tuple(np.ndarray, plt.Axes)\", \"short_description\": \"Generates a random RGB image using numpy and plots it using matplotlib.\"}"}
{"api_id": 119, "api_name": "numpy.zeros", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"generateRandomImage(seed=42, imageSize=(100, 100, 3), rangeLow=0, rangeHigh=255)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a random RGB image with the specified size and intensity range.\"}"}
{"api_id": 119, "api_name": "numpy.zeros", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"createRandomImage\", \"type\": \"function\", \"signature\": \"createRandomImage(seed=None, imageSize=(100, 100, 3), rangeLow=0, rangeHigh=255)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a random RGB image with the specified size and intensity range.\"}"}
{"api_id": 120, "api_name": "numpy.sqrt", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculateSpl\", \"type\": \"function\", \"signature\": \"(data, samplerate)\", \"return_type\": \"float\", \"short_description\": \"Calculate the sound pressure level (SPL) from audio data.\"}"}
{"api_id": 120, "api_name": "numpy.sqrt", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculateSqrt\", \"type\": \"callable\", \"signature\": \"x\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the square root of each element in the input array.\"}"}
{"api_id": 120, "api_name": "numpy.sqrt", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculateSPL\", \"type\": \"function\", \"signature\": \"calculateSPL(data)\", \"return_type\": \"float\", \"short_description\": \"Calculates the Sound Pressure Level (SPL) from audio data.\"}"}
{"api_id": 120, "api_name": "numpy.sqrt", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculateSqrt\", \"type\": \"function\", \"signature\": \"calculate_sqrt(array)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the element-wise square root of the input array.\"}"}
{"api_id": 120, "api_name": "numpy.sqrt", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculateSoundPressureLevel\", \"type\": \"function\", \"signature\": \"calculate_sound_pressure_level(data)\", \"return_type\": \"float\", \"short_description\": \"Calculates the sound pressure level (SPL) from the given audio data.\"}"}
{"api_id": 120, "api_name": "numpy.sqrt", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculateSquareRoot\", \"type\": \"function\", \"signature\": \"calculateSquareRoot(array)\", \"return_type\": \"array\", \"short_description\": \"Calculates the square root of each element in the input array.\"}"}
{"api_id": 120, "api_name": "numpy.sqrt", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculate_spl\", \"type\": \"function\", \"signature\": \"calculate_spl(data)\", \"return_type\": \"float\", \"short_description\": \"Calculate the sound pressure level (SPL) of given audio data.\"}"}
{"api_id": 120, "api_name": "numpy.sqrt", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculate_sqrt\", \"type\": \"function\", \"signature\": \"calculate_sqrt(x)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the element-wise square root of the input array.\"}"}
{"api_id": 120, "api_name": "numpy.sqrt", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"calculate_spl\",\n  \"type\": \"function\",\n  \"signature\": \"(data, samplerate)\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculates the sound pressure level (SPL) of a given audio signal.\"\n}"}
{"api_id": 120, "api_name": "numpy.sqrt", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculateSpl\", \"type\": \"function\", \"signature\": \"(data, samplerate)\", \"return_type\": \"(spl, matrix)\", \"short_description\": \"Calculate the sound pressure level (SPL) and normalize a matrix based on the SPL of the audio data.\"}"}
{"api_id": 120, "api_name": "numpy.sqrt", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateCosineSimilarity\", \"type\": \"function\", \"signature\": \"(vec1: dict, vec2: dict) -> float\", \"return_type\": \"float\", \"short_description\": \"Calculates the cosine similarity between two term frequency vectors.\"}"}
{"api_id": 120, "api_name": "numpy.sqrt", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateCosineSimilarity\", \"type\": \"function\", \"signature\": \"calculateCosineSimilarity(vec1, vec2)\", \"return_type\": \"float\", \"short_description\": \"Calculates the cosine similarity between two term frequency vectors.\"}"}
{"api_id": 120, "api_name": "numpy.sqrt", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateCosineSimilarity\", \"type\": \"function\", \"signature\": \"calculateCosineSimilarity(vec1, vec2)\", \"return_type\": \"float\", \"short_description\": \"Calculates the cosine similarity between two term frequency vectors.\"}"}
{"api_id": 120, "api_name": "numpy.sqrt", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateCosineSimilarity\", \"type\": \"callable\", \"signature\": \"calculateCosineSimilarity(vec1, vec2)\", \"return_type\": \"float\", \"short_description\": \"Computes the cosine similarity between two term frequency vectors.\"}"}
{"api_id": 120, "api_name": "numpy.sqrt", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateCosineSimilarity\", \"type\": \"function\", \"signature\": \"calculateCosineSimilarity(vec1: dict, vec2: dict) -> float\", \"return_type\": \"float\", \"short_description\": \"Computes the cosine similarity between two term frequency vectors.\"}"}
{"api_id": 120, "api_name": "numpy.sqrt", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateCosineSimilarity\", \"type\": \"function\", \"signature\": \"calculateCosineSimilarity(vec1: dict, vec2: dict) -> float\", \"return_type\": \"float\", \"short_description\": \"Calculates the cosine similarity between two term frequency vectors.\"}"}
{"api_id": 120, "api_name": "numpy.sqrt", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateCosineSimilarity\", \"type\": \"function\", \"signature\": \"calculateCosineSimilarity(vec1, vec2)\", \"return_type\": \"float\", \"short_description\": \"Calculates the cosine similarity between two term frequency vectors.\"}"}
{"api_id": 120, "api_name": "numpy.sqrt", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateCosineSimilarity\", \"type\": \"function\", \"signature\": \"calculate_cosine_similarity(vec1, vec2)\", \"return_type\": \"float\", \"short_description\": \"Computes the cosine similarity between two term frequency vectors.\"}"}
{"api_id": 120, "api_name": "numpy.sqrt", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateCosineSimilarity\", \"type\": \"function\", \"signature\": \"calculateCosineSimilarity(vec1: dict, vec2: dict) -> float\", \"return_type\": \"float\", \"short_description\": \"Calculates the cosine similarity between two term frequency vectors.\"}"}
{"api_id": 120, "api_name": "numpy.sqrt", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateCosineSimilarity\", \"type\": \"function\", \"signature\": \"calculateCosineSimilarity(vec1: dict, vec2: dict) -> float\", \"return_type\": \"float\", \"short_description\": \"Calculates the cosine similarity between two term frequency vectors.\"}"}
{"api_id": 121, "api_name": "numpy.uint8", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"def generateRandomImage(image_size=(100, 100, 3), range_low=0, range_high=255):\", \"return_type\": \"np.ndarray\", \"short_description\": \"Generates a random RGB image of specified size with pixel values within a given range.\"}"}
{"api_id": 121, "api_name": "numpy.uint8", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"def generateRandomImage(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255):\", \"return_type\": \"tuple(plt.Axes, np.ndarray)\", \"short_description\": \"Generates a random RGB image using the specified parameters.\"}"}
{"api_id": 121, "api_name": "numpy.uint8", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"def generateRandomImage(size: tuple, low: int, high: int, seed: int = 42) -> np.ndarray:\", \"return_type\": \"np.ndarray\", \"short_description\": \"Generates a random image of specified size with pixel values in the given range.\"}"}
{"api_id": 121, "api_name": "numpy.uint8", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255)\", \"return_type\": \"ax, image\", \"short_description\": \"Generates a random RGB image with specified size and intensity range.\"}"}
{"api_id": 121, "api_name": "numpy.uint8", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255)\", \"return_type\": \"ax, image\", \"short_description\": \"Generates a random RGB image with the specified size and intensity range.\"}"}
{"api_id": 121, "api_name": "numpy.uint8", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"(seed=None, image_size=(100, 100, 3), range_low=0, range_high=255)\", \"return_type\": \"tuple(plt.Axes, np.ndarray)\", \"short_description\": \"Generates a random RGB image with specified dimensions and intensity range.\"}"}
{"api_id": 121, "api_name": "numpy.uint8", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"generateRandomImage(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255)\", \"return_type\": \"tuple(plt.Axes, np.ndarray)\", \"short_description\": \"Generates a random RGB image with specified size and intensity range.\"}"}
{"api_id": 121, "api_name": "numpy.uint8", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"generate_random_image(image_size=(100, 100, 3), range_low=0, range_high=255)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a random RGB image with the specified size and intensity range.\"}"}
{"api_id": 121, "api_name": "numpy.uint8", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"def generateRandomImage(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255):\", \"return_type\": \"Tuple[plt.Axes, np.ndarray]\", \"short_description\": \"Generates a random RGB image with specified size and intensity range.\"}"}
{"api_id": 121, "api_name": "numpy.uint8", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255)\", \"return_type\": \"tuple(plt.Axes, np.ndarray)\", \"short_description\": \"Generates a random RGB image with specified size and intensity range.\"}"}
{"api_id": 121, "api_name": "numpy.uint8", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"generate_color_clusters\", \"type\": \"function\", \"signature\": \"(image_path='image.jpg', n_clusters=3, random_seed=42)\", \"return_type\": \"tuple(numpy.ndarray, numpy.ndarray)\", \"short_description\": \"Generates color clusters from an image using K-Means clustering and optionally saves each cluster as a separate image.\"}"}
{"api_id": 121, "api_name": "numpy.uint8", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"generate_color_palette\", \"type\": \"function\", \"signature\": \"generate_color_palette(image_path, n_clusters, random_seed)\", \"return_type\": \"tuple[numpy.ndarray, list[tuple[int, int, int]]]\", \"short_description\": \"Generates a color palette from an image using K-means clustering.\"}"}
{"api_id": 121, "api_name": "numpy.uint8", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"extract_image_clusters\", \"type\": \"function\", \"signature\": \"(image_path='image.jpg', n_clusters=3, random_seed=42)\", \"return_type\": \"tuple(numpy.ndarray, numpy.ndarray)\", \"short_description\": \"Extracts clusters from an image using KMeans clustering and returns the original and segmented images.\"}"}
{"api_id": 121, "api_name": "numpy.uint8", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"calculate_image_clusters\", \"type\": \"function\", \"signature\": \"def calculate_image_clusters(image_path, n_clusters, random_seed)\", \"return_type\": \"tuple[numpy.ndarray, numpy.ndarray]\", \"short_description\": \"Segment an image into a specified number of clusters using K-Means clustering.\"}"}
{"api_id": 121, "api_name": "numpy.uint8", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"generate_segmented_images\", \"type\": \"function\", \"signature\": \"(image_path='image.jpg', n_clusters=3, random_seed=42)\", \"return_type\": \"tuple(np.ndarray, np.ndarray)\", \"short_description\": \"Segment an image into clusters and save each cluster as a separate image.\"}"}
{"api_id": 121, "api_name": "numpy.uint8", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"generate_color_palette\", \"type\": \"function\", \"signature\": \"generate_color_palette(image_path, n_clusters, random_seed)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a color palette from an image using KMeans clustering.\"}"}
{"api_id": 121, "api_name": "numpy.uint8", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"process_image_segmentation\", \"type\": \"function\", \"signature\": \"(image_path: str, n_clusters: int, random_seed: int) -> Tuple[np.ndarray, np.ndarray]\", \"return_type\": \"Tuple[np.ndarray, np.ndarray]\", \"short_description\": \"Performs image segmentation using K-Means clustering and saves each cluster as a separate image.\"}"}
{"api_id": 121, "api_name": "numpy.uint8", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"generate_image_clusters\", \"type\": \"function\", \"signature\": \"(image_path='image.jpg', n_clusters=3, random_seed=42)\", \"return_type\": \"tuple(np.ndarray, np.ndarray)\", \"short_description\": \"Segment an image into specified number of clusters and optionally save each cluster as a separate image.\"}"}
{"api_id": 121, "api_name": "numpy.uint8", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"generate_segmented_images\", \"type\": \"function\", \"signature\": \"(image_path: str, n_clusters: int, random_seed: int) -> Tuple[np.ndarray, np.ndarray]\", \"return_type\": \"Tuple[np.ndarray, np.ndarray]\", \"short_description\": \"Generates segmented images from a given image based on the specified number of clusters and random seed.\"}"}
{"api_id": 121, "api_name": "numpy.uint8", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"process_image\", \"type\": \"function\", \"signature\": \"(image_path='image.jpg', n_clusters=3, random_seed=42)\", \"return_type\": \"(original_image, segmented_image)\", \"short_description\": \"Processes an image and segments it into clusters of similar colors.\"}"}
{"api_id": 122, "api_name": "numpy.random.randn", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"generateRandomNormal\", \"type\": \"function\", \"signature\": \"generateRandomNormal(count)\", \"return_type\": \"Array\", \"short_description\": \"Generates an array of random numbers from a standard normal distribution.\"}"}
{"api_id": 122, "api_name": "numpy.random.randn", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"generateNormalDistribution\", \"type\": \"callable\", \"signature\": \"generateNormalDistribution(size=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of samples from the standard normal distribution. Optionally, specify the dimensions of the output array.\"}"}
{"api_id": 122, "api_name": "numpy.random.randn", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"generateRandomNormal\",\n  \"type\": \"callable\",\n  \"signature\": \"generateRandomNormal(shape)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Generates an array of random numbers from a standard normal distribution. The shape of the array can be specified.\"\n}"}
{"api_id": 122, "api_name": "numpy.random.randn", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"generateNormalSamples\", \"type\": \"callable\", \"signature\": \"generate_normal_samples(num_samples, mean=0, variance=1)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of samples from a normal distribution with specified mean and variance.\"}"}
{"api_id": 122, "api_name": "numpy.random.randn", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"generate_random_matrix\",\n  \"type\": \"callable\",\n  \"signature\": \"generate_random_matrix(rows, cols)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Generates a matrix of random numbers from a standard normal distribution with the specified number of rows and columns.\"\n}"}
{"api_id": 122, "api_name": "numpy.random.randn", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"generate_random_matrix\",\n  \"type\": \"function\",\n  \"signature\": \"generate_random_matrix(rows, cols, mean, variance)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Generates a matrix of random numbers from a normal distribution with specified mean and variance.\"\n}"}
{"api_id": 122, "api_name": "numpy.random.randn", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"generateRandomNormal\", \"type\": \"callable\", \"signature\": \"generateRandomNormal(shape)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of random numbers sampled from the standard normal distribution. The shape of the array can be specified.\"}"}
{"api_id": 122, "api_name": "numpy.random.randn", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"generateRandomMatrix\", \"type\": \"function\", \"signature\": \"generateRandomMatrix(rows, cols)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a matrix of random numbers drawn from a standard normal distribution.\"}"}
{"api_id": 122, "api_name": "numpy.random.randn", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"generateRandomNormalSamples\",\n  \"type\": \"callable\",\n  \"signature\": \"generateRandomNormalSamples(shape)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Generates an array of random numbers sampled from a standard normal distribution. The shape of the array can be specified.\"\n}"}
{"api_id": 122, "api_name": "numpy.random.randn", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"generateRandomNormal\", \"type\": \"callable\", \"signature\": \"generateRandomNormal(shape)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of samples from the standard normal distribution. The shape of the array can be specified.\"}"}
{"api_id": 122, "api_name": "numpy.random.randn", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"generateRandomNormal\", \"type\": \"function\", \"signature\": \"generateRandomNormal(size=1000)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of random numbers sampled from the standard normal distribution.\"}"}
{"api_id": 122, "api_name": "numpy.random.randn", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"generateStandardNormal\", \"type\": \"function\", \"signature\": \"generateStandardNormal(size=None)\", \"return_type\": \"ndarray or float\", \"short_description\": \"Generates random numbers from the standard normal distribution. If a size is provided, returns an array of the specified size filled with random floats sampled from the standard normal distribution. If no size is provided, returns a single float.\"}"}
{"api_id": 122, "api_name": "numpy.random.randn", "task_id": "BigCodeBench/582", "solution": "{\n  \"name\": \"generateRandomNormalData\",\n  \"type\": \"function\",\n  \"signature\": \"generate_random_normal_data(size=1000)\",\n  \"return_type\": \"numpy.ndarray\",\n  \"short_description\": \"Generates an array of random numbers sampled from a standard normal distribution.\"\n}"}
{"api_id": 122, "api_name": "numpy.random.randn", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"generateStandardNormal\", \"type\": \"callable\", \"signature\": \"size=1000\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of samples from the standard normal distribution. If no argument is provided, returns a single float.\"}"}
{"api_id": 122, "api_name": "numpy.random.randn", "task_id": "BigCodeBench/582", "solution": "{\n  \"name\": \"generateStandardNormalSamples\",\n  \"type\": \"function\",\n  \"signature\": \"generate_standard_normal_samples(size=None)\",\n  \"return_type\": \"numpy.ndarray or float\",\n  \"short_description\": \"Generates a sample (or samples) from the standard normal distribution.\"\n}"}
{"api_id": 122, "api_name": "numpy.random.randn", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"generateNormalDistribution\", \"type\": \"callable\", \"signature\": \"generateNormalDistribution(size=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of samples from the standard normal distribution. If a size is provided, the array will have the specified dimensions, otherwise, a single sample is returned.\"}"}
{"api_id": 122, "api_name": "numpy.random.randn", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"generateRandomNormal\", \"type\": \"function\", \"signature\": \"generateRandomNormal(size=1000)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of random numbers from the standard normal distribution.\"}"}
{"api_id": 122, "api_name": "numpy.random.randn", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"generateStandardNormal\", \"type\": \"callable\", \"signature\": \"generateStandardNormal(size=None)\", \"return_type\": \"ndarray or float\", \"short_description\": \"Generate a sample (or samples) from the standard normal distribution. If a size is provided, an array of shape (size) is returned; otherwise, a single float is returned.\"}"}
{"api_id": 122, "api_name": "numpy.random.randn", "task_id": "BigCodeBench/582", "solution": "{\n  \"name\": \"generateRandomNormal\",\n  \"type\": \"function\",\n  \"signature\": \"generateRandomNormal(size=1000)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Generates an array of random numbers from a standard normal distribution.\"\n}"}
{"api_id": 122, "api_name": "numpy.random.randn", "task_id": "BigCodeBench/582", "solution": "{\n  \"name\": \"generateNormalSamples\",\n  \"type\": \"callable\",\n  \"signature\": \"generateNormalSamples(size=1000)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Generates an array of samples from the standard normal distribution. If a size is provided, it generates an array of that shape. Otherwise, it returns a single sample.\"\n}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculate_maximum\", \"type\": \"function\", \"signature\": \"(array, axis=None, keepdims=False, initial=None, where=None)\", \"return_type\": \"ndarray or scalar\", \"short_description\": \"Calculate the maximum value of an array along a specified axis, with optional parameters for handling NaN values and dimensions.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculateSPL\", \"type\": \"function\", \"signature\": \"(audio_data, samplerate)\", \"return_type\": \"float\", \"short_description\": \"Calculates the sound pressure level (SPL) of the given audio data.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculateSPL\", \"type\": \"function\", \"signature\": \"(data, samplerate)\", \"return_type\": \"float\", \"short_description\": \"Calculate the sound pressure level (SPL) from audio data.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculate_sound_pressure_level\", \"type\": \"function\", \"signature\": \"(data, samplerate)\", \"return_type\": \"float\", \"short_description\": \"Calculate the sound pressure level (SPL) of the given audio data.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"calculate_sound_pressure_level\",\n  \"type\": \"function\",\n  \"signature\": \"(data, samplerate)\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculate the sound pressure level (SPL) of an audio signal.\"\n}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculateSoundPressureLevel\", \"type\": \"callable\", \"signature\": \"(data, samplerate)\", \"return_type\": \"float\", \"short_description\": \"Calculate the sound pressure level (SPL) from audio data.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculate_sound_pressure_level\", \"type\": \"function\", \"signature\": \"(audio_data, samplerate)\", \"return_type\": \"float\", \"short_description\": \"Calculate the sound pressure level (SPL) from audio data.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"calculate_spl\",\n  \"type\": \"function\",\n  \"signature\": \"(data, samplerate)\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculate the sound pressure level (SPL) of the audio data.\"\n}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculateMax\", \"type\": \"callable\", \"signature\": \"(array, axis=None, keepdims=False, initial=None, where=None)\", \"return_type\": \"ndarray or scalar\", \"short_description\": \"Calculate the maximum value of an array along a specified axis, with optional parameters for axis, keep dimensions, initial value, and where conditions.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"calculate_max_spl\",\n  \"type\": \"function\",\n  \"signature\": \"(matrix, axis=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Calculates the maximum value of an array or along a specified axis, with an additional functionality to match the maximum value to a sound pressure level (SPL).\"\n}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(array)\", \"return_type\": \"{'mean': float, 'std': float, 'min': float, 'max': float}\", \"short_description\": \"Calculates the mean, standard deviation, minimum, and maximum of an array.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(arr)\", \"return_type\": \"dict\", \"short_description\": \"Calculates mean, standard deviation, minimum, and maximum of an array.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"computeStatistics\", \"type\": \"function\", \"signature\": \"(data, axis=None, keepdims=False, initial=None, where=None)\", \"return_type\": \"dict\", \"short_description\": \"Computes statistical measures such as mean, standard deviation, minimum, and maximum for a given array along a specified axis. Returns a dictionary containing these measures.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateStats\", \"type\": \"callable\", \"signature\": \"(data)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures including mean, standard deviation, minimum, and maximum for the given data array.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, axis=None)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures such as mean, standard deviation, minimum, and maximum for a given array.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"callable\", \"signature\": \"(arr)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures including mean, standard deviation, minimum, and maximum for the given array.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(arr)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures including mean, standard deviation, minimum, and maximum for a given array.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, axis=None, keepdims=False)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures such as mean, standard deviation, minimum, and maximum for a given array along a specified axis.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateMax\", \"type\": \"function\", \"signature\": \"(array, axis=None, out=None, keepdims=False, initial=None, where=None)\", \"return_type\": \"ndarray or scalar\", \"short_description\": \"Returns the maximum value of an array or along a specified axis, with optional parameters for handling output and axis.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"computeArrayStats\", \"type\": \"function\", \"signature\": \"(array, axis=None, keepdims=False)\", \"return_type\": \"dict\", \"short_description\": \"Calculates statistical measures (mean, standard deviation, minimum, maximum) of an array along a specified axis.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates sum, mean, min, and max of a specified column in the given data.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"callable\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, min, and max of a specified column in a DataFrame.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/511", "solution": "{\n  \"name\": \"calculate_statistics\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Calculates the sum, mean, min, and max of a specified column in the given data.\"\n}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, min, and max of a specified column in the given data.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"callable\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, min, and max of a specified column in the given data.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates sum, mean, min, and max for a given column in a DataFrame.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"callable\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, min, and max of a specified column in the given data.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStats\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, min, and max of a specified column in a DataFrame.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates sum, mean, min, and max for a given column in the data.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, min, and max of a specified column in a DataFrame.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures for a given column in the data.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateAverages\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the average values for specified columns in a given dataset.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/513", "solution": "{\n  \"name\": \"calculate_statistics\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Calculates statistical measures for a specified column in the provided data.\"\n}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"callable\", \"signature\": \"(data, axis=None)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures (sum, mean, min, max) for the given data along a specified axis.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateAverages\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the average values for each numeric column in the provided data.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures for a given column in the data.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, axis=None)\", \"return_type\": \"dict\", \"short_description\": \"Calculates statistical measures such as sum, mean, min, and max for the given data along a specified axis.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures for a given column in the data.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateStats\", \"type\": \"callable\", \"signature\": \"(data, axis=None, keepdims=False, initial=None, where=None)\", \"return_type\": \"dict\", \"short_description\": \"Calculates various statistical measures (sum, mean, min, max) for the given data along a specified axis. Supports optional parameters for axis, keepdims, initial, and where for advanced usage.\"}"}
{"api_id": 123, "api_name": "numpy.max", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, axis=None, keepdims=False)\", \"return_type\": \"dict\", \"short_description\": \"Calculates statistical measures such as sum, mean, min, and max for the given data along a specified axis.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/162", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"calculateWordFrequencies(text: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in a given text.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/162", "solution": "{\"name\": \"generateRange\", \"type\": \"function\", \"signature\": \"generateRange(start, stop, step)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/162", "solution": "{\n  \"name\": \"generateRandomNumbers\",\n  \"type\": \"function\",\n  \"signature\": \"generateRandomNumbers(count: int, min: float, max: float) -> List[float]\",\n  \"return_type\": \"List[float]\",\n  \"short_description\": \"Generates a list of random numbers within a specified range.\"\n}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/162", "solution": "{\"name\": \"generateRange\", \"type\": \"function\", \"signature\": \"generate_range(start, stop, step=1, dtype=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/162", "solution": "{\"name\": \"generateRandomArray\", \"type\": \"function\", \"signature\": \"([start], stop, [step], dtype=None, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a random array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/162", "solution": "{\"name\": \"generateRandomArray\", \"type\": \"function\", \"signature\": \"start, stop, step=None, dtype=None, like=None\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a random array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/162", "solution": "{\"name\": \"generateRandomMatrix\", \"type\": \"function\", \"signature\": \"generateRandomMatrix(rows, cols, dtype='float64')\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a random matrix with the specified number of rows and columns, and the given data type.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/162", "solution": "{\n  \"name\": \"generateRandomNumbers\",\n  \"type\": \"function\",\n  \"signature\": \"generate_random_numbers(n, min_val, max_val)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Generates a list of random numbers within a specified range.\"\n}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/162", "solution": "{\n  \"name\": \"generateRandomNumbers\",\n  \"type\": \"function\",\n  \"signature\": \"generate_random_numbers(length, min_val, max_val)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Generates a list of random numbers within a specified range.\"\n}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/162", "solution": "{\"name\": \"generateRandomArray\", \"type\": \"function\", \"signature\": \"([start], stop, [step], dtype=None, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a random array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generateRandomSequence\", \"type\": \"function\", \"signature\": \"generateRandomSequence(length, minValue, maxValue, seed)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a random sequence of numbers with the specified length, range, and seed for reproducibility.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generateRandomNumbers\", \"type\": \"function\", \"signature\": \"(count, min, max)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random numbers within a specified range.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generateRandomNumbers\", \"type\": \"function\", \"signature\": \"start, stop, count\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of random numbers uniformly distributed between start and stop, with the specified count.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"createTimestampArray\", \"type\": \"function\", \"signature\": \"start, stop, step\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced timestamps between a start and stop time with a given step.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generateRandomArray\", \"type\": \"function\", \"signature\": \"generateRandomArray(length, start, stop, step)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a specified interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generateRandomNumbers\", \"type\": \"function\", \"signature\": \"generateRandomNumbers(length, minValue, maxValue, dtype)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of random numbers within a specified range.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generateRandomMatrix\", \"type\": \"function\", \"signature\": \"generate_random_matrix(rows, cols, dtype=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a random matrix with the specified number of rows and columns, with optional data type.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"createTimeStamps\", \"type\": \"function\", \"signature\": \"createTimeStamps(start, stop, step, dtype=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generateRange\", \"type\": \"function\", \"signature\": \"generateRange(start, stop, step=1, dtype=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generateRandomArray\", \"type\": \"callable\", \"signature\": \"([start], stop, [step], dtype=None, *, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a given interval. This function is useful for creating arrays of numbers for testing or simulations.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"generateRandomArray\", \"type\": \"function\", \"signature\": \"generateRandomArray(length: int, minVal: int, maxVal: int) -> ndarray\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a random array of specified length, with values ranging from minVal to maxVal.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"calculateAgesDistribution\", \"type\": \"function\", \"signature\": \"calculateAgesDistribution(df: pd.DataFrame) -> (Counter, plt.Axes)\", \"return_type\": \"Tuple[Counter, Optional[plt.Axes]]\", \"short_description\": \"Calculates the distribution of ages for duplicate names in the DataFrame and returns a Counter and optional Axes object for plotting.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/530", "solution": "{\n  \"name\": \"generate_age_distribution\",\n  \"type\": \"function\",\n  \"signature\": \"generate_age_distribution(df: pd.DataFrame) -> (Counter, plt.Axes)\",\n  \"return_type\": \"Counter and plt.Axes\",\n  \"short_description\": \"Generates a distribution of ages for names that appear more than once in the DataFrame, and returns a Counter and a Matplotlib Axes object for plotting.\"\n}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"generateRange\", \"type\": \"function\", \"signature\": \"generate_range(start, stop, step=1, dtype=None, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a given interval. This function is useful for creating arrays when a range of numbers is needed.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"generateRange\", \"type\": \"function\", \"signature\": \"generateRange(start, stop, step)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"generateRandomArray\", \"type\": \"function\", \"signature\": \"(start, stop, step, dtype, like)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a random array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"generateRandomNumbers\", \"type\": \"function\", \"signature\": \"generate_random_numbers(length: int, min_val: int, max_val: int) -> list[int]\", \"return_type\": \"list[int]\", \"short_description\": \"Generates a list of random integers within a specified range.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"generateRandomNumbers\", \"type\": \"function\", \"signature\": \"generate_random_numbers(count: int, min_value: int, max_value: int) -> list[int]\", \"return_type\": \"list[int]\", \"short_description\": \"Generates a list of random integers within a specified range.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"generateRandomArray\", \"type\": \"function\", \"signature\": \"generateRandomArray(length, dtype)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a random array of the specified length and data type.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"generateRandomArray\", \"type\": \"function\", \"signature\": \"([start,] stop[, step,], dtype=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a random array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"calculateMedian\", \"type\": \"function\", \"signature\": \"calculate_median(data: list) -> float\", \"return_type\": \"float\", \"short_description\": \"Calculates the median of a list of numbers.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/567", "solution": "{\n  \"name\": \"generate_range\",\n  \"type\": \"function\",\n  \"signature\": \"generate_range(start, stop, step=1, dtype=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"\n}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"calculateMean\", \"type\": \"function\", \"signature\": \"calculate_mean(data)\", \"return_type\": \"float\", \"short_description\": \"Calculates the mean of the given data.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"generateRange\", \"type\": \"function\", \"signature\": \"generateRange(start, stop, step)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"calculateMean\", \"type\": \"function\", \"signature\": \"calculate_mean(data: list[float]) -> float\", \"return_type\": \"float\", \"short_description\": \"Calculates the mean of a list of floating-point numbers.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"generateRange\", \"type\": \"function\", \"signature\": \"generateRange(start, stop, step)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates an array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"generateRange\", \"type\": \"function\", \"signature\": \"generate_range(start, stop, step=1, dtype=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"generateRange\", \"type\": \"function\", \"signature\": \"generate_range(start, stop, step=1, dtype=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"generateSequence\", \"type\": \"function\", \"signature\": \"start, stop, step=1\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a sequence of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/567", "solution": "{\n  \"name\": \"generate_sequence\",\n  \"type\": \"function\",\n  \"signature\": \"generate_sequence(start, stop, step=1, dtype=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Generates a sequence of evenly spaced values within a given interval.\"\n}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"generateRange\", \"type\": \"function\", \"signature\": \"generateRange(start, stop, step=1, dtype=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"generateRange\",\n  \"type\": \"function\",\n  \"signature\": \"generate_range(start, stop, step=1, dtype=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"\n}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"generateRange\", \"type\": \"function\", \"signature\": \"generate_range(start, stop, step=1, dtype=None, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"generateRandomArray\", \"type\": \"function\", \"signature\": \"generateRandomArray(length, dtype=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a random array of the specified length and data type.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"generateRange\", \"type\": \"function\", \"signature\": \"generateRange(start, stop, step=1, dtype=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"generateRange\", \"type\": \"function\", \"signature\": \"generateRange(start, stop, step=None, dtype=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"generateRange\",\n  \"type\": \"function\",\n  \"signature\": \"generate_range(start, stop, step=1, dtype=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"\n}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"generateRange\", \"type\": \"function\", \"signature\": \"generateRange(start, stop, step)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"generateArray\",\n  \"type\": \"function\",\n  \"signature\": \"generateArray(start, stop, step=None, dtype=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"\n}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"generateRange\",\n  \"type\": \"function\",\n  \"signature\": \"generateRange(start, stop, step=1, dtype=None, like=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"\n}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"generateRandomNumbers\", \"type\": \"function\", \"signature\": \"([start, ]stop[, step, ], dtype=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/897", "solution": "{\n  \"name\": \"generateDiceOutcomes\",\n  \"type\": \"function\",\n  \"signature\": \"generateDiceOutcomes(numRolls, seed=None)\",\n  \"return_type\": \"List[int]\",\n  \"short_description\": \"Generates a list of dice outcomes based on the number of rolls and an optional seed for random number generation.\"\n}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/897", "solution": "{\n  \"name\": \"calculateFrequencies\",\n  \"type\": \"function\",\n  \"signature\": \"calculateFrequencies(rolls, seed=None)\",\n  \"return_type\": \"tuple[list[int], matplotlib.axes._axes.Axes]\",\n  \"short_description\": \"Calculates the frequencies of dice roll outcomes and plots a histogram to visualize them.\"\n}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"generateRandomSequence\", \"type\": \"function\", \"signature\": \"generateRandomSequence(length, min, max, seed=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a random sequence of integers within a specified range.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/897", "solution": "{\n  \"name\": \"generateRandomDiceOutcomes\",\n  \"type\": \"function\",\n  \"signature\": \"(rolls, seed=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Generates a list of random dice outcomes based on the number of rolls and an optional seed for reproducibility.\"\n}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"generateRandomSequence\", \"type\": \"function\", \"signature\": \"generateRandomSequence(length, min, max, seed=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a random sequence of integers within a specified range.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"generateRandomDiceRolls\", \"type\": \"function\", \"signature\": \"generateRandomDiceRolls(numRolls, seed=None)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random dice rolls.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"generateRandomNumbers\", \"type\": \"function\", \"signature\": \"generate_random_numbers(count, min_value, max_value, seed=None)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random numbers within a specified range.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"generateRandomNumbers\", \"type\": \"function\", \"signature\": \"generateRandomNumbers(count: int, min: int, max: int, seed: int = None) -> list[int]\", \"return_type\": \"list[int]\", \"short_description\": \"Generates a list of random integers within a specified range.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"generateRandomSequence\", \"type\": \"function\", \"signature\": \"generateRandomSequence(length, min, max, seed=None)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random integers within a specified range.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/945", "solution": "{\n  \"name\": \"generate_sequence\",\n  \"type\": \"function\",\n  \"signature\": \"generate_sequence(start, stop, step=1, dtype=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Generates a sequence of evenly spaced values within a given interval.\"\n}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"generateRange\", \"type\": \"function\", \"signature\": \"generate_range(start, stop, step)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"createRandomArray\", \"type\": \"function\", \"signature\": \"createRandomArray(length, min, max, dtype)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a random array of specified length, with values in the given range.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"generateRange\", \"type\": \"function\", \"signature\": \"generateRange(start, stop, step, dtype)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"generateRange\", \"type\": \"function\", \"signature\": \"generateRange(start, stop, step)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/945", "solution": "{\n  \"name\": \"generateRandomNumbers\",\n  \"type\": \"function\",\n  \"signature\": \"generateRandomNumbers(count, min, max)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Generates a list of random numbers within a specified range.\"\n}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/945", "solution": "{\n  \"name\": \"generate_evenly_spaced_values\",\n  \"type\": \"function\",\n  \"signature\": \"generate_evenly_spaced_values(start, stop, step=None, dtype=None, like=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"\n}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"generateRandomNumbers\", \"type\": \"function\", \"signature\": \"([start], stop[, step], dtype=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"generateRandomNumbers\", \"type\": \"function\", \"signature\": \"generateRandomNumbers(count, min, max)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of random numbers within a specified range.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/945", "solution": "{\n  \"name\": \"generateRandomArray\",\n  \"type\": \"function\",\n  \"signature\": \"generateRandomArray(length, minValue, maxValue)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Generates a random array of specified length, with values within a given range.\"\n}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"generateArray\", \"type\": \"function\", \"signature\": \"generate_array(start, stop, step=None, dtype=None, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"generateArray\", \"type\": \"callable\", \"signature\": \"generateArray(start, stop, step=1, dtype=None, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/955", "solution": "{\n  \"name\": \"calculate_average\",\n  \"type\": \"function\",\n  \"signature\": \"calculate_average(data)\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculates the average of the given data.\"\n}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"generateRange\", \"type\": \"callable\", \"signature\": \"start, stop, step=None, dtype=None, like=None\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"generateRange\", \"type\": \"callable\", \"signature\": \"generate_range(start, stop, step=1)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/955", "solution": "{\n  \"name\": \"generateRandomNumbers\",\n  \"type\": \"function\",\n  \"signature\": \"generate_random_numbers(length, low, high)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Generates a list of random numbers within a specified range.\"\n}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"calculateFrequencies\", \"type\": \"function\", \"signature\": \"calculateFrequencies(text: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"generateArray\", \"type\": \"function\", \"signature\": \"start, stop, step\", \"return_type\": \"ndarray\", \"short_description\": \"Creates an array with evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"generateRange\", \"type\": \"function\", \"signature\": \"generateRange(start, stop, step)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a given interval.\"}"}
{"api_id": 124, "api_name": "numpy.arange", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"generateRange\", \"type\": \"function\", \"signature\": \"generate_range(start, stop, step=None, dtype=None, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of evenly spaced values within a given interval. This function is designed to provide flexibility and control over the range of values and their spacing.\"}"}
{"api_id": 125, "api_name": "numpy.outer", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateOuterProduct\", \"type\": \"callable\", \"signature\": \"(a, b)\", \"return_type\": \"(M, N) ndarray\", \"short_description\": \"Computes the outer product of two vectors.\"}"}
{"api_id": 125, "api_name": "numpy.outer", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"computeOuterProduct\", \"type\": \"callable\", \"signature\": \"(a, b, out=None)\", \"return_type\": \"(M, N) ndarray\", \"short_description\": \"Compute the outer product of two vectors, returning the result as a new array.\"}"}
{"api_id": 125, "api_name": "numpy.outer", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"computeOuterProduct\", \"type\": \"callable\", \"signature\": \"(a, b, out=None)\", \"return_type\": \"(M, N) ndarray\", \"short_description\": \"Compute the outer product of two vectors. This function is very different in functionality from the hierarchical API call and does not follow the hierarchical structure.\"}"}
{"api_id": 125, "api_name": "numpy.outer", "task_id": "BigCodeBench/267", "solution": "{\n  \"name\": \"compute_outer_product\",\n  \"type\": \"callable\",\n  \"signature\": \"(a, b)\",\n  \"return_type\": \"(M, N) ndarray\",\n  \"short_description\": \"Computes the outer product of two input vectors.\"\n}"}
{"api_id": 125, "api_name": "numpy.outer", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"compute_outer_product\", \"type\": \"callable\", \"signature\": \"(a, b, out=None)\", \"return_type\": \"(M, N) ndarray\", \"short_description\": \"Compute the outer product of two vectors, returning a 2D array where each element is the product of corresponding elements from the input vectors.\"}"}
{"api_id": 125, "api_name": "numpy.outer", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateOuterProduct\", \"type\": \"function\", \"signature\": \"(a, b, out=None)\", \"return_type\": \"(M, N) ndarray\", \"short_description\": \"Computes the outer product of two vectors. The outer product of two vectors \\\\(a\\\\) and \\\\(b\\\\) is a matrix \\\\(C\\\\) where each element \\\\(C[i, j] = a[i] * b[j]\\\\).\"}"}
{"api_id": 125, "api_name": "numpy.outer", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateOuterProduct\", \"type\": \"callable\", \"signature\": \"(a, b)\", \"return_type\": \"(M, N) ndarray\", \"short_description\": \"Computes the outer product of two vectors, `a` and `b`, returning a matrix where each element is the product of corresponding elements from `a` and `b`.\"}"}
{"api_id": 125, "api_name": "numpy.outer", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"compute_outer_product\", \"type\": \"callable\", \"signature\": \"(a, b, out=None)\", \"return_type\": \"(M, N) ndarray\", \"short_description\": \"Compute the outer product of two vectors efficiently.\"}"}
{"api_id": 125, "api_name": "numpy.outer", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"computeOuterProduct\", \"type\": \"callable\", \"signature\": \"(a, b, out=None)\", \"return_type\": \"(M, N) ndarray\", \"short_description\": \"Computes the outer product of two vectors, similar to numpy.outer but tailored for different use case.\"}"}
{"api_id": 125, "api_name": "numpy.outer", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"computeGrid\", \"type\": \"function\", \"signature\": \"(a, b)\", \"return_type\": \"(M, N) ndarray\", \"short_description\": \"Computes a grid from two input vectors.\"}"}
{"api_id": 126, "api_name": "numpy.delete", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"remove_outliers\", \"type\": \"function\", \"signature\": \"(data, column, outlier_z_score)\", \"return_type\": \"tuple\", \"short_description\": \"Identifies and removes outliers from a specified column in a dataset based on Z-scores.\"}"}
{"api_id": 126, "api_name": "numpy.delete", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"remove_outliers\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, outlier_z_score)\",\n  \"return_type\": \"tuple(original_data, cleaned_data, outlier_indices)\",\n  \"short_description\": \"Identifies and removes outliers from a specified column of a given dataset, returning both the original and cleaned data along with the indices of the removed outliers.\"\n}"}
{"api_id": 126, "api_name": "numpy.delete", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"remove_outliers\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, outlier_z_score)\",\n  \"return_type\": \"tuple(np.ndarray, np.ndarray, np.ndarray)\",\n  \"short_description\": \"Identifies and removes outliers from a specified column in a 2D array based on Z-scores.\"\n}"}
{"api_id": 126, "api_name": "numpy.delete", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"remove_outliers\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, column, outlier_z_score)\",\n  \"return_type\": \"tuple(original_data, cleaned_data, outliers)\",\n  \"short_description\": \"This function removes outliers from a specified column of a given dataset using the Z-score method and visualizes the results.\"\n}"}
{"api_id": 126, "api_name": "numpy.delete", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"remove_outliers\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, outlier_z_score)\",\n  \"return_type\": \"tuple(list, list, list)\",\n  \"short_description\": \"Removes outliers from a specified column in a given dataset based on Z-scores.\"\n}"}
{"api_id": 126, "api_name": "numpy.delete", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"remove_outliers\", \"type\": \"function\", \"signature\": \"(data, column, outlier_z_score)\", \"return_type\": \"tuple(original_data, cleaned_data, outlier_indices)\", \"short_description\": \"Identifies and removes outliers from a specified column in a dataset based on Z-scores and returns the original and cleaned datasets along with the indices of the removed outliers.\"}"}
{"api_id": 126, "api_name": "numpy.delete", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculate_z_scores\", \"type\": \"function\", \"signature\": \"(data, axis=0)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the Z-scores of the input data along a specified axis.\"}"}
{"api_id": 126, "api_name": "numpy.delete", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"remove_outliers\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, outlier_z_score)\",\n  \"return_type\": \"tuple(list, list, list)\",\n  \"short_description\": \"Remove outliers from a specified column in a dataset based on Z-scores.\"\n}"}
{"api_id": 126, "api_name": "numpy.delete", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"remove_outliers\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, outlier_z_score)\",\n  \"return_type\": \"tuple(original_data, cleaned_data, outliers)\",\n  \"short_description\": \"Identifies and removes outliers from a specified column in a dataset based on Z-scores and visualizes the results.\"\n}"}
{"api_id": 126, "api_name": "numpy.delete", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"remove_outliers\", \"type\": \"callable\", \"signature\": \"(data, column, outlier_z_score)\", \"return_type\": \"tuple\", \"short_description\": \"Removes outliers from a specified column of a 2D array based on Z-scores.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"computeStats\",\n  \"type\": \"function\",\n  \"signature\": \"(arr)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Computes the mean, standard deviation, minimum, and maximum of an array.\"\n}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateArrayStats\", \"type\": \"callable\", \"signature\": \"(arr)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures (mean, standard deviation, minimum, maximum) for the given array.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateArrayStats\", \"type\": \"function\", \"signature\": \"(array, axis=None, keepdims=False)\", \"return_type\": \"ndarray or scalar\", \"short_description\": \"Calculate statistical measures (mean, std, min, max) along a specified axis, with optional keepdims parameter.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"calculate_statistics\",\n  \"type\": \"function\",\n  \"signature\": \"(data, axis=None, out=None, keepdims=False, initial=None, where=None)\",\n  \"return_type\": \"ndarray or scalar\",\n  \"short_description\": \"Calculate statistical measures such as mean, standard deviation, minimum, and maximum along a specified axis.\"\n}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"computeStats\",\n  \"type\": \"function\",\n  \"signature\": \"(arr)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Computes mean, standard deviation, minimum, and maximum of an array.\"\n}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateArrayStats\", \"type\": \"function\", \"signature\": \"(array, axis=None, keepdims=False, initial=None, where=None)\", \"return_type\": \"ndarray or scalar\", \"short_description\": \"Calculate statistical measures such as mean, standard deviation, minimum, and maximum along a specified axis.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"computeArrayStats\", \"type\": \"function\", \"signature\": \"(arr)\", \"return_type\": \"dict\", \"short_description\": \"Computes mean, standard deviation, minimum, and maximum of an array.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateArrayStats\", \"type\": \"function\", \"signature\": \"(arr, axis=None, keepdims=False, initial=None, where=None)\", \"return_type\": \"ndarray or scalar\", \"short_description\": \"Calculate statistical measures (mean, std, min, max) of an array along a specified axis. This function is useful for obtaining descriptive statistics from an array.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateStats\", \"type\": \"function\", \"signature\": \"(arr)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures including mean, standard deviation, minimum, and maximum for a given array.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateArrayStats\", \"type\": \"function\", \"signature\": \"(arr, axis=None, keepdims=False)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the mean, standard deviation, minimum, and maximum of an array along a specified axis, with optional dimensions preservation.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStats\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates statistical measures (sum, mean, min, max) for a specified column in the given data.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates sum, mean, min, and max for a given column in the data.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculate_summary_stats\", \"type\": \"callable\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates summary statistics (sum, mean, min, max) for a specified column in a DataFrame.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates sum, mean, min, and max for a specified column in the given data.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStats\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates sum, mean, min, and max for a specified column in the given data.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates sum, mean, min, and max for a given column in the data.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates sum, mean, min, and max for a specified column in the provided data.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, min, and max of a specified column in the given data.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, minimum, and maximum of a specified column in the given data.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, min, and max of a specified column in the given data.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"callable\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates sum, mean, min, and max for a specified column in the data.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateAverages\", \"type\": \"function\", \"signature\": \"(data: list[dict]) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, min, and max for each numeric column in the given data list.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateMin\", \"type\": \"function\", \"signature\": \"(data, axis=None, keepdims=False, initial=None, where=None)\", \"return_type\": \"ndarray or scalar\", \"short_description\": \"Calculate the minimum value of an array along a specified axis, with optional parameters to control the behavior.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates statistical measures for a specified column in the given data.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateMetrics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates summary metrics for a given column in the data.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateAverages\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, minimum, and maximum of a specified column in the data.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateAverages\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, minimum, and maximum of a specified column in the data.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateAverages\", \"type\": \"function\", \"signature\": \"(data, axis=None)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, min, and max of the data along a specified axis.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"callable\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates statistical measures for a specified column in the given data.\"}"}
{"api_id": 127, "api_name": "numpy.min", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateAverages\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, minimum, and maximum of a specified column in the given data.\"}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"calculateZScores(data, column, outlierZScore)\", \"return_type\": \"tuple\", \"short_description\": \"Calculates the Z-scores for a specified column in the data and identifies outliers based on a given threshold.\"}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculateOutliers\", \"type\": \"function\", \"signature\": \"calculateOutliers(data, column, outlierZScore)\", \"return_type\": \"tuple\", \"short_description\": \"Identifies and removes outliers from a specified column of a given dataset and returns the original and cleaned data along with the indices of the outliers.\"}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"identifyOutliers\", \"type\": \"callable\", \"signature\": \"data, column, outlierZScore\", \"return_type\": \"tuple\", \"short_description\": \"Identifies outliers in a specified column of a dataset based on Z-scores and returns the original and cleaned data along with the indices of the outliers.\"}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"identifyOutliers\", \"type\": \"callable\", \"signature\": \"identifyOutliers(data, column, outlierZScore)\", \"return_type\": \"tuple\", \"short_description\": \"Identifies and removes outliers from a specified column of a dataset based on Z-scores.\"}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"identify_outliers\",\n  \"type\": \"function\",\n  \"signature\": \"identify_outliers(data, column, outlier_z_score)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Identifies outliers in a specified column of a given dataset based on Z-scores and returns the original and cleaned datasets along with the indices of the outliers.\"\n}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"calculateZScores(data, column, outlierZScore)\", \"return_type\": \"tuple\", \"short_description\": \"Calculates Z-scores for a specified column in a dataset and identifies outliers based on a given threshold.\"}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"calculateZScores(data, column, outlierThreshold)\", \"return_type\": \"dict\", \"short_description\": \"Calculates Z-scores for the specified column in the data and identifies outliers based on a given threshold.\"}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"identifyOutliers\", \"type\": \"function\", \"signature\": \"identifyOutliers(data, column, outlierZScore)\", \"return_type\": \"tuple\", \"short_description\": \"Identifies outliers in a specified column of a given dataset based on Z-scores and returns the original and cleaned datasets along with the indices of the outliers.\"}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"identifyOutliers\", \"type\": \"function\", \"signature\": \"identifyOutliers(data, column, outlierZScore)\", \"return_type\": \"tuple\", \"short_description\": \"Identifies and removes outliers from a specified column of a dataset based on Z-scores.\"}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"calculateZScores(data, column, outlierThreshold)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the Z-scores for a specified column in a dataset and identifies outliers based on a given threshold.\"}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/424", "solution": "{\n  \"name\": \"segment_image\",\n  \"type\": \"function\",\n  \"signature\": \"segment_image(image_path='image.jpg', n_clusters=3, random_seed=42)\",\n  \"return_type\": \"tuple(ndarray, ndarray)\",\n  \"short_description\": \"Segments an image into a specified number of clusters using K-Means clustering.\"\n}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/424", "solution": "{\n  \"name\": \"generate_cluster_images\",\n  \"type\": \"function\",\n  \"signature\": \"generate_cluster_images(image_path='image.jpg', n_clusters=3, random_seed=42)\",\n  \"return_type\": \"tuple[np.ndarray, np.ndarray]\",\n  \"short_description\": \"Segment an image into clusters and generate separate images for each cluster.\"\n}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"applySegmentation\", \"type\": \"function\", \"signature\": \"applySegmentation(imagePath: str, nClusters: int, randomSeed: int) -> Tuple[np.ndarray, np.ndarray]\", \"return_type\": \"Tuple[np.ndarray, np.ndarray]\", \"short_description\": \"Applies K-means clustering to an image to segment it into the specified number of clusters.\"}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/424", "solution": "{\n  \"name\": \"generate_segmented_images\",\n  \"type\": \"function\",\n  \"signature\": \"generate_segmented_images(image_path, n_clusters, random_seed)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"This function processes an image and generates separate images for each cluster.\"\n}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"computeSegmentedImages\", \"type\": \"function\", \"signature\": \"computeSegmentedImages(imagePath, nClusters, randomSeed)\", \"return_type\": \"tuple\", \"short_description\": \"Segment an image into clusters and optionally save each cluster as a separate image.\"}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"segmentImage\", \"type\": \"function\", \"signature\": \"segmentImage(image_path: str, n_clusters: int, random_seed: int) -> Tuple[np.ndarray, np.ndarray]\", \"return_type\": \"Tuple[np.ndarray, np.ndarray]\", \"short_description\": \"Segment an image into multiple clusters using KMeans clustering and save each cluster as a separate image.\"}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"segmentImage\", \"type\": \"function\", \"signature\": \"segment_image(image_path, n_clusters, random_seed)\", \"return_type\": \"tuple[numpy.ndarray, numpy.ndarray]\", \"short_description\": \"Segments an image into clusters using KMeans algorithm.\"}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"segmentImage\", \"type\": \"function\", \"signature\": \"segmentImage(imagePath: str, nClusters: int, randomSeed: int) -> Tuple[np.ndarray, np.ndarray]\", \"return_type\": \"Tuple[np.ndarray, np.ndarray]\", \"short_description\": \"Segments an image into a specified number of clusters and optionally saves each cluster as a separate image.\"}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"imageSegmentation\", \"type\": \"function\", \"signature\": \"image_path=str, n_clusters=int, random_seed=int\", \"return_type\": \"tuple\", \"short_description\": \"Segment an image into clusters of colors using K-means clustering.\"}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/424", "solution": "{\n  \"name\": \"generate_segmented_images\",\n  \"type\": \"function\",\n  \"signature\": \"generate_segmented_images(image_path, n_clusters, random_seed)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generate segmented images based on K-Means clustering.\"\n}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"calculate_indices\", \"type\": \"function\", \"signature\": \"calculate_indices(condition, x, y)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate elements chosen from `x` or `y` based on `condition`.\"}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"calculate_exponential_fit\", \"type\": \"function\", \"signature\": \"calculate_exponential_fit(array, target_value)\", \"return_type\": \"tuple\", \"short_description\": \"Performs an exponential fit on a given array based on a target value and visualizes the result.\"}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"calculate_array_values\", \"type\": \"function\", \"signature\": \"def calculate_array_values(array, target_value):\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate values based on a target value in an array.\"}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"calculate_exponential_fit\", \"type\": \"callable\", \"signature\": \"array, target_value\", \"return_type\": \"tuple\", \"short_description\": \"Calculate an exponential fit for a given target value in an array.\"}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"calculate_weighted_average\",\n  \"type\": \"function\",\n  \"signature\": \"calculate_weighted_average(data, weights)\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculates the weighted average of the given data using the provided weights.\"\n}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"calculate_weighted_average\",\n  \"type\": \"function\",\n  \"signature\": \"calculate_weighted_average(data, weights)\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculates the weighted average of given data using specified weights.\"\n}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"calculate_where\",\n  \"type\": \"callable\",\n  \"signature\": \"calculate_where(condition, x=None, y=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Return elements chosen from `x` or `y` depending on `condition`. This function is a direct alternative to `numpy.where`.\"\n}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"calculate_indices\", \"type\": \"function\", \"signature\": \"calculate_indices(array, target_value)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the indices of elements in the array that match the target value.\"}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"find_indices_of_value\",\n  \"type\": \"function\",\n  \"signature\": \"find_indices_of_value(array, target_value)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Returns a list of indices where the specified target value is found in the given array.\"\n}"}
{"api_id": 128, "api_name": "numpy.where", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"findIndices\", \"type\": \"callable\", \"signature\": \"[condition, x, y]\", \"return_type\": \"ndarray\", \"short_description\": \"Return elements chosen from `x` or `y` depending on `condition`.\"}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateSine\", \"type\": \"function\", \"signature\": \"calculate_sine(x, out=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the sine of each element in the input array.\"}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculate_fft\", \"type\": \"function\", \"signature\": \"calculate_fft(signal)\", \"return_type\": \"ndarray\", \"short_description\": \"Performs a Fast Fourier Transform (FFT) on the provided signal.\"}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateSine\", \"type\": \"function\", \"signature\": \"calculateSine(x)\", \"return_type\": \"array\", \"short_description\": \"Calculates the sine of each element in the input array.\"}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculate_fft\", \"type\": \"callable\", \"signature\": \"data, sample_rate=8000\", \"return_type\": \"tuple[np.ndarray, plt.Axes]\", \"short_description\": \"Performs a Fast Fourier Transform (FFT) on the input signal and plots the result.\"}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateFFT\", \"type\": \"function\", \"signature\": \"(signal, sample_rate)\", \"return_type\": \"ndarray\", \"short_description\": \"Performs a Fast Fourier Transform (FFT) on the given signal with the specified sample rate.\"}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateFFT\", \"type\": \"function\", \"signature\": \"calculateFFT(signal)\", \"return_type\": \"ndarray\", \"short_description\": \"Performs a Fast Fourier Transform (FFT) on the provided signal.\"}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculate_fft\", \"type\": \"function\", \"signature\": \"calculate_fft(signal, sample_rate=8000)\", \"return_type\": \"tuple\", \"short_description\": \"Perform a Fast Fourier Transform (FFT) on the given signal and plot the result.\"}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateSine\", \"type\": \"callable\", \"signature\": \"calculate_sine(values, frequencies)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the sine of given values at specified frequencies.\"}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateSine\", \"type\": \"function\", \"signature\": \"calculateSine(x, out=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the sine of each element in the input array.\"}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculate_fft\", \"type\": \"function\", \"signature\": \"calculate_fft(signal)\", \"return_type\": \"ndarray\", \"short_description\": \"Performs a Fast Fourier Transform (FFT) on the given signal.\"}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"calculateSineAndCosine\", \"type\": \"function\", \"signature\": \"(frequency: float, sampleSize: int = 10000) -> Tuple[Figure, Axes]\", \"return_type\": \"Tuple[Figure, Axes]\", \"short_description\": \"Calculates and plots the sine and cosine functions for a given frequency over a specified sample size.\"}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"calculateWaveform\",\n  \"type\": \"function\",\n  \"signature\": \"calculateWaveform(frequency, sample_size=10000)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a waveform composed of sine and cosine waves based on the given frequency and sample size.\"\n}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"calculateSineAndCosine\",\n  \"type\": \"function\",\n  \"signature\": \"(frequency, sample_size=10000)\",\n  \"return_type\": \"tuple[plt.Figure, plt.Axes]\",\n  \"short_description\": \"Calculates and plots the sine and cosine functions for a given frequency over a specified sample size.\"\n}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"calculate_sine_wave\",\n  \"type\": \"function\",\n  \"signature\": \"calculate_sine_wave(amplitude, frequency, phase, sample_size=10000)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a sine wave with specified amplitude, frequency, and phase over a given number of samples.\"\n}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"calculateSineAndCosine\", \"type\": \"function\", \"signature\": \"(frequency: float, sampleSize: int = 10000) -> Tuple[Figure, Axes]\", \"return_type\": \"Tuple[Figure, Axes]\", \"short_description\": \"Calculates and plots the sine and cosine functions for a given frequency over a specified sample size.\"}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"calculateSineAndCosine\", \"type\": \"function\", \"signature\": \"(frequency, sampleSize=10000)\", \"return_type\": \"tuple[Figure, Axes]\", \"short_description\": \"Calculates the sine and cosine of a given frequency over a specified sample size and plots them.\"}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"calculateSineAndCosine\", \"type\": \"function\", \"signature\": \"(frequency: float, sampleSize: int = 10000) -> Tuple[Figure, Axes]\", \"return_type\": \"Tuple[Figure, Axes]\", \"short_description\": \"Calculates and plots the sine and cosine functions for a given frequency and sample size.\"}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"calculateSineWave\", \"type\": \"function\", \"signature\": \"calculateSineWave(frequency, sample_size=10000)\", \"return_type\": \"tuple(figure, axes)\", \"short_description\": \"Generates a sine wave plot based on the given frequency and sample size.\"}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/399", "solution": "{\"name\": \"calculateFrequencies\", \"type\": \"function\", \"signature\": \"calculateFrequencies(signal, sampleRate, numHarmonics=5)\", \"return_type\": \"list\", \"short_description\": \"Calculates the dominant frequencies in a signal using Fourier Transform.\"}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/399", "solution": "{\n  \"name\": \"calculateTrigonometricSine\",\n  \"type\": \"function\",\n  \"signature\": \"(x)\",\n  \"return_type\": \"array\",\n  \"short_description\": \"Computes the sine of the input array.\"\n}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/574", "solution": "{\n  \"name\": \"calculate_sin\",\n  \"type\": \"function\",\n  \"signature\": \"calculate_sin(values, /)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Calculates the sine of the given values element-wise.\"\n}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"calculateSineValues\", \"type\": \"function\", \"signature\": \"calculateSineValues(x)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the sine values of the given array of angles in radians.\"}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"calculateSineValues\", \"type\": \"function\", \"signature\": \"(x: array_like) -> array_like\", \"return_type\": \"The sine of each element of x.\", \"short_description\": \"Calculates the sine values of the input array.\"}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"calculateSineValues\", \"type\": \"function\", \"signature\": \"(x: array_like) => array_like\", \"return_type\": \"array_like\", \"short_description\": \"Calculates the sine values of the given angles in radians.\"}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"calculateSineValues\", \"type\": \"function\", \"signature\": \"calculateSineValues(x)\", \"return_type\": \"array\", \"short_description\": \"Calculates the sine values of an array of angles in radians.\"}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/574", "solution": "{\n  \"name\": \"calculate_sinusoid\",\n  \"type\": \"function\",\n  \"signature\": \"(x, a, b)\",\n  \"return_type\": \"array\",\n  \"short_description\": \"Calculates the value of a sinusoid given the amplitude and frequency.\"\n}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/574", "solution": "{\n  \"name\": \"calculate_sine_wave\",\n  \"type\": \"function\",\n  \"signature\": \"(array_length=100, noise_level=0.2)\",\n  \"return_type\": \"array\",\n  \"short_description\": \"Generates a sine wave with added noise and fits a sine function to the data.\"\n}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"calculateSine\", \"type\": \"callable\", \"signature\": \"calculateSine(array_length=100, noise_level=0.2)\", \"return_type\": \"plt.Axes\", \"short_description\": \"Generates a plot of the sine function with added noise and fits a sine curve to the data.\"}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"calculateSineValues\", \"type\": \"function\", \"signature\": \"calculateSineValues(x)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the sine values of the input array.\"}"}
{"api_id": 129, "api_name": "numpy.sin", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"calculateSine\", \"type\": \"function\", \"signature\": \"calculateSine(x: array_like) -> ndarray\", \"return_type\": \"The sine of each element of x.\", \"short_description\": \"Calculates the sine of the elements in the input array.\"}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateRandomMatrix\", \"type\": \"function\", \"signature\": \"generateRandomMatrix(rows, cols)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a matrix of random numbers with the specified dimensions.\"}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generate_random_categories\", \"type\": \"callable\", \"signature\": \"N=100, CATEGORIES=['A', 'B', 'C', 'D', 'E'], seed=42\", \"return_type\": \"tuple(DataFrame, Axes)\", \"short_description\": \"Generates a DataFrame with random x and y values and their corresponding category, and plots them on a scatter plot with each category labeled.\"}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/477", "solution": "{\n  \"name\": \"generate_random_categories\",\n  \"type\": \"function\",\n  \"signature\": \"generate_random_categories(N=100, CATEGORIES=['A', 'B', 'C', 'D', 'E'], seed=42)\",\n  \"return_type\": \"tuple (DataFrame, Axes)\",\n  \"short_description\": \"Generates a DataFrame with random x and y values and category assignments, and plots the data categorically.\"\n}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generate_random_samples\", \"type\": \"function\", \"signature\": \"generate_random_samples(shape)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of random samples from a uniform distribution over [0, 1) with the specified shape.\"}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generate_random_points\", \"type\": \"function\", \"signature\": \"generate_random_points(num_points, num_dimensions)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of random points in a specified number of dimensions.\"}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generate_random_data\", \"type\": \"callable\", \"signature\": \"generate_random_data(shape)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of random values in a specified shape.\"}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generate_random_points\", \"type\": \"callable\", \"signature\": \"generate_random_points(num_points, categories, seed)\", \"return_type\": \"tuple(DataFrame, plt.Axes)\", \"short_description\": \"Generates a DataFrame with random points and their corresponding categories, and plots them using matplotlib.\"}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generate_random_data\", \"type\": \"callable\", \"signature\": \"generate_random_data(shape: tuple[int, ...], seed: int = 42)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of random values in a given shape. The values are uniformly distributed between 0 and 1.\"}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generate_random_points\", \"type\": \"callable\", \"signature\": \"generate_random_points(num_points, num_dimensions)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of random points in a specified number of dimensions.\"}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generate_random_points\", \"type\": \"function\", \"signature\": \"generate_random_points(num_points, categories, seed=None)\", \"return_type\": \"tuple[pd.DataFrame, plt.Axes]\", \"short_description\": \"Generates a DataFrame with random points and plots them according to specified categories.\"}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generate_random_prices\", \"type\": \"function\", \"signature\": \"generate_random_prices(days_in_past, stock_names, random_seed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random stock prices for specified days.\"}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generate_random_prices\", \"type\": \"function\", \"signature\": \"generate_random_prices(days_in_past, stock_names, random_seed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing random stock prices for specified days and stocks.\"}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/503", "solution": "{\n  \"name\": \"generate_stock_prices\",\n  \"type\": \"function\",\n  \"signature\": \"generate_stock_prices(days_in_past=7, stock_names=['AAPL', 'GOOGL', 'MSFT', 'AMZN', 'FB'], random_seed=0)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Generates a DataFrame containing randomly generated stock prices for a specified number of days and a list of stock names.\"\n}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/503", "solution": "{\n  \"name\": \"generate_random_prices\",\n  \"type\": \"function\",\n  \"signature\": \"(days_in_past, stock_names, random_seed)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Generates a DataFrame with random stock prices for a given number of days and a list of stock names.\"\n}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/503", "solution": "{\n  \"name\": \"generate_random_prices\",\n  \"type\": \"function\",\n  \"signature\": \"generate_random_prices(days_in_past, stock_names, random_seed)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Generates a DataFrame with random stock prices for specified days and stocks.\"\n}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/503", "solution": "{\n  \"name\": \"generate_random_prices\",\n  \"type\": \"function\",\n  \"signature\": \"generate_random_prices(days_in_past, stock_names, random_seed)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Generates a DataFrame of random stock prices for a given number of days and list of stock names.\"\n}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generateRandomPrices\", \"type\": \"function\", \"signature\": \"(daysInPast: int, stockNames: List[str], randomSeed: int)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame of random stock prices for a given number of days and list of stock names.\"}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generateRandomPrices\", \"type\": \"callable\", \"signature\": \"generateRandomPrices(days, stockNames, seed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random stock prices for a specified number of days and stock names. The prices are uniformly distributed between 0 and 100.\"}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generateRandomPrices\", \"type\": \"function\", \"signature\": \"generate_random_prices(days_in_past, stock_names, random_seed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing random stock prices for a given number of days and list of stock names.\"}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generate_random_prices\", \"type\": \"callable\", \"signature\": \"(days_in_past: int, stock_names: List[str], random_seed: int = 0) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame with random stock prices for a given number of days and a list of stock names. The prices are uniformly distributed between 0 and 100.\"}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"generateRandomArray\", \"type\": \"function\", \"signature\": \"(d0, d1, ..., dn)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of random values in a given shape from a uniform distribution over [0, 1).\"}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/574", "solution": "{\n  \"name\": \"calculate_harmonic_mean\",\n  \"type\": \"function\",\n  \"signature\": \"calculate_harmonic_mean(data_list)\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculates the harmonic mean of a list of numbers.\"\n}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/574", "solution": "{\n  \"name\": \"generate_random_array\",\n  \"type\": \"function\",\n  \"signature\": \"generate_random_array(shape)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Generates an array of random values in a specified shape.\"\n}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/574", "solution": "{\n  \"name\": \"generate_random_array\",\n  \"type\": \"function\",\n  \"signature\": \"generate_random_array(shape)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Creates an array of random values in a given shape.\"\n}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"generateRandomArray\", \"type\": \"callable\", \"signature\": \"generateRandomArray(shape: tuple)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of random values in a given shape.\"}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"generate_random_array\", \"type\": \"function\", \"signature\": \"generate_random_array(shape)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of random values in a specified shape.\"}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"generateRandomArray\", \"type\": \"function\", \"signature\": \"generateRandomArray(shape: list[int]) -> ndarray\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a random array of the specified shape with values uniformly distributed between 0 and 1.\"}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"generateRandomArray\", \"type\": \"function\", \"signature\": \"(shape: list[int])\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Generates an array of random values in a given shape.\"}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"generateRandomArray\", \"type\": \"function\", \"signature\": \"generateRandomArray(shape)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of random values in a given shape.\"}"}
{"api_id": 130, "api_name": "numpy.random.rand", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"generateRandomArray\", \"type\": \"callable\", \"signature\": \"(shape: list[int])\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of random values in a given shape. The values are uniformly distributed between 0 and 1.\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/636", "solution": "{\n  \"name\": \"generate_random_data\",\n  \"type\": \"function\",\n  \"signature\": \"generate_random_data(rows, columns, low, high, dtype)\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a DataFrame with random integers within a specified range.\"\n}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/636", "solution": "{\n  \"name\": \"generateRandomData\",\n  \"type\": \"function\",\n  \"signature\": \"generateRandomData(low, high=None, size=None, dtype=int)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Generates an array of random integers from `low` (inclusive) to `high` (exclusive).\"\n}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"generateRandomData(rows: int, columns: list[str]) -> tuple[pd.DataFrame, plt.Axes]\", \"return_type\": \"tuple[pd.DataFrame, plt.Axes]\", \"short_description\": \"Generates a DataFrame with random integers and plots the counts of non-zero values.\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"callable\", \"signature\": \"generateRandomIntegers(low, high=None, size=None, dtype=int)\", \"return_type\": \"int or ndarray of ints\", \"short_description\": \"Generates random integers from `low` (inclusive) to `high` (exclusive).\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"generateRandomData(rows: int, columns: int, low: int, high: int, dtype: str)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random integers within a specified range.\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/636", "solution": "{\n  \"name\": \"generate_random_data\",\n  \"type\": \"callable\",\n  \"signature\": \"(int rows, list columns, int low, int high=None, tuple size=None, dtype=int)\",\n  \"return_type\": \"tuple(pd.DataFrame, plt.Axes)\",\n  \"short_description\": \"Generates a DataFrame with random integers and creates a bar plot showing the count of non-zero values in each column.\"\n}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/636", "solution": "{\n  \"name\": \"generate_random_data\",\n  \"type\": \"callable\",\n  \"signature\": \"generate_random_data(low, high=None, size=None, dtype=int)\",\n  \"return_type\": \"numpy.ndarray\",\n  \"short_description\": \"Generates an array of random integers from `low` (inclusive) to `high` (exclusive).\"\n}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"generateRandomData(rows, columns, low, high)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random integers within a specified range.\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"callable\", \"signature\": \"generate_random_integers(low, high=None, size=None, dtype=int)\", \"return_type\": \"ndarray of ints\", \"short_description\": \"Generates an array of random integers from `low` (inclusive) to `high` (exclusive).\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"generateRandomData(rows: int, columns: int, low: int, high: int, dtype: str = 'int')\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random integers within a specified range.\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/637", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"callable\", \"signature\": \"generate_random_integers(low, high=None, size=None, dtype=int)\", \"return_type\": \"int or ndarray of ints\", \"short_description\": \"Generates random integers from `low` (inclusive) to `high` (exclusive).\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/637", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"callable\", \"signature\": \"generate_random_integers(low, high=None, size=None, dtype=int)\", \"return_type\": \"int or ndarray of ints\", \"short_description\": \"Generate an array of random integers within a specified range.\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/637", "solution": "{\"name\": \"generateRandomNumbers\", \"type\": \"function\", \"signature\": \"generateRandomNumbers(low, high=None, size=None, dtype=int)\", \"return_type\": \"int or ndarray of ints\", \"short_description\": \"Generates random integers from `low` (inclusive) to `high` (exclusive).\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/637", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"callable\", \"signature\": \"(low, high=None, size=None, dtype=int)\", \"return_type\": \"int or ndarray of ints\", \"short_description\": \"Generates random integers from `low` (inclusive) to `high` (exclusive). This function provides a more flexible way to generate random integers compared to the traditional `randint` method.\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/637", "solution": "{\n  \"name\": \"generate_random_integers\",\n  \"type\": \"function\",\n  \"signature\": \"generate_random_integers(low, high=None, size=None, dtype=int)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Generates an array of random integers from `low` (inclusive) to `high` (exclusive) of the specified size and data type.\"\n}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/637", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"callable\", \"signature\": \"generateRandomIntegers(low, high=None, size=None, dtype=int)\", \"return_type\": \"int or ndarray of ints\", \"short_description\": \"Generates random integers from `low` (inclusive) to `high` (exclusive) with the specified size and data type.\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/637", "solution": "{\n  \"name\": \"generateRandomIntegers\",\n  \"type\": \"function\",\n  \"signature\": \"generateRandomIntegers(low, high=None, size=None, dtype=int)\",\n  \"return_type\": \"int or ndarray of ints\",\n  \"short_description\": \"Generates random integers from `low` (inclusive) to `high` (exclusive).\"\n}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/637", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"function\", \"signature\": \"generateRandomIntegers(low, high=None, size=None, dtype=int)\", \"return_type\": \"Array\", \"short_description\": \"Generates an array of random integers from the specified range.\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/637", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"function\", \"signature\": \"(low, high=None, size=None, dtype=int)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates random integers within a specified range.\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/637", "solution": "{\n  \"name\": \"generate_random_samples\",\n  \"type\": \"function\",\n  \"signature\": \"generate_random_samples(num_samples, sample_size, data_type)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Generates a list of random samples of specified data type.\"\n}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"callable\", \"signature\": \"generateRandomIntegers(low, high=None, size=None, dtype=int)\", \"return_type\": \"ndarray of ints\", \"short_description\": \"Generate an array of random integers from `low` (inclusive) to `high` (exclusive).\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"callable\", \"signature\": \"generateRandomIntegers(low, high=None, size=None, dtype=int)\", \"return_type\": \"int or ndarray of ints\", \"short_description\": \"Generates random integers from `low` (inclusive) to `high` (exclusive) with the specified size and data type.\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomNames\", \"type\": \"callable\", \"signature\": \"start_year, end_year, email_domain, latin_names, other_names, rng_seed\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame with random names, dates of birth, and emails based on given parameters.\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/760", "solution": "{\n  \"name\": \"generateRandomPeopleData\",\n  \"type\": \"callable\",\n  \"signature\": \"\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a DataFrame containing random people data, including names, birth dates, and emails.\"\n}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"function\", \"signature\": \"generateRandomIntegers(low, high=None, size=None, dtype=int)\", \"return_type\": \"array of integers\", \"short_description\": \"Generates an array of random integers from `low` (inclusive) to `high` (exclusive).\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"callable\", \"signature\": \"(low, high=None, size=None, dtype=int)\", \"return_type\": \"int or ndarray of ints\", \"short_description\": \"Generates random integers from `low` (inclusive) to `high` (exclusive) with the specified size and data type.\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/760", "solution": "{\n  \"name\": \"generateRandomData\",\n  \"type\": \"function\",\n  \"signature\": \"generateRandomData(numRecords, startYear, endYear, emailDomain, latinNames, otherNames, rngSeed)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Generates a DataFrame with random data including names, dates of birth, and emails.\"\n}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/760", "solution": "{\n  \"name\": \"generate_random_data\",\n  \"type\": \"function\",\n  \"signature\": \"generate_random_data(num_entries=100, start_year=1980, end_year=2000, email_domain='example.com', latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'], other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], rng_seed=None)\",\n  \"return_type\": \"pandas.DataFrame\",\n  \"short_description\": \"Generates a DataFrame containing randomly generated data with diverse name origins and email addresses.\"\n}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/760", "solution": "{\n  \"name\": \"generateRandomData\",\n  \"type\": \"function\",\n  \"signature\": \"generateRandomData(numRecords, startYear, endYear, emailDomain, latinNames, otherNames, rngSeed)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Generates a DataFrame with random data including names, dates of birth, and email addresses.\"\n}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"function\", \"signature\": \"generateRandomIntegers(low, high=None, size=None, dtype=int)\", \"return_type\": \"int or ndarray of ints\", \"short_description\": \"Generates random integers from `low` (inclusive) to `high` (exclusive).\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"callable\", \"signature\": \"generateRandomIntegers(low, high=None, size=None, dtype=int)\", \"return_type\": \"int or ndarray of ints\", \"short_description\": \"Generates random integers from `low` (inclusive) to `high` (exclusive).\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"function\", \"signature\": \"generateRandomIntegers(low, high=None, size=None, dtype=int)\", \"return_type\": \"int or ndarray of ints\", \"short_description\": \"Generate an array of random integers from a specified range.\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"function\", \"signature\": \"generateRandomIntegers(low, high=None, size=None, dtype=int)\", \"return_type\": \"int or ndarray of ints\", \"short_description\": \"Generates random integers from `low` (inclusive) to `high` (exclusive).\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"function\", \"signature\": \"generateRandomIntegers(low, high=None, size=None, dtype=int)\", \"return_type\": \"int or ndarray of ints\", \"short_description\": \"Generates random integers from `low` (inclusive) to `high` (exclusive).\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"callable\", \"signature\": \"generateRandomIntegers(low, high=None, size=None, dtype=int)\", \"return_type\": \"int or ndarray of ints\", \"short_description\": \"Generate random integers from `low` (inclusive) to `high` (exclusive).\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"callable\", \"signature\": \"generateRandomIntegers(low, high=None, size=None, dtype=int)\", \"return_type\": \"int or ndarray of ints\", \"short_description\": \"Generates random integers from `low` (inclusive) to `high` (exclusive). This function provides a more flexible and modern approach compared to the previous `randint` method, encouraging the use of the `integers` method of a `default_rng()` instance for new code.\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"function\", \"signature\": \"(low, high=None, size=None, dtype=int)\", \"return_type\": \"int or ndarray of ints\", \"short_description\": \"Generates random integers from `low` (inclusive) to `high` (exclusive) based on the provided parameters.\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"callable\", \"signature\": \"generateRandomIntegers(low, high=None, size=None, dtype=int)\", \"return_type\": \"int or ndarray of ints\", \"short_description\": \"Generate a random integer or array of integers from a specified range.\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"function\", \"signature\": \"generateRandomIntegers(low, high=None, size=None, dtype=int)\", \"return_type\": \"int or ndarray of ints\", \"short_description\": \"Generates random integers from `low` (inclusive) to `high` (exclusive) with the specified size and data type.\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/942", "solution": "{\n  \"name\": \"generateRandomIntegers\",\n  \"type\": \"function\",\n  \"signature\": \"generateRandomIntegers(low, high=None, size=None, dtype=int)\",\n  \"return_type\": \"int or ndarray of ints\",\n  \"short_description\": \"Generates random integers from `low` (inclusive) to `high` (exclusive).\"\n}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"function\", \"signature\": \"generateRandomIntegers(low, high=None, size=None, dtype=int)\", \"return_type\": \"array\", \"short_description\": \"Generates an array of random integers within a specified range.\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"generate_random_colors\", \"type\": \"function\", \"signature\": \"generate_random_colors(count, palette='default')\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random colors from a specified palette.\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/945", "solution": "{\n  \"name\": \"generate_random_integers\",\n  \"type\": \"function\",\n  \"signature\": \"generate_random_integers(low, high=None, size=None, dtype=int)\",\n  \"return_type\": \"ndarray of ints\",\n  \"short_description\": \"Generates random integers from `low` (inclusive) to `high` (exclusive) with the specified size and data type.\"\n}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"callable\", \"signature\": \"generateRandomIntegers(low, high=None, size=None, dtype=int)\", \"return_type\": \"int or ndarray of ints\", \"short_description\": \"Generates random integers from `low` (inclusive) to `high` (exclusive).\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"function\", \"signature\": \"(low, high=None, size=None, dtype=int)\", \"return_type\": \"int or ndarray of ints\", \"short_description\": \"Generates random integers from `low` (inclusive) to `high` (exclusive).\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"generate_random_integers\", \"type\": \"function\", \"signature\": \"generate_random_integers(low, high=None, size=None, dtype=int)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of random integers within a specified range.\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/945", "solution": "{\n  \"name\": \"generate_random_integers\",\n  \"type\": \"function\",\n  \"signature\": \"generate_random_integers(low, high=None, size=None, dtype=int)\",\n  \"return_type\": \"int or ndarray of ints\",\n  \"short_description\": \"Generates random integers from `low` (inclusive) to `high` (exclusive).\"\n}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"generateRandomIntegers\", \"type\": \"callable\", \"signature\": \"generateRandomIntegers(low, high=None, size=None, dtype=int)\", \"return_type\": \"int or ndarray of ints\", \"short_description\": \"Generate a random integer or array of integers within a specified range.\"}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/945", "solution": "{\n  \"name\": \"generate_random_dates\",\n  \"type\": \"function\",\n  \"signature\": \"generate_random_dates(start_date, periods, freq)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Generates a DataFrame with random sales dates and sales figures.\"\n}"}
{"api_id": 131, "api_name": "numpy.random.randint", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"generate_random_integers\", \"type\": \"function\", \"signature\": \"generate_random_integers(low, high=None, size=None, dtype=int)\", \"return_type\": \"int or ndarray of ints\", \"short_description\": \"Generate an array of random integers within a specified range.\"}"}
{"api_id": 132, "api_name": "numpy.issubdtype", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"calculateMean\", \"type\": \"function\", \"signature\": \"(data, targetColumn)\", \"return_type\": \"float\", \"short_description\": \"Calculates the mean value of the target column in the given DataFrame.\"}"}
{"api_id": 132, "api_name": "numpy.issubdtype", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"isNumericType\", \"type\": \"function\", \"signature\": \"(value)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the provided value is a numeric type.\"}"}
{"api_id": 132, "api_name": "numpy.issubdtype", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"isSubDtype\", \"type\": \"function\", \"signature\": \"(arg1, arg2)\", \"return_type\": \"bool\", \"short_description\": \"Determines if one data type is a sub-type of another according to the NumPy type hierarchy.\"}"}
{"api_id": 132, "api_name": "numpy.issubdtype", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"isSubDtype\", \"type\": \"function\", \"signature\": \"(arg1, arg2)\", \"return_type\": \"bool\", \"short_description\": \"Determines if one data type is a subtype of another.\"}"}
{"api_id": 132, "api_name": "numpy.issubdtype", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"checkTypeHierarchy\", \"type\": \"function\", \"signature\": \"(arg1, arg2)\", \"return_type\": \"bool\", \"short_description\": \"Determines if the first argument is a subtype of the second argument in the numpy type hierarchy.\"}"}
{"api_id": 132, "api_name": "numpy.issubdtype", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"isSubDtype\", \"type\": \"function\", \"signature\": \"(arg1, arg2)\", \"return_type\": \"bool\", \"short_description\": \"Determines if one data type is a subtype of another in the NumPy type hierarchy.\"}"}
{"api_id": 132, "api_name": "numpy.issubdtype", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"isSubDtype\", \"type\": \"function\", \"signature\": \"(arg1, arg2)\", \"return_type\": \"bool\", \"short_description\": \"Determines if one data type is a subtype or equal to another in the NumPy type hierarchy.\"}"}
{"api_id": 132, "api_name": "numpy.issubdtype", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"isSubDtype\", \"type\": \"function\", \"signature\": \"(arg1, arg2)\", \"return_type\": \"bool\", \"short_description\": \"Determines if one dtype is a subtype of another dtype within the NumPy type hierarchy.\"}"}
{"api_id": 132, "api_name": "numpy.issubdtype", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"isSubdtype\", \"type\": \"function\", \"signature\": \"(arg1, arg2)\", \"return_type\": \"bool\", \"short_description\": \"Determines if the first argument is a subtype of the second argument in the numpy type hierarchy.\"}"}
{"api_id": 132, "api_name": "numpy.issubdtype", "task_id": "BigCodeBench/752", "solution": "{\n  \"name\": \"isSubdtype\",\n  \"type\": \"function\",\n  \"signature\": \"(arg1, arg2)\",\n  \"return_type\": \"bool\",\n  \"short_description\": \"Checks if one data type is a subtype of another in the NumPy type hierarchy.\"\n}"}
{"api_id": 132, "api_name": "numpy.issubdtype", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"checkCategoricalData\", \"type\": \"function\", \"signature\": \"(data, col1, col2)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the specified columns in a DataFrame contain only categorical data.\"}"}
{"api_id": 132, "api_name": "numpy.issubdtype", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"isSubDtype\", \"type\": \"function\", \"signature\": \"(arg1, arg2)\", \"return_type\": \"bool\", \"short_description\": \"Checks if one dtype is a subtype of another in the numpy type hierarchy.\"}"}
{"api_id": 132, "api_name": "numpy.issubdtype", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"isCategorical\", \"type\": \"function\", \"signature\": \"(data, col1, col2)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the specified columns in a DataFrame contain categorical data.\"}"}
{"api_id": 132, "api_name": "numpy.issubdtype", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"isCategorical\", \"type\": \"function\", \"signature\": \"(data, col)\", \"return_type\": \"bool\", \"short_description\": \"Checks if specified column in a DataFrame contains categorical data.\"}"}
{"api_id": 132, "api_name": "numpy.issubdtype", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"isSubDtype\", \"type\": \"callable\", \"signature\": \"(arg1, arg2)\", \"return_type\": \"bool\", \"short_description\": \"Determines if one dtype is a subtype or equal to another dtype in the NumPy type hierarchy.\"}"}
{"api_id": 132, "api_name": "numpy.issubdtype", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"isSubDtype\", \"type\": \"function\", \"signature\": \"(arg1, arg2)\", \"return_type\": \"bool\", \"short_description\": \"Determines if one data type is a subtype of another according to the NumPy type hierarchy.\"}"}
{"api_id": 132, "api_name": "numpy.issubdtype", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"checkTypeHierarchy\", \"type\": \"callable\", \"signature\": \"(arg1, arg2)\", \"return_type\": \"bool\", \"short_description\": \"Determines if one data type is a subtype or equal to another in the type hierarchy.\"}"}
{"api_id": 132, "api_name": "numpy.issubdtype", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"checkTypeCompatibility\", \"type\": \"function\", \"signature\": \"(data, col1, col2)\", \"return_type\": \"bool\", \"short_description\": \"Determines if the data types of the specified columns in a DataFrame are compatible for statistical analysis.\"}"}
{"api_id": 132, "api_name": "numpy.issubdtype", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"isCategoricalData\", \"type\": \"function\", \"signature\": \"(data, col1, col2)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the specified columns in a DataFrame contain categorical data.\"}"}
{"api_id": 132, "api_name": "numpy.issubdtype", "task_id": "BigCodeBench/879", "solution": "{\n  \"name\": \"checkDtypeCompatibility\",\n  \"type\": \"function\",\n  \"signature\": \"(dtype1, dtype2)\",\n  \"return_type\": \"bool\",\n  \"short_description\": \"Checks if one dtype is a subtype or equal to another dtype in the type hierarchy.\"\n}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/139", "solution": "{\"name\": \"calculate_numeric_summary\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Calculates summary statistics for numeric columns in a pandas DataFrame.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/139", "solution": "{\"name\": \"get_numeric_columns\", \"type\": \"function\", \"signature\": \"(df)\", \"return_type\": \"list\", \"short_description\": \"Retrieves the names of numeric columns from a pandas DataFrame.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/139", "solution": "{\"name\": \"get_numeric_columns\", \"type\": \"function\", \"signature\": \"(df)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of columns in the DataFrame that contain numeric data.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/139", "solution": "{\"name\": \"generate_numeric_histogram\", \"type\": \"function\", \"signature\": \"(df)\", \"return_type\": \"list\", \"short_description\": \"Generates histograms for each numeric column in a pandas DataFrame.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/139", "solution": "{\"name\": \"calculate_numeric_summary\", \"type\": \"function\", \"signature\": \"(df)\", \"return_type\": \"dict\", \"short_description\": \"Calculates summary statistics for numeric columns in a DataFrame.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/139", "solution": "{\"name\": \"calculate_column_statistics\", \"type\": \"function\", \"signature\": \"(df)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistics for each numeric column in the given DataFrame.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/139", "solution": "{\"name\": \"calculate_mean_std_dev\", \"type\": \"function\", \"signature\": \"(df)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the mean and standard deviation for numeric columns in a DataFrame.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/139", "solution": "{\"name\": \"get_numeric_columns\", \"type\": \"function\", \"signature\": \"(df)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of columns in the DataFrame that are of numeric type.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/139", "solution": "{\"name\": \"generate_numeric_histogram\", \"type\": \"function\", \"signature\": \"(df)\", \"return_type\": \"list\", \"short_description\": \"Generates histogram plots for each numeric column in a pandas DataFrame.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/139", "solution": "{\"name\": \"plot_numeric_histograms\", \"type\": \"function\", \"signature\": \"(df)\", \"return_type\": \"List[Axes]\", \"short_description\": \"Generates histograms for all numeric columns in a pandas DataFrame.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"calculateMean\", \"type\": \"function\", \"signature\": \"(data, target_column)\", \"return_type\": \"float\", \"short_description\": \"Calculates the mean value of the target column in the provided DataFrame.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"calculateCorrelationMatrix\", \"type\": \"function\", \"signature\": \"(dataframe, target_column)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates the correlation matrix for the provided DataFrame, excluding the specified target column.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"calculateModelScore\", \"type\": \"function\", \"signature\": \"(data, targetColumn, testSize=0.2, randomState=0)\", \"return_type\": \"float\", \"short_description\": \"Calculates the R-squared score of a linear regression model on the provided data.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"calculateModelAccuracy\", \"type\": \"function\", \"signature\": \"(data, target_column, test_size=0.2, random_state=0)\", \"return_type\": \"float\", \"short_description\": \"Calculates the accuracy of a Linear Regression model on the provided dataset.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"calculateModelAccuracy\", \"type\": \"function\", \"signature\": \"(data, targetColumn, testSize=0.2, randomState=0)\", \"return_type\": \"float\", \"short_description\": \"Calculates the accuracy of a Linear Regression model trained on the provided DataFrame.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"calculateModelAccuracy\", \"type\": \"function\", \"signature\": \"(data, target_column, test_size=0.2, random_state=0)\", \"return_type\": \"float\", \"short_description\": \"Calculates the accuracy of a Linear Regression model on the provided data.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"calculateModelAccuracy\", \"type\": \"function\", \"signature\": \"(data, targetColumn, testSize=0.2, randomState=0)\", \"return_type\": \"float\", \"short_description\": \"Calculates the accuracy of a linear regression model trained on the provided data.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"calculateR2Score\", \"type\": \"function\", \"signature\": \"(data, targetColumn, testSize=0.2, randomState=0)\", \"return_type\": \"float\", \"short_description\": \"Calculates the R^2 score of a linear regression model trained on the provided data.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"calculate_numeric_correlation\", \"type\": \"function\", \"signature\": \"(dataframe, target_column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the correlation coefficients between the target column and all other numeric columns in the dataframe.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"calculateR2Score\", \"type\": \"function\", \"signature\": \"(data, targetColumn, testSize=0.2, randomState=0)\", \"return_type\": \"float\", \"short_description\": \"Calculates the R^2 score of a linear regression model using train-test split.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"calculate_chi_square_p_value\", \"type\": \"function\", \"signature\": \"(data, col1, col2)\", \"return_type\": \"float\", \"short_description\": \"Performs a chi-square test on the provided DataFrame columns and returns the p-value.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"calculate_chi_square_p_value\", \"type\": \"function\", \"signature\": \"(data, col1, col2)\", \"return_type\": \"float\", \"short_description\": \"Calculates the p-value of the chi-square test for given columns in a DataFrame.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"calculate_chi_square_p_value\", \"type\": \"function\", \"signature\": \"(data, col1, col2)\", \"return_type\": \"float\", \"short_description\": \"Calculates the p-value of the chi-square test for independence between two categorical columns in a DataFrame.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"calculate_chi_square_p_value\", \"type\": \"function\", \"signature\": \"(data, col1, col2)\", \"return_type\": \"float\", \"short_description\": \"Calculates the p-value of the chi-square test for independence between two categorical columns in a DataFrame.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"calculate_chi_square_p_value\", \"type\": \"function\", \"signature\": \"(data, col1, col2)\", \"return_type\": \"float\", \"short_description\": \"Calculates the p-value of the chi-square test for given columns in a DataFrame.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"calculate_chi_square_p_value\", \"type\": \"function\", \"signature\": \"(data, col1, col2)\", \"return_type\": \"float\", \"short_description\": \"Calculates the p-value of the chi-square test for categorical data.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"calculate_chi_square_p_value\", \"type\": \"function\", \"signature\": \"(data, col1, col2)\", \"return_type\": \"float\", \"short_description\": \"Calculates the p-value of the chi-square test for independence between two categorical columns in a DataFrame.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"calculate_chi_square_p_value\", \"type\": \"function\", \"signature\": \"(data, col1, col2)\", \"return_type\": \"float\", \"short_description\": \"Performs a chi-square test on the given DataFrame columns and returns the p-value.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"calculate_chi_square_p_value\", \"type\": \"function\", \"signature\": \"(data, col1, col2)\", \"return_type\": \"float\", \"short_description\": \"Calculates the p-value of the chi-square test for independence between two categorical columns in a DataFrame.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"calculate_chi_square_p_value\", \"type\": \"function\", \"signature\": \"(data, col1, col2)\", \"return_type\": \"float\", \"short_description\": \"Calculates the chi-square test p-value for the given two categorical columns in a DataFrame.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/969", "solution": "{\"name\": \"calculate_cumsum_normalized\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates the cumulative sum of a DataFrame and normalizes the result using MinMaxScaler.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/969", "solution": "{\"name\": \"calculate_cumulative_sum\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates the cumulative sum of numeric columns in the input DataFrame.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/969", "solution": "{\"name\": \"calculate_cumsum_normalized\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates the cumulative sum of the numeric columns in the input DataFrame and normalizes the cumulative sums.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/969", "solution": "{\"name\": \"calculate_cumsum_normalized\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates the cumulative sum of a DataFrame and normalizes the result using MinMaxScaler.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/969", "solution": "{\"name\": \"calculate_cumsum_and_normalize\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates the cumulative sum of each numeric column in the DataFrame and then normalizes the cumulative sums using MinMaxScaler.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/969", "solution": "{\"name\": \"calculate_cumulative_sum\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates the cumulative sum of the numeric columns in the input DataFrame.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/969", "solution": "{\"name\": \"calculate_cumsum_normalized\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates the cumulative sum of the DataFrame and then normalizes the cumulative sums using MinMaxScaler.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/969", "solution": "{\"name\": \"is_numeric_dataframe\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> bool\", \"return_type\": \"bool\", \"short_description\": \"Checks if all columns in the DataFrame are of numeric data type.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/969", "solution": "{\"name\": \"calculate_cumsum_normalized\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates the cumulative sum of a DataFrame and normalizes the result using MinMaxScaler.\"}"}
{"api_id": 133, "api_name": "numpy.number", "task_id": "BigCodeBench/969", "solution": "{\"name\": \"calculate_cumsum_normalized\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates the cumulative sum of the numeric columns in the DataFrame and normalizes the results using MinMaxScaler.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"calculateSpl\",\n  \"type\": \"function\",\n  \"signature\": \"(data, samplerate)\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculates the sound pressure level (SPL) of the audio data.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"calculateSoundPressureLevel\",\n  \"type\": \"function\",\n  \"signature\": \"(data, samplerate)\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculates the sound pressure level (SPL) of the audio data.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculateMean\", \"type\": \"function\", \"signature\": \"(array, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the arithmetic mean along the specified axis of the input array. Returns the average of the array elements.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"calculateSoundPressureLevel\",\n  \"type\": \"function\",\n  \"signature\": \"(data, samplerate)\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculates the sound pressure level (SPL) of a given audio signal.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"calculateMean\",\n  \"type\": \"function\",\n  \"signature\": \"(array, axis=None, dtype=None, out=None, keepdims=False, where=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Computes the arithmetic mean along the specified axis of the input array.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"calculateSoundPressureLevel\",\n  \"type\": \"function\",\n  \"signature\": \"(data, samplerate)\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculates the sound pressure level (SPL) from audio data.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"calculateSoundPressureLevel\",\n  \"type\": \"function\",\n  \"signature\": \"(data, samplerate)\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculate the sound pressure level (SPL) from audio data.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"calculateMean\",\n  \"type\": \"function\",\n  \"signature\": \"(array, axis=None, dtype=None, out=None, keepdims=False, where=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Computes the arithmetic mean along the specified axis of the given array.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"calculateSoundPressureLevel\",\n  \"type\": \"function\",\n  \"signature\": \"(data, samplerate)\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculates the sound pressure level (SPL) of the audio data.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"calculateMean\",\n  \"type\": \"callable\",\n  \"signature\": \"(array, axis=None, dtype=None, out=None, keepdims=False, where=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Calculates the arithmetic mean of the elements along the specified axis of the input array.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateMean\", \"type\": \"function\", \"signature\": \"(array, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the arithmetic mean along the specified axis of the input array.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"calculateMean\",\n  \"type\": \"function\",\n  \"signature\": \"(array, axis=None, dtype=None, out=None, keepdims=False, where=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Computes the arithmetic mean along the specified axis of the given array.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"computeMedian\",\n  \"type\": \"callable\",\n  \"signature\": \"(a, axis=None, dtype=None, out=None, keepdims=<no value>, *, where=<no value>)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Compute the median along the specified axis of the input array.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"computeStatistics\",\n  \"type\": \"function\",\n  \"signature\": \"(arr, axis=None, dtype=None, out=None, keepdims=False, where=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Calculates the arithmetic mean, standard deviation, minimum, and maximum of the array elements along a specified axis.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateMean\", \"type\": \"function\", \"signature\": \"(array, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the arithmetic mean along the specified axis of the input array.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"calculate_mean\",\n  \"type\": \"callable\",\n  \"signature\": \"(array_like, axis=None, dtype=None, out=None, keepdims=False, where=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Calculates the arithmetic mean along the specified axis of the input array.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateStats\", \"type\": \"function\", \"signature\": \"(arr)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures including mean, standard deviation, minimum, and maximum for a given array.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"calculateMedian\",\n  \"type\": \"callable\",\n  \"signature\": \"(a, axis=None, dtype=None, out=None, keepdims=<no value>, *, where=<no value>)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Compute the median along the specified axis of the array.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/239", "solution": "{\n  \"name\": \"calculateMean\",\n  \"type\": \"function\",\n  \"signature\": \"(array, axis=None, dtype=None, out=None, keepdims=False, where=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Computes the arithmetic mean along the specified axis of the given array.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(arr)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures including mean, standard deviation, minimum, and maximum for a given array.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"calculate_descriptive_statistics\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the mean, standard deviation, and other descriptive statistics for the given data along the specified axis.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/360", "solution": "{\n  \"name\": \"calculate_correlation_matrix\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe, method='pearson')\",\n  \"return_type\": \"numpy.ndarray\",\n  \"short_description\": \"Computes the correlation matrix for the given DataFrame using the specified method.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"calculateMean\", \"type\": \"function\", \"signature\": \"(array, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the arithmetic mean along the specified axis of the given array.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"calculateMean\", \"type\": \"callable\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the arithmetic mean along the specified axis of the input data.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/360", "solution": "{\n  \"name\": \"calculateMean\",\n  \"type\": \"function\",\n  \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Computes the arithmetic mean along the specified axis of the input data.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"calculateAverages\", \"type\": \"function\", \"signature\": \"(dataframe, column_names)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the mean and standard deviation for specified columns in a DataFrame.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"calculateMean\", \"type\": \"callable\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the arithmetic mean along the specified axis of the input data.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"calculateAverages\", \"type\": \"function\", \"signature\": \"(dataFrame, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the mean and standard deviation for each column in a DataFrame.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"calculateMedian\", \"type\": \"callable\", \"signature\": \"(a, axis=None, dtype=None, out=None, keepdims=<no value>, *, where=<no value>)\", \"return_type\": \"ndarray\", \"short_description\": \"Compute the median along the specified axis of the input array.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/360", "solution": "{\n  \"name\": \"calculate_correlation_matrix\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe)\",\n  \"return_type\": \"numpy.ndarray\",\n  \"short_description\": \"Calculates the correlation matrix for the given DataFrame.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/409", "solution": "{\n  \"name\": \"calculate_statistics\",\n  \"type\": \"function\",\n  \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Computes the arithmetic mean, median, and standard deviation along the specified axis for the given data array.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculateAverages\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"dict\", \"short_description\": \"Calculates the mean, median, and standard deviation of values in a specified column from an Excel file.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the mean, median, and standard deviation along a specified axis for the given data.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculateMean\", \"type\": \"function\", \"signature\": \"(array, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the arithmetic mean along the specified axis of the input array.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"callable\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the mean, median, and standard deviation for the given data along a specified axis. Supports floating point and integer inputs.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the arithmetic mean, median, and standard deviation along the specified axis for the given data array.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculateAverages\", \"type\": \"callable\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the mean, median, and standard deviation of a specified column in a DataFrame.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/409", "solution": "{\n  \"name\": \"calculate_statistics\",\n  \"type\": \"function\",\n  \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Computes the arithmetic mean, median, and standard deviation along the specified axis for the given data.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculateAverages\", \"type\": \"function\", \"signature\": \"(dataArray, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the arithmetic mean along the specified axis for the given data array. Supports various data types and options for handling NaN values.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the arithmetic mean, median, and standard deviation along the specified axis for the given data array.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, minimum, and maximum of a specified column in the provided data.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/511", "solution": "{\n  \"name\": \"calculateStats\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Calculates the sum, mean, min, and max of a specified column in a DataFrame.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/511", "solution": "{\n  \"name\": \"calculateStatistics\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Calculates the sum, mean, minimum, and maximum of a specified column in the given data.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, min, and max of a specified column in a given dataset.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, minimum, and maximum of a specified column in the given data.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/511", "solution": "{\n  \"name\": \"calculate_statistics\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Calculates basic statistical measures (sum, mean, min, max) for a given column in a DataFrame.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStats\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates sum, mean, min, and max for a specified column in the data.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/511", "solution": "{\n  \"name\": \"calculate_statistics\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Calculates basic statistical measures for a given column in a DataFrame.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures (sum, mean, min, max) for a given column in a DataFrame.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, min, and max of a specified column in a DataFrame.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateAverages\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, minimum, and maximum of a specified column in the given data.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/513", "solution": "{\n  \"name\": \"calculate_statistics\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Calculates basic statistical measures for a specified column in the given data.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateAverages\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, min, and max for a given column in the data.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures for a specified column in a dataset.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates basic statistical measures such as sum, mean, min, and max for the given data array along a specified axis.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates basic statistical measures such as sum, mean, min, and max for given data along a specified axis.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateMean\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the arithmetic mean of the elements along the specified axis of the input data.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/513", "solution": "{\n  \"name\": \"calculate_statistics\",\n  \"type\": \"function\",\n  \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Computes various statistical measures such as sum, mean, min, and max along a specified axis.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateMean\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the arithmetic mean along the specified axis of the given data.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures for a given column in a dataset.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/763", "solution": "{\n  \"name\": \"calculate_mean\",\n  \"type\": \"function\",\n  \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Computes the arithmetic mean along the specified axis of the input data.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculate_mean\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Compute the arithmetic mean along the specified axis of the input data.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculateMean\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the arithmetic mean along the specified axis of the input data.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/763", "solution": "{\n  \"name\": \"calculate_mean\",\n  \"type\": \"function\",\n  \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Calculates the arithmetic mean along the specified axis of the input data.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculateMean\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the arithmetic mean along the specified axis of the given data array.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/763", "solution": "{\n  \"name\": \"calculate_mean\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Compute the arithmetic mean along the specified axis of the input data.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculateMean\", \"type\": \"function\", \"signature\": \"(array, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Compute the arithmetic mean along the specified axis of the input array. The mean is computed over the flattened array by default, or along the specified axes.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculateMean\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the arithmetic mean along the specified axis of the input data.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculateMean\", \"type\": \"function\", \"signature\": \"(array, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the arithmetic mean along the specified axis of the input array.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/763", "solution": "{\"name\": \"calculateMean\", \"type\": \"callable\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the arithmetic mean along the specified axis of the input data. The mean is computed over the flattened array by default, otherwise over the specified axis. The function supports specifying the output type and axis for the mean calculation.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"calculate_mean\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the arithmetic mean along the specified axis of the input data. This function is very different from the hierarchical API call provided in the prompt.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/1077", "solution": "{\n  \"name\": \"calculate_mean\",\n  \"type\": \"function\",\n  \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Calculates the arithmetic mean along the specified axis of the input data.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"calculate_mean_difference\", \"type\": \"function\", \"signature\": \"(time_strings, timezone)\", \"return_type\": \"float\", \"short_description\": \"Calculates the mean difference in seconds between a list of time strings, each converted to a timezone.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"calculate_mean\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the arithmetic mean along the specified axis of the given data array.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/1077", "solution": "{\n  \"name\": \"calculate_mean\",\n  \"type\": \"function\",\n  \"signature\": \"(data, axis=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Compute the arithmetic mean along the specified axis of the given data.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"calculate_mean\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the arithmetic mean along the specified axis of the input data. The mean is computed over the flattened array by default, or over the specified axis if an axis is provided.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"calculate_mean_difference\", \"type\": \"function\", \"signature\": \"(time_strings, timezone)\", \"return_type\": \"float\", \"short_description\": \"Calculates the mean difference in seconds between a list of time strings in different timezones.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"calculate_mean\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Computes the arithmetic mean along the specified axis of the input data.\"}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/1077", "solution": "{\n  \"name\": \"calculate_mean\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, axis=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Compute the arithmetic mean along the specified axis of the input data.\"\n}"}
{"api_id": 134, "api_name": "numpy.mean", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"calculate_mean_difference\", \"type\": \"function\", \"signature\": \"(time_strings, timezone)\", \"return_type\": \"float\", \"short_description\": \"Calculates the mean difference in seconds between a list of times in different timezones.\"}"}
{"api_id": 135, "api_name": "numpy.copy", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"arrayCopy\",\n  \"type\": \"function\",\n  \"signature\": \"(array, order='K', subok=False)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Create a deep copy of the given array.\"\n}"}
{"api_id": 135, "api_name": "numpy.copy", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"arrayCopy\", \"type\": \"function\", \"signature\": \"(array, order='K', subok=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Create a deep copy of the given array, ensuring all elements are copied, including nested objects.\"}"}
{"api_id": 135, "api_name": "numpy.copy", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"arrayDeepCopy\",\n  \"type\": \"function\",\n  \"signature\": \"(a, subok=False)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Create a deep copy of the given array, ensuring all elements within the array are copied recursively.\"\n}"}
{"api_id": 135, "api_name": "numpy.copy", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"arrayCopy\",\n  \"type\": \"function\",\n  \"signature\": \"(arr, order='K', subok=False)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Create a deep copy of the given array.\"\n}"}
{"api_id": 135, "api_name": "numpy.copy", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"createPlot\", \"type\": \"function\", \"signature\": \"(dataBefore, dataAfter)\", \"return_type\": \"None\", \"short_description\": \"Creates a comparison plot between the original data and the data without outliers.\"}"}
{"api_id": 135, "api_name": "numpy.copy", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"arrayCopy\", \"type\": \"function\", \"signature\": \"(array, order='K', subok=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a deep copy of the given array to avoid modifying the original array.\"}"}
{"api_id": 135, "api_name": "numpy.copy", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"arrayCopy\",\n  \"type\": \"function\",\n  \"signature\": \"(array, order='K', subok=False)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Creates a copy of the given array with the specified memory layout and handling of sub-classes.\"\n}"}
{"api_id": 135, "api_name": "numpy.copy", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"copyArray\",\n  \"type\": \"callable\",\n  \"signature\": \"(array_like, order='K', subok=False)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Creates a copy of the given array with the specified memory layout and options.\"\n}"}
{"api_id": 135, "api_name": "numpy.copy", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"arrayCopy\",\n  \"type\": \"function\",\n  \"signature\": \"(arr, order='K', subok=False)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Creates a deep copy of the given array, ensuring that all elements within arrays are copied, suitable for handling nested structures.\"\n}"}
{"api_id": 135, "api_name": "numpy.copy", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"createArrayCopy\", \"type\": \"callable\", \"signature\": \"(array_like, order='K', subok=False)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a deep copy of the given array, ensuring all elements within arrays are copied, suitable for handling mutable objects.\"}"}
{"api_id": 136, "api_name": "numpy.random.normal", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"generateRandomPoints\", \"type\": \"function\", \"signature\": \"generateRandomPoints(numPoints: int, mean: float, stdDev: float) -> np.ndarray\", \"return_type\": \"np.ndarray\", \"short_description\": \"Generates an array of random points drawn from a normal distribution with a specified mean and standard deviation.\"}"}
{"api_id": 136, "api_name": "numpy.random.normal", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"generateRandomJitteredPoints\", \"type\": \"function\", \"signature\": \"generateRandomJitteredPoints(points, seed=0)\", \"return_type\": \"Tuple[np.ndarray, plt.Axes]\", \"short_description\": \"Generates a Voronoi diagram with jittered points from a given set of 2D points. Adds a slight random jitter to the points using a normal distribution before creating the Voronoi diagram.\"}"}
{"api_id": 136, "api_name": "numpy.random.normal", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"generateRandomVoronoi\", \"type\": \"function\", \"signature\": \"generateRandomVoronoi(points, seed=0)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a Voronoi diagram with added random jitter based on input points and a seed for random number generation.\"}"}
{"api_id": 136, "api_name": "numpy.random.normal", "task_id": "BigCodeBench/445", "solution": "{\n  \"name\": \"generateRandomPoints\",\n  \"type\": \"function\",\n  \"signature\": \"generateRandomPoints(numPoints, mean, stdDev, seed)\",\n  \"return_type\": \"numpy.ndarray\",\n  \"short_description\": \"Generates an array of random points drawn from a normal distribution with a specified mean and standard deviation.\"\n}"}
{"api_id": 136, "api_name": "numpy.random.normal", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"generateVoronoiDiagram\", \"type\": \"function\", \"signature\": \"generateVoronoiDiagram(points: np.ndarray, seed: int = 0) -> Tuple[Voronoi, plt.Axes]\", \"return_type\": \"Tuple[Voronoi, plt.Axes]\", \"short_description\": \"Generates a Voronoi diagram from a set of 2D points and plots it, optionally with a random seed for reproducibility.\"}"}
{"api_id": 136, "api_name": "numpy.random.normal", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"generateRandomPoints\", \"type\": \"function\", \"signature\": \"generateRandomPoints(numPoints, mean, stdDev, seed)\", \"return_type\": \"np.ndarray\", \"short_description\": \"Generates an array of random points from a normal distribution.\"}"}
{"api_id": 136, "api_name": "numpy.random.normal", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"generateNormalSamples\", \"type\": \"function\", \"signature\": \"generateNormalSamples(loc, scale, size=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generate random samples from a normal (Gaussian) distribution.\"}"}
{"api_id": 136, "api_name": "numpy.random.normal", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"generateVoronoiDiagram\", \"type\": \"function\", \"signature\": \"generateVoronoiDiagram(points, seed=0)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a Voronoi diagram from a set of 2D points, optionally with random jitter.\"}"}
{"api_id": 136, "api_name": "numpy.random.normal", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"generateRandomPoints\", \"type\": \"function\", \"signature\": \"(count, min_value, max_value)\", \"return_type\": \"np.ndarray\", \"short_description\": \"Generates an array of random points within a specified range.\"}"}
{"api_id": 136, "api_name": "numpy.random.normal", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"generateVoronoiDiagram\", \"type\": \"callable\", \"signature\": \"(points, seed=0)\", \"return_type\": \"tuple(Voronoi, plt.Axes)\", \"short_description\": \"Generates a Voronoi diagram from a set of 2D points, with an optional seed for reproducibility.\"}"}
{"api_id": 136, "api_name": "numpy.random.normal", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generate_random_samples\", \"type\": \"function\", \"signature\": \"generate_random_samples(distribution_type, parameters, size)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Generates random samples from a specified statistical distribution.\"}"}
{"api_id": 136, "api_name": "numpy.random.normal", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generateRandomNormal\", \"type\": \"callable\", \"signature\": \"generateRandomNormal(loc=0.0, scale=1.0, size=None)\", \"return_type\": \"ndarray or scalar\", \"short_description\": \"Generate random samples from a normal (Gaussian) distribution.\"}"}
{"api_id": 136, "api_name": "numpy.random.normal", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generate_time_series\", \"type\": \"callable\", \"signature\": \"generate_time_series(length, mean, variance, trend, seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a synthetic time series data with a specified length, mean, variance, trend, and optional seed for random number generation.\"}"}
{"api_id": 136, "api_name": "numpy.random.normal", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generate_random_samples\", \"type\": \"callable\", \"signature\": \"generate_random_samples(distribution_type, params, size=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates random samples from a specified statistical distribution.\"}"}
{"api_id": 136, "api_name": "numpy.random.normal", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generate_time_series\", \"type\": \"function\", \"signature\": \"generate_time_series(length, mean, std_dev, trend, seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a synthetic time series data with a normal distribution and optional trend.\"}"}
{"api_id": 136, "api_name": "numpy.random.normal", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generate_random_timeseries\", \"type\": \"function\", \"signature\": \"generate_random_timeseries(length, mean, std_dev, trend, seed=None)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Generates a random time series with Gaussian noise and a linear trend.\"}"}
{"api_id": 136, "api_name": "numpy.random.normal", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generateNormalDistribution\", \"type\": \"function\", \"signature\": \"generate_normal_distribution(mean, std_dev, size=None)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Generates random samples from a normal (Gaussian) distribution.\"}"}
{"api_id": 136, "api_name": "numpy.random.normal", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generateRandomNormal\", \"type\": \"function\", \"signature\": \"generateRandomNormal(mean, stdDev, size)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates random numbers from a normal distribution with specified mean and standard deviation.\"}"}
{"api_id": 136, "api_name": "numpy.random.normal", "task_id": "BigCodeBench/486", "solution": "{\n  \"name\": \"generate_normal_samples\",\n  \"type\": \"callable\",\n  \"signature\": \"generate_normal_samples(mean, std_dev, size)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Generates an array of random samples drawn from a normal (Gaussian) distribution with specified mean and standard deviation.\"\n}"}
{"api_id": 136, "api_name": "numpy.random.normal", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"generateRandomData(type, size, loc, scale)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates an array of random data from a specified distribution.\"}"}
{"api_id": 137, "api_name": "numpy.random.shuffle", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generate_random_data\", \"type\": \"callable\", \"signature\": \"generate_random_data(N, CATEGORIES, seed)\", \"return_type\": \"tuple(DataFrame, Axes)\", \"short_description\": \"Generates a DataFrame with random data and plots it with matplotlib.\"}"}
{"api_id": 137, "api_name": "numpy.random.shuffle", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generate_random_data\", \"type\": \"function\", \"signature\": \"generate_random_data(N, CATEGORIES, seed)\", \"return_type\": \"tuple(DataFrame, Axes)\", \"short_description\": \"Generates a DataFrame with random data and plots it with categories, using a specified seed for reproducibility.\"}"}
{"api_id": 137, "api_name": "numpy.random.shuffle", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateRandomSeries\", \"type\": \"function\", \"signature\": \"generate_random_series(length, seed=None)\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a random series of specified length with optional seed for reproducibility.\"}"}
{"api_id": 137, "api_name": "numpy.random.shuffle", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generate_random_data\", \"type\": \"function\", \"signature\": \"generate_random_data(num_samples, categories, seed=None)\", \"return_type\": \"tuple(DataFrame, Axes)\", \"short_description\": \"Generates a DataFrame with random data and plots it with categories.\"}"}
{"api_id": 137, "api_name": "numpy.random.shuffle", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateRandomMatrix\", \"type\": \"function\", \"signature\": \"generate_random_matrix(rows, cols)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a random matrix with specified dimensions.\"}"}
{"api_id": 137, "api_name": "numpy.random.shuffle", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateRandomSequence\", \"type\": \"callable\", \"signature\": \"generateRandomSequence(length, dtype='int')\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a random sequence of a specified length and data type.\"}"}
{"api_id": 137, "api_name": "numpy.random.shuffle", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateRandomCategories\", \"type\": \"function\", \"signature\": \"N=100, CATEGORIES=['A', 'B', 'C', 'D', 'E'], seed=42\", \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\", \"short_description\": \"Generates a DataFrame with random data and plots it with categories.\"}"}
{"api_id": 137, "api_name": "numpy.random.shuffle", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generate_random_categories\", \"type\": \"function\", \"signature\": \"(N, CATEGORIES, seed)\", \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\", \"short_description\": \"Generates a DataFrame with random data and plots it with scatter plots for each category.\"}"}
{"api_id": 137, "api_name": "numpy.random.shuffle", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateRandomMatrix\", \"type\": \"callable\", \"signature\": \"generateRandomMatrix(rows, cols, min_val=0, max_val=100)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a random matrix with specified dimensions and value range.\"}"}
{"api_id": 137, "api_name": "numpy.random.shuffle", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generate_random_sequence\", \"type\": \"callable\", \"signature\": \"generate_random_sequence(length, data_type, seed=None)\", \"return_type\": \"list\", \"short_description\": \"Generates a random sequence of specified length and data type.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"createMatrix\", \"type\": \"function\", \"signature\": \"createMatrix(L, M, N)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a matrix of dimensions MxN with elements populated from the list L.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"generateMatrix\", \"type\": \"callable\", \"signature\": \"generateMatrix(L, M, N)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a matrix with the given dimensions and fills it with values from L. The matrix is then normalized to match the SPL of the audio file.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"generateMatrix\", \"type\": \"function\", \"signature\": \"generateMatrix(L, M, N)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a matrix of dimensions MxN with elements initialized to L.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"createMatrix\", \"type\": \"function\", \"signature\": \"createMatrix(L, M, N)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a matrix with the given dimensions and initializes it with the provided list.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"createMatrix\", \"type\": \"function\", \"signature\": \"createMatrix(L, M, N)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a matrix of shape (M, N) with elements from L and returns it.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"generateMatrix\", \"type\": \"function\", \"signature\": \"generateMatrix(L, M, N)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a matrix with the given dimensions and populates it with values from L. The matrix is then normalized to match a specified sound pressure level (SPL) derived from an audio file.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"createMatrix\", \"type\": \"function\", \"signature\": \"createMatrix(L, M, N)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a matrix with the specified dimensions and fills it with values from the list L.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"generateMatrix\", \"type\": \"function\", \"signature\": \"generateMatrix(L, M, N)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a matrix of dimensions MxN with elements from L.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"create_matrix\",\n  \"type\": \"function\",\n  \"signature\": \"create_matrix(L, M, N)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Creates a matrix of dimensions MxN with elements from the list L.\"\n}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"generateMatrix\", \"type\": \"function\", \"signature\": \"(L, M, N) => matrix\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a matrix with specified dimensions and optionally normalizes it to match a given SPL.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a new array from the given object, with optional parameters to specify its properties.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a NumPy array from the given object, with optional parameters to specify its properties.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a new array from the given object, with optional parameters to specify its properties.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a new array with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a new array from the given object.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a new array with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a new array from the given object. Parameters allow specifying the data type, memory layout, and other attributes.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a NumPy array from the provided object with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/241", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with various options for customization.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/241", "solution": "{\n  \"name\": \"createArray\",\n  \"type\": \"function\",\n  \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Creates a new array from the given object with optional parameters to specify the array's properties.\"\n}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/241", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with customizable parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/241", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a new array with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/241", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a new array from the given object, with optional parameters to specify its properties.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/241", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a new array with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/241", "solution": "{\"name\": \"createArray\", \"type\": \"callable\", \"signature\": \"createArray(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates an array from the given object, with optional parameters to specify its properties.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/241", "solution": "{\"name\": \"createArray\", \"type\": \"callable\", \"signature\": \"createArray(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/241", "solution": "{\"name\": \"createArray\", \"type\": \"callable\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with various options for parameter customization.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/241", "solution": "{\n  \"name\": \"createArray\",\n  \"type\": \"function\",\n  \"signature\": \"createArray(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Create an array with customizable parameters.\"\n}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a new array from the given object. It allows specifying various parameters to control the creation of the array.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a new array from the given object, with optional parameters to specify the data type, copy behavior, memory order, and other properties.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a new array from the given object, with optional parameters to specify its properties.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a new array from the given object, with optional parameters to specify its properties.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"create_array(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with customizable parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a new array from the given object, with optional parameters to specify its data type, memory layout, and other properties.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates an array from the given object, with optional parameters to specify the data type, memory layout, and other properties.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"create_array(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a new array from the given object, with optional parameters to specify the data type, copy behavior, memory order, and more.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates an array from the given object, with optional parameters to specify the data type, copy behavior, memory layout, sub-classing, minimum dimensions, and a reference object for compatibility.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a NumPy array from the provided object, specifying optional parameters for array creation.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with customizable parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"createSegmentedImage\", \"type\": \"function\", \"signature\": \"createSegmentedImage(imagePath, nClusters, randomSeed)\", \"return_type\": \"tuple\", \"short_description\": \"Creates a segmented image from a given image file using k-means clustering and optionally saves each cluster as a separate image file.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create a new array from the given object, with optional parameters to specify the data type, memory layout, and other attributes.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a new array from the given object, with optional parameters to specify its properties.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"create_array\", \"type\": \"function\", \"signature\": \"create_array(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"generateRandomData(N=100, CATEGORIES=['A', 'B', 'C', 'D', 'E'], seed=42)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a DataFrame and plot for random data categorized.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"create_array\", \"type\": \"function\", \"signature\": \"create_array(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a new array with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"createArray\", \"type\": \"callable\", \"signature\": \"createArray(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with various parameters to customize its behavior.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a new array from the given object. Parameters allow specifying the data type, memory layout, and other options.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a NumPy array from the provided object, with optional parameters to specify the data type, copy behavior, memory order, sub-class handling, minimum dimensions, and a reference object for compatibility.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"create_array(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a new array from the given object.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a new array from the given object, with optional parameters to specify its properties.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/865", "solution": "{\n  \"name\": \"normalizeData\",\n  \"type\": \"function\",\n  \"signature\": \"normalize_data(data)\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Normalizes the counts and weights in the input data using z-score and Min-Max scaling respectively, and returns the results in a DataFrame.\"\n}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"normalizeData\", \"type\": \"function\", \"signature\": \"normalize_data(data)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Normalizes the counts and weights in the provided data using z-score for counts and Min-Max scaling for weights, then returns a DataFrame with the normalized data.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a new array with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"normalizeData\", \"type\": \"function\", \"signature\": \"normalizeData(data)\", \"return_type\": \"DataFrame\", \"short_description\": \"Normalizes the counts and weights in the input data using z-score and Min-Max scaling, respectively, and returns a DataFrame with the normalized data.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a NumPy array from the given object, with optional parameters to specify the data type, copying behavior, memory order, sub-class handling, minimum dimensions, and a reference object for compatibility.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/865", "solution": "{\n  \"name\": \"createArray\",\n  \"type\": \"function\",\n  \"signature\": \"createArray(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Creates a NumPy array from the given object, with optional parameters to specify its properties.\"\n}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"normalizeData\", \"type\": \"function\", \"signature\": \"normalizeData(data)\", \"return_type\": \"DataFrame\", \"short_description\": \"Normalizes the counts and weights of items in the input data and returns a DataFrame with the normalized data.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"normalizeData\", \"type\": \"function\", \"signature\": \"normalizeData(data)\", \"return_type\": \"DataFrame\", \"short_description\": \"Normalizes the counts and weights of items in the provided data using z-score for counts and MinMax scaling for weights.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"calculateFuturePrices\", \"type\": \"function\", \"signature\": \"calculateFuturePrices(df)\", \"return_type\": \"list\", \"short_description\": \"Calculates future prices based on historical data using a linear regression model.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"create_array(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a new array from the given object. This function is useful for initializing arrays with data from various sources.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with various options for customization.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates an array with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"calculateFuturePrices\", \"type\": \"function\", \"signature\": \"(df)\", \"return_type\": \"list\", \"short_description\": \"Calculates future prices based on historical data using a linear regression model and plots the results.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"create_array(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with flexible parameters for customization.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"calculateFuturePrices\", \"type\": \"function\", \"signature\": \"calculateFuturePrices(df)\", \"return_type\": \"list\", \"short_description\": \"Calculates future prices based on historical data using a linear regression model.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/1057", "solution": "{\"name\": \"createArrayFromPairs\", \"type\": \"function\", \"signature\": \"createArrayFromPairs(pairs)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a NumPy array from a list of string pairs, where each pair represents an association between elements from two lists.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/1057", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"create_array(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a new array from the given object.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/1057", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/1057", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create a NumPy array from the given object with specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/1057", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a NumPy array from the given object, with optional parameters to specify its properties.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/1057", "solution": "{\"name\": \"createArrayFromPairs\", \"type\": \"function\", \"signature\": \"createArrayFromPairs(pairs: List[str], numColumns: int) -> ndarray\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a NumPy array from a list of string pairs, organizing them into the specified number of columns.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/1057", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create an array with customizable parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/1057", "solution": "{\"name\": \"createArray\", \"type\": \"function\", \"signature\": \"createArray(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create a NumPy array with the specified parameters.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/1057", "solution": "{\"name\": \"createNumpyArray\", \"type\": \"function\", \"signature\": \"create_numpy_array(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Create a NumPy array from the given object, specifying optional parameters for the array creation.\"}"}
{"api_id": 138, "api_name": "numpy.array", "task_id": "BigCodeBench/1057", "solution": "{\"name\": \"createArrayFromPairs\", \"type\": \"function\", \"signature\": \"createArrayFromPairs(pairs)\", \"return_type\": \"ndarray\", \"short_description\": \"Creates a NumPy array from pairs of elements, useful for generating combinations.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculate_absolute_values\", \"type\": \"function\", \"signature\": \"calculate_absolute_values(data, axis=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the absolute values of elements along a specified axis of the input data.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"calculate_absolute_values\",\n  \"type\": \"function\",\n  \"signature\": \"\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Calculates the absolute value of elements in an input array.\"\n}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculate_absolute_values\", \"type\": \"function\", \"signature\": \"calculate_absolute_values(data, column, outlier_z_score)\", \"return_type\": \"tuple\", \"short_description\": \"Identifies and removes outliers from a specified column in a dataset based on Z-scores and plots the data before and after removal.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculate_absolute_values\", \"type\": \"function\", \"signature\": \"calculate_absolute_values(data, column, outlier_z_score)\", \"return_type\": \"tuple(list(float), list(float), list(int))\", \"short_description\": \"Identifies and removes outliers from the data based on Z-scores and plots the results.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculate_absolute_values\", \"type\": \"callable\", \"signature\": \"x\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the absolute values of elements in the input array.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculate_absolute\", \"type\": \"function\", \"signature\": [], \"return_type\": \"ndarray\", \"short_description\": \"Calculate the absolute value of elements in an input array.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"calculate_absolute_values\",\n  \"type\": \"function\",\n  \"signature\": \"(array_like, /, [out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True])\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Calculate the absolute value of elements in the input array.\"\n}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculate_absolute_values\", \"type\": \"function\", \"signature\": \"calculate_absolute_values(data, column, outlier_z_score)\", \"return_type\": \"tuple(original_data, cleaned_data, outliers)\", \"short_description\": \"Identifies and removes outliers from a specified column of a dataset based on Z-scores, and returns the original and cleaned data along with the indices of the outliers.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculate_absolute_values\", \"type\": \"function\", \"signature\": \"calculate_absolute_values(data, column, outlier_z_score)\", \"return_type\": \"tuple(original_data, cleaned_data, outliers)\", \"short_description\": \"This function calculates the absolute values of the Z-scores for outlier detection and filtering in a dataset.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculate_absolute_values\", \"type\": \"function\", \"signature\": \"calculate_absolute_values(data, column, outlier_z_score)\", \"return_type\": \"tuple\", \"short_description\": \"Identifies and removes outliers from a specified column of a dataset based on Z-scores, and returns the original and cleaned data for plotting.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculate_spl\", \"type\": \"function\", \"signature\": \"calculate_spl(data, samplerate)\", \"return_type\": \"float\", \"short_description\": \"Calculate the sound pressure level (SPL) of the audio signal.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculateSpectralCentroid\", \"type\": \"function\", \"signature\": \"calculateSpectralCentroid(data, samplerate)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the spectral centroid of an audio signal.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculateAbsolute\", \"type\": \"function\", \"signature\": \"x\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the absolute value element-wise for a given input array.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculateSpl\", \"type\": \"function\", \"signature\": \"calculateSpl(matrix)\", \"return_type\": \"float\", \"short_description\": \"Calculates the sound pressure level (SPL) of a given matrix.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"calculate_spl\",\n  \"type\": \"function\",\n  \"signature\": \"calculate_spl(data, samplerate)\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculate the sound pressure level (SPL) of audio data.\"\n}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculateAbsolute\", \"type\": \"function\", \"signature\": \"calculate_absolute(x)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the absolute value of elements in the input array.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculateAmplitude\", \"type\": \"callable\", \"signature\": \"x\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the amplitude of the input array element-wise.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"calculate_sound_pressure_level\",\n  \"type\": \"function\",\n  \"signature\": \"(data, samplerate)\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculate the Sound Pressure Level (SPL) from audio data.\"\n}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculateMatrix\", \"type\": \"function\", \"signature\": \"calculateMatrix(matrix, M, N)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a matrix of size MxN from a given matrix and normalizes it to match the SPL of the audio file.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculateSoundPressureLevel\", \"type\": \"function\", \"signature\": \"(data, [ref_value])\", \"return_type\": \"float\", \"short_description\": \"Calculate the sound pressure level (SPL) of an audio signal.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/267", "solution": "{\n  \"name\": \"calculate_absolute\",\n  \"type\": \"function\",\n  \"signature\": \"calculate_absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Calculate the absolute value element-wise for the given input.\"\n}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateAbsolute\", \"type\": \"callable\", \"signature\": \"x\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the absolute value of elements in the input array.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculate_fft\", \"type\": \"function\", \"signature\": \"calculate_fft(signal)\", \"return_type\": \"ndarray\", \"short_description\": \"Perform a Fast Fourier Transform (FFT) on the provided signal and return the magnitude spectrum.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/267", "solution": "{\n  \"name\": \"calculate_abs\",\n  \"type\": \"function\",\n  \"signature\": \"calculate_abs(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Calculate the absolute value element-wise of the input array.\"\n}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculate_absolute_values\", \"type\": \"callable\", \"signature\": \"x\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the absolute value of elements in the input array.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculate_absolute\", \"type\": \"function\", \"signature\": \"x\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the absolute value of elements in the input array.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateAbsolute\", \"type\": \"callable\", \"signature\": \"calculateAbsolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the absolute value element-wise for the given input array.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/267", "solution": "{\n  \"name\": \"calculate_absolute\",\n  \"type\": \"function\",\n  \"signature\": \"calculate_absolute(x)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Calculates the absolute value of elements in the input array.\"\n}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculate_absolute\", \"type\": \"function\", \"signature\": \"(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the absolute value element-wise of the input array.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculate_magnitude\", \"type\": \"callable\", \"signature\": \"array_like\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the magnitude of the input array using the Fast Fourier Transform (FFT).\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/915", "solution": "{\"name\": \"calculateAbsolute\", \"type\": \"callable\", \"signature\": \"x\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the absolute value of elements in the input array.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/915", "solution": "{\"name\": \"calculateAbsolute\", \"type\": \"function\", \"signature\": \"calculate_absolute(x)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the absolute value of elements in the input array.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/915", "solution": "{\n  \"name\": \"calculateAbsolute\",\n  \"type\": \"function\",\n  \"signature\": \"calculateAbsolute(x)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Calculates the absolute value of elements in the input array.\"\n}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/915", "solution": "{\"name\": \"calculateAbsolute\", \"type\": \"function\", \"signature\": \"calculate_absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the absolute value element-wise.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/915", "solution": "{\"name\": \"calculateAbsoluteValues\", \"type\": \"function\", \"signature\": \"calculateAbsoluteValues(array)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the absolute values of elements in a given array.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/915", "solution": "{\"name\": \"calculateAbsoluteValues\", \"type\": \"function\", \"signature\": \"calculateAbsoluteValues(array)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the absolute value of elements in a given array.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/915", "solution": "{\"name\": \"calculateAbsoluteValues\", \"type\": \"callable\", \"signature\": \"calculate_absolute_values(x)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the absolute values of elements in the input array.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/915", "solution": "{\"name\": \"calculateAbsolute\", \"type\": \"function\", \"signature\": \"x\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the absolute value of elements in the input array.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/915", "solution": "{\"name\": \"calculateAbsolute\", \"type\": \"function\", \"signature\": \"x\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the absolute value of elements in an array.\"}"}
{"api_id": 139, "api_name": "numpy.abs", "task_id": "BigCodeBench/915", "solution": "{\"name\": \"calculateAbsolute\", \"type\": \"function\", \"signature\": \"calculate_absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the absolute value element-wise for a given input array.\"}"}
{"api_id": 140, "api_name": "numpy.pi", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculate_fft\", \"type\": \"function\", \"signature\": \"calculate_fft(signal: np.array, sample_rate: int) -> np.array\", \"return_type\": \"np.array\", \"short_description\": \"Perform a Fast Fourier Transform (FFT) on the given signal with the specified sample rate.\"}"}
{"api_id": 140, "api_name": "numpy.pi", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateAverage\", \"type\": \"function\", \"signature\": \"calculate_average(data: dict, key: str) -> float\", \"return_type\": \"float\", \"short_description\": \"Calculates the average value of a specified key in a dictionary.\"}"}
{"api_id": 140, "api_name": "numpy.pi", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculate_fft\", \"type\": \"transformation\", \"signature\": \"(signal, sample_rate)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Performs a Fast Fourier Transform (FFT) on the given signal with the specified sample rate.\"}"}
{"api_id": 140, "api_name": "numpy.pi", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculate_fft\", \"type\": \"transformation\", \"signature\": \"calculate_fft(signal, sample_rate)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Performs a Fast Fourier Transform (FFT) on the provided signal and returns the magnitude spectrum.\"}"}
{"api_id": 140, "api_name": "numpy.pi", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculate_fft\", \"type\": \"function\", \"signature\": \"calculate_fft(signal, sample_rate=8000)\", \"return_type\": \"tuple(numpy.ndarray, matplotlib.axes._axes.Axes)\", \"short_description\": \"Perform a Fast Fourier Transform (FFT) on the given signal and plot the result. Returns the FFT array and the plot axes.\"}"}
{"api_id": 140, "api_name": "numpy.pi", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculate_fft\", \"type\": \"function\", \"signature\": \"calculate_fft(signal, sample_rate)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Performs a Fast Fourier Transform (FFT) on the provided signal and returns the frequency spectrum.\"}"}
{"api_id": 140, "api_name": "numpy.pi", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculate_fft\", \"type\": \"function\", \"signature\": \"calculate_fft(signal)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Performs a Fast Fourier Transform (FFT) on the given signal.\"}"}
{"api_id": 140, "api_name": "numpy.pi", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateFft\", \"type\": \"function\", \"signature\": \"calculate_fft(signal)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Perform a Fast Fourier Transform (FFT) on the provided signal.\"}"}
{"api_id": 140, "api_name": "numpy.pi", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculate_fft\", \"type\": \"function\", \"signature\": \"def calculate_fft(signal, sample_rate=8000):\", \"return_type\": \"tuple(np.ndarray, plt.Axes)\", \"short_description\": \"Performs a Fast Fourier Transform (FFT) on the provided signal and plots the result.\"}"}
{"api_id": 140, "api_name": "numpy.pi", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculate_fft\", \"type\": \"function\", \"signature\": \"def calculate_fft(signal, sample_rate=8000)\", \"return_type\": \"tuple(numpy.ndarray, matplotlib.axes._axes.Axes)\", \"short_description\": \"Perform a Fast Fourier Transform (FFT) on the given signal and plot the result.\"}"}
{"api_id": 140, "api_name": "numpy.pi", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"calculateHarmonics\", \"type\": \"function\", \"signature\": \"calculateHarmonics(data, frequency)\", \"return_type\": \"List[float]\", \"short_description\": \"Calculates the amplitudes of the first three harmonics for a given time-series data based on its frequency.\"}"}
{"api_id": 140, "api_name": "numpy.pi", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"generateRandomArray\", \"type\": \"function\", \"signature\": \"(length, min, max)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random numbers within a specified range.\"}"}
{"api_id": 140, "api_name": "numpy.pi", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"calculateStandardDeviation\", \"type\": \"function\", \"signature\": \"def calculateStandardDeviation(data_array)\", \"return_type\": \"float\", \"short_description\": \"Calculates the standard deviation of a given array of data.\"}"}
{"api_id": 140, "api_name": "numpy.pi", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"calculateFibonacci\", \"type\": \"function\", \"signature\": \"n\", \"return_type\": \"list\", \"short_description\": \"Calculates the Fibonacci sequence up to the nth number.\"}"}
{"api_id": 140, "api_name": "numpy.pi", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"calculateFibonacci\", \"type\": \"function\", \"signature\": \"calculateFibonacci(n: int) -> List[int]\", \"return_type\": \"List[int]\", \"short_description\": \"Calculates the first n Fibonacci numbers.\"}"}
{"api_id": 140, "api_name": "numpy.pi", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"calculatePiValue\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"float\", \"short_description\": \"Returns the value of pi, which is a mathematical constant approximately equal to 3.14159.\"}"}
{"api_id": 140, "api_name": "numpy.pi", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"calculateMean\", \"type\": \"function\", \"signature\": \"(array)\", \"return_type\": \"float\", \"short_description\": \"Calculates the mean of the elements in the given array.\"}"}
{"api_id": 140, "api_name": "numpy.pi", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"calculateStandardDeviation\", \"type\": \"function\", \"signature\": \"array_data\", \"return_type\": \"float\", \"short_description\": \"Calculate the standard deviation of the given array data.\"}"}
{"api_id": 140, "api_name": "numpy.pi", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"calculateFibonacci\", \"type\": \"function\", \"signature\": \"calculateFibonacci(n: int) -> list[int]\", \"return_type\": \"list[int]\", \"short_description\": \"Calculates the first n Fibonacci numbers.\"}"}
{"api_id": 140, "api_name": "numpy.pi", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"generateRandomSineWave\", \"type\": \"function\", \"signature\": \"generateRandomSineWave(length=100, noise=0.2)\", \"return_type\": \"list\", \"short_description\": \"Generates a random sine wave with specified length and noise level.\"}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generateRandomPattern\", \"type\": \"function\", \"signature\": \"generateRandomPattern(patternType, length, options)\", \"return_type\": \"array\", \"short_description\": \"Generates a random pattern based on the specified type and length. Options for the pattern can be provided.\"}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"generateRandomWalk\",\n  \"type\": \"function\",\n  \"signature\": \"generateRandomWalk(elements: int, seed: int = 0) -> Tuple[Dict, plt.Axes]\",\n  \"return_type\": \"Tuple[Dict, plt.Axes]\",\n  \"short_description\": \"Generates a random walk based on the given number of elements and a seed for reproducibility. Returns descriptive statistics and a plot of the random walk.\"\n}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generateRandomPattern\", \"type\": \"function\", \"signature\": \"generateRandomPattern(patternType, length, options)\", \"return_type\": \"array\", \"short_description\": \"Generates a random pattern based on the specified type and length.\"}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"generateRandomPattern\",\n  \"type\": \"function\",\n  \"signature\": \"generateRandomPattern(patternType, length, seed=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Generates a random pattern based on the specified type and length.\"\n}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generateRandomPattern\", \"type\": \"function\", \"signature\": \"generateRandomPattern(patternType, size, **kwargs)\", \"return_type\": \"ndarray\", \"short_description\": \"Generates a random pattern based on the specified type and size.\"}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"generateRandomSamples\",\n  \"type\": \"function\",\n  \"signature\": \"generateRandomSamples(a, size=None, replace=True, p=None)\",\n  \"return_type\": \"samples\",\n  \"short_description\": \"Generates a random sample from a given 1-D array or list with optional probabilities and size.\"\n}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"generateRandomSequence\",\n  \"type\": \"function\",\n  \"signature\": \"generateRandomSequence(length, dataType, seed=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Generates a random sequence of a specified length and data type.\"\n}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generateRandomPattern\", \"type\": \"callable\", \"signature\": \"generateRandomPattern(patternType, length, options=None)\", \"return_type\": \"list\", \"short_description\": \"Generates a random pattern based on the specified type and length. The pattern can be a sequence of random integers or a random string.\"}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generateRandomArray\", \"type\": \"function\", \"signature\": \"generateRandomArray(length, dataType, minValue, maxValue)\", \"return_type\": \"array\", \"short_description\": \"Generates a random array of specified length, data type, and value range.\"}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generateRandomWalk\", \"type\": \"function\", \"signature\": \"generate_random_walk(elements, seed=0)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a random walk based on given parameters.\"}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateRandomSample\", \"type\": \"function\", \"signature\": \"generateRandomSample(a, size=None, replace=True, p=None)\", \"return_type\": \"single item or ndarray\", \"short_description\": \"Generates a random sample from a given 1-D array or list.\"}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateRandomSample\", \"type\": \"function\", \"signature\": \"generateRandomSample(a, size=None, replace=True, p=None)\", \"return_type\": \"single item or ndarray\", \"short_description\": \"Generates a random sample from a given 1-D array or integer.\"}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateRandomSample\", \"type\": \"function\", \"signature\": \"generateRandomSample(a, size=None, replace=True, p=None)\", \"return_type\": \"single item or ndarray\", \"short_description\": \"Generates a random sample from a given 1-D array, with options for size, replacement, and probabilities.\"}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateRandomSample\", \"type\": \"function\", \"signature\": \"a, size=None, replace=True, p=None\", \"return_type\": \"samples\", \"short_description\": \"Generates a random sample from a given 1-D array or integer.\"}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateRandomSample\", \"type\": \"function\", \"signature\": \"generateRandomSample(a, size=None, replace=True, p=None)\", \"return_type\": \"samples\", \"short_description\": \"Generates a random sample from a given 1-D array, list, or integer. This function provides flexibility in specifying the size, replacement, and probabilities for the sample generation.\"}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateRandomSample\", \"type\": \"function\", \"signature\": \"generateRandomSample(a, size=None, replace=True, p=None)\", \"return_type\": \"single item or ndarray\", \"short_description\": \"Generates a random sample from a given 1-D array, with optional parameters for size, replacement, and probabilities.\"}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateRandomSample\", \"type\": \"callable\", \"signature\": \"generateRandomSample(a, size=None, replace=True, p=None)\", \"return_type\": \"samples\", \"short_description\": \"Generates a random sample from a given 1-D array-like or int.\"}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateRandomSample\", \"type\": \"function\", \"signature\": \"(a, size=None, replace=True, p=None)\", \"return_type\": \"single item or ndarray\", \"short_description\": \"Generates a random sample from a given 1-D array or list. It supports both uniform and non-uniform distributions, as well as sampling with and without replacement.\"}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/477", "solution": "{\n  \"name\": \"generateRandomSample\",\n  \"type\": \"function\",\n  \"signature\": \"generateRandomSample(a, size=None, replace=True, p=None)\",\n  \"return_type\": \"single item or ndarray\",\n  \"short_description\": \"Generates a random sample from a given 1-D array, with optional parameters for size, replacement, and probabilities.\"\n}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/477", "solution": "{\n  \"name\": \"generateRandomSample\",\n  \"type\": \"function\",\n  \"signature\": \"(a, size=None, replace=True, p=None)\",\n  \"return_type\": \"single item or ndarray\",\n  \"short_description\": \"Generates a random sample from a given 1-D array, with optional parameters for size, replacement, and probabilities.\"\n}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"generateRandomData(options)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random data based on provided options.\"}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/760", "solution": "{\n  \"name\": \"generate_random_data\",\n  \"type\": \"function\",\n  \"signature\": \"generate_random_data(num_entries, latin_names, other_names, start_year, end_year, email_domain, rng_seed=None)\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a DataFrame with random entries including names, dates of birth, and emails.\"\n}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomPeople\", \"type\": \"function\", \"signature\": \"generateRandomPeople(count: int, latinNames: list, otherNames: list, startYear: int, endYear: int, emailDomain: str, rngSeed: int)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing random people data, including names, dates of birth, and emails.\"}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"generateRandomData(size: int, latinNames: list, otherNames: list, startYear: int, endYear: int, emailDomain: str, rngSeed: int)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame with random data including names, dates of birth, and emails.\"}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/760", "solution": "{\n  \"name\": \"generate_random_data\",\n  \"type\": \"function\",\n  \"signature\": \"(start_year=1980, end_year=2000, email_domain='example.com', latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'], other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], rng_seed=None)\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a DataFrame containing random data including names, dates of birth, and emails.\"\n}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"generateRandomData(size: int, latinNames: List[str], otherNames: List[str], startYear: int, endYear: int, emailDomain: str, rngSeed: Optional[int] = None) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame with random data including names, dates of birth, and emails based on provided parameters.\"}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomData\", \"type\": \"callable\", \"signature\": \"generateRandomData(startYear=1980, endYear=2000, emailDomain='example.com', latinNames=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'], otherNames=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], rngSeed=None)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random data including names, dates of birth, and emails based on provided parameters.\"}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/760", "solution": "{\n  \"name\": \"generate_random_people\",\n  \"type\": \"function\",\n  \"signature\": \"generate_random_people(num_people, start_year, end_year, email_domain, latin_names, other_names, rng_seed=None)\",\n  \"return_type\": \"pandas.DataFrame\",\n  \"short_description\": \"Generates a DataFrame containing randomly-generated people data, including names, dates of birth, and email addresses.\"\n}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"generateRandomData(size, latinNames, otherNames, startYear, endYear, emailDomain, rngSeed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random data including names, dates of birth, and emails.\"}"}
{"api_id": 141, "api_name": "numpy.random.choice", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomData\", \"type\": \"callable\", \"signature\": \"start_year=1980, end_year=2000, email_domain='example.com', latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'], other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], rng_seed=None\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame with random data based on provided parameters.\"}"}
{"api_id": 142, "api_name": "numpy.random.uniform", "task_id": "BigCodeBench/187", "solution": "{\"name\": \"generateRandomPoints\", \"type\": \"function\", \"signature\": \"generateRandomPoints(bounds: dict, cities: list)\", \"return_type\": \"GeoDataFrame\", \"short_description\": \"Generates a GeoDataFrame containing randomly generated points within specified bounds for a list of cities.\"}"}
{"api_id": 142, "api_name": "numpy.random.uniform", "task_id": "BigCodeBench/187", "solution": "{\"name\": \"generateRandomPoints\", \"type\": \"function\", \"signature\": \"generateRandomPoints(lonRange: (number, number), latRange: (number, number), numberOfPoints: number, cities: string[])\", \"return_type\": \"GeoDataFrame\", \"short_description\": \"Generates a GeoDataFrame containing random points within specified longitude and latitude ranges, optionally including specified cities.\"}"}
{"api_id": 142, "api_name": "numpy.random.uniform", "task_id": "BigCodeBench/187", "solution": "{\"name\": \"generateRandomPoints\", \"type\": \"function\", \"signature\": \"generateRandomPoints(options: object, cities: array)\", \"return_type\": \"GeoDataFrame\", \"short_description\": \"Generates a GeoDataFrame containing randomly generated points within specified geographic coordinates for a list of cities.\"}"}
{"api_id": 142, "api_name": "numpy.random.uniform", "task_id": "BigCodeBench/187", "solution": "{\"name\": \"generateRandomPoints\", \"type\": \"callable\", \"signature\": \"generateRandomPoints(bounds: dict, cities: list)\", \"return_type\": \"GeoDataFrame\", \"short_description\": \"Generates a GeoDataFrame containing randomly placed points within specified bounds for a list of cities.\"}"}
{"api_id": 142, "api_name": "numpy.random.uniform", "task_id": "BigCodeBench/187", "solution": "{\"name\": \"generateRandomPoints\", \"type\": \"function\", \"signature\": \"generateRandomPoints(bounds: dict, cityList: list)\", \"return_type\": \"GeoDataFrame\", \"short_description\": \"Generates a GeoDataFrame containing randomly placed points within specified bounds for a list of cities.\"}"}
{"api_id": 142, "api_name": "numpy.random.uniform", "task_id": "BigCodeBench/187", "solution": "{\"name\": \"generateRandomPoints\", \"type\": \"function\", \"signature\": \"generateRandomPoints(bounds: dict, cities: list)\", \"return_type\": \"GeoDataFrame\", \"short_description\": \"Generates a GeoDataFrame containing randomly placed points within specified bounds for a list of cities.\"}"}
{"api_id": 142, "api_name": "numpy.random.uniform", "task_id": "BigCodeBench/187", "solution": "{\"name\": \"generateRandomPoints\", \"type\": \"function\", \"signature\": \"generateRandomPoints(bounds: dict, cities: list)\", \"return_type\": \"GeoDataFrame\", \"short_description\": \"Generates a GeoDataFrame containing randomly placed points within specified bounds for a list of cities.\"}"}
{"api_id": 142, "api_name": "numpy.random.uniform", "task_id": "BigCodeBench/187", "solution": "{\"name\": \"generateRandomPoints\", \"type\": \"function\", \"signature\": \"generateRandomPoints(bounds: dict, cityNames: list)\", \"return_type\": \"GeoDataFrame\", \"short_description\": \"Generates a GeoDataFrame containing randomly placed points within specified bounds for a list of city names.\"}"}
{"api_id": 142, "api_name": "numpy.random.uniform", "task_id": "BigCodeBench/187", "solution": "{\"name\": \"generateRandomPoints\", \"type\": \"function\", \"signature\": \"generateRandomPoints(bounds: dict, cities: list)\", \"return_type\": \"GeoDataFrame\", \"short_description\": \"Generates a GeoDataFrame containing randomly placed points within specified bounds for a list of cities.\"}"}
{"api_id": 142, "api_name": "numpy.random.uniform", "task_id": "BigCodeBench/187", "solution": "{\"name\": \"generateRandomPoints\", \"type\": \"function\", \"signature\": \"generate_random_points(low_lon, high_lon, low_lat, high_lat, num_points)\", \"return_type\": \"GeoDataFrame\", \"short_description\": \"Generates a GeoDataFrame containing randomly placed points within specified longitude and latitude ranges.\"}"}
{"api_id": 143, "api_name": "numpy.exp", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"calculateExponential\", \"type\": \"function\", \"signature\": \"calculateExponential(array, targetValue)\", \"return_type\": \"tuple\", \"short_description\": \"Calculates the exponential decay curve fit for a given target value in an array.\"}"}
{"api_id": 143, "api_name": "numpy.exp", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"calculateExponential\", \"type\": \"function\", \"signature\": \"calculateExponential(array, targetValue)\", \"return_type\": \"tuple\", \"short_description\": \"Calculates the exponential decay curve fit for a given target value in an array and visualizes the fit.\"}"}
{"api_id": 143, "api_name": "numpy.exp", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"calculateExponential\",\n  \"type\": \"function\",\n  \"signature\": \"calculateExponential(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True)\",\n  \"return_type\": \"ndarray or scalar\",\n  \"short_description\": \"Calculate the exponential of all elements in the input array.\"\n}"}
{"api_id": 143, "api_name": "numpy.exp", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"calculateExponential\", \"type\": \"function\", \"signature\": \"calculateExponential(array, targetValue)\", \"return_type\": \"tuple\", \"short_description\": \"Calculates the exponential decay curve fit for a given target value in an array and visualizes the result.\"}"}
{"api_id": 143, "api_name": "numpy.exp", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"calculateExponential\", \"type\": \"function\", \"signature\": \"calculateExponential(array, targetValue)\", \"return_type\": \"tuple\", \"short_description\": \"Calculates the exponential decay fit for a given target value in an array and plots the results.\"}"}
{"api_id": 143, "api_name": "numpy.exp", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"calculateExponential\", \"type\": \"function\", \"signature\": \"calculateExponential(array, targetValue)\", \"return_type\": \"tuple\", \"short_description\": \"Calculates the exponential decay curve fit for given array and target value, and plots the result.\"}"}
{"api_id": 143, "api_name": "numpy.exp", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"calculateExponential\", \"type\": \"function\", \"signature\": \"(x)\", \"return_type\": \"ndarray or scalar\", \"short_description\": \"Calculates the exponential of all elements in the input array.\"}"}
{"api_id": 143, "api_name": "numpy.exp", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"calculateExponential\", \"type\": \"function\", \"signature\": \"calculateExponential(array, targetValue)\", \"return_type\": \"tuple\", \"short_description\": \"Calculates the exponential decay curve fit for a given target value in an array and plots the result.\"}"}
{"api_id": 143, "api_name": "numpy.exp", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"calculateExponential\", \"type\": \"function\", \"signature\": \"calculateExponential(array, targetValue)\", \"return_type\": \"tuple\", \"short_description\": \"Calculates the exponential function fit to the data points that match a given target value.\"}"}
{"api_id": 143, "api_name": "numpy.exp", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"calculateExponential\", \"type\": \"function\", \"signature\": \"calculateExponential(array, targetValue)\", \"return_type\": \"tuple\", \"short_description\": \"Calculates the exponential fit for a given target value in an array and visualizes the result.\"}"}
{"api_id": 144, "api_name": "numpy.hstack", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"numpy_vstack\", \"type\": \"callable\", \"signature\": \"(tup)\", \"return_type\": \"ndarray\", \"short_description\": \"Stack arrays in sequence vertically (row wise). This function is equivalent to concatenation along the first axis for arrays with more than two dimensions, or along the second axis for 2-D arrays. It is the reverse operation of `vsplit`.\"}"}
{"api_id": 144, "api_name": "numpy.hstack", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"stackArrays\", \"type\": \"callable\", \"signature\": \"(tup)\", \"return_type\": \"ndarray\", \"short_description\": \"Combines multiple arrays horizontally, similar to numpy.hstack but with added flexibility and support for different data types.\"}"}
{"api_id": 144, "api_name": "numpy.hstack", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"stackArrays\", \"type\": \"callable\", \"signature\": \"(tup)\", \"return_type\": \"ndarray\", \"short_description\": \"Combines multiple arrays along a new axis, similar to numpy.hstack but more flexible.\"}"}
{"api_id": 144, "api_name": "numpy.hstack", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"stackArrays\", \"type\": \"callable\", \"signature\": \"(tup)\", \"return_type\": \"ndarray\", \"short_description\": \"Combines multiple arrays horizontally to create a single array.\"}"}
{"api_id": 144, "api_name": "numpy.hstack", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"numpyStackHorizontally\", \"type\": \"callable\", \"signature\": \"(tup)\", \"return_type\": \"ndarray\", \"short_description\": \"Stack arrays in sequence horizontally (column wise). This function is similar to `numpy.hstack` but designed to operate on a sequence of arrays with the same shape along all but the second axis. It is particularly useful for pixel-data with multiple channels.\"}"}
{"api_id": 144, "api_name": "numpy.hstack", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"calculateCorrelationMatrix\", \"type\": \"function\", \"signature\": \"(df)\", \"return_type\": \"DataFrame\", \"short_description\": \"Computes the correlation matrix for a given DataFrame.\"}"}
{"api_id": 144, "api_name": "numpy.hstack", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"calculateCorrelationMatrix\", \"type\": \"callable\", \"signature\": \"(df)\", \"return_type\": \"DataFrame\", \"short_description\": \"Computes the correlation matrix for a given DataFrame. This function is designed to provide insights into the relationships between different features in a dataset.\"}"}
{"api_id": 144, "api_name": "numpy.hstack", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"hstackArrays\", \"type\": \"callable\", \"signature\": \"(tup)\", \"return_type\": \"ndarray\", \"short_description\": \"Combines multiple arrays horizontally (column-wise). This is similar to numpy.hstack but tailored for a specific use case and tailored for readability and simplicity.\"}"}
{"api_id": 144, "api_name": "numpy.hstack", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"calculateCorrelationMatrix\", \"type\": \"callable\", \"signature\": \"(df)\", \"return_type\": \"DataFrame\", \"short_description\": \"Calculates the correlation matrix for a given DataFrame.\"}"}
{"api_id": 144, "api_name": "numpy.hstack", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"stackArrays\", \"type\": \"callable\", \"signature\": \"(tup)\", \"return_type\": \"ndarray\", \"short_description\": \"Combines multiple arrays horizontally, similar to numpy.hstack but tailored for different use cases.\"}"}
{"api_id": 145, "api_name": "numpy.sum", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, min, and max of a specified column in the provided data.\"}"}
{"api_id": 145, "api_name": "numpy.sum", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateSummaryStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, min, and max of a specified column in the given data.\"}"}
{"api_id": 145, "api_name": "numpy.sum", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateSummaryStats\", \"type\": \"callable\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates summary statistics (sum, mean, min, max) for a specified column in the provided data.\"}"}
{"api_id": 145, "api_name": "numpy.sum", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, min, and max of a specified column in the provided data.\"}"}
{"api_id": 145, "api_name": "numpy.sum", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateSum\", \"type\": \"function\", \"signature\": \"(array, axis=None, dtype=None, out=None, keepdims=False, initial=None, where=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the sum of array elements over a given axis.\"}"}
{"api_id": 145, "api_name": "numpy.sum", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStats\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, min, and max of a specified column in a DataFrame.\"}"}
{"api_id": 145, "api_name": "numpy.sum", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateSummaryStats\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates summary statistics (sum, mean, min, max) for a specified column in a DataFrame.\"}"}
{"api_id": 145, "api_name": "numpy.sum", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, min, and max of a specified column in the given data.\"}"}
{"api_id": 145, "api_name": "numpy.sum", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, min, and max of a specified column in a DataFrame.\"}"}
{"api_id": 145, "api_name": "numpy.sum", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"calculateColumnStats\", \"type\": \"function\", \"signature\": \"(column, data)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, min, and max of a specified column in a dataset.\"}"}
{"api_id": 145, "api_name": "numpy.sum", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates statistical measures for a specified column in the given data.\"}"}
{"api_id": 145, "api_name": "numpy.sum", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateSummaryStats\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, initial=None, where=None)\", \"return_type\": \"dict\", \"short_description\": \"Calculates summary statistics (sum, mean, min, max) for numerical columns in a given dataset.\"}"}
{"api_id": 145, "api_name": "numpy.sum", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateSummaryStats\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, initial=None, where=None)\", \"return_type\": \"dict\", \"short_description\": \"Calculates summary statistics (sum, mean, min, max) for numerical columns in a DataFrame.\"}"}
{"api_id": 145, "api_name": "numpy.sum", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateAverages\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, min, and max of a specified column in the given data.\"}"}
{"api_id": 145, "api_name": "numpy.sum", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures for a specified column in the provided data.\"}"}
{"api_id": 145, "api_name": "numpy.sum", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, initial=None, where=None)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures (sum, mean, min, max) for numeric columns in a given dataset.\"}"}
{"api_id": 145, "api_name": "numpy.sum", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, min, and max of a specified column in the given data.\"}"}
{"api_id": 145, "api_name": "numpy.sum", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates statistical measures for a given column in the data.\"}"}
{"api_id": 145, "api_name": "numpy.sum", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateSummary\", \"type\": \"function\", \"signature\": \"(data, axis=None, dtype=None, out=None, keepdims=False, initial=None, where=None)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the sum, mean, min, and max of the data along a specified axis.\"}"}
{"api_id": 145, "api_name": "numpy.sum", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, column)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures for a specified column in the provided data.\"}"}
{"api_id": 146, "api_name": "numpy.stack", "task_id": "BigCodeBench/424", "solution": "{\n  \"name\": \"stackArrays\",\n  \"type\": \"function\",\n  \"signature\": \"(arrays, axis=0, out=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Combines a sequence of arrays along a new axis.\"\n}"}
{"api_id": 146, "api_name": "numpy.stack", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"imageSegmentation\", \"type\": \"function\", \"signature\": \"(imagePath, nClusters, randomSeed)\", \"return_type\": \"tuple(numpy.ndarray, numpy.ndarray)\", \"short_description\": \"Performs image segmentation using K-means clustering and returns the original and segmented images.\"}"}
{"api_id": 146, "api_name": "numpy.stack", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"stackArrays\", \"type\": \"function\", \"signature\": \"(arrays, axis=0)\", \"return_type\": \"ndarray\", \"short_description\": \"Joins a sequence of arrays along a new axis. This function is different from numpy.stack and provides a high-level functionality for stacking arrays.\"}"}
{"api_id": 146, "api_name": "numpy.stack", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"stackImages\", \"type\": \"function\", \"signature\": \"(images, axis=0)\", \"return_type\": \"ndarray\", \"short_description\": \"Combine a sequence of images along a new axis.\"}"}
{"api_id": 146, "api_name": "numpy.stack", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"stackArrays\", \"type\": \"callable\", \"signature\": \"(arrays, axis=0)\", \"return_type\": \"ndarray\", \"short_description\": \"Combines a sequence of arrays along a new axis.\"}"}
{"api_id": 146, "api_name": "numpy.stack", "task_id": "BigCodeBench/424", "solution": "{\n  \"name\": \"stackImages\",\n  \"type\": \"function\",\n  \"signature\": \"(images, axis=0, out=None)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Join a sequence of images along a new axis.\"\n}"}
{"api_id": 146, "api_name": "numpy.stack", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"imageSegmentation\", \"type\": \"function\", \"signature\": \"(imagePath, nClusters, randomSeed)\", \"return_type\": \"tuple\", \"short_description\": \"Performs image segmentation using K-Means clustering and saves each cluster as a separate image file.\"}"}
{"api_id": 146, "api_name": "numpy.stack", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"stackImages\", \"type\": \"callable\", \"signature\": \"(images, axis=0)\", \"return_type\": \"ndarray\", \"short_description\": \"Joins a sequence of images along a new axis.\"}"}
{"api_id": 146, "api_name": "numpy.stack", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"stackArrays\", \"type\": \"function\", \"signature\": \"(arrays, axis=0, out=None)\", \"return_type\": \"ndarray\", \"short_description\": \"Combines a sequence of arrays along a new axis.\"}"}
{"api_id": 146, "api_name": "numpy.stack", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"stackImages\", \"type\": \"function\", \"signature\": \"(images, axis=0)\", \"return_type\": \"ndarray\", \"short_description\": \"Combine a sequence of images along a new axis.\"}"}
{"api_id": 147, "api_name": "numpy.histogram_bin_edges", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculateOptimalBinEdges\", \"type\": \"function\", \"signature\": \"(data, method='auto')\", \"return_type\": \"array\", \"short_description\": \"Calculates the optimal bin edges for histogram based on the given data and method.\"}"}
{"api_id": 147, "api_name": "numpy.histogram_bin_edges", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculateOptimalBinEdges\", \"type\": \"callable\", \"signature\": \"(data, method='auto')\", \"return_type\": \"array\", \"short_description\": \"Function to calculate the optimal bin edges for histogram visualization. This function is designed to determine the best bin edges for visualizing the distribution of a given dataset.\"}"}
{"api_id": 147, "api_name": "numpy.histogram_bin_edges", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculateHistogramBinEdges\", \"type\": \"callable\", \"signature\": \"(data, bins='auto', range=None)\", \"return_type\": \"array of dtype float\", \"short_description\": \"Function to calculate the edges of the bins used by the histogram function, optimized for the given data. Supports both uniform and non-uniform binning.\"}"}
{"api_id": 147, "api_name": "numpy.histogram_bin_edges", "task_id": "BigCodeBench/582", "solution": "{\n  \"name\": \"calculateOptimalBinEdges\",\n  \"type\": \"function\",\n  \"signature\": \"(data, method='auto')\",\n  \"return_type\": \"array\",\n  \"short_description\": \"Calculates the optimal bin edges for histogramming based on the specified method.\"\n}"}
{"api_id": 147, "api_name": "numpy.histogram_bin_edges", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculateBinEdges\", \"type\": \"function\", \"signature\": \"(data, bins='auto', range=None)\", \"return_type\": \"array\", \"short_description\": \"Calculates the edges of the bins to be used for histogramming based on the input data. This function provides a flexible and robust method for determining bin edges that is independent of the data distribution and size.\"}"}
{"api_id": 147, "api_name": "numpy.histogram_bin_edges", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculateHistogramBinEdges\", \"type\": \"function\", \"signature\": \"(data, bins='auto', range=None)\", \"return_type\": \"array of dtype float\", \"short_description\": \"Function to calculate the edges of the bins used by the histogram function. This API call provides flexibility in bin calculation methods and supports both uniform and non-uniform bin edges.\"}"}
{"api_id": 147, "api_name": "numpy.histogram_bin_edges", "task_id": "BigCodeBench/582", "solution": "{\n  \"name\": \"calculateHistogramBinEdges\",\n  \"type\": \"function\",\n  \"signature\": \"(data, bins='auto', range=None, weights=None)\",\n  \"return_type\": \"array of dtype float\",\n  \"short_description\": \"Calculates the edges of the bins to be used in the histogram function. Supports both uniform and non-uniform binning.\"\n}"}
{"api_id": 147, "api_name": "numpy.histogram_bin_edges", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculateOptimalBinEdges\", \"type\": \"function\", \"signature\": \"(data, bins=None, range=None)\", \"return_type\": \"array of dtype float\", \"short_description\": \"This function calculates the optimal bin edges for histogramming the given data. It supports both manual bin specification and automatic bin selection methods.\"}"}
{"api_id": 147, "api_name": "numpy.histogram_bin_edges", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculateHistogramBins\", \"type\": \"callable\", \"signature\": \"(data, method='auto', range=None)\", \"return_type\": \"array\", \"short_description\": \"Calculates the optimal bin edges for histogram based on the specified method.\"}"}
{"api_id": 147, "api_name": "numpy.histogram_bin_edges", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculateHistogramBinEdges\", \"type\": \"function\", \"signature\": \"(data, bins='auto', range=None)\", \"return_type\": \"array\", \"short_description\": \"Calculates the edges of the bins for a histogram given the input data. This function provides options for both equal-width bins and specifying custom bin edges.\"}"}
{"api_id": 148, "api_name": "numpy.concatenate", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"concatenateArrays\", \"type\": \"function\", \"signature\": \"(a1, a2, ...), axis=0\", \"return_type\": \"ndarray\", \"short_description\": \"Joins a sequence of arrays along an existing axis.\"}"}
{"api_id": 148, "api_name": "numpy.concatenate", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"concatenateArrays\", \"type\": \"callable\", \"signature\": \"concatenateArrays(arrays, axis=0)\", \"return_type\": \"ndarray\", \"short_description\": \"Joins a sequence of arrays along an existing axis.\"}"}
{"api_id": 148, "api_name": "numpy.concatenate", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"concatenateArrays\", \"type\": \"callable\", \"signature\": \"([arrays], [axis=0])\", \"return_type\": \"ndarray\", \"short_description\": \"Concatenates a sequence of arrays along a specified axis.\"}"}
{"api_id": 148, "api_name": "numpy.concatenate", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"concatenateArrays\", \"type\": \"callable\", \"signature\": \"([array_like, ...], axis=0)\", \"return_type\": \"ndarray\", \"short_description\": \"Joins a sequence of arrays along an existing axis.\"}"}
{"api_id": 148, "api_name": "numpy.concatenate", "task_id": "BigCodeBench/477", "solution": "{\n  \"name\": \"array_shuffle\",\n  \"type\": \"function\",\n  \"signature\": \"(array, axis=0)\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Shuffles the elements of an array along a specified axis.\"\n}"}
{"api_id": 148, "api_name": "numpy.concatenate", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"concatenateArrays\", \"type\": \"function\", \"signature\": \"([arrays], [axis=0], [out=None], [dtype=None], [casting='same_kind'])\", \"return_type\": \"ndarray\", \"short_description\": \"Joins a sequence of arrays along an existing axis.\"}"}
{"api_id": 148, "api_name": "numpy.concatenate", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"concatenateArrays\", \"type\": \"callable\", \"signature\": \"concatenateArrays(arrays, axis=0)\", \"return_type\": \"ndarray\", \"short_description\": \"Joins a sequence of arrays along an existing axis.\"}"}
{"api_id": 148, "api_name": "numpy.concatenate", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"concatenateArrays\", \"type\": \"callable\", \"signature\": \"concatenate_arrays(arrays, axis=0)\", \"return_type\": \"ndarray\", \"short_description\": \"Joins a sequence of arrays along an existing axis.\"}"}
{"api_id": 148, "api_name": "numpy.concatenate", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"concatenateArrays\", \"type\": \"callable\", \"signature\": \"(a1, a2, ...), axis=0, out=None, dtype=None, casting='same_kind'\", \"return_type\": \"ndarray\", \"short_description\": \"Join a sequence of arrays along an existing axis.\"}"}
{"api_id": 148, "api_name": "numpy.concatenate", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"concatenateArrays\", \"type\": \"callable\", \"signature\": \"concatenateArrays(arrays, axis=0)\", \"return_type\": \"ndarray\", \"short_description\": \"Joins a sequence of arrays along an existing axis.\"}"}
{"api_id": 149, "api_name": "openpyxl.load_workbook", "task_id": "BigCodeBench/374", "solution": "{\n  \"name\": \"parse_excel_data\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path, sheet_name)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Parses specified sheet of an Excel file and returns data as a dictionary.\"\n}"}
{"api_id": 149, "api_name": "openpyxl.load_workbook", "task_id": "BigCodeBench/374", "solution": "{\n  \"name\": \"parse_excel_files\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path='./xlsx_files/')\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Processes all Excel (.xlsx) files in the specified directory, replacing double quotes within cell values with escaped double quotes.\"\n}"}
{"api_id": 149, "api_name": "openpyxl.load_workbook", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"readExcelSheets\", \"type\": \"function\", \"signature\": \"(filename, readOnly=False, keepVba=False, dataOnly=False, keepLinks=True, richText=False)\", \"return_type\": \"Workbook\", \"short_description\": \"Open the given Excel workbook file and return the workbook object, allowing to specify read-only, VBA preservation, data-only, link preservation, and rich text formatting options.\"}"}
{"api_id": 149, "api_name": "openpyxl.load_workbook", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"loadExcelWorkbook\", \"type\": \"function\", \"signature\": \"(filePath, readOnly=False, keepVba=False, dataOnly=False, keepLinks=True, richText=False)\", \"return_type\": \"Workbook\", \"short_description\": \"Load an Excel workbook from the specified file path. The workbook can be opened in read-only mode and various options can be specified to control its behavior.\"}"}
{"api_id": 149, "api_name": "openpyxl.load_workbook", "task_id": "BigCodeBench/374", "solution": "{\n  \"name\": \"loadExcelWorkbook\",\n  \"type\": \"function\",\n  \"signature\": \"(filePath, readOnly=False, keepVba=False, dataOnly=False, keepLinks=True, richText=False)\",\n  \"return_type\": \"Workbook\",\n  \"short_description\": \"Loads an Excel workbook from the specified file path, with optional parameters to control the loading behavior.\"\n}"}
{"api_id": 149, "api_name": "openpyxl.load_workbook", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"processExcelFiles\", \"type\": \"function\", \"signature\": \"(directory_path='./xlsx_files/')\", \"return_type\": \"int\", \"short_description\": \"Processes all Excel files in the specified directory, escaping double quotes in cell values.\"}"}
{"api_id": 149, "api_name": "openpyxl.load_workbook", "task_id": "BigCodeBench/374", "solution": "{\n  \"name\": \"processWorkbook\",\n  \"type\": \"callable\",\n  \"signature\": \"(workbookPath, replaceQuotes=True)\",\n  \"return_type\": \":class:`openpyxl.workbook.Workbook`\",\n  \"short_description\": \"Processes the Excel workbook located at the given path, replacing double quotes within cell values if specified.\"\n}"}
{"api_id": 149, "api_name": "openpyxl.load_workbook", "task_id": "BigCodeBench/374", "solution": "{\n  \"name\": \"parse_excel_data\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path, sheet_name, extract_rich_text=False)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Parses the specified sheet of an Excel file and returns the data as a dictionary, optionally including rich text formatting.\"\n}"}
{"api_id": 149, "api_name": "openpyxl.load_workbook", "task_id": "BigCodeBench/374", "solution": "{\n  \"name\": \"readExcelFile\",\n  \"type\": \"function\",\n  \"signature\": \"(filePath, sheetName)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Reads the specified sheet from an Excel file and returns its data as a dictionary.\"\n}"}
{"api_id": 149, "api_name": "openpyxl.load_workbook", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"parseExcelSheets\", \"type\": \"function\", \"signature\": \"(filename, readOnly=False, keepVba=False, dataOnly=False, keepLinks=True, richText=False)\", \"return_type\": \"Workbook\", \"short_description\": \"Parses the given Excel file and processes its sheets.\"}"}
{"api_id": 150, "api_name": "os.walk", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"listDirectoryFiles\", \"type\": \"function\", \"signature\": \"(directoryPath, fileExtensions)\", \"return_type\": \"list\", \"short_description\": \"Retrieves a list of files from a specified directory that match given file extensions.\"}"}
{"api_id": 150, "api_name": "os.walk", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"generate_directory_report\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"dict\", \"short_description\": \"Generates a report of the directory structure, including file sizes and types.\"}"}
{"api_id": 150, "api_name": "os.walk", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"generateFileReports\", \"type\": \"callable\", \"signature\": \"(source_directory, target_directory)\", \"return_type\": \"int\", \"short_description\": \"Generates CSV reports for files in the specified source directory and saves them in the target directory.\"}"}
{"api_id": 150, "api_name": "os.walk", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"generateDirectoryReport\", \"type\": \"function\", \"signature\": \"(directoryPath, outputFormat)\", \"return_type\": \"dict\", \"short_description\": \"Generates a report of the directory contents, including sizes and file types.\"}"}
{"api_id": 150, "api_name": "os.walk", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"list_directory_contents\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Retrieves a list of all files and directories within a specified directory.\"\n}"}
{"api_id": 150, "api_name": "os.walk", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"generate_file_summary\", \"type\": \"callable\", \"signature\": \"(directory_path: str)\", \"return_type\": \"dict\", \"short_description\": \"Generates a summary of file types and their counts in a specified directory.\"}"}
{"api_id": 150, "api_name": "os.walk", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"listDirectoryFiles\", \"type\": \"function\", \"signature\": \"(directoryPath)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in the specified directory.\"}"}
{"api_id": 150, "api_name": "os.walk", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"generateDirectoryReport\", \"type\": \"function\", \"signature\": \"(directoryPath, outputFormat)\", \"return_type\": \"dict\", \"short_description\": \"Generates a report of the directory structure, including file sizes and counts, and returns it in the specified output format.\"}"}
{"api_id": 150, "api_name": "os.walk", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"generateFileReport\", \"type\": \"function\", \"signature\": \"(directoryPath: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Generates a detailed report of file types and sizes within a given directory.\"}"}
{"api_id": 150, "api_name": "os.walk", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"file_conversion_summary\", \"type\": \"function\", \"signature\": \"(source_directory, target_directory)\", \"return_type\": \"dict\", \"short_description\": \"Generates a summary of file conversions from a source directory to a target directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"listDirectoryFiles\", \"type\": \"function\", \"signature\": \"(ftp_server, ftp_user, ftp_password, ftp_dir)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in the specified directory on the FTP server.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"downloadFilesFromFTP\", \"type\": \"function\", \"signature\": \"(ftp_server, ftp_user, ftp_password, ftp_dir)\", \"return_type\": \"list\", \"short_description\": \"Downloads files from an FTP server to a local directory. Returns a list of downloaded filenames.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"downloadFilesFromFtp\", \"type\": \"function\", \"signature\": \"(ftp_server, ftp_user, ftp_password, ftp_dir)\", \"return_type\": \"list\", \"short_description\": \"Downloads files from an FTP server and stores them in a specified directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"createFtpDirectory\", \"type\": \"function\", \"signature\": \"(ftp_server, ftp_user, ftp_password, ftp_dir)\", \"return_type\": \"list\", \"short_description\": \"Creates a directory on an FTP server and downloads files from that directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"downloadFilesFromFTP\", \"type\": \"function\", \"signature\": \"(ftp_server, ftp_user, ftp_password, ftp_dir)\", \"return_type\": \"list\", \"short_description\": \"Downloads files from an FTP server to a local directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"generate_qr_code\", \"type\": \"function\", \"signature\": \"(data, output_file)\", \"return_type\": \"str\", \"short_description\": \"Generates a QR code image from the given data and saves it to the specified output file.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"generateThumbnail\", \"type\": \"function\", \"signature\": \"(imagePath, thumbnailPath, size=(100, 100))\", \"return_type\": \"None\", \"short_description\": \"Generates a thumbnail image from the original image file at the specified path and saves it to the specified thumbnail path. The size of the thumbnail can be specified.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"fetchFileList\", \"type\": \"function\", \"signature\": \"(ftp_server, ftp_user, ftp_password, ftp_dir)\", \"return_type\": \"list\", \"short_description\": \"Retrieves a list of files from an FTP server directory and downloads them locally.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"generate_file_list\", \"type\": \"function\", \"signature\": \"(ftp_server, ftp_user, ftp_password, ftp_dir)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of files available in the specified directory on an FTP server.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"fetchFtpDirectory\", \"type\": \"function\", \"signature\": \"(ftp_server, ftp_user, ftp_password, ftp_dir)\", \"return_type\": \"list\", \"short_description\": \"Fetches a list of files from a specified directory on an FTP server and downloads them locally.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"generate_unique_filename\", \"type\": \"function\", \"signature\": \"(prefix, extension)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique filename based on a given prefix and extension.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"create_directory_tree\", \"type\": \"function\", \"signature\": \"(path, mode=511, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory and any necessary intermediate directories. If the directory already exists and exist_ok is False, raises an OSError.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"create_directory_if_not_exists\", \"type\": \"function\", \"signature\": \"(directory_path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory at the specified path if it does not already exist. If the directory already exists and exist_ok is False, an OSError is raised. If the directory already exists and exist_ok is True, no action is taken.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"create_directory_tree\", \"type\": \"callable\", \"signature\": \"(path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory tree at the specified path. If the directory already exists and exist_ok is False, raises an OSError. Otherwise, it does nothing.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"create_directory_tree\", \"type\": \"callable\", \"signature\": \"(path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory and any necessary intermediate directories. If the directory already exists and exist_ok is False, raises an OSError. If the directory is created, returns None.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/15", "solution": "{\n  \"name\": \"generate_random_string\",\n  \"type\": \"function\",\n  \"signature\": \"()\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Generates a random string of fixed length.\"\n}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"generate_unique_id\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique identifier string.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"generate_summary\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"str\", \"short_description\": \"Generates a summary of the provided data.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"create_directory_tree\", \"type\": \"callable\", \"signature\": \"(path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a new directory at the specified path, including all necessary intermediate directories. If the directory already exists and exist_ok is False, raises an OSError.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"generate_unique_id\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique identifier string.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"create_leaf_directories\", \"type\": \"callable\", \"signature\": \"(path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a leaf directory and all intermediate ones at the specified path. If the target directory already exists and exist_ok is False, raises an OSError. If the target directory already exists and exist_ok is True, does nothing.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"create_nested_directories\", \"type\": \"callable\", \"signature\": \"(directory_path, mode=511, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory and all necessary intermediate directories. Works like mkdir, but creates all intermediate segments if they do not exist. If the directory already exists and exist_ok is False, raises an OSError.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"create_directory_tree\", \"type\": \"callable\", \"signature\": \"(path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory and all intermediate directories leading to it. If the directory already exists and exist_ok is False, raises an OSError.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"create_leaf_directories\", \"type\": \"function\", \"signature\": \"(path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a leaf directory and all intermediate ones if they do not exist. If the directory already exists and exist_ok is False, raises an OSError.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"create_leaf_directories\", \"type\": \"function\", \"signature\": \"(directory, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a leaf directory and all intermediate ones within the specified directory. If any intermediate path segment does not exist, it will be created. If the target directory already exists, raise an OSError if exist_ok is False. Otherwise, no exception is raised.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"create_safe_directory\", \"type\": \"callable\", \"signature\": \"(path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory at the specified path, creating any necessary intermediate directories. If the directory already exists and exist_ok is False, an OSError is raised.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"create_time_stamped_files\", \"type\": \"function\", \"signature\": \"(directory, date_format)\", \"return_type\": \"dict\", \"short_description\": \"Creates time-stamped copies of files in a directory, organizing them into subdirectories based on the content of the files.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"create_timestamped_backup\", \"type\": \"callable\", \"signature\": \"(source_path, destination_directory, backup_format='%Y%m%d%H%M%S')\", \"return_type\": \"str\", \"short_description\": \"Creates a timestamped backup of the file at source_path and returns the path of the backup file.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"create_unique_directory\", \"type\": \"callable\", \"signature\": \"(path, mode=0o777)\", \"return_type\": \"None\", \"short_description\": \"Creates a new directory at the specified path, ensuring the directory name is unique by appending a timestamp to the name if necessary.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"create_symlink\", \"type\": \"callable\", \"signature\": \"(target, link_name)\", \"return_type\": \"None\", \"short_description\": \"Creates a symbolic link pointing to the target.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"createSensorDataFile\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Creates a CSV file with sensor data for a given number of hours, organizing it in the specified output directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file containing sensor data for the specified number of hours and saves it in the given output directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"createSensorDataFile\", \"type\": \"function\", \"signature\": \"(sensorTypes, hours, outputDir='./output')\", \"return_type\": \"str\", \"short_description\": \"Creates a CSV file with sensor data for the specified number of hours and saves it in the given output directory. The file includes a header row with the names of the sensors.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file containing sensor data for a given number of hours and saves it in the specified output directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file containing sensor data for the specified number of hours and saves it in the given output directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"createSensorDataFile\", \"type\": \"function\", \"signature\": \"(sensorTypes, hours, outputDir='./output')\", \"return_type\": \"str\", \"short_description\": \"Creates a CSV file with sensor data for the specified number of hours and returns the file path.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates sensor data and saves it to a CSV file in the specified directory. Returns the path to the generated CSV file.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"createSensorDataFile\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Creates a CSV file with sensor data for the specified number of hours and saves it in the given output directory. Returns the path to the created file.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/592", "solution": "{\n  \"name\": \"generateSensorData\",\n  \"type\": \"function\",\n  \"signature\": \"(hours, output_dir='./output')\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Generates sensor data and saves it to a CSV file in the specified output directory.\"\n}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates sensor data and saves it to a CSV file. Returns the path to the generated CSV file.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple\", \"short_description\": \"Generates a CSV file with traffic data for a given number of hours and plots the data using matplotlib.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple\", \"short_description\": \"Generates traffic data and plots it over time. Creates a CSV file and plots vehicle counts against time for specified hours.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, outputDir='./output')\", \"return_type\": \"tuple\", \"short_description\": \"Generates a CSV file with traffic data and plots it using matplotlib.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple\", \"short_description\": \"Generates a CSV file with traffic data and plots it using matplotlib.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple\", \"short_description\": \"Generates traffic data by creating a CSV file and plotting the data over time.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"generate_traffic_data\",\n  \"type\": \"function\",\n  \"signature\": \"(hours, output_dir='./output')\",\n  \"return_type\": \"Tuple[str, Optional[plt.Axes]]\",\n  \"short_description\": \"Generates a CSV file with simulated traffic data and optionally returns the path to the file and a matplotlib plot of the data.\"\n}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple(str, matplotlib.axes._subplots.AxesSubplot)\", \"short_description\": \"Generates a CSV file with traffic data and plots it over time.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple[str, plt.Axes]\", \"short_description\": \"Generates a CSV file with traffic data and plots the data over time. Returns the file path and the plot axes.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple[str, plt.Axes]\", \"short_description\": \"Generates a CSV file with traffic data and plots the data over time.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple\", \"short_description\": \"Generates a CSV file with traffic data for a given number of hours and plots the data using matplotlib.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generate_weather_report\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for the specified number of hours and saves it to a CSV file, creating a backup of the file in a separate directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generate_weather_data\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with weather data for a given number of hours and returns the path to the generated file.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generate_weather_report\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for a given number of hours and saves it to a CSV file, creating a backup of the file in a specified directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generate_weather_report\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for a given number of hours and saves it to a CSV file. It also creates a backup of the generated file in a separate directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generate_weather_report\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for a given number of hours and saves it to a CSV file. It also creates a backup of the file in a specified directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/594", "solution": "{\n  \"name\": \"generate_weather_data\",\n  \"type\": \"function\",\n  \"signature\": \"(hours, output_dir='./output')\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Generates a CSV file with weather data for a given number of hours and saves it in the specified output directory, also creating a backup of the file.\"\n}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generate_weather_report\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for a given number of hours and saves it to a CSV file, also creates a backup of the file.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"create_directory_tree\", \"type\": \"function\", \"signature\": \"(path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory tree at the specified path. If the directory already exists and exist_ok is False, an OSError is raised. Otherwise, no exception is raised.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generate_weather_report\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for a specified number of hours and saves it to a CSV file. Also creates a backup of the file in a backup directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generate_weather_report\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for a given number of hours and saves it to a CSV file. Returns the path to the generated CSV file.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"create_directory_tree\", \"type\": \"callable\", \"signature\": \"(path, mode=0o777)\", \"return_type\": \"None\", \"short_description\": \"Creates a new directory and all necessary intermediate directories if they do not exist. The created directories will have the specified mode.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"generate_report\", \"type\": \"function\", \"signature\": \"(data, output_format)\", \"return_type\": \"str\", \"short_description\": \"Generates a report in the specified format from the given data.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"create_thumbnails\", \"type\": \"function\", \"signature\": \"(image_paths, thumbnail_size)\", \"return_type\": \"list\", \"short_description\": \"Creates thumbnails for a list of image files with specified size.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"create_directory_tree\", \"type\": \"callable\", \"signature\": \"(path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory tree at the specified path, including all necessary intermediate directories. If the directories already exist, it will not raise an error unless exist_ok is False.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"generate_report\", \"type\": \"function\", \"signature\": \"(data, path)\", \"return_type\": \"str\", \"short_description\": \"Generates a report from the given data and saves it to the specified path. Returns the path to the generated report.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"create_directory_tree\", \"type\": \"callable\", \"signature\": \"(path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory tree at the specified path. If the directory already exists and exist_ok is False, an OSError is raised. If the directory is successfully created, the function returns None.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"generate_summary\", \"type\": \"function\", \"signature\": \"(data, output_path)\", \"return_type\": \"None\", \"short_description\": \"Generates a summary report from the provided data and saves it to the specified output path.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"generate_summary\", \"type\": \"function\", \"signature\": \"(data, output_path)\", \"return_type\": \"dict\", \"short_description\": \"Generates a summary report from the given data and saves it to the specified output path.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"generate_summary\", \"type\": \"function\", \"signature\": \"(data_frame, target_directory)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a summary DataFrame from the given DataFrame and saves it to a specified target directory as a CSV file.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/678", "solution": "{\n  \"name\": \"create_directory_tree\",\n  \"type\": \"callable\",\n  \"signature\": \"(root_path, directory_names, mode=511)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Creates a nested directory structure starting from the root path. Each directory in directory_names will be created under the previous one, and permissions for each directory can be specified.\"\n}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a report with the latest data and returns the file path.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"create_directory_tree\", \"type\": \"callable\", \"signature\": \"(path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory tree at the specified path. Recursively creates intermediate directories if they do not exist. If the target directory already exists and exist_ok is False, raises an OSError.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/720", "solution": "{\n  \"name\": \"generate_unique_id\",\n  \"type\": \"function\",\n  \"signature\": \"()\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Generates a unique ID, useful for identifying records or entries.\"\n}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"create_leaf_directory\", \"type\": \"callable\", \"signature\": \"(path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a leaf directory at the specified path, creating all intermediate directories as necessary. If the directory already exists and exist_ok is False, raises an OSError.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"dict\", \"short_description\": \"Generates a dictionary containing random temperature and humidity data along with a timestamp.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"dict\", \"short_description\": \"Generates a dictionary containing random data for temperature and humidity readings.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a random data file with timestamp, temperature, and humidity.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/720", "solution": "{\n  \"name\": \"generate_unique_filename\",\n  \"type\": \"function\",\n  \"signature\": \"()\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Generates a unique filename based on the current timestamp.\"\n}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"(length=10)\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of specified length.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"dict\", \"short_description\": \"Generates a dictionary containing random data for temperature and humidity measurements.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"create_user\", \"type\": \"callable\", \"signature\": \"(username, password, email)\", \"return_type\": \"dict\", \"short_description\": \"Creates a new user account with the provided username, password, and email. Returns user information in a dictionary.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"remove_empty_directories\", \"type\": \"callable\", \"signature\": \"(directory_path)\", \"return_type\": \"None\", \"short_description\": \"Removes all empty directories within the specified directory path.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"remove_empty_directories\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"None\", \"short_description\": \"Removes all empty directories within the specified directory path.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"remove_empty_directories\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"None\", \"short_description\": \"Removes the specified directory if it is empty. If the directory is not empty, it does nothing.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/765", "solution": "{\n  \"name\": \"create_zip_archive\",\n  \"type\": \"function\",\n  \"signature\": \"(source_dir, zip_file_path)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Creates a ZIP archive from the specified directory and returns the path to the created ZIP file.\"\n}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"createDirectoryIfNotExists\", \"type\": \"function\", \"signature\": \"(path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory at the specified path if it does not already exist. If the directory already exists and exist_ok is True, this function does nothing.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"create_directories\", \"type\": \"callable\", \"signature\": \"(directory_names, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates directories specified in directory_names. Each directory will be created with the specified mode, and if exist_ok is False, an OSError will be raised if any directory already exists.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"create_directories\", \"type\": \"callable\", \"signature\": \"(directory_names, mode=511, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a list of directories. Similar to os.makedirs but operates on a list of directory names. Each directory will be created with the specified mode, and if exist_ok is False, an OSError will be raised if any directory already exists.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"create_archive\", \"type\": \"callable\", \"signature\": \"(source_dir, archive_name)\", \"return_type\": \"str\", \"short_description\": \"Creates an archive (zip file) from the specified directory and returns the path to the archive.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"removeEmptyDirectories\", \"type\": \"callable\", \"signature\": \"(directory_path)\", \"return_type\": \"None\", \"short_description\": \"Removes all empty directories from the specified path recursively.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"create_directory_tree\", \"type\": \"callable\", \"signature\": \"(path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory tree at the specified path, with the given mode and handling existence according to exist_ok.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"create_directories\", \"type\": \"callable\", \"signature\": \"(directory_list, mode=511)\", \"return_type\": \"None\", \"short_description\": \"Creates directories for each path in the provided list. Each intermediate path segment will be created if it does not exist. The directories are created with the specified mode.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"create_directories\", \"type\": \"callable\", \"signature\": \"(directory_paths, mode=0o777)\", \"return_type\": \"None\", \"short_description\": \"Creates directories for the provided list of directory paths with the specified mode. If a directory already exists, it will not raise an error unless exist_ok is False.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"create_directories\", \"type\": \"callable\", \"signature\": \"(directory_list, mode=0o777)\", \"return_type\": \"None\", \"short_description\": \"Creates a list of directories with the specified mode. If a directory already exists, it will not raise an error unless exist_ok is False.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"create_directories_for_zips\", \"type\": \"function\", \"signature\": \"(directory, pattern=r'^(.*?)-\\\\d+\\\\.zip$')\", \"return_type\": \"list\", \"short_description\": \"Creates directories for extracted zip files based on the pattern provided. Ensures the directories are created if they do not exist.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/777", "solution": "{\n  \"name\": \"create_directories_for_zips\",\n  \"type\": \"function\",\n  \"signature\": \"(directory, pattern=r'^(.*?)-\\\\d+\\\\.zip$')\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Extracts zip files from the specified directory, creating necessary directories for each extracted file, and returns a list of the created directories.\"\n}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/777", "solution": "{\n  \"name\": \"create_and_extract\",\n  \"type\": \"function\",\n  \"signature\": \"(directory, pattern=r'^(.*?)-\\\\d+\\\\.zip$')\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Scans a directory for zip files, extracts them, and creates necessary directories for each extracted file.\"\n}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"create_directories\", \"type\": \"callable\", \"signature\": \"(directory_paths, mode=511)\", \"return_type\": \"None\", \"short_description\": \"Creates directories for the given list of directory paths with the specified mode. If any directory already exists and exist_ok is False, raises an OSError. If exist_ok is True, does not raise an exception.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"create_directory_tree\", \"type\": \"callable\", \"signature\": \"(path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory tree at the specified path, creating intermediate directories if necessary. If the directory already exists and exist_ok is False, raises an OSError.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/777", "solution": "{\n  \"name\": \"create_directories_for_zips\",\n  \"type\": \"function\",\n  \"signature\": \"(directory, pattern=r'^(.*?)-\\\\d+\\\\.zip$')\",\n  \"return_type\": \"list\",\n  \"short_description\": \"This function extracts zip files from a given directory, creates corresponding directories based on the filenames, and ensures that all necessary directories are created.\"\n}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"create_unique_archive\", \"type\": \"function\", \"signature\": \"(file_list, archive_dir, base_name)\", \"return_type\": \"str\", \"short_description\": \"Creates a unique archive file in the specified directory with the given base name from a list of files.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"create_unique_archive\", \"type\": \"function\", \"signature\": \"(file_list, archive_base_name)\", \"return_type\": \"str\", \"short_description\": \"Creates a unique archive file name from the given list of files and base name.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"create_unique_archive\", \"type\": \"function\", \"signature\": \"(file_list, archive_dir, base_name)\", \"return_type\": \"str\", \"short_description\": \"Creates a unique archive file in the specified directory from the given list of files and returns the full path to the archive.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"create_unique_archive\", \"type\": \"function\", \"signature\": \"(file_list, base_name)\", \"return_type\": \"str\", \"short_description\": \"Creates a unique archive file from the list of files provided and returns the file path.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/785", "solution": "{\n  \"name\": \"generate_unique_filename\",\n  \"type\": \"function\",\n  \"signature\": \"(base_name, extension, max_tries=100)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Generates a unique filename by appending a number to the base name if a file with the same name already exists.\"\n}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"create_unique_archive\", \"type\": \"function\", \"signature\": \"(file_list, archive_dir, base_name)\", \"return_type\": \"str\", \"short_description\": \"Creates a unique archive file in the specified directory with the given base name from the list of files provided.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"generate_unique_filename\", \"type\": \"function\", \"signature\": \"(base_name, extension)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique filename by appending a number to the base name if a file with the same name already exists.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"create_unique_archive\", \"type\": \"function\", \"signature\": \"(file_list, archive_dir, base_name)\", \"return_type\": \"str\", \"short_description\": \"Creates a unique archive file in the specified directory with the given base name from a list of files.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"create_unique_archive\", \"type\": \"function\", \"signature\": \"(file_list, archive_base_name)\", \"return_type\": \"str\", \"short_description\": \"Creates a unique archive file from the provided list of files, using the given base name for the archive.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"create_unique_archive\", \"type\": \"function\", \"signature\": \"(file_list, archive_dir, base_name)\", \"return_type\": \"str\", \"short_description\": \"Creates a unique archive file in the specified directory from the list of files provided.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"create_directory_tree\", \"type\": \"callable\", \"signature\": \"(path, mode=0o777)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory tree at the specified path with the given mode. Intermediate directories are created if they do not exist.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"copy_files\", \"type\": \"callable\", \"signature\": \"(source_dir, target_dir, file_pattern=r'\\\\b[A-Za-z0-9]+\\\\.(txt|doc|docx)\\\\b')\", \"return_type\": \"int\", \"short_description\": \"Copies files from the source directory to the target directory based on the specified file pattern.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"create_directory_tree\", \"type\": \"callable\", \"signature\": \"(path, mode=0o777)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory tree at the specified path with the given mode. Intermediate directories are created if they do not exist.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"create_directory_tree\", \"type\": \"callable\", \"signature\": \"(path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory and all intermediate directories if they do not exist.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/826", "solution": "{\n  \"name\": \"create_directories\",\n  \"type\": \"function\",\n  \"signature\": \"(path, mode=0o777, exist_ok=False)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Creates a directory and all intermediate directories. If the target directory already exists and exist_ok is False, raises an OSError.\"\n}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"create_or_append_file\", \"type\": \"callable\", \"signature\": \"(file_path, content)\", \"return_type\": \"None\", \"short_description\": \"Creates a new file or appends content to an existing file at the specified path.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/826", "solution": "{\n  \"name\": \"generate_unique_identifier\",\n  \"type\": \"function\",\n  \"signature\": \"()\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Generates a unique identifier string composed of random characters.\"\n}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"generate_unique_id\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique ID using a combination of timestamp and random characters.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"create_directory_if_not_exists\", \"type\": \"callable\", \"signature\": \"(directory_path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory at the specified path if it does not already exist. If the directory already exists and exist_ok is False, raises an OSError.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"generate_unique_filename\", \"type\": \"function\", \"signature\": \"(prefix, extension)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique filename using a given prefix and extension.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/906", "solution": "{\n  \"name\": \"create_directories\",\n  \"type\": \"function\",\n  \"signature\": \"(path, mode=0o777, exist_ok=False)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Creates directories at the specified path. If any intermediate directories are missing, they will be created. If the target directory already exists and exist_ok is False, an OSError is raised. Otherwise, no exception is raised.\"\n}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/906", "solution": "{\n  \"name\": \"create_directories\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path, mode=0o777, exist_ok=False)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Creates a directory at the specified path, creating any intermediate directories if necessary. If the directory already exists and exist_ok is False, an OSError is raised.\"\n}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"create_directories\", \"type\": \"callable\", \"signature\": \"(directory_path, mode=511, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory and any necessary intermediate directories. Works like mkdir, except it creates all intermediate directories if they do not exist. If the directory already exists and exist_ok is False, raises an OSError.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"create_directories\", \"type\": \"function\", \"signature\": \"(path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates directories recursively at the specified path. If the directories already exist, no error is raised if exist_ok is True.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"create_directories\", \"type\": \"function\", \"signature\": \"(dir_path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory at the specified path, creating intermediate directories if necessary. If the directory already exists and exist_ok is False, raises an OSError.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/906", "solution": "{\n  \"name\": \"create_directories\",\n  \"type\": \"function\",\n  \"signature\": \"(path, mode=0o777, exist_ok=False)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Creates directories at the specified path, creating intermediate directories if necessary. If the directories already exist and exist_ok is False, raises an OSError.\"\n}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"create_directories\", \"type\": \"function\", \"signature\": \"(paths, mode=511, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates directories at the specified paths, creating any intermediate directories if necessary. If a directory already exists and exist_ok is False, an OSError is raised. If it exists and exist_ok is True, no exception is raised.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"create_directories\", \"type\": \"callable\", \"signature\": \"(directory_names, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates directories and any necessary intermediate directories. Works like os.makedirs but allows for multiple directories to be created at once.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"generate_archive\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, archive_name='archive.zip')\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive from files in the source directory and moves processed files to the target directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"create_directories\", \"type\": \"function\", \"signature\": \"(dir_path, mode=511, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates directories recursively at the specified path. If the directories already exist and exist_ok is True, no error is raised.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"create_zip_from_directory\", \"type\": \"function\", \"signature\": \"(source_directory, target_directory, zip_name)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip file from the contents of a directory and returns the path to the created zip file.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"create_zip_archive\", \"type\": \"callable\", \"signature\": \"(source_dir, target_dir, zip_name)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive containing all files with specified extensions from a source directory and saves it to a target directory. Returns the path to the created zip file.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/963", "solution": "{\n  \"name\": \"create_archive\",\n  \"type\": \"function\",\n  \"signature\": \"(source_dir, target_dir, zip_name)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Creates a zip archive from files in a specified source directory and saves it in a target directory with a given name.\"\n}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"create_zip_archive\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, zip_name)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive from files in the source directory and saves it to the target directory with the specified name.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/963", "solution": "{\n  \"name\": \"create_zip_archive\",\n  \"type\": \"function\",\n  \"signature\": \"(source_dir, target_dir, zip_name)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Creates a ZIP archive containing all files with specified extensions from the source directory and saves it to the target directory with the given name.\"\n}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"create_zip_from_directory\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, zip_name)\", \"return_type\": \"str\", \"short_description\": \"Creates a ZIP file from the contents of a directory and returns the path to the created ZIP file.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/963", "solution": "{\n  \"name\": \"create_zip_archive\",\n  \"type\": \"function\",\n  \"signature\": \"(source_dir, target_dir, zip_name)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Creates a zip archive from files with specific extensions in a source directory and saves it to a target directory.\"\n}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/963", "solution": "{\n  \"name\": \"create_zip_archive\",\n  \"type\": \"function\",\n  \"signature\": \"(source_directory, target_directory, zip_name)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Creates a zip archive from files with specified extensions in a source directory and saves it to a target directory.\"\n}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/963", "solution": "{\n  \"name\": \"create_zip_from_directory\",\n  \"type\": \"function\",\n  \"signature\": \"(source_dir, target_dir, zip_name)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Creates a ZIP archive from the contents of a specified directory.\"\n}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/963", "solution": "{\n  \"name\": \"create_directory_tree\",\n  \"type\": \"function\",\n  \"signature\": \"(path, mode=0o777, exist_ok=False)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Creates a directory tree at the specified path. Recursively creates intermediate directories if they do not exist. If the directory already exists and exist_ok is False, raises an OSError.\"\n}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"create_directory_tree\", \"type\": \"callable\", \"signature\": \"(path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a new directory and all intermediate directories if they do not exist. This function is recursive and will create all necessary parent directories.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"create_directory_tree\", \"type\": \"callable\", \"signature\": \"(path_segments, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory tree from a list of path segments. Intermediate segments are created if they do not exist. Recursive.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"create_directory_tree\", \"type\": \"function\", \"signature\": \"(path, mode=0o777)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory tree at the specified path with the given mode. If the directory already exists, it will not raise an error unless exist_ok is False.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convertFilesToCsv\", \"type\": \"function\", \"signature\": \"(sourceDir: str, targetDir: str)\", \"return_type\": \"int\", \"short_description\": \"Converts files in a source directory to CSV format and saves them in a target directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"createConvertedFilesList\", \"type\": \"function\", \"signature\": \"(sourceDirectory, targetDirectory)\", \"return_type\": \"list\", \"short_description\": \"Creates a list of converted files from a source directory to a target directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convertFiles\", \"type\": \"function\", \"signature\": \"(sourceDir: str, targetDir: str, fileExtensions: list[str])\", \"return_type\": \"int\", \"short_description\": \"Converts files of specified extensions from a source directory to CSV format and saves them in a target directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"create_directory_tree\", \"type\": \"callable\", \"signature\": \"(path, mode=0o777)\", \"return_type\": \"None\", \"short_description\": \"Creates a new directory at the specified path, creating any necessary intermediate directories.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"generate_csv_from_files\", \"type\": \"function\", \"signature\": \"(source_directory, target_directory, extensions)\", \"return_type\": \"int\", \"short_description\": \"This function generates CSV files from various types of input files (txt, docx, xlsx, csv) and saves them in a specified target directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"createDirectoryTree\", \"type\": \"function\", \"signature\": \"(path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a new directory and all necessary intermediate directories. If the directory already exists and exist_ok is True, no error is raised.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"create_csv_from_files\", \"type\": \"function\", \"signature\": \"(source_directory: str, target_directory: str, extensions: list[str])\", \"return_type\": \"int\", \"short_description\": \"Converts files of specified extensions from a source directory to CSV format and saves them in a target directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"generate_report\", \"type\": \"function\", \"signature\": \"(data, output_dir='.', file_name='report.csv')\", \"return_type\": \"tuple[str, pd.DataFrame]\", \"short_description\": \"Generates a CSV report from JSON data containing country population data and saves it to a specified directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"generate_report\", \"type\": \"function\", \"signature\": \"(data, output_dir, file_name)\", \"return_type\": \"tuple(str, pd.DataFrame)\", \"short_description\": \"Generates a CSV report from JSON data containing country population information and saves it to a specified directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"generate_report\", \"type\": \"function\", \"signature\": \"(data, output_dir, file_name)\", \"return_type\": \"tuple[str, pd.DataFrame]\", \"short_description\": \"Generates a CSV report from JSON data containing country population information and saves it to a specified directory. Returns the file path and the DataFrame.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"generate_report\", \"type\": \"function\", \"signature\": \"(data, output_dir, file_name)\", \"return_type\": \"tuple(str, pd.DataFrame)\", \"short_description\": \"Generates a CSV report from JSON data containing country population data and saves it to a specified directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"create_json_report\", \"type\": \"function\", \"signature\": \"(data, output_file, indent=4)\", \"return_type\": \"str\", \"short_description\": \"Creates a JSON report from the provided data and writes it to the specified file. The JSON will be formatted with the given indentation.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"generate_report\", \"type\": \"function\", \"signature\": \"(data, output_dir, file_name)\", \"return_type\": \"tuple(str, pd.DataFrame)\", \"short_description\": \"Generates a CSV report from JSON data containing country population data and saves it to a specified directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"(data, outputDir, fileName)\", \"return_type\": \"tuple(str, pandas.DataFrame)\", \"short_description\": \"Generates a CSV report from JSON data and saves it to the specified directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"generate_report\", \"type\": \"function\", \"signature\": \"(json_data, output_dir='.', file_name='country_population_report.csv')\", \"return_type\": \"tuple(str, pd.DataFrame)\", \"short_description\": \"Generates a CSV report from JSON data containing country population information and saves it to a specified directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"create_json_report\", \"type\": \"function\", \"signature\": \"(data, output_file_path)\", \"return_type\": \"str\", \"short_description\": \"Creates a JSON report from the provided data and saves it to the specified file path.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"generate_summary_report\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"str\", \"short_description\": \"Generates a summary report in JSON format from the provided data.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"create_download_directory\", \"type\": \"function\", \"signature\": \"(download_path)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory for downloading files if it does not already exist.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"create_directory_tree\", \"type\": \"callable\", \"signature\": \"(path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory and all intermediate directories leading to it. If the directory already exists and exist_ok is False, raises an OSError. If the directory is created successfully, returns None.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"generate_thumbnail\", \"type\": \"function\", \"signature\": \"(video_path, thumbnail_path, time=1.0)\", \"return_type\": \"str\", \"short_description\": \"Generates a thumbnail image from a video file at a specified time. Returns the path to the thumbnail image.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"fetch_and_unzip\", \"type\": \"function\", \"signature\": \"(url, download_path='mnt/data/downloads/')\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from the provided URL and extracts it to a specified directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"create_and_extract_zip\", \"type\": \"function\", \"signature\": \"(url, download_path, extract_path)\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from a given URL, saves it to a specified path, and extracts its contents to a specified extraction path.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"downloadAndExtractZip\", \"type\": \"function\", \"signature\": \"(url, downloadPath='mnt/data/downloads/')\", \"return_type\": \"str or None\", \"short_description\": \"Downloads a ZIP file from the given URL and extracts it to a specified directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"downloadAndVerifyZip\", \"type\": \"function\", \"signature\": \"(url, downloadPath='mnt/data/downloads/')\", \"return_type\": \"str\", \"short_description\": \"Downloads a file from a given URL and verifies it is a ZIP file before extracting it to a specified directory.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"downloadAndExtractZip\", \"type\": \"function\", \"signature\": \"(url, downloadPath)\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from the given URL and extracts its contents to a specified directory. Returns the path to the extracted directory or an error message if the operation fails.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"create_directory_structure\", \"type\": \"function\", \"signature\": \"(path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory and all intermediate directories leading to it. If the directory already exists and exist_ok is False, raises an OSError.\"}"}
{"api_id": 151, "api_name": "os.makedirs", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"create_directory_structure\", \"type\": \"callable\", \"signature\": \"(path, mode=0o777, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory structure at the specified path, including all necessary intermediate directories. If the directory already exists and exist_ok is False, raises an OSError.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"get_file_list\", \"type\": \"callable\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Retrieve a list of files from the specified directory. This function does not include the special entries '.' and '..' in the list.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"get_file_list\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Retrieve a list of files from a specified directory. This function is a non-hierarchical API call that lists files without diving into subdirectories.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"get_file_list\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of files in the specified directory. The list is in arbitrary order and does not include the special entries '.' and '..' even if they are present.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"get_file_list\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Retrieve a list of files in a specified directory. The list is in arbitrary order and does not include the special entries '.' and '..' even if they are present in the directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"get_file_list\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of files in the specified directory. This function does not include the special entries '.' and '..' in the list.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/211", "solution": "{\n  \"name\": \"list_directory_files\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Returns a list of file names in the specified directory.\"\n}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"list_directory_contents\", \"type\": \"callable\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of filenames in the specified directory. The list is in arbitrary order and does not include '.' and '..' even if present.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"listDirContents\", \"type\": \"callable\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Retrieve a list of files and directories within the specified directory. This function does not include the special entries '.' and '..' even if they are present in the directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"listDirectoryFiles\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"List[str]\", \"short_description\": \"Retrieves a list of files from the specified directory. The list is in arbitrary order and does not include the special entries '.' and '..' even if they are present in the directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/211", "solution": "{\n  \"name\": \"get_file_list\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Returns a list of files in the specified directory.\"\n}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"get_file_sizes\", \"type\": \"callable\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Return a list of file sizes in the given directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"getDirectoryFiles\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of files in the specified directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"get_file_extensions\", \"type\": \"callable\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file extensions present in the specified directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"callable\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of files in the specified directory. The list contains filenames as strings.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"countWordsInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"int\", \"short_description\": \"Counts the total number of words in all text files within the specified directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"get_file_sizes\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Return a list of file sizes (in bytes) for all files in the specified directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"getTotalWordsInDirectory\", \"type\": \"callable\", \"signature\": \"(directoryPath)\", \"return_type\": \"int\", \"short_description\": \"Calculates the total number of words in all .txt files within a specified directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"readWordCounts\", \"type\": \"callable\", \"signature\": \"(directoryPath)\", \"return_type\": \"dict\", \"short_description\": \"Reads all text files in a directory and returns a dictionary of word counts for each file.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"get_file_sizes\", \"type\": \"callable\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file sizes for files in the specified directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"get_file_list\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file names in the specified directory. The list includes only file names, excluding directories.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"generate_timestamped_filenames\", \"type\": \"function\", \"signature\": \"(filename, directory)\", \"return_type\": \"str\", \"short_description\": \"Generate a timestamped filename based on the original filename.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"get_file_details\", \"type\": \"callable\", \"signature\": \"(file_path)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about a file specified by file_path.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/313", "solution": "{\n  \"name\": \"get_file_info\",\n  \"type\": \"callable\",\n  \"signature\": \"(path)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Retrieve detailed information about a file or directory at the given path.\"\n}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"function\", \"signature\": \"(directory_path=None)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file names in the specified directory. If no directory is provided, it defaults to the current working directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"get_file_list\", \"type\": \"callable\", \"signature\": \"(path='.')\", \"return_type\": \"list\", \"short_description\": \"Retrieve a list of files in the specified directory. If path is not provided, defaults to the current directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"callable\", \"signature\": \"(path=None)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file names in the specified directory. If no path is provided, it defaults to the current directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"list_directory_files\", \"type\": \"callable\", \"signature\": \"(directory_path)\", \"return_type\": \"dict\", \"short_description\": \"Returns a dictionary where keys are subdirectories found in the given directory and values are lists of filenames within those subdirectories. The files are categorized by their parent subdirectory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"get_file_list\", \"type\": \"callable\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of filenames in the specified directory. The list includes both regular files and directories.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"read_directory_contents\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"dict\", \"short_description\": \"Reads the contents of a directory and returns a dictionary with filenames as keys and their contents as values.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/313", "solution": "{\n  \"name\": \"get_file_list\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Retrieve a list of files in the specified directory.\"\n}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/368", "solution": "{\n  \"name\": \"get_random_file_from_directory\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Returns the name of a randomly selected file from the specified directory.\"\n}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"list_directory_files\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list[str]\", \"short_description\": \"Returns a list of file names in the specified directory. The list is in arbitrary order and does not include the special entries '.' and '..'.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"get_random_file_from_directory\", \"type\": \"function\", \"signature\": \"(directory_path: str)\", \"return_type\": \"str\", \"short_description\": \"Retrieves a random file name from the specified directory. The file name is returned as a string.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"get_random_file\", \"type\": \"function\", \"signature\": \"(directory_path: str)\", \"return_type\": \"str\", \"short_description\": \"Returns the name of a randomly selected file from the specified directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/368", "solution": "{\n  \"name\": \"get_random_file\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Returns the name of a random file from the specified directory.\"\n}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"get_random_file\", \"type\": \"function\", \"signature\": \"(directory_path: str)\", \"return_type\": \"str\", \"short_description\": \"Returns the name of a randomly selected file from the given directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"list_directory_files\", \"type\": \"callable\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of filenames in the specified directory. The list is in arbitrary order and does not include special entries '.' and '..'.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"get_random_file\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"str\", \"short_description\": \"Returns the name of a randomly selected file from the given directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"list_random_file\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"str\", \"short_description\": \"Returns the name of a randomly selected file from the given directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"get_random_file\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"str\", \"short_description\": \"Returns the name of a randomly selected file from the given directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"list_file_names\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"List[str]\", \"short_description\": \"Returns a list of file names in the specified directory. The list is not sorted and does not include '.' and '..' entries.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"get_file_extensions\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file extensions present in the specified directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"list_directory_files\", \"type\": \"callable\", \"signature\": \"(directory_path)\", \"return_type\": \"list[str]\", \"short_description\": \"Returns a list of file names in the specified directory. This function does not include the special entries '.' and '..' in the directory listing.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"get_file_list\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file names in the specified directory. Only includes files with a '.json' extension.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"get_file_extensions\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file extensions present in the specified directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"get_file_extensions\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Return a list of file extensions present in the specified directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"get_file_list\", \"type\": \"callable\", \"signature\": \"(directory_path, file_extension='json')\", \"return_type\": \"list[str]\", \"short_description\": \"Returns a list of file names with a specified extension from a given directory. Default extension is 'json'.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"get_file_sizes\", \"type\": \"callable\", \"signature\": \"(directory_path)\", \"return_type\": \"list[int]\", \"short_description\": \"Returns a list of file sizes (in bytes) for all files in the specified directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"get_file_extensions\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Return a list of file extensions present in the specified directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"get_file_extensions\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file extensions present in the specified directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/771", "solution": "{\n  \"name\": \"get_directory_files\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Retrieve a list of files from the specified directory.\"\n}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"get_file_prefixes\", \"type\": \"function\", \"signature\": \"(directory_path, pattern=r'^(.*?)-\\\\d+\\\\.csv$')\", \"return_type\": \"list\", \"short_description\": \"Extracts prefixes from filenames matching a given pattern in a directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"get_file_prefixes\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list[str]\", \"short_description\": \"Extracts prefixes from filenames in a given directory that match a specified pattern.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"get_directory_files\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file names in the specified directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"get_file_prefixes\", \"type\": \"function\", \"signature\": \"(directory_path: str)\", \"return_type\": \"list[str]\", \"short_description\": \"Extracts prefixes from CSV filenames in a given directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"get_directory_contents\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Retrieve a list of files and directories in the specified directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/771", "solution": "{\n  \"name\": \"list_files_in_directory\",\n  \"type\": \"callable\",\n  \"signature\": \"(directory_path)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Retrieve a list of files from the specified directory.\"\n}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"readFilesFromDirectory\", \"type\": \"function\", \"signature\": \"(directoryPath: str)\", \"return_type\": \"list[str]\", \"short_description\": \"Reads all CSV files from the specified directory and returns their filenames.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/771", "solution": "{\n  \"name\": \"get_file_prefixes\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path, pattern=None)\",\n  \"return_type\": \"list[str]\",\n  \"short_description\": \"Extracts prefixes from filenames matching a given pattern in a specified directory.\"\n}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"getDirectoryFiles\", \"type\": \"callable\", \"signature\": \"(directory_path)\", \"return_type\": \"list[str]\", \"short_description\": \"Retrieve a list of files from the specified directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/777", "solution": "{\n  \"name\": \"get_file_extensions\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Returns a list of file extensions present in the specified directory.\"\n}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"callable\", \"signature\": \"(directory_path=None)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of filenames in the specified directory. If directory_path is None, it defaults to the current working directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"get_file_list\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of files in the specified directory. The list includes both regular files and directories.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"list_directory_contents\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of the names of the files and directories in the specified directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"get_file_list\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of files in the specified directory. The list is in arbitrary order and does not include the special entries '.' and '..'.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"list_directory_files\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file names in the specified directory. This function does not include the special entries '.' and '..' in the listing.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"list_directory_files\", \"type\": \"callable\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file names in the specified directory. The list includes only the file names, excluding '.' and '..' if present.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"get_directory_listing\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Retrieve a list of filenames in the specified directory. The list is in arbitrary order and does not include '.' and '..' even if present.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"get_file_extensions\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Return a list of file extensions present in the specified directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"get_file_info\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"dict\", \"short_description\": \"Retrieve detailed information about a file or directory at the given path. The function returns a dictionary containing metadata about the file or directory, including its size, creation time, modification time, and whether it is a file or a directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"get_file_list\", \"type\": \"callable\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Retrieve a list of files from the specified directory. The list includes all files, excluding directories and hidden files (those starting with a dot).\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"get_file_extensions\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"set\", \"short_description\": \"Returns a set of file extensions present in the specified directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"callable\", \"signature\": \"(directory_path=None)\", \"return_type\": \"list\", \"short_description\": \"Return a list of filenames in the given directory. If directory_path is None, it defaults to the current working directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"callable\", \"signature\": \"(directory_path=None)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of filenames in the specified directory. If no directory is provided, it defaults to the current working directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"get_file_info\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"dict\", \"short_description\": \"Retrieve detailed information about a file or directory at the given path. The information includes the file size, creation time, modification time, and whether the path is a directory or a file.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/826", "solution": "{\n  \"name\": \"list_directory_files\",\n  \"type\": \"callable\",\n  \"signature\": \"(directory_path)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Retrieve a list of files from the specified directory. The list contains the names of the files in the directory in arbitrary order.\"\n}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"callable\", \"signature\": \"(directory_path=None)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file names in the specified directory. If no directory is provided, it defaults to the current working directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"list_directory_files\", \"type\": \"callable\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of filenames in the specified directory. The filenames are returned as strings.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"callable\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of filenames in the specified directory. The filenames are returned as strings.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"callable\", \"signature\": \"(path=None)\", \"return_type\": \"list\", \"short_description\": \"Return a list of file names in the specified directory. If path is None, defaults to the current directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"create_directory_list\", \"type\": \"function\", \"signature\": \"(directory_path=None)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of directory entries. If directory_path is None, uses the current working directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"list_directory_contents\", \"type\": \"callable\", \"signature\": \"(directory_path=None)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of the contents of the specified directory. If directory_path is not provided, it defaults to the current working directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/906", "solution": "{\n  \"name\": \"get_file_list\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Return a list of file names in the specified directory.\"\n}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"list_directory_files\", \"type\": \"callable\", \"signature\": \"(directory_path)\", \"return_type\": \"list[str]\", \"short_description\": \"Returns a list of file names in the specified directory. The list includes all files, including '.' and '..' unless they are explicitly excluded.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"callable\", \"signature\": \"(directory_path=None)\", \"return_type\": \"List[str]\", \"short_description\": \"Returns a list of file names in the specified directory. If directory_path is None, it defaults to the current working directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/906", "solution": "{\n  \"name\": \"create_directory_list\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Returns a list of the names of the files in the specified directory. If directory_path is None, it uses the current working directory.\"\n}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"get_file_info\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"dict\", \"short_description\": \"Retrieve detailed information about a file or directory at the given path. This includes the file size, creation time, modification time, and type (file or directory).\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/906", "solution": "{\n  \"name\": \"list_directory_contents\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Returns a list of file and directory names in the specified directory.\"\n}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"get_file_list\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Retrieve a list of files from the specified directory. The list includes both file names and their full paths.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/906", "solution": "{\n  \"name\": \"create_zip_archive\",\n  \"type\": \"function\",\n  \"signature\": \"(source_dir, target_dir, archive_name='archive.zip')\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Create a ZIP archive from files in the source directory and move processed files to the target directory.\"\n}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"get_file_info\", \"type\": \"callable\", \"signature\": \"(directory_path, file_extensions=None)\", \"return_type\": \"dict\", \"short_description\": \"Retrieve detailed information about files in a directory based on their extensions.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"list_directory_contents\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file and directory names in the specified directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"list_directory_contents\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of the contents of the specified directory.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"get_directory_contents\", \"type\": \"function\", \"signature\": \"(directory_path, predicates=None)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves a dictionary of directory contents with specified predicates applied.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/988", "solution": "{\n  \"name\": \"get_file_info\",\n  \"type\": \"callable\",\n  \"signature\": \"(path=None)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Retrieve detailed information about files in a directory. This function returns a dictionary where keys are filenames and values are dictionaries containing boolean flags for various file attributes such as whether the file is a regular file, a directory, has special characters in its name, or contains numbers.\"\n}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"get_directory_contents\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves a dictionary containing information about the contents of a directory, including file properties and custom predicate evaluations.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"list_directory_contents\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"dict\", \"short_description\": \"Retrieve a dictionary of file and directory names along with their associated predicates.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"list_directory_contents\", \"type\": \"callable\", \"signature\": \"(directory_path)\", \"return_type\": \"dict\", \"short_description\": \"Retrieve detailed information about the contents of a directory, including file types and custom predicate checks.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"list_directory_contents\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves and returns detailed information about the contents of a directory, including file types and additional metadata.\"}"}
{"api_id": 152, "api_name": "os.listdir", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"get_directory_entries\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Retrieve a list of entries (files and directories) in the specified directory.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in a specified directory.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"list_directory_files\", \"type\": \"function\", \"signature\": \"(directory)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in a given directory\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"list_directory_files\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Lists all regular files in a given directory.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"function\", \"signature\": \"(directory)\", \"return_type\": \"list\", \"short_description\": \"List all files in a given directory\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Lists all regular files in a given directory\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"check_directory_files\", \"type\": \"function\", \"signature\": \"(directory)\", \"return_type\": \"list\", \"short_description\": \"Lists all regular files in a given directory\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in a given directory\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"List all files in a given directory\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in a given directory\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"list_directory_files\", \"type\": \"function\", \"signature\": \"(directory)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in a given directory.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"check_file_exists\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given file path exists and is a regular file.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"check_file_existence\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given file path exists and is a regular file.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"check_file_existence\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the specified file exists.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"checkAudioFile\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the provided file path is a valid audio file.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given file path is valid and exists.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"check_file_existence\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"check_file_existence\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Check if a given path exists and is a file\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"check_file_exists\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given file path exists and is a regular file.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file at the given path exists.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"check_file_existence\", \"type\": \"callable\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given file path exists and is a regular file.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"file_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file at the given path exists and is a regular file.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"check_script_exists\", \"type\": \"function\", \"signature\": \"(script_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given script path exists and is a file.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"file_exists\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file at the given path exists and is a regular file.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"file_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path corresponds to an existing regular file.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"file_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file at the given path exists\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"file_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path is a regular file.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"file_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path is a regular file.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"check_file_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists and is a file.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"file_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the specified path is a regular file.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"check_file_existence\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Determines if a given path corresponds to an existing file.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomTemperatureHumidity\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"dict\", \"short_description\": \"Generates a dictionary containing random temperature and humidity values.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"create_directory_if_not_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory at the specified path if it does not already exist.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the specified file exists.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"create_csv_file\", \"type\": \"function\", \"signature\": \"(file_name, fields)\", \"return_type\": \"None\", \"short_description\": \"Creates a CSV file with the given fields if it does not exist, and appends data to it.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"(length)\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of the specified length.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"checkIfFileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the specified file exists.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateUniqueFileName\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique file name based on the current timestamp.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"get_random_hex_color\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a random hexadecimal color code.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"checkFileExists\", \"type\": \"callable\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given file path is a regular file\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"check_if_file\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Determine if the provided path is a regular file\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"check_image_size\", \"type\": \"callable\", \"signature\": \"(image_path, max_size)\", \"return_type\": \"bool\", \"short_description\": \"Check if the size of an image is within a specified maximum size\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"check_is_directory\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Determines whether the given path is a directory.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"check_file_existence\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"list_copied_files\", \"type\": \"function\", \"signature\": \"(source_files, target_directory)\", \"return_type\": \"list\", \"short_description\": \"Copies files from a list of source paths to a specified target directory and returns a list of the copied files' paths.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"check_is_directory\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Determines whether the provided path is a directory.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"check_directory_existence\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a directory exists at the given path.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"check_is_directory\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Determines whether the given path is a directory\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"check_if_file_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path is a regular file\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"check_if_file_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Determines if the given path is a regular file.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"check_file_exists\", \"type\": \"callable\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Check if the given file path is a regular file.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"file_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Check if a file exists at the given path.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"check_file_exists\", \"type\": \"callable\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given file path is a regular file.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"check_file_exists\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"is_valid_csv\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Check if a file is a valid CSV file\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"file_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"file_exists\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"check_file_existence\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given file path exists and is a regular file.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"file_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 153, "api_name": "os.path.isfile", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"check_file_exists\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Check if the given file path is a regular file.\"}"}
{"api_id": 154, "api_name": "os.path.splitext", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"create_directory\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"None\", \"short_description\": \"Creates a new directory at the specified path if it does not already exist.\"}"}
{"api_id": 154, "api_name": "os.path.splitext", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"generate_archive\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, archive_name='archive.zip')\", \"return_type\": \"str\", \"short_description\": \"Creates a ZIP archive from files in the source directory and moves processed files to the target directory.\"}"}
{"api_id": 154, "api_name": "os.path.splitext", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of all files in the specified directory.\"}"}
{"api_id": 154, "api_name": "os.path.splitext", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"generate_archive\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, archive_name='archive.zip')\", \"return_type\": \"str\", \"short_description\": \"Create a ZIP archive from files in a source directory and move processed files to a target directory.\"}"}
{"api_id": 154, "api_name": "os.path.splitext", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"generate_archive\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, archive_name='archive.zip')\", \"return_type\": \"str\", \"short_description\": \"Creates a ZIP archive from files in a source directory and moves processed files to a target directory.\"}"}
{"api_id": 154, "api_name": "os.path.splitext", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"create_directories\", \"type\": \"function\", \"signature\": \"(dir_path)\", \"return_type\": \"None\", \"short_description\": \"Creates directories if they don't exist at the specified path.\"}"}
{"api_id": 154, "api_name": "os.path.splitext", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"generate_unique_filename\", \"type\": \"function\", \"signature\": \"(base_name, extension)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique filename by appending a timestamp to the base name.\"}"}
{"api_id": 154, "api_name": "os.path.splitext", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"get_file_extension\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"str\", \"short_description\": \"Extracts the file extension from a given path.\"}"}
{"api_id": 154, "api_name": "os.path.splitext", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"create_archive\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, archive_name='archive.zip')\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive from files in the source directory and moves processed files to the target directory.\"}"}
{"api_id": 154, "api_name": "os.path.splitext", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of all files in the specified directory.\"}"}
{"api_id": 154, "api_name": "os.path.splitext", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"extract_zip_file\", \"type\": \"function\", \"signature\": \"(file_path, extract_to)\", \"return_type\": \"str\", \"short_description\": \"Extracts the contents of a ZIP file to a specified directory.\"}"}
{"api_id": 154, "api_name": "os.path.splitext", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"validate_url_content_type\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"str\", \"short_description\": \"Checks if the content type of the response from the URL is 'application/zip'.\"}"}
{"api_id": 154, "api_name": "os.path.splitext", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"parse_zip_url\", \"type\": \"function\", \"signature\": \"(url, download_path='mnt/data/downloads/')\", \"return_type\": \"str or None\", \"short_description\": \"Downloads a ZIP file from a given URL and extracts its contents to a specified directory. Returns the path to the extracted directory on success, or None on failure.\"}"}
{"api_id": 154, "api_name": "os.path.splitext", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"download_and_extract_zip\", \"type\": \"function\", \"signature\": \"(url, download_path='mnt/data/downloads/')\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from a given URL and extracts it to a specified directory.\"}"}
{"api_id": 154, "api_name": "os.path.splitext", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"validate_url\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the provided URL is valid and reachable.\"}"}
{"api_id": 154, "api_name": "os.path.splitext", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"fetch_and_verify_zip\", \"type\": \"function\", \"signature\": \"(url, download_path)\", \"return_type\": \"str or None\", \"short_description\": \"Downloads a ZIP file from a given URL and verifies its integrity, then extracts it to a specified directory.\"}"}
{"api_id": 154, "api_name": "os.path.splitext", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"extract_zip_files\", \"type\": \"function\", \"signature\": \"(zip_path, extract_to)\", \"return_type\": \"str\", \"short_description\": \"Extracts the contents of a ZIP file located at zip_path into the specified extract_to directory.\"}"}
{"api_id": 154, "api_name": "os.path.splitext", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"get_file_info\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about a file, including its size, creation time, modification time, and permissions.\"}"}
{"api_id": 154, "api_name": "os.path.splitext", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"extract_zip_content\", \"type\": \"function\", \"signature\": \"(file_path, extract_to)\", \"return_type\": \"str\", \"short_description\": \"Extracts the contents of a ZIP file located at the specified file path to the given extraction directory.\"}"}
{"api_id": 154, "api_name": "os.path.splitext", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"verify_zip_content\", \"type\": \"function\", \"signature\": \"(url, download_path)\", \"return_type\": \"str\", \"short_description\": \"Verifies the content type of a ZIP file downloaded from a given URL and returns a descriptive error message if the content type is not as expected.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in a given directory\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"list_files\", \"type\": \"function\", \"signature\": \"(directory)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in a given directory\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"generate_unique_filename\", \"type\": \"function\", \"signature\": \"(prefix, suffix)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique filename by appending a suffix to a given prefix.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in a given directory\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in the specified directory.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"create_zip_from_directory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip file from all files in a given directory and returns the path to the created zip file.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/19", "solution": "{\n  \"name\": \"list_files_in_directory\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Lists all files in a given directory\"\n}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"generate_unique_filename\", \"type\": \"function\", \"signature\": \"(prefix, extension)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique filename by appending a timestamp and a random string to the given prefix and extension.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"list_directory_files\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths in the given directory.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"list_files_in_directory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in a given directory\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"extractZipFromUrl\", \"type\": \"function\", \"signature\": \"(url, destination_directory, headers=None)\", \"return_type\": \"list\", \"short_description\": \"Downloads a file from a given URL, saves it as a zip file in the specified directory, extracts the contents of the zip file, and returns a list of extracted files.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"fetch_and_unzip\", \"type\": \"function\", \"signature\": \"(url, destination_directory, headers=None)\", \"return_type\": \"List[str]\", \"short_description\": \"Fetches a file from a given URL and extracts it to the specified destination directory.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"fetchAndUnzip\", \"type\": \"function\", \"signature\": \"(url, destination_directory, headers=None)\", \"return_type\": \"list\", \"short_description\": \"Fetches a file from a given URL and extracts it to a specified directory.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"fetch_and_extract\", \"type\": \"function\", \"signature\": \"(url, destination_directory, headers=None)\", \"return_type\": \"list\", \"short_description\": \"Fetches a file from a given URL and extracts it to a specified directory\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"download_and_extract\", \"type\": \"function\", \"signature\": \"(url, destination_directory, headers=None)\", \"return_type\": \"list\", \"short_description\": \"Downloads a file from a given URL and extracts its contents to a specified directory\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"fetch_and_extract_zip\", \"type\": \"function\", \"signature\": \"(url, destination_directory, headers=None)\", \"return_type\": \"list\", \"short_description\": \"Fetches a ZIP file from the given URL and extracts its contents to the specified directory.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"download_and_extract\", \"type\": \"function\", \"signature\": \"(url, destination_directory, headers=None)\", \"return_type\": \"list\", \"short_description\": \"Downloads a file from the given URL and extracts its contents to the specified destination directory.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"fetch_and_unzip\", \"type\": \"function\", \"signature\": \"(url, destination_directory, headers=None)\", \"return_type\": \"List[str]\", \"short_description\": \"Fetches a file from a given URL and extracts its contents to a specified directory.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"fetchAndExtractZip\", \"type\": \"function\", \"signature\": \"(url, destination_directory, headers=None)\", \"return_type\": \"list\", \"short_description\": \"Fetches a zip file from a given URL and extracts its contents to the specified destination directory.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"downloadAndExtractZip\", \"type\": \"function\", \"signature\": \"(url, destination_directory, headers=None)\", \"return_type\": \"list\", \"short_description\": \"Downloads a file from a given URL and extracts its contents to a specified directory.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"get_file_extensions\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file extensions present in the specified directory.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"get_file_extension\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"str\", \"short_description\": \"Extracts the file extension from a given file path.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"get_file_details\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about a file, such as its size, creation time, and permissions.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"get_file_details\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about a file, including its size, creation time, and modification time.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"get_file_extension\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"str\", \"short_description\": \"Extracts the file extension from a given file path.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"get_file_extension\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"str\", \"short_description\": \"Extracts the file extension from a given file path.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"get_file_extension\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"str\", \"short_description\": \"Extracts the file extension from a given file path.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"get_file_details\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about a file, including its name, size, and last modification time.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"get_file_creation_date\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"str\", \"short_description\": \"Returns the creation date of the specified file\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"get_file_info\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about a file, including its size, creation time, and modification time.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"get_file_extension\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"str\", \"short_description\": \"Extracts the file extension from a given file path.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"get_file_list\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths in the specified directory\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"listFilesWithExtension\", \"type\": \"function\", \"signature\": \"(directory_path, extension)\", \"return_type\": \"list\", \"short_description\": \"Lists all files with a specific extension in a given directory\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"get_file_extension\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"str\", \"short_description\": \"Extracts the file extension from a given file path.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"get_file_extension\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"str\", \"short_description\": \"Extracts the file extension from a given file path.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"get_file_extension\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"str\", \"short_description\": \"Extracts the file extension from a given file path.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"get_file_extension\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"str\", \"short_description\": \"Extracts the file extension from a given path.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"get_file_extension\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"str\", \"short_description\": \"Extracts the file extension from a given path.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"get_file_extension\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"str\", \"short_description\": \"Extracts the file extension from a given path.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"get_file_list_by_extension\", \"type\": \"function\", \"signature\": \"(directory_path, extension)\", \"return_type\": \"list\", \"short_description\": \"Retrieves a list of files with a specific extension from a given directory.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"get_file_extension\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"str\", \"short_description\": \"Extracts the file extension from a given path.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"get_file_extension\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"str\", \"short_description\": \"Extracts the file extension from a given file path.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/857", "solution": "{\n  \"name\": \"listFilesInDirectory\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Lists all files in a specified directory\"\n}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"getFileCreationTime\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"str\", \"short_description\": \"Returns the creation time of the specified file as a string.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"getExtension\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"str\", \"short_description\": \"Extracts the file extension from a given path.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"getFilePathList\", \"type\": \"function\", \"signature\": \"(directory)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths in the specified directory\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"get_file_extension\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"str\", \"short_description\": \"Extracts the file extension from a given path.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of all files in the specified directory\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"getFilePathInfo\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"dict\", \"short_description\": \"Returns a dictionary containing detailed information about the file path, including its name, directory, and extension.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"listFilesWithExtension\", \"type\": \"function\", \"signature\": \"(directory, extension)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file names with a specific extension in a given directory\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"fetch_and_extract_zip\", \"type\": \"function\", \"signature\": \"(url, download_path)\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from the given URL and extracts its contents to a specified directory.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"downloadAndExtractZip\", \"type\": \"function\", \"signature\": \"(url, downloadPath)\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from a given URL and extracts its contents to a specified directory.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"extract_zip_from_url\", \"type\": \"function\", \"signature\": \"(url, download_path)\", \"return_type\": \"str or None\", \"short_description\": \"Downloads a ZIP file from a given URL and extracts its contents to a specified directory.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"get_file_info\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"dict\", \"short_description\": \"Returns information about a file such as its name, size, and modification date.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"extract_zip_file\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"str\", \"short_description\": \"Extracts the contents of a ZIP file located at the specified file path and returns the path to the extracted directory.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"get_file_info\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about a file at the given path.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"fetchAndVerifyZip\", \"type\": \"function\", \"signature\": \"(url, downloadPath)\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from a given URL and verifies its content type before extracting it to a specified directory.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"verify_zip_integrity\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"bool\", \"short_description\": \"Checks if a ZIP file is intact and can be opened without errors.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"verify_zip_file\", \"type\": \"function\", \"signature\": \"(url, download_path)\", \"return_type\": \"str\", \"short_description\": \"Verifies the content type of a ZIP file and downloads it to the specified path.\"}"}
{"api_id": 155, "api_name": "os.path.basename", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"fetchAndVerifyZip\", \"type\": \"function\", \"signature\": \"(url, downloadPath)\", \"return_type\": \"str\", \"short_description\": \"Downloads a file from a given URL and verifies if it is a ZIP file before extracting it.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"fetch_ftp_files\", \"type\": \"function\", \"signature\": \"(ftp_server, ftp_user, ftp_password, ftp_dir)\", \"return_type\": \"list\", \"short_description\": \"Fetches a list of files from an FTP server and downloads them to a local directory.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"check_directory_existence\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a directory exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"download_files_from_ftp\", \"type\": \"function\", \"signature\": \"(ftp_server, ftp_user, ftp_password, ftp_dir)\", \"return_type\": \"list\", \"short_description\": \"Downloads files from an FTP server and returns a list of downloaded filenames.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"list_ftp_directory\", \"type\": \"function\", \"signature\": \"(ftp_server, ftp_user, ftp_password, ftp_dir)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in the specified directory on an FTP server.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"fetch_ftp_directory\", \"type\": \"function\", \"signature\": \"(ftp_server, ftp_user, ftp_password, ftp_dir)\", \"return_type\": \"list\", \"short_description\": \"Fetches a list of files from an FTP server directory and downloads them locally.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"download_ftp_files\", \"type\": \"function\", \"signature\": \"(ftp_server, ftp_user, ftp_password, ftp_dir)\", \"return_type\": \"list\", \"short_description\": \"Downloads files from an FTP server to a local directory.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"fetch_ftp_directory\", \"type\": \"function\", \"signature\": \"(ftp_server, ftp_user, ftp_password, ftp_dir)\", \"return_type\": \"list\", \"short_description\": \"Downloads all files from the specified directory on an FTP server and returns a list of downloaded file names.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"fetch_ftp_directory\", \"type\": \"function\", \"signature\": \"(ftp_server, ftp_user, ftp_password, ftp_dir)\", \"return_type\": \"list\", \"short_description\": \"Fetches a list of files from an FTP directory and downloads them to a local directory.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"list_ftp_directory\", \"type\": \"function\", \"signature\": \"(ftp_server, ftp_user, ftp_password, ftp_dir)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in the specified directory on an FTP server.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"check_and_create_directory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a directory exists and creates it if it does not exist.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"checkPathExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"checkPathExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"checkPathExistence\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"checkPathExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"checkPathExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/15", "solution": "{\n  \"name\": \"check_path_exists\",\n  \"type\": \"callable\",\n  \"signature\": \"(path)\",\n  \"return_type\": \"bool\",\n  \"short_description\": \"Checks if a given path exists.\"\n}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"checkPathExists\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists and is accessible.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"checkIfPathExists\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"checkPathExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"checkPathExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"check_directory_existence\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a directory exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"file_exists\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file or directory at the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"check_path_existence\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"check_path_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists. Returns True if the path exists and is accessible, otherwise returns False.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"file_directory_exists\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a directory path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"check_path_existence\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"check_path_exists\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"check_path_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"check_path_existence\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"check_path_existence\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists and returns True if it does, otherwise returns False.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"checkDirectoryExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a directory exists at the specified path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"create_directory_if_not_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory at the specified path if it does not already exist.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"listDirectoryFiles\", \"type\": \"function\", \"signature\": \"(directory)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in the specified directory.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"checkIfPathExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"checkDirectoryExists\", \"type\": \"callable\", \"signature\": \"(directoryPath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a directory exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"check_path_exists\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"checkPathExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file or directory exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"checkPathExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"checkPathExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"file_exists\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"file_exists\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the specified file exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"file_exists\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"file_exists\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Check if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"check_file_exists\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the specified path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"check_file_existence\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"check_file_existence\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"file_exists\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"fileExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the specified path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given file path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"fileExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path. Returns True if the file exists and is accessible, otherwise returns False.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"file_exists\", \"type\": \"callable\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"checkImageExists\", \"type\": \"function\", \"signature\": \"(imagePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if an image file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"checkImageExists\", \"type\": \"function\", \"signature\": \"(imagePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the image file exists at the specified path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"checkImageExists\", \"type\": \"function\", \"signature\": \"(imagePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if an image file exists at the specified path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/424", "solution": "{\n  \"name\": \"check_image_path\",\n  \"type\": \"function\",\n  \"signature\": \"(image_path)\",\n  \"return_type\": \"bool\",\n  \"short_description\": \"Checks if the provided image path exists.\"\n}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"checkImageExists\", \"type\": \"function\", \"signature\": \"(imagePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if an image file exists at the specified path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"validateImage\", \"type\": \"function\", \"signature\": \"(imagePath)\", \"return_type\": \"bool\", \"short_description\": \"Validates if an image file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"checkImageExists\", \"type\": \"function\", \"signature\": \"(imagePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if an image file exists at the specified path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"checkImageExists\", \"type\": \"callable\", \"signature\": \"(imagePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if an image file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"checkImageExists\", \"type\": \"function\", \"signature\": \"(imagePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if an image file exists at the specified path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/424", "solution": "{\n  \"name\": \"check_image_exists\",\n  \"type\": \"function\",\n  \"signature\": \"(image_path)\",\n  \"return_type\": \"bool\",\n  \"short_description\": \"Checks if an image file exists at the specified path.\"\n}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"check_path_exists\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"check_path_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"check_path_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"check_path_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"check_path_existence\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"check_path_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"check_path_existence\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists. Returns True if the path exists and is accessible, otherwise returns False.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"check_paths_exist\", \"type\": \"function\", \"signature\": \"(path_list)\", \"return_type\": \"list\", \"short_description\": \"Checks if a list of paths exist. Returns a list of paths that exist.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"checkPathExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"check_path_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"checkFileExistence\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file or directory exists at the specified path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"checkScriptPath\", \"type\": \"function\", \"signature\": \"(scriptPath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a script path exists and is accessible.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"checkFileSystemEntry\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given file system entry (file or directory) exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"checkFileExistence\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file or directory exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given file path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"checkFileExistence\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"checkPathExists\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"check_path_existence\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with sensor data for the specified number of hours and saves it in the given directory.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with sensor data for the specified number of hours and saves it in the given output directory.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"create_directory\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Creates a directory at the specified path if it does not already exist. Returns True if the directory was created, False otherwise.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file containing sensor data for a given number of hours and saves it in the specified directory.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with sensor data for the specified number of hours and saves it in the given output directory.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file containing sensor data for a given number of hours.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"checkPathExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with sensor data for a specified number of hours and saves it in the given output directory.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with sensor data for a given number of hours and saves it in the specified output directory.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with sensor data for a given number of hours and saves it in the specified output directory.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"generate_traffic_data\",\n  \"type\": \"function\",\n  \"signature\": \"(hours, output_dir='./output')\",\n  \"return_type\": \"tuple(str, matplotlib.axes._subplots.AxesSubplot)\",\n  \"short_description\": \"Generates a CSV file with simulated traffic data and plots it over time.\"\n}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple\", \"short_description\": \"Generates traffic data and plots it over time.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple\", \"short_description\": \"Generates traffic data and plots it over time.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"createTrafficDataFile\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple(str, plt.Axes)\", \"short_description\": \"Creates a CSV file with traffic data for a given number of hours and plots the data using matplotlib.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple\", \"short_description\": \"Generates traffic data for a specified number of hours and saves it to a CSV file. It also plots the data and displays it.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple(str, matplotlib.axes._subplots.AxesSubplot)\", \"short_description\": \"Generates traffic data for a given number of hours and optionally saves it to a specified directory, then plots the data.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"generate_traffic_data\",\n  \"type\": \"function\",\n  \"signature\": \"(hours, output_dir='./output')\",\n  \"return_type\": \"tuple(str, matplotlib.axes._subplots.AxesSubplot)\",\n  \"short_description\": \"Generates a CSV file containing traffic data for a given number of hours and plots the data using matplotlib.\"\n}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple(str, matplotlib.axes._subplots.AxesSubplot)\", \"short_description\": \"Generates a CSV file with traffic data and plots it over time.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"generate_traffic_data\",\n  \"type\": \"function\",\n  \"signature\": \"(hours, output_dir='./output')\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a CSV file with simulated traffic data and plots the data over time.\"\n}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple(str, plt.Axes)\", \"short_description\": \"Generates traffic data and plots it over time. Returns the file path of the generated CSV and the matplotlib Axes object of the plot.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"getWeatherData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates weather data and saves it to a CSV file, then creates a backup of the file in a specified directory.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"checkIfPathExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for a given number of hours and saves it to a CSV file, then creates a backup of the file.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for the specified number of hours and saves it to a CSV file, creating a backup of the file in the specified output directory.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for the specified number of hours and saves it to a CSV file, also creates a backup of the file.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report CSV file and creates a backup of it in the specified directory.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the specified path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with weather data for the specified number of hours and returns the path to the generated file.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"createWeatherDataFile\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Creates a CSV file with weather data and returns the file path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"createWeatherDataFile\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Creates a CSV file with weather data for a given number of hours and returns the path to the file.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"check_path_exists\", \"type\": \"function\", \"signature\": \"(path_arg)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists. Returns True if the path exists and is accessible, otherwise returns False.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"check_path_existence\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"file_count\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"int\", \"short_description\": \"Counts the number of files in a specified directory.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"file_count\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"int\", \"short_description\": \"Returns the number of files in the given directory.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"validate_path\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path is valid and accessible.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"get_file_info\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about a file, including its size, creation time, and modification time.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"is_valid_directory\", \"type\": \"callable\", \"signature\": \"(directory_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the provided directory path is valid and exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"file_count\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"int\", \"short_description\": \"Returns the number of files in the specified directory.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"file_exists\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file or directory exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"check_path_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists. Returns True if the path exists and is accessible, otherwise returns False.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"writeCsvData\", \"type\": \"function\", \"signature\": \"(data, filePath)\", \"return_type\": \"str\", \"short_description\": \"Writes data to a CSV file at the specified path. Returns the file path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"file_not_exists\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file does not exist at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"write_data_to_csv\", \"type\": \"function\", \"signature\": \"(data, path)\", \"return_type\": \"str\", \"short_description\": \"Writes data to a CSV file at the specified path. Returns the path to the CSV file.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"fileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the specified path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"checkAndRemoveFile\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists and removes it if it does.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"writeDataToCsv\", \"type\": \"callable\", \"signature\": \"(data, filePath)\", \"return_type\": \"str\", \"short_description\": \"Writes data to a CSV file at the specified path. Returns the file path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"writeToCsv\", \"type\": \"function\", \"signature\": \"(data, filePath)\", \"return_type\": \"str\", \"short_description\": \"Writes data to a CSV file at the specified path. Returns the file path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"create_csv_file\", \"type\": \"function\", \"signature\": \"(data, file_path)\", \"return_type\": \"str\", \"short_description\": \"Creates a CSV file with the provided data at the specified file path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"deleteFileIfExists\", \"type\": \"callable\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Deletes the specified file if it exists. Returns True if the file was deleted, False otherwise.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"check_file_exists\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"fileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the specified file path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"fileExists\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given file path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"fileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"check_if_exists\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"fileExists\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given file path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"check_if_exists\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"check_directory_existence\", \"type\": \"callable\", \"signature\": \"(directory_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a directory exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"check_path_existence\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"checkIfPathExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"checkPathExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"checkIfPathExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"check_file_exists\", \"type\": \"callable\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"createArchiveDirectory\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Creates a directory at the specified path if it does not already exist.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"check_directory_existence\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a directory exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"check_directory_exists\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a directory exists at the specified path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"check_path_existence\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"check_directory_exists\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a directory exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"checkIfFileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"checkIfPathIsWritable\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Determines if a given path is writable.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"check_path_existence\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"readCsvContent\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"list[dict]\", \"short_description\": \"Reads the content of a CSV file and returns it as a list of dictionaries.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file at the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"checkPathExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"readCsvData\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"dict\", \"short_description\": \"Reads data from a CSV file and returns it as a dictionary.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"checkPathExists\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"checkPathExistence\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/800", "solution": "{\"name\": \"checkPathExists\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists. Returns True if the path exists and is accessible, otherwise returns False.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"fileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file at the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"checkPathExistence\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"isPathValid\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists and is accessible.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"checkPathExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"fileExists\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file or directory at the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"fileExists\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file or directory exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"fileExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file or directory at the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"isPathValid\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path is valid and exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"checkPathExistence\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"checkPathExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"check_path_existence\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"check_path_existence\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"check_path_existence\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"check_path_existence\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"check_path_exists\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"check_directory_existence\", \"type\": \"function\", \"signature\": \"(directory)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a directory exists. Returns True if the directory exists, otherwise False.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"check_path_existence\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"check_path_existence\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"check_path_exists\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Determines whether the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"check_path_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"check_directory_exists\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given directory path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"check_directory_exists\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a directory exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"check_and_convert_files\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, allowed_extensions)\", \"return_type\": \"int\", \"short_description\": \"Checks if directories exist, converts files to CSV format, and saves them in the target directory.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"check_path_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Determines if the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"check_path_existence\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"check_directory_exists\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a directory exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"check_directory_existence\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a directory exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"check_directory_existence\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a directory exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"check_directory_exists\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a directory exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"check_directory_exists\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a directory exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"check_path_existence\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"isPathValid\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path is valid and accessible.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"list_directory_contents\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"dict\", \"short_description\": \"Lists the contents of a directory, including file details and applying a set of predicates.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"list_directory_contents\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Lists the contents of a directory, including detailed information about each item.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directoryPath)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths in the specified directory.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"checkPathExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"checkPathExistence\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"check_directory_exists\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given directory path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"check_directory_existence\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given directory path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"check_path_exists\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"verifyZipContent\", \"type\": \"function\", \"signature\": \"(zipFilePath)\", \"return_type\": \"bool\", \"short_description\": \"Verifies if the contents of a ZIP file at the given path are intact and can be read.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"check_path_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"checkPathExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"checkExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"verifyZipContent\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Verify if the ZIP file at the given path contains at least one file.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"verifyZipContent\", \"type\": \"function\", \"signature\": \"(zipFilePath)\", \"return_type\": \"bool\", \"short_description\": \"Verifies if the content of a ZIP file is intact and can be extracted without errors.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"check_path_exists\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given path exists.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"verifyZipContent\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Verifies if the content of a ZIP file at the specified path is valid.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generate_file_hash\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"str\", \"short_description\": \"Generates a SHA-256 hash for the given file and returns it as a hexadecimal string.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"check_file_exists\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"calculate_hash\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"str\", \"short_description\": \"Calculates the SHA-256 hash of the given file.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"calculate_sha256\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"str\", \"short_description\": \"Calculates the SHA-256 hash of a given file.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"check_file_integrity\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"str\", \"short_description\": \"Calculates the SHA-256 hash of a given file and returns it as a hexadecimal string. Returns 'File not found' if the file does not exist.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"get_file_size\", \"type\": \"callable\", \"signature\": \"(file_path)\", \"return_type\": \"int\", \"short_description\": \"Retrieve the size of a file in bytes.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"check_file_existence\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Check if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"check_file_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generate_sha256\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"str\", \"short_description\": \"Generate a SHA-256 hash for the given file.\"}"}
{"api_id": 156, "api_name": "os.path.exists", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generate_hash\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"str\", \"short_description\": \"Generates a SHA-256 hash for the given file.\"}"}
{"api_id": 157, "api_name": "os.getenv", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"getEnvironmentVariable\", \"type\": \"callable\", \"signature\": \"(key, default=None)\", \"return_type\": \"str or None\", \"short_description\": \"Retrieves the value of an environment variable. If the variable is not set, it returns the provided default value, which defaults to None.\"}"}
{"api_id": 157, "api_name": "os.getenv", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"getEnvironmentVariable\", \"type\": \"callable\", \"signature\": \"(key, default=None)\", \"return_type\": \"str or None\", \"short_description\": \"Retrieves the value of an environment variable. Returns the variable's value if it exists, or the provided default value if it does not.\"}"}
{"api_id": 157, "api_name": "os.getenv", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"getEnv\", \"type\": \"function\", \"signature\": \"(key, default=None)\", \"return_type\": \"str|None\", \"short_description\": \"Retrieves an environment variable, returning None if the variable is not set.\"}"}
{"api_id": 157, "api_name": "os.getenv", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"getEnvironmentVariable\", \"type\": \"callable\", \"signature\": \"(key, default=None)\", \"return_type\": \"str or None\", \"short_description\": \"Retrieves an environment variable, returning None if the variable does not exist. Provides an optional default value to return if the variable is not found.\"}"}
{"api_id": 157, "api_name": "os.getenv", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"get_environment_variable\", \"type\": \"function\", \"signature\": \"(key, default=None)\", \"return_type\": \"str\", \"short_description\": \"Retrieves the value of an environment variable, returning a default value if the variable is not set.\"}"}
{"api_id": 157, "api_name": "os.getenv", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"getEnv\", \"type\": \"function\", \"signature\": \"(key, default=None)\", \"return_type\": \"str|None\", \"short_description\": \"Retrieves an environment variable, returning None if the key does not exist. Optionally provides a default value.\"}"}
{"api_id": 157, "api_name": "os.getenv", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"getEnvVariable\", \"type\": \"function\", \"signature\": \"(key, default=None)\", \"return_type\": \"str|None\", \"short_description\": \"Retrieves an environment variable, returning the default value if the key is not found.\"}"}
{"api_id": 157, "api_name": "os.getenv", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"get_env_variable\", \"type\": \"callable\", \"signature\": \"(key, default=None)\", \"return_type\": \"str or None\", \"short_description\": \"Retrieves the value of an environment variable. Returns the default value if the environment variable is not set.\"}"}
{"api_id": 157, "api_name": "os.getenv", "task_id": "BigCodeBench/401", "solution": "{\"name\": \"getEnv\", \"type\": \"callable\", \"signature\": \"(key, default=None)\", \"return_type\": \"str\", \"short_description\": \"Retrieves an environment variable, returning the specified default if the variable is not found.\"}"}
{"api_id": 157, "api_name": "os.getenv", "task_id": "BigCodeBench/401", "solution": "{\n  \"name\": \"get_environment_variable\",\n  \"type\": \"callable\",\n  \"signature\": \"(key, default=None)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Retrieves an environment variable. Returns the default value if the variable is not found.\"\n}"}
{"api_id": 158, "api_name": "os.scandir", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"get_file_details\", \"type\": \"function\", \"signature\": \"(directory_path: str)\", \"return_type\": \"list\", \"short_description\": \"Retrieve detailed information about files in a specified directory.\"}"}
{"api_id": 158, "api_name": "os.scandir", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"list_directory_details\", \"type\": \"function\", \"signature\": \"(directory_path: str)\", \"return_type\": \"list[tuple[str, int, str, str]]\", \"short_description\": \"Returns detailed information about files in the specified directory. The information includes file name, size, creation time, and modification time for each file.\"}"}
{"api_id": 158, "api_name": "os.scandir", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"list_directory_contents\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"list\", \"short_description\": \"Lists detailed information about the contents of a directory.\"}"}
{"api_id": 158, "api_name": "os.scandir", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"list_directory_details\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"list\", \"short_description\": \"Returns detailed information about files in a directory as a list of tuples.\"}"}
{"api_id": 158, "api_name": "os.scandir", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"list_directory_entries\", \"type\": \"function\", \"signature\": \"(directory_path: str)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of tuples containing details about files in the specified directory.\"}"}
{"api_id": 158, "api_name": "os.scandir", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"list_directory_contents\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of tuples containing details about the files in the specified directory.\"}"}
{"api_id": 158, "api_name": "os.scandir", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"list_directory_entries\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Retrieve a list of directory entries with detailed information including file sizes and timestamps.\"}"}
{"api_id": 158, "api_name": "os.scandir", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"list_directory_files\", \"type\": \"function\", \"signature\": \"(directory_path: str)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of tuples containing details of files in the specified directory. Each tuple includes the filename, file size, creation time, and modification time.\"}"}
{"api_id": 158, "api_name": "os.scandir", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"list_directory_contents\", \"type\": \"function\", \"signature\": \"(directory_path: str)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of tuples containing details about files in the specified directory. Each tuple includes the file name, size, creation time, and modification time.\"}"}
{"api_id": 158, "api_name": "os.scandir", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"list_directory_entries\", \"type\": \"callable\", \"signature\": \"(directory_path: str)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of tuples containing details about files in the specified directory. Each tuple contains the filename, file size, creation time, and modification time.\"}"}
{"api_id": 159, "api_name": "os.path.dirname", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomFileName\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a random file name with a predefined extension\"}"}
{"api_id": 159, "api_name": "os.path.dirname", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"createDirectoryIfNotExists\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"None\", \"short_description\": \"Creates the directory component of a pathname if it does not exist\"}"}
{"api_id": 159, "api_name": "os.path.dirname", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"checkFileExists\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file exists at the given path\"}"}
{"api_id": 159, "api_name": "os.path.dirname", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"createDirectoryIfNotExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"None\", \"short_description\": \"Ensures that the directory for the given path exists.\"}"}
{"api_id": 159, "api_name": "os.path.dirname", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateUniqueId\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique ID\"}"}
{"api_id": 159, "api_name": "os.path.dirname", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"(length)\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of a specified length\"}"}
{"api_id": 159, "api_name": "os.path.dirname", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"createDirectoryIfNotExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"None\", \"short_description\": \"Creates the directory component of a path if it does not exist.\"}"}
{"api_id": 159, "api_name": "os.path.dirname", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateUniqueId\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique ID\"}"}
{"api_id": 159, "api_name": "os.path.dirname", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"createDirectoryIfNotExists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"None\", \"short_description\": \"Ensures that the directory for the given path exists.\"}"}
{"api_id": 159, "api_name": "os.path.dirname", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateUniqueId\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique ID\"}"}
{"api_id": 160, "api_name": "os.stat", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"get_file_details\", \"type\": \"function\", \"signature\": \"(directory_path: str)\", \"return_type\": \"List[Tuple[str, int, str, str]]\", \"short_description\": \"Retrieve detailed information about files in a given directory, including file sizes, creation times, and modification times.\"}"}
{"api_id": 160, "api_name": "os.stat", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"get_file_creation_times\", \"type\": \"function\", \"signature\": \"(directory_path: str)\", \"return_type\": \"List[Tuple[str, int, str, str]]\", \"short_description\": \"Retrieves detailed information about files in a given directory, including their creation and modification times.\"}"}
{"api_id": 160, "api_name": "os.stat", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"get_file_creation_times\", \"type\": \"function\", \"signature\": \"(directory_path: str)\", \"return_type\": \"List[Tuple[str, int, str, str]]\", \"short_description\": \"Retrieve a list of tuples containing file details including name, size, creation time, and modification time for files in a given directory.\"}"}
{"api_id": 160, "api_name": "os.stat", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"get_file_details\", \"type\": \"function\", \"signature\": \"(directory_path: str)\", \"return_type\": \"List[Tuple[str, int, str, str]]\", \"short_description\": \"Retrieve detailed information about files in a given directory, including file sizes, creation times, and modification times.\"}"}
{"api_id": 160, "api_name": "os.stat", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"get_file_creation_times\", \"type\": \"function\", \"signature\": \"(directory_path: str)\", \"return_type\": \"List[Tuple[str, int, str, str]]\", \"short_description\": \"Retrieve detailed file creation and modification times for all files in a given directory.\"}"}
{"api_id": 160, "api_name": "os.stat", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"get_file_metadata\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"dict\", \"short_description\": \"Retrieve detailed metadata for a given file path.\"}"}
{"api_id": 160, "api_name": "os.stat", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"get_file_metadata\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"dict\", \"short_description\": \"Retrieve detailed metadata for a given file path.\"}"}
{"api_id": 160, "api_name": "os.stat", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"get_file_details\", \"type\": \"function\", \"signature\": \"(directory_path: str)\", \"return_type\": \"List[Tuple[str, int, str, str]]\", \"short_description\": \"Retrieves detailed information about files in a given directory, including their names, sizes, creation times, and modification times.\"}"}
{"api_id": 160, "api_name": "os.stat", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"get_directory_file_info\", \"type\": \"function\", \"signature\": \"(directory_path: str)\", \"return_type\": \"List[Tuple[str, int, str, str]]\", \"short_description\": \"Retrieve detailed information about files in a given directory, including file sizes, creation times, and modification times.\"}"}
{"api_id": 160, "api_name": "os.stat", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"get_file_details\", \"type\": \"function\", \"signature\": \"(directory_path: str)\", \"return_type\": \"list[tuple[str, int, str, str]]\", \"short_description\": \"Retrieve detailed information about files in a given directory, including their names, sizes, creation times, and modification times.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths within the given directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"generateUniqueId\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique ID consisting of uppercase letters and digits.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"generateUniqueId\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique identifier string.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"joinPaths\", \"type\": \"function\", \"signature\": \"(path1, path2)\", \"return_type\": \"str\", \"short_description\": \"Combines two path components into a single path string, ensuring a single separator between components.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths within the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"generateUniqueId\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique ID, useful for creating identifiers in a distributed system.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"createZipFromDirectory\", \"type\": \"function\", \"signature\": \"(directoryPath, zipFileName)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip file from the contents of a directory. Returns the path to the created zip file.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"generateUniqueId\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique identifier string.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"generateThumbnails\", \"type\": \"function\", \"signature\": \"(imagePaths, thumbnailSize)\", \"return_type\": \"list\", \"short_description\": \"Generates thumbnails for a list of image files. Each thumbnail will be resized to the specified size.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"generateUniqueIdentifier\", \"type\": \"function\", \"signature\": \"(length)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique string identifier of the specified length.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/123", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path, file_extension)\", \"return_type\": \"list\", \"short_description\": \"Retrieves a list of file paths with a specific extension from a given directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/123", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directoryPath, fileExtension)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths with a specified extension in a given directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/123", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"dict\", \"short_description\": \"Generates a comprehensive report containing statistics and insights about the data.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/123", "solution": "{\"name\": \"join_paths\", \"type\": \"function\", \"signature\": \"(path_list, separator='/', absolute=False)\", \"return_type\": \"str\", \"short_description\": \"Joins a list of path components with the specified separator. If absolute is True, any absolute path at the beginning will start the result.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/123", "solution": "{\"name\": \"list_files\", \"type\": \"function\", \"signature\": \"(directory, extension)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths with a specified extension in a given directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/123", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path, extension)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths with the specified extension in the given directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/123", "solution": "{\"name\": \"calculate_total_files\", \"type\": \"function\", \"signature\": \"(directory_path, file_extension)\", \"return_type\": \"int\", \"short_description\": \"Calculates the total number of files with a specific extension in a given directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/123", "solution": "{\"name\": \"calculate_total\", \"type\": \"function\", \"signature\": \"(my_list, file_dir='./data_files/', file_ext='.csv')\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Reads CSV files from a directory, concatenates them, and returns the concatenated DataFrame.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/123", "solution": "{\"name\": \"generate_unique_filename\", \"type\": \"function\", \"signature\": \"(prefix, extension)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique filename by appending a timestamp to a given prefix and extension.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/123", "solution": "{\"name\": \"get_file_paths\", \"type\": \"function\", \"signature\": \"(directory, extension)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths in the specified directory with the given extension.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"downloadAndExtractZip\", \"type\": \"function\", \"signature\": \"(url, destinationDirectory, headers=None)\", \"return_type\": \"List[str]\", \"short_description\": \"Downloads a file from the given URL and extracts its contents to the specified destination directory. Returns a list of files extracted.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"downloadAndExtractZip\", \"type\": \"function\", \"signature\": \"(url, destination_directory, headers=None)\", \"return_type\": \"list\", \"short_description\": \"Downloads a file from the given URL and extracts it to the specified directory. Returns a list of files extracted.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"downloadAndExtract\", \"type\": \"function\", \"signature\": \"(url, destinationDirectory, headers=None)\", \"return_type\": \"List[str]\", \"short_description\": \"Downloads a file from the given URL and extracts it to the specified destination directory. Returns a list of files extracted.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"downloadAndUnzip\", \"type\": \"function\", \"signature\": \"(url, destinationDirectory, headers=None)\", \"return_type\": \"list\", \"short_description\": \"Downloads a file from a given URL and extracts its contents to the specified destination directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"downloadAndExtract\", \"type\": \"function\", \"signature\": \"(url, destination_directory, headers=None)\", \"return_type\": \"list[str]\", \"short_description\": \"Downloads a file from the given URL and extracts its contents to the specified destination directory. Returns a list of files extracted.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"fetchResource\", \"type\": \"function\", \"signature\": \"(url, headers=None)\", \"return_type\": \"dict\", \"short_description\": \"Fetches a resource from the given URL and returns its content as a dictionary.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"fetchAndUnzip\", \"type\": \"function\", \"signature\": \"(url, destinationDirectory, headers=None)\", \"return_type\": \"list\", \"short_description\": \"Fetches a file from a given URL, downloads it as a zip file, and extracts its contents to the specified destination directory. Returns a list of extracted files.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"fetchAndUnzip\", \"type\": \"function\", \"signature\": \"(url, destinationDirectory, headers=None)\", \"return_type\": \"list[str]\", \"short_description\": \"Fetches a file from the given URL and extracts it to the specified destination directory. Returns a list of files extracted.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"fetchAndExtractZip\", \"type\": \"function\", \"signature\": \"(url, destination_directory, headers=None)\", \"return_type\": \"list\", \"short_description\": \"Fetches a zip file from a given URL and extracts it to the specified destination directory. Returns a list of files extracted.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"downloadAndExtract\", \"type\": \"function\", \"signature\": \"(url, destination_directory, headers=None)\", \"return_type\": \"list\", \"short_description\": \"Downloads a file from a given URL and extracts it to a specified directory. Returns a list of files extracted.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"generateWordCloud\", \"type\": \"function\", \"signature\": \"(text, fontPath, outputFile)\", \"return_type\": \"str\", \"short_description\": \"Generates a word cloud image from the provided text and saves it to the specified output file.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"generateWordCloud\", \"type\": \"function\", \"signature\": \"(text, fontPath, outputFile)\", \"return_type\": \"None\", \"short_description\": \"Generates a word cloud image from the given text and saves it to the specified output file. The font path is optional and specifies the path to the font file used for rendering the text.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"(data, format)\", \"return_type\": \"str\", \"short_description\": \"Generates a report in the specified format from the given data.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"countWordsInDirectory\", \"type\": \"function\", \"signature\": \"(directoryPath)\", \"return_type\": \"int\", \"short_description\": \"Counts the total number of words in all .txt files within a given directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"generateWordCloud\", \"type\": \"function\", \"signature\": \"(text, fontPath, outputImage)\", \"return_type\": \"str\", \"short_description\": \"Generates a word cloud image from the provided text and saves it to a specified output file.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"generateWordCloud\", \"type\": \"function\", \"signature\": \"(text, fontPath, width, height)\", \"return_type\": \"image\", \"short_description\": \"Generates a word cloud image from the given text, using a specified font and dimensions.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"(data, format)\", \"return_type\": \"str\", \"short_description\": \"Generates a report in the specified format from the provided data.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"joinPaths\", \"type\": \"function\", \"signature\": \"(components)\", \"return_type\": \"str\", \"short_description\": \"Combines a list of path components into a single path string, ensuring proper separation and handling of absolute paths.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"countWordsInDirectory\", \"type\": \"function\", \"signature\": \"(directoryPath)\", \"return_type\": \"dict\", \"short_description\": \"Counts the total number of words in all text files within a given directory and returns a dictionary with word counts.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/287", "solution": "{\"name\": \"joinPaths\", \"type\": \"function\", \"signature\": \"(path1, path2)\", \"return_type\": \"str\", \"short_description\": \"Combines two path components into a single path string. If the second path component is absolute, it replaces the first component. If the first path component is empty, it returns the second component.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(count, filename)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with random data and returns the file path.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generate_csv_with_averages\", \"type\": \"function\", \"signature\": \"(filename, people_count, columns)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with random data and appends a row with average values for specified columns.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"(data, filename)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV report from the provided data and saves it to a file. The report includes a header row with column names and a summary row with averages of the numerical columns.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"(data, columns, output_path)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV report from the provided data, column names, and saves it to the specified output path.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateRandomPeopleData\", \"type\": \"function\", \"signature\": \"(count)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file containing random data for a given number of people, including columns for Name, Age, Height, and Weight, followed by average values for each column.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateRandomPeopleData\", \"type\": \"function\", \"signature\": \"(count)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with random people data including their names, ages, heights, and weights, and calculates their averages.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generate_csv\", \"type\": \"function\", \"signature\": \"(data, filename)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with the provided data and returns the file path.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateUniqueId\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique string identifier.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"(data, filename)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV report from the provided data and saves it to a file.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(count, filename)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with random data and returns the file path.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in the specified directory, returning a list of their names.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"generateTimestampedFiles\", \"type\": \"function\", \"signature\": \"(directory, filenamePattern)\", \"return_type\": \"dict\", \"short_description\": \"Generates timestamped filenames for files in a given directory based on a provided pattern.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"create_directory_structure\", \"type\": \"function\", \"signature\": \"(path, subdirectories)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory structure based on a list of subdirectories within a given path.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"createSubdirectory\", \"type\": \"function\", \"signature\": \"(directory, subdirectoryName)\", \"return_type\": \"None\", \"short_description\": \"Creates a new subdirectory within the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"split_and_move_files\", \"type\": \"function\", \"signature\": \"(directory, pattern)\", \"return_type\": \"dict\", \"short_description\": \"Splits filenames based on a regex pattern and moves them to subdirectories based on the split result.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"create_directory_structure\", \"type\": \"function\", \"signature\": \"(directory, subdirectories)\", \"return_type\": \"dict\", \"short_description\": \"Creates a directory structure within the given directory based on the provided list of subdirectories.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"generateUniqueId\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique identifier string.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"generate_unique_id\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique string identifier.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"get_file_details\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about a file, including its size, creation time, and permissions.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"generate_file_list\", \"type\": \"function\", \"signature\": \"(directory_path, file_extension)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of file paths with a specific extension in a given directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"generate_file_report\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"dict\", \"short_description\": \"Generates a report of all .bat files in the specified directory, including their sizes and modification times.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"generate_file_report\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"dict\", \"short_description\": \"Generates a report of all .bat files in the specified directory, including their base names and exit codes.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"get_file_extension\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"str\", \"short_description\": \"Returns the file extension of the given file path.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths for all .bat files in the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths within the specified directory that match a given pattern.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/326", "solution": "{\n  \"name\": \"get_file_creation_times\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Returns a dictionary with file names as keys and their creation times as values for files in the specified directory.\"\n}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"generate_unique_id\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique identifier string.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"getRandomFile\", \"type\": \"function\", \"signature\": \"(directory_path: str)\", \"return_type\": \"str\", \"short_description\": \"Returns the name of a randomly selected file from the given directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"generateRandomFileName\", \"type\": \"function\", \"signature\": \"(directoryPath: str)\", \"return_type\": \"str\", \"short_description\": \"Generates a random file name from the given directory path.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"generateRandomFilename\", \"type\": \"function\", \"signature\": \"(directoryPath: str, seed: int = 100) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a random filename within the given directory, with a seed for reproducibility.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"generateRandomFilename\", \"type\": \"function\", \"signature\": \"(directoryPath: str, seed: int = 100)\", \"return_type\": \"str\", \"short_description\": \"Generates a random filename from the given directory, with a seed for reproducibility.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"generateRandomFileName\", \"type\": \"function\", \"signature\": \"(directoryPath: str)\", \"return_type\": \"str\", \"short_description\": \"Generates a random file name from the given directory path.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"generateRandomFileName\", \"type\": \"function\", \"signature\": \"(directoryPath: str, seed: int = 100) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a random file name from the files in the given directory, with a seed for reproducibility.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"generateRandomFileName\", \"type\": \"function\", \"signature\": \"(directoryPath: str, seed: int = 100)\", \"return_type\": \"str\", \"short_description\": \"Generates a random file name from the given directory path, with a seed for reproducibility.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"generateRandomFilename\", \"type\": \"function\", \"signature\": \"(directoryPath: str)\", \"return_type\": \"str\", \"short_description\": \"Generates a random filename within the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"generateRandomFileName\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a random file name from a given list of file names.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"generateRandomFileName\", \"type\": \"function\", \"signature\": \"(directoryPath: str, seed: int = 100)\", \"return_type\": \"str\", \"short_description\": \"Generates a random file name from the given directory. The seed can be set for reproducibility.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"get_file_info\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about a file, including size, creation time, and modification time.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"generate_summary_stats\", \"type\": \"function\", \"signature\": \"(dataframe, column_name)\", \"return_type\": \"dict\", \"short_description\": \"Generates summary statistics for a specified column in a DataFrame, including mean, median, and standard deviation.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"generate_report\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"dict\", \"short_description\": \"Generates a comprehensive report summarizing key statistics from multiple Excel files. The report includes mean, median, and standard deviation for specified columns across all files.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"get_file_info\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about a file, including its size, creation time, and modification time.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"generate_report\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"dict\", \"short_description\": \"Generates a comprehensive report containing statistical summaries of specified columns from multiple Excel files.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"join_path\", \"type\": \"function\", \"signature\": \"(base_path, *paths)\", \"return_type\": \"str\", \"short_description\": \"Combines the given path components into a single path, similar to os.path.join but returns a string.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"generate_report\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"dict\", \"short_description\": \"Generates a detailed report from the provided data, including statistical summaries and visualizations.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"join_paths\", \"type\": \"function\", \"signature\": \"(base_path, *paths)\", \"return_type\": \"str\", \"short_description\": \"Combines a base path with one or more additional path components, ensuring the result is a valid path with proper separators.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"concatenate_strings\", \"type\": \"function\", \"signature\": \"(str1, str2)\", \"return_type\": \"str\", \"short_description\": \"Concatenates two strings with a space in between.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"function\", \"signature\": \"(dataframe, column_name)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures (mean, median, standard deviation) for a specified column in a pandas DataFrame.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"join_path\", \"type\": \"callable\", \"signature\": \"(base, *paths)\", \"return_type\": \"str\", \"short_description\": \"Combines the base path with additional path components, ensuring a single path separator.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"merge_directories\", \"type\": \"function\", \"signature\": \"(source_dir, destination_dir)\", \"return_type\": \"None\", \"short_description\": \"Merges the contents of source_dir into destination_dir. Any existing files in destination_dir will be overwritten.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"join_paths\", \"type\": \"function\", \"signature\": \"(path1, path2)\", \"return_type\": \"str\", \"short_description\": \"Combines two path components into a single path string, ensuring the correct use of forward slashes and handling absolute paths appropriately.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directoryPath, extension)\", \"return_type\": \"list\", \"short_description\": \"Retrieves a list of files with a specific extension from the given directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"create_directory_if_not_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory at the specified path if it does not already exist.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"create_directory_if_not_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory at the specified path if it does not already exist.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"create_directory\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"None\", \"short_description\": \"Creates a new directory at the specified path. If the directory already exists, this function does nothing.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"joinPaths\", \"type\": \"function\", \"signature\": \"(path1, path2)\", \"return_type\": \"str\", \"short_description\": \"Combines two path components into a single path string, ensuring a single separator between components.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"joinPaths\", \"type\": \"function\", \"signature\": \"(components)\", \"return_type\": \"str\", \"short_description\": \"Combines a list of path components into a single path string, inserting '/' as needed.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"moveFiles\", \"type\": \"function\", \"signature\": \"(sourceDir, destinationDir, extension)\", \"return_type\": \"list\", \"short_description\": \"Moves all files with a specific extension from a source directory to a destination directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, outputDir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file containing sensor data for the specified number of hours and saves it in the given directory. Returns the path to the generated CSV file.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file containing sensor data for the specified number of hours.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with sensor data for the specified number of hours and saves it in the given output directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file containing sensor data for the specified number of hours and saves it to the specified output directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with sensor data for the specified number of hours and saves it in the given output directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with sensor data for the specified number of hours and saves it in the given output directory. Returns the path to the generated CSV file.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorDataFile\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with sensor data for a given number of hours and saves it in the specified output directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file containing sensor data for a specified number of hours and saves it to the given directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorDataFile\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with sensor data for a given number of hours and saves it to the specified output directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file containing simulated sensor data for a given number of hours and saves it in the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple[str, matplotlib.axes._axes.Axes]\", \"short_description\": \"Generates a CSV file with simulated traffic data and plots it over time.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple(str, matplotlib.axes._axes.Axes)\", \"short_description\": \"Generates a CSV file with traffic data and plots the data using matplotlib.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple[str, plt.Axes]\", \"short_description\": \"Generates a CSV file containing traffic data for a given number of hours and plots the data using matplotlib.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple(str, matplotlib.axes._subplots.AxesSubplot)\", \"short_description\": \"Generates a CSV file with traffic data and plots the data over time.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple(str, matplotlib.axes._subplots.AxesSubplot)\", \"short_description\": \"Generates a CSV file with traffic data for a given number of hours and plots the data using matplotlib.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple(str, matplotlib.axes._subplots.AxesSubplot)\", \"short_description\": \"Generates a CSV file with traffic data for a given number of hours and plots the data using matplotlib.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple(str, matplotlib.axes._subplots.AxesSubplot)\", \"short_description\": \"Generates a CSV file with simulated traffic data and plots the data over time.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple(str, matplotlib.axes._subplots.AxesSubplot)\", \"short_description\": \"Generates a CSV file containing traffic data for specified hours and visualizes it using a line plot.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple\", \"short_description\": \"Generates a CSV file containing simulated traffic data for a given number of hours and outputs a plot of the data.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple(str, matplotlib.axes._subplots.AxesSubplot)\", \"short_description\": \"Generates a CSV file with traffic data and plots the data over time.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report CSV file with the specified number of hours and saves it in the given output directory. Returns the path to the generated CSV file.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for a given number of hours and saves it to a CSV file in the specified output directory. The function also creates a backup of the generated file in a 'backup' subdirectory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for a given number of hours and saves it to a CSV file in the specified output directory, also creates a backup of the file.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report CSV file and creates a backup of it in the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report CSV file and creates a backup in the specified output directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report CSV file and creates a backup of it in the specified output directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for a given number of hours and saves it to a CSV file in the specified output directory. It also creates a backup of the generated file.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for the specified number of hours and saves it to a CSV file in the given output directory. Returns the path to the generated CSV file.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for a given number of hours and saves it to a CSV file in the specified output directory. It also creates a backup of the generated file.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report CSV file and creates a backup of it in the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"(data, output_format)\", \"return_type\": \"str\", \"short_description\": \"Generates a report from the given data in the specified format. The output is a string representation of the report.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"get_file_sizes\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"dict\", \"short_description\": \"Returns a dictionary where keys are file names and values are their sizes in bytes for all files in the given directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"generate_summary\", \"type\": \"function\", \"signature\": \"(data, output_format='csv')\", \"return_type\": \"str\", \"short_description\": \"Generates a summary of the provided data in the specified output format.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"generate_summary\", \"type\": \"function\", \"signature\": \"(data_frame)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a summary DataFrame from the given DataFrame, including basic statistics and counts.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"get_file_extensions\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file extensions found in the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"generate_summary\", \"type\": \"function\", \"signature\": \"(data, target_column)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a summary DataFrame from the provided data, including a count and mean of the target column.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"generate_report\", \"type\": \"function\", \"signature\": \"(data, output_format)\", \"return_type\": \"str\", \"short_description\": \"Generates a report in the specified format from the given data.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"generate_summary\", \"type\": \"function\", \"signature\": \"(data_list, output_format)\", \"return_type\": \"str\", \"short_description\": \"Generates a summary from a list of data entries in a specified format.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"(data, output_format)\", \"return_type\": \"str\", \"short_description\": \"Generates a report in the specified format from the given data.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"generate_summary\", \"type\": \"function\", \"signature\": \"(data_list, summary_type)\", \"return_type\": \"dict\", \"short_description\": \"Generates a summary of data from a list of dictionaries. The type of summary depends on the 'summary_type' parameter.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"list_zip_contents\", \"type\": \"function\", \"signature\": \"(zip_path)\", \"return_type\": \"list\", \"short_description\": \"Lists the contents of a ZIP file.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"list_zip_contents\", \"type\": \"function\", \"signature\": \"(zip_path)\", \"return_type\": \"list\", \"short_description\": \"List the contents of a ZIP file.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"get_file_extensions\", \"type\": \"function\", \"signature\": \"(directory)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file extensions present in the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"list_zip_contents\", \"type\": \"function\", \"signature\": \"(zip_path)\", \"return_type\": \"list\", \"short_description\": \"Lists the contents of a zip file specified by its path.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"generate_unique_filename\", \"type\": \"function\", \"signature\": \"(prefix, extension)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique filename using a provided prefix and extension.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"list_zip_contents\", \"type\": \"function\", \"signature\": \"(zip_path)\", \"return_type\": \"list\", \"short_description\": \"Lists the contents of a specified ZIP file.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"list_zip_contents\", \"type\": \"function\", \"signature\": \"(zip_path)\", \"return_type\": \"list\", \"short_description\": \"Lists the contents of a zip file.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"list_zip_contents\", \"type\": \"function\", \"signature\": \"(zip_path)\", \"return_type\": \"list\", \"short_description\": \"Lists the contents of a specified ZIP file.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"list_zip_contents\", \"type\": \"function\", \"signature\": \"(zip_path)\", \"return_type\": \"list\", \"short_description\": \"Lists the contents of a zip file.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"list_zip_contents\", \"type\": \"callable\", \"signature\": \"(zip_path)\", \"return_type\": \"list\", \"short_description\": \"Lists the contents of a ZIP file.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"generateArchiveFileName\", \"type\": \"function\", \"signature\": \"(baseName, extension)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique archive file name by appending a sequence number to the base name and extension if necessary.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"createArchive\", \"type\": \"function\", \"signature\": \"(directory, pattern)\", \"return_type\": \"str\", \"short_description\": \"Creates a compressed archive of files matching the given pattern in the specified directory. Returns the path to the created archive.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"generateArchiveFileName\", \"type\": \"function\", \"signature\": \"(baseName, extension)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique archive file name based on a base name and extension, ensuring no file with the same name already exists.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"createArchive\", \"type\": \"function\", \"signature\": \"(directory, pattern)\", \"return_type\": \"str\", \"short_description\": \"Creates a compressed archive of files matching the given pattern in the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"createArchive\", \"type\": \"function\", \"signature\": \"(directory, baseName, extension)\", \"return_type\": \"str\", \"short_description\": \"Creates a unique archive file in the specified directory with the given base name and extension.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"createUniqueArchivePath\", \"type\": \"function\", \"signature\": \"(archiveDir, baseName)\", \"return_type\": \"str\", \"short_description\": \"Creates a unique archive file path in the specified directory with a base name.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"generateArchiveFileName\", \"type\": \"function\", \"signature\": \"(basePath, extension)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique archive file name by appending an incrementing number to the base path if a file with the same name already exists.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"createArchive\", \"type\": \"function\", \"signature\": \"(directory, pattern)\", \"return_type\": \"str\", \"short_description\": \"Creates a compressed archive of files matching the given pattern in the specified directory. Returns the path to the created archive file.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"createUniqueArchive\", \"type\": \"function\", \"signature\": \"(archiveDir, baseName, extension)\", \"return_type\": \"str\", \"short_description\": \"Creates a unique archive file name in the specified directory with the given base name and extension.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"createArchive\", \"type\": \"function\", \"signature\": \"(directory, baseName, extension)\", \"return_type\": \"str\", \"short_description\": \"Creates a unique archive file with the given base name and extension in the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"joinPath\", \"type\": \"function\", \"signature\": \"(base, *paths)\", \"return_type\": \"str\", \"short_description\": \"Combines the given path components into a single path. If the last component is empty, it will result in a path ending with a separator.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"splitPath\", \"type\": \"function\", \"signature\": \"(path_str)\", \"return_type\": \"list\", \"short_description\": \"Splits a given path string into its components.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"joinPaths\", \"type\": \"function\", \"signature\": \"(path1, path2)\", \"return_type\": \"str\", \"short_description\": \"Combines two path components into a single path string, ensuring only one separator is used.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"joinPaths\", \"type\": \"function\", \"signature\": \"(path1, path2)\", \"return_type\": \"str\", \"short_description\": \"Combines two path components into a single path string, ensuring the correct use of the system's path separator.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"list_files\", \"type\": \"function\", \"signature\": \"(directory_path, pattern)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file names matching the given pattern in the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"joinPaths\", \"type\": \"function\", \"signature\": \"(path1, path2)\", \"return_type\": \"str\", \"short_description\": \"Combines two path components into a single path string, ensuring the correct use of path separators.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"generateUniqueFilename\", \"type\": \"function\", \"signature\": \"(baseName, extension)\", \"return_type\": \"str\", \"short_description\": \"Creates a unique filename by appending a counter to the base name if a file with the same name already exists in the target directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"joinPaths\", \"type\": \"function\", \"signature\": \"(path1, path2)\", \"return_type\": \"str\", \"short_description\": \"Combines two path components into a single path, ensuring the correct use of the platform's path separator.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"generateUniqueId\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique ID string that can be used as a temporary identifier.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"generate_unique_filename\", \"type\": \"function\", \"signature\": \"(base_name, extension, directory)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique filename by appending a unique identifier to the base name followed by the given extension in the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"concatenatePaths\", \"type\": \"function\", \"signature\": \"(path1, path2)\", \"return_type\": \"str\", \"short_description\": \"Concatenates two path components into a single path, ensuring only one separator is used.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"listFilesWithExtensions\", \"type\": \"function\", \"signature\": \"(directory, extensions)\", \"return_type\": \"list\", \"short_description\": \"Lists all files with specified extensions in a given directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"listFilesWithExtensions\", \"type\": \"function\", \"signature\": \"(directory, extensions)\", \"return_type\": \"list\", \"short_description\": \"Lists all files with specified extensions in a given directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"concatenatePaths\", \"type\": \"function\", \"signature\": \"(path1, path2)\", \"return_type\": \"str\", \"short_description\": \"Combines two path components into a single path, ensuring there is exactly one separator between them.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file names in the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"listFilesWithExtension\", \"type\": \"function\", \"signature\": \"(directory, extensions)\", \"return_type\": \"list\", \"short_description\": \"Lists all files with specified extensions in a given directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"concatenatePaths\", \"type\": \"function\", \"signature\": \"(path1, path2)\", \"return_type\": \"str\", \"short_description\": \"Combines two path components into a single path, ensuring the correct use of path separators.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"generate_unique_id\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique ID consisting of letters and numbers.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of all files in the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"concatenatePaths\", \"type\": \"function\", \"signature\": \"(path1, path2)\", \"return_type\": \"str\", \"short_description\": \"Combines two path components into a single path string, ensuring only one separator is present between them.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"generate_unique_filename\", \"type\": \"function\", \"signature\": \"(prefix, extension)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique filename by appending a timestamp to the given prefix and extension.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"create_directory\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"None\", \"short_description\": \"Creates a new directory at the specified path if it does not already exist.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"create_directories\", \"type\": \"function\", \"signature\": \"(dir_path, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates directories at the specified path, with an option to not raise an error if the directories already exist.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"generateArchive\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, archiveName='archive.zip')\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive from files in a source directory and moves processed files to a target directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"generate_archive\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, archive_name='archive.zip')\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive from files in the source directory and moves processed files to the target directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"generate_unique_filename\", \"type\": \"function\", \"signature\": \"(prefix, extension)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique filename by appending a timestamp to the given prefix and extension.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"generateUniqueFileName\", \"type\": \"function\", \"signature\": \"(prefix, extension)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique file name by appending a prefix and extension.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"create_directories\", \"type\": \"function\", \"signature\": \"(dir_path, exist_ok=False)\", \"return_type\": \"None\", \"short_description\": \"Creates directories at the specified path. If directories already exist, it does not raise an error unless exist_ok is False.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"create_zip_archive\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, archive_name='archive.zip')\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive from files in the source directory and moves the original files to the target directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"create_archive\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, archive_name='archive.zip')\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive from files in a source directory and moves the processed files to a target directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"generateZipFile\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, zipName)\", \"return_type\": \"str\", \"short_description\": \"Creates a ZIP file containing all files with specified extensions from the source directory and saves it in the target directory. Returns the absolute path of the generated ZIP file.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, zip_name)\", \"return_type\": \"str\", \"short_description\": \"Creates a ZIP archive containing all files of the specified extensions from the source directory and saves it to the target directory with the given name.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"generate_unique_filename\", \"type\": \"function\", \"signature\": \"(prefix, extension)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique filename by appending a timestamp to the given prefix and extension.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"generateZip\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, zipName)\", \"return_type\": \"str\", \"short_description\": \"Generates a zip file containing all files with specified extensions from the source directory and saves it to the target directory. Returns the absolute path of the generated zip file.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"create_zip_archive\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, zip_name)\", \"return_type\": \"str\", \"short_description\": \"Creates a ZIP archive containing all files with specified extensions from the source directory and saves it to the target directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"generate_unique_filename\", \"type\": \"function\", \"signature\": \"(base_name, extension, directory)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique filename based on the base name, extension, and directory by appending a unique number if the file already exists.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"generate_unique_filename\", \"type\": \"function\", \"signature\": \"(prefix, extension)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique filename with a given prefix and extension.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"generateZip\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, zipName)\", \"return_type\": \"str\", \"short_description\": \"Generates a ZIP file containing all files with specified extensions from the source directory and saves it to the target directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"generate_zip_archive\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, zip_name)\", \"return_type\": \"str\", \"short_description\": \"Creates a ZIP archive containing files with specified extensions from a source directory and saves it to a target directory. Returns the path to the generated ZIP archive.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"generate_zip_from_directory\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, zip_name)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip file from the contents of a directory and returns the path to the zip file.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convertFiles\", \"type\": \"function\", \"signature\": \"(sourceDir: str, targetDir: str, extensions: List[str])\", \"return_type\": \"int\", \"short_description\": \"Converts files from various formats to CSV and saves them in a target directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convertFiles\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, fileExtensions)\", \"return_type\": \"int\", \"short_description\": \"Converts files from specified extensions in a source directory to CSV format and saves them in a target directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convert_files_to_csv\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, file_extensions)\", \"return_type\": \"int\", \"short_description\": \"Converts files of specified extensions to CSV format and saves them to a target directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convertFiles\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, fileExtensions)\", \"return_type\": \"int\", \"short_description\": \"Converts files from specified source directory to CSV format in the target directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convertFiles\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, fileExtensions)\", \"return_type\": \"int\", \"short_description\": \"Converts files from specified extensions in a source directory to CSV format and saves them in a target directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convertFiles\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, fileExtensions)\", \"return_type\": \"int\", \"short_description\": \"Converts files from specified extensions in a source directory to CSV format and saves them in a target directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convertFiles\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, fileExtensions)\", \"return_type\": \"int\", \"short_description\": \"Converts files from various formats to CSV and saves them in a target directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convert_files\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, file_extensions)\", \"return_type\": \"int\", \"short_description\": \"Converts files from specified extensions in a source directory to CSV format and saves them in a target directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convert_files\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, file_extensions)\", \"return_type\": \"int\", \"short_description\": \"Converts files from specified extensions in a source directory to CSV format and saves them in a target directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convertFiles\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, fileExtensions)\", \"return_type\": \"int\", \"short_description\": \"Converts files from specified source directory to CSV format in a target directory. Returns the number of files converted.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"(jsonData, outputDir, fileName)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a CSV report from JSON data and saves it to a specified directory with a given file name.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"generateCountryReport\", \"type\": \"function\", \"signature\": \"(jsonData, outputDir, fileName)\", \"return_type\": \"tuple(str, pd.DataFrame)\", \"short_description\": \"Generates a CSV report of country populations from JSON data and saves it to a specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"generateCountryPopulationReport\", \"type\": \"function\", \"signature\": \"(jsonData, outputDir, fileName)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a CSV report of country populations from JSON data and saves it to a specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"generateCountryReport\", \"type\": \"function\", \"signature\": \"(jsonData, outputDir, fileName)\", \"return_type\": \"tuple[str, pd.DataFrame]\", \"short_description\": \"Generates a CSV report of country populations from JSON data and saves it to a specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"(data, outputDir, fileName)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a CSV report from JSON data containing country population information and saves it to the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"generateCountryReport\", \"type\": \"function\", \"signature\": \"(jsonData, outputDir, fileName)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a CSV report of country populations from JSON data and saves it to a specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"(data, outputDir, fileName)\", \"return_type\": \"tuple[str, pd.DataFrame]\", \"short_description\": \"Generates a CSV report containing country population data from JSON data and saves it to a specified directory. Returns the file path and the DataFrame.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"generatePopulationReport\", \"type\": \"function\", \"signature\": \"(jsonData, outputDir, fileName)\", \"return_type\": \"tuple(str, pd.DataFrame)\", \"short_description\": \"Generates a CSV report of country populations from JSON data and saves it to a specified directory. The function returns a tuple containing the file path and the DataFrame created from the JSON data.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"generatePopulationReport\", \"type\": \"function\", \"signature\": \"(jsonData, outputDir, fileName)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a CSV report of country populations from JSON data and saves it to a specified directory. Returns a tuple containing the file path and the DataFrame.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"(jsonData, outputDir, fileName)\", \"return_type\": \"tuple(str, pd.DataFrame)\", \"short_description\": \"Generates a CSV report from JSON data containing country population information and saves it to the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"list_directory_contents\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of all files and directories within the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"list_directory_contents\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Lists the contents of a directory, including file and subdirectory names.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"list_directory_contents\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of all files and directories within the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"list_directory_contents\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of all file and directory names in the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"list_directory_contents\", \"type\": \"callable\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Lists the contents of a directory, excluding directories.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"get_directory_info\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about files and directories in a given directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"list_directory_contents\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of all contents in the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"list_files_with_extensions\", \"type\": \"function\", \"signature\": \"(directory_path, extensions)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths with the specified extensions from the given directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"listDirContents\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Lists the contents of a directory, returning a list of dictionaries containing file names and their details such as whether they are files or directories.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"list_directory_contents\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"dict\", \"short_description\": \"Returns a dictionary containing the details of each item in the specified directory. The keys in the dictionary are the item names, and the values are dictionaries with boolean flags indicating the status of the item (e.g., is it a file or a directory, does it contain special characters in its name, etc.).\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"download_and_extract_zip\", \"type\": \"function\", \"signature\": \"(url, download_path)\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from the provided URL and extracts it to a specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"download_and_extract_zip\", \"type\": \"function\", \"signature\": \"(url, download_path='mnt/data/downloads/')\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from a given URL and extracts its contents to a specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"downloadAndExtractZip\", \"type\": \"function\", \"signature\": \"(url, downloadPath)\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from the given URL and extracts it to a specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"download_and_extract_zip\", \"type\": \"function\", \"signature\": \"(url, download_path='mnt/data/downloads/')\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from the provided URL and extracts its contents to a specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"download_and_extract_zip\", \"type\": \"function\", \"signature\": \"(url, download_path='mnt/data/downloads/')\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from the given URL and extracts it to a specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"download_and_unzip\", \"type\": \"function\", \"signature\": \"(url, download_path)\", \"return_type\": \"str\", \"short_description\": \"Downloads a file from the given URL and extracts its contents if the file is a ZIP archive.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"download_and_extract_zip\", \"type\": \"function\", \"signature\": \"(url, download_path)\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from the given URL and extracts it to a specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"verify_zip_file\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the ZIP file at the given path is valid and can be extracted without errors.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"downloadAndExtractZip\", \"type\": \"function\", \"signature\": \"(url, downloadPath)\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from the provided URL and extracts it to a specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"download_and_extract_zip\", \"type\": \"function\", \"signature\": \"(url, download_path='mnt/data/downloads/')\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from the given URL and extracts it to a specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"generate_unique_filename\", \"type\": \"function\", \"signature\": \"(prefix, extension, directory='')\", \"return_type\": \"str\", \"short_description\": \"Generates a unique filename by appending a timestamp and a random suffix to the given prefix and extension, optionally specifying a directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"generateTimestamp\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a timestamp string in the format 'YYYYMMDDHHMMSS'}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"generate_timestamp_filename\", \"type\": \"function\", \"signature\": \"(url, unknown_key, save_dir=None)\", \"return_type\": \"str\", \"short_description\": \"Generates a timestamped filename for the downloaded content based on the URL and an unknown key.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"generateTimestamp\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a timestamp string in the format YYYYMMDDHHMMSSFFF.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"generate_unique_filename\", \"type\": \"function\", \"signature\": \"(prefix, extension, directory='.')\", \"return_type\": \"str\", \"short_description\": \"Generates a unique filename based on the given prefix and extension in the specified directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"generateUniqueFilename\", \"type\": \"function\", \"signature\": \"(prefix, extension, directory)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique filename by appending a timestamp to the given prefix and using the specified extension. The filename is saved in the provided directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"generate_unique_filename\", \"type\": \"function\", \"signature\": \"(prefix, extension, directory='.')\", \"return_type\": \"str\", \"short_description\": \"Generates a unique filename based on the given prefix, extension, and directory.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"generateTimestamp\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a timestamp string in the format YYYYMMDDHHMMSSFFF.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"generateTimestamp\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a timestamp string in the format YYYYMMDDHHMMSSf.\"}"}
{"api_id": 161, "api_name": "os.path.join", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"get_file_from_url\", \"type\": \"function\", \"signature\": \"(url, save_dir=None)\", \"return_type\": \"str\", \"short_description\": \"Downloads a file from a given URL and saves it to a specified directory. Returns the path to the saved file.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"deleteFile\", \"type\": \"callable\", \"signature\": \"(filePath, *, dir_fd=None)\", \"return_type\": \"None\", \"short_description\": \"Deletes a file at the specified path. If dir_fd is provided, the path is interpreted relative to the directory specified by dir_fd.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"clearFile\", \"type\": \"callable\", \"signature\": \"(path)\", \"return_type\": \"None\", \"short_description\": \"Clears the contents of a file by removing it and then re-creating it. This function is intended for use when you need to reset a file's content.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/723", "solution": "{\n  \"name\": \"delete_file\",\n  \"type\": \"callable\",\n  \"signature\": \"(file_path, *, dir_fd=None)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Deletes a file at the specified path. If dir_fd is provided, it is used as the base directory for resolving the path.\"\n}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"writeToCSV\", \"type\": \"function\", \"signature\": \"(data, filePath)\", \"return_type\": \"str\", \"short_description\": \"Writes data to a CSV file at the specified path. Returns the file path.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"deleteFile\", \"type\": \"callable\", \"signature\": \"(filePath, *, dir_fd=None)\", \"return_type\": \"None\", \"short_description\": \"Deletes a file at the specified path. If dir_fd is provided, the path is interpreted relative to the directory referred to by the file descriptor.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"deleteFile\", \"type\": \"function\", \"signature\": \"(filePath, *, dirFd=None)\", \"return_type\": \"None\", \"short_description\": \"Deletes a file at the specified path. If dirFd is provided, it should be a file descriptor open to a directory, and filePath should be relative; filePath will then be relative to that directory.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"deleteFile\", \"type\": \"function\", \"signature\": \"(filePath, *, dir_fd=None)\", \"return_type\": \"None\", \"short_description\": \"Deletes a file at the specified path. If dir_fd is provided, it is used to resolve the path relative to a directory file descriptor.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"deleteFile\", \"type\": \"function\", \"signature\": \"(filePath)\", \"return_type\": \"None\", \"short_description\": \"Deletes a file at the specified path.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"deleteFile\", \"type\": \"callable\", \"signature\": \"(filePath, *, dir_fd=None)\", \"return_type\": \"None\", \"short_description\": \"Deletes a file at the specified path. If dir_fd is provided, it is used to specify the base directory for the path.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/723", "solution": "{\"name\": \"deleteFile\", \"type\": \"callable\", \"signature\": \"(filePath, *, dir_fd=None)\", \"return_type\": \"None\", \"short_description\": \"Deletes a file at the specified path. If dir_fd is provided, it is used to resolve the path relative to a directory file descriptor.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"generate_archive\", \"type\": \"function\", \"signature\": \"(file_list, archive_dir, archive_base)\", \"return_type\": \"str\", \"short_description\": \"Generates a compressed archive from a list of files and places it in the specified directory. It also deletes the original files after archiving.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"create_archive\", \"type\": \"function\", \"signature\": \"(file_list, archive_dir, archive_base)\", \"return_type\": \"str\", \"short_description\": \"Creates a compressed archive of the given files in the specified directory with a unique name.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"create_archive_from_pattern\", \"type\": \"function\", \"signature\": \"(pattern, archive_dir='/tmp/archive')\", \"return_type\": \"str\", \"short_description\": \"Creates a compressed archive from files matching the given pattern and deletes the original files.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"create_archive\", \"type\": \"function\", \"signature\": \"(file_list, archive_dir, archive_base)\", \"return_type\": \"str\", \"short_description\": \"Creates a compressed archive of the given files in the specified directory with a unique name.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"create_unique_archive\", \"type\": \"function\", \"signature\": \"(file_list, archive_base_name)\", \"return_type\": \"str\", \"short_description\": \"Creates a unique archive file from the provided list of files and returns the path to the archive.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"create_archive\", \"type\": \"function\", \"signature\": \"(files, archive_dir, base_name)\", \"return_type\": \"str\", \"short_description\": \"Creates a compressed archive of the given files in the specified directory and returns the path to the archive.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"create_archive\", \"type\": \"function\", \"signature\": \"(file_list, archive_dir, archive_base)\", \"return_type\": \"str\", \"short_description\": \"Creates an archive from a list of files and returns the path to the archive. If an archive with the same name already exists, it appends a number to the base name to create a unique archive name.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"create_archive\", \"type\": \"function\", \"signature\": \"(file_list, archive_dir, archive_base)\", \"return_type\": \"str\", \"short_description\": \"Creates a compressed archive from a list of files and returns the path to the archive.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"delete_files\", \"type\": \"function\", \"signature\": \"(file_paths, *, force=False)\", \"return_type\": \"None\", \"short_description\": \"Deletes a list of files. If force is True, it will attempt to delete read-only files.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"create_archive\", \"type\": \"function\", \"signature\": \"(file_list, archive_dir, archive_base)\", \"return_type\": \"str\", \"short_description\": \"Creates a compressed archive from the list of files and returns the path to the archive. Also deletes the original files.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"download_and_verify_file\", \"type\": \"function\", \"signature\": \"(url, expected_md5)\", \"return_type\": \"bool\", \"short_description\": \"Downloads a file from the given URL and verifies its MD5 checksum.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"download_and_verify_file\", \"type\": \"function\", \"signature\": \"(url, expected_checksum)\", \"return_type\": \"bool\", \"short_description\": \"Downloads a file from a given URL and verifies its MD5 checksum.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"verify_tar_checksum\", \"type\": \"function\", \"signature\": \"(tar_file_path, expected_checksum)\", \"return_type\": \"bool\", \"short_description\": \"Verifies the MD5 checksum of a tar file.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"download_and_verify_file\", \"type\": \"function\", \"signature\": \"(url, expected_md5)\", \"return_type\": \"bool\", \"short_description\": \"Downloads a file from the given URL and verifies its MD5 checksum. Returns True if successful, False otherwise.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"download_and_verify_file\", \"type\": \"function\", \"signature\": \"(url, expected_checksum)\", \"return_type\": \"bool\", \"short_description\": \"Downloads a file from a given URL and verifies its MD5 checksum. If the checksum matches the expected value, the file is extracted from the tar archive and the tar file is removed; otherwise, the file is deleted and the function returns False.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"download_and_verify_file\", \"type\": \"function\", \"signature\": \"(url, expected_checksum)\", \"return_type\": \"bool\", \"short_description\": \"Downloads a file from a given URL and verifies its MD5 checksum. Returns True if the file is successfully downloaded and verified, otherwise returns False.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"verify_checksum\", \"type\": \"function\", \"signature\": \"(file_path, expected_checksum)\", \"return_type\": \"bool\", \"short_description\": \"Verifies the MD5 checksum of a file to ensure its integrity.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"verify_checksum\", \"type\": \"function\", \"signature\": \"(file_path, expected_checksum)\", \"return_type\": \"bool\", \"short_description\": \"Verifies the integrity of a file by comparing its MD5 checksum to the expected checksum.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"download_and_verify_file\", \"type\": \"function\", \"signature\": \"(url, expected_md5)\", \"return_type\": \"bool\", \"short_description\": \"Downloads a file from a given URL and verifies its MD5 checksum.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"download_and_verify_file\", \"type\": \"function\", \"signature\": \"(url, expected_md5_checksum)\", \"return_type\": \"bool\", \"short_description\": \"Downloads a file from a given URL and verifies its MD5 checksum.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"generateThumbnail\", \"type\": \"function\", \"signature\": \"(imagePath, thumbnailPath, size)\", \"return_type\": \"None\", \"short_description\": \"Generates a thumbnail image from a given image file and saves it to a specified path. The size parameter specifies the dimensions of the thumbnail.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"write_to_csv\", \"type\": \"function\", \"signature\": \"(data, path, mode='w', newline='')\", \"return_type\": \"None\", \"short_description\": \"Writes data to a CSV file at the specified path. The data can be an iterable of dicts or a list of lists. The mode parameter determines the file mode (write or append).\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"generate_random_string\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of 8 characters.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"readCsvFile\", \"type\": \"function\", \"signature\": \"(filePath: str, columnName: str) -> list\", \"return_type\": \"list\", \"short_description\": \"Reads a CSV file and returns a list of values from a specified column.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"readCsvData\", \"type\": \"function\", \"signature\": \"(filePath, columnName)\", \"return_type\": \"dict\", \"short_description\": \"Reads a CSV file and extracts data from a specified column. Returns a dictionary where keys are column values and values are counts of those values.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"readCsvContent\", \"type\": \"function\", \"signature\": \"(file_path, column_name)\", \"return_type\": \"list\", \"short_description\": \"Reads the content of a CSV file and extracts the values from a specified column.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"write_to_file\", \"type\": \"callable\", \"signature\": \"(data, file_path, mode='w')\", \"return_type\": \"None\", \"short_description\": \"Writes data to a specified file with the given mode. If the file already exists, it will be overwritten unless mode is set to 'a' for appending.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"write_to_file\", \"type\": \"callable\", \"signature\": \"(data, file_path)\", \"return_type\": \"None\", \"short_description\": \"Writes the given data to a specified file path. If the file already exists, it will be overwritten.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"write_to_file\", \"type\": \"callable\", \"signature\": \"(data, file_path)\", \"return_type\": \"None\", \"short_description\": \"Writes data to a specified file. Returns None.\"}"}
{"api_id": 162, "api_name": "os.remove", "task_id": "BigCodeBench/999", "solution": "{\"name\": \"generate_unique_id\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique identifier string.\"}"}
{"api_id": 163, "api_name": "os.urandom", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateRandomFilename\", \"type\": \"function\", \"signature\": \"(prefix, length)\", \"return_type\": \"str\", \"short_description\": \"Generates a random filename with a specified prefix and length.\"}"}
{"api_id": 163, "api_name": "os.urandom", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateRandomFilename\", \"type\": \"function\", \"signature\": \"(extension)\", \"return_type\": \"str\", \"short_description\": \"Generates a random filename with the given extension.\"}"}
{"api_id": 163, "api_name": "os.urandom", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"(length)\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of specified length.\"}"}
{"api_id": 163, "api_name": "os.urandom", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateRandomFileName\", \"type\": \"function\", \"signature\": \"(size, /)\", \"return_type\": \"str\", \"short_description\": \"Generates a random file name with the specified size of random bytes.\"}"}
{"api_id": 163, "api_name": "os.urandom", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"(length)\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of the specified length.\"}"}
{"api_id": 163, "api_name": "os.urandom", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"(length, /)\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of the specified length.\"}"}
{"api_id": 163, "api_name": "os.urandom", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"(length, /)\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of the specified length.\"}"}
{"api_id": 163, "api_name": "os.urandom", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generate_secure_key\", \"type\": \"callable\", \"signature\": \"(length)\", \"return_type\": \"bytes\", \"short_description\": \"Generate a secure random key of the specified length suitable for cryptographic use.\"}"}
{"api_id": 163, "api_name": "os.urandom", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateRandomFilename\", \"type\": \"function\", \"signature\": \"(length)\", \"return_type\": \"str\", \"short_description\": \"Generates a random filename of specified length using random bytes.\"}"}
{"api_id": 163, "api_name": "os.urandom", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateRandomFilename\", \"type\": \"function\", \"signature\": \"(length)\", \"return_type\": \"str\", \"short_description\": \"Generates a random filename of specified length using random bytes.\"}"}
{"api_id": 163, "api_name": "os.urandom", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_cryptographic_key_pair\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"tuple\", \"short_description\": \"Generate a new RSA key pair for cryptographic use.\"}"}
{"api_id": 163, "api_name": "os.urandom", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_secure_key\", \"type\": \"function\", \"signature\": \"(size)\", \"return_type\": \"bytes\", \"short_description\": \"Generates a secure key of the specified size suitable for cryptographic use.\"}"}
{"api_id": 163, "api_name": "os.urandom", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_secure_key\", \"type\": \"function\", \"signature\": \"(length)\", \"return_type\": \"bytes\", \"short_description\": \"Generate a securely random bytes object of specified length suitable for cryptographic use.\"}"}
{"api_id": 163, "api_name": "os.urandom", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_secure_key\", \"type\": \"function\", \"signature\": \"(size)\", \"return_type\": \"bytes\", \"short_description\": \"Generate a secure random key of the specified size suitable for cryptographic use.\"}"}
{"api_id": 163, "api_name": "os.urandom", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_encrypted_file\", \"type\": \"function\", \"signature\": \"(file_path, pub_key, priv_key)\", \"return_type\": \"tuple\", \"short_description\": \"Encrypts the specified file using AES and RSA encryption and returns the public key, path to the encrypted file, and path to the encrypted AES key.\"}"}
{"api_id": 163, "api_name": "os.urandom", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_random_key\", \"type\": \"function\", \"signature\": \"(size)\", \"return_type\": \"bytes\", \"short_description\": \"Generates a bytes object containing random bytes suitable for cryptographic use.\"}"}
{"api_id": 163, "api_name": "os.urandom", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_random_key\", \"type\": \"function\", \"signature\": \"(size)\", \"return_type\": \"bytes\", \"short_description\": \"Generates a bytes object containing random bytes suitable for cryptographic use.\"}"}
{"api_id": 163, "api_name": "os.urandom", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_secure_key\", \"type\": \"function\", \"signature\": \"(length)\", \"return_type\": \"bytes\", \"short_description\": \"Generate a secure random bytes object of specified length suitable for cryptographic use.\"}"}
{"api_id": 163, "api_name": "os.urandom", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_secure_key_pair\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"tuple\", \"short_description\": \"Generates a new RSA key pair suitable for cryptographic use.\"}"}
{"api_id": 163, "api_name": "os.urandom", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_random_key\", \"type\": \"callable\", \"signature\": \"(size)\", \"return_type\": \"bytes\", \"short_description\": \"Generates a bytes object containing random bytes suitable for cryptographic use.\"}"}
{"api_id": 164, "api_name": "os.path.abspath", "task_id": "BigCodeBench/501", "solution": "{\"name\": \"generate_excel_report\", \"type\": \"function\", \"signature\": \"(json_data, filename, sheet_name)\", \"return_type\": \"str\", \"short_description\": \"Generate an Excel report from JSON data and save it to a file, returning the absolute path of the saved file.\"}"}
{"api_id": 164, "api_name": "os.path.abspath", "task_id": "BigCodeBench/501", "solution": "{\"name\": \"generateExcelReport\", \"type\": \"function\", \"signature\": \"(json_str, filename, sheet_name='sheet1')\", \"return_type\": \"str\", \"short_description\": \"Generates an Excel report from a JSON string and saves it to a specified file.\"}"}
{"api_id": 164, "api_name": "os.path.abspath", "task_id": "BigCodeBench/501", "solution": "{\"name\": \"generate_unique_filename\", \"type\": \"function\", \"signature\": \"(base_name, extension)\", \"return_type\": \"str\", \"short_description\": \"Generate a unique filename by appending a timestamp to the base name and specifying an extension.\"}"}
{"api_id": 164, "api_name": "os.path.abspath", "task_id": "BigCodeBench/501", "solution": "{\"name\": \"generate_excel_report\", \"type\": \"function\", \"signature\": \"(data, filename, sheet_name='sheet1')\", \"return_type\": \"str\", \"short_description\": \"Generates an Excel report from JSON data and saves it to a specified file, returning the absolute path of the saved file.\"}"}
{"api_id": 164, "api_name": "os.path.abspath", "task_id": "BigCodeBench/501", "solution": "{\"name\": \"generate_excel_report\", \"type\": \"function\", \"signature\": \"(data, filename, sheet_name)\", \"return_type\": \"str\", \"short_description\": \"Generate an Excel report from JSON data and save it to a specified file.\"}"}
{"api_id": 164, "api_name": "os.path.abspath", "task_id": "BigCodeBench/501", "solution": "{\"name\": \"generate_excel\", \"type\": \"function\", \"signature\": \"(json_data, filename, sheet_name='sheet1')\", \"return_type\": \"str\", \"short_description\": \"Generates an Excel file from JSON data and returns the absolute path to the file.\"}"}
{"api_id": 164, "api_name": "os.path.abspath", "task_id": "BigCodeBench/501", "solution": "{\"name\": \"generate_excel\", \"type\": \"function\", \"signature\": \"(json_str, filename, sheet_name='sheet1')\", \"return_type\": \"str\", \"short_description\": \"Generates an Excel file from a JSON string and saves it to the specified filename.\"}"}
{"api_id": 164, "api_name": "os.path.abspath", "task_id": "BigCodeBench/501", "solution": "{\"name\": \"generate_unique_id\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique ID.\"}"}
{"api_id": 164, "api_name": "os.path.abspath", "task_id": "BigCodeBench/501", "solution": "{\"name\": \"generateExcelReport\", \"type\": \"function\", \"signature\": \"(jsonStr, filename, sheetName='sheet1')\", \"return_type\": \"str\", \"short_description\": \"Generates an Excel report from a JSON string and saves it to a specified file, returning the absolute path of the saved file.\"}"}
{"api_id": 164, "api_name": "os.path.abspath", "task_id": "BigCodeBench/501", "solution": "{\"name\": \"generate_excel_report\", \"type\": \"function\", \"signature\": \"(json_str, filename, sheet_name='sheet1')\", \"return_type\": \"str\", \"short_description\": \"Generates an Excel report from a JSON string and saves it to a specified file. Returns the absolute path of the saved file.\"}"}
{"api_id": 164, "api_name": "os.path.abspath", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"get_unique_file_extensions\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"list\", \"short_description\": \"Returns a list of unique file extensions in a given directory.\"}"}
{"api_id": 164, "api_name": "os.path.abspath", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"get_absolute_path\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"str\", \"short_description\": \"Return the absolute path of the given file or directory.\"}"}
{"api_id": 164, "api_name": "os.path.abspath", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"get_absolute_zip_path\", \"type\": \"function\", \"signature\": \"(source_directory, target_directory, zip_name)\", \"return_type\": \"str\", \"short_description\": \"Generate a zip file path and return its absolute path.\"}"}
{"api_id": 164, "api_name": "os.path.abspath", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"generate_unique_id\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generate a unique ID.\"}"}
{"api_id": 164, "api_name": "os.path.abspath", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"get_file_extensions\", \"type\": \"function\", \"signature\": \"(directory)\", \"return_type\": \"set\", \"short_description\": \"Return a set of unique file extensions in the given directory.\"}"}
{"api_id": 164, "api_name": "os.path.abspath", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"generate_unique_filename\", \"type\": \"function\", \"signature\": \"(base_name, directory)\", \"return_type\": \"str\", \"short_description\": \"Generate a unique filename by appending a counter to the base name in the specified directory.\"}"}
{"api_id": 164, "api_name": "os.path.abspath", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"generate_unique_filename\", \"type\": \"function\", \"signature\": \"(prefix, extension)\", \"return_type\": \"str\", \"short_description\": \"Generate a unique filename based on a prefix and extension.\"}"}
{"api_id": 164, "api_name": "os.path.abspath", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"get_absolute_path\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"str\", \"short_description\": \"Returns the absolute path of the given file or directory.\"}"}
{"api_id": 164, "api_name": "os.path.abspath", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"generate_zip\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, zip_name)\", \"return_type\": \"str\", \"short_description\": \"Create a ZIP file in the specified target directory from files with specified extensions in the source directory.\"}"}
{"api_id": 164, "api_name": "os.path.abspath", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"get_file_size\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"int\", \"short_description\": \"Return the size of the file in bytes.\"}"}
{"api_id": 165, "api_name": "os.getcwd", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(filename: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with random data and calculates averages for specified columns.\"}"}
{"api_id": 165, "api_name": "os.getcwd", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(filename)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with random data and returns the file path.\"}"}
{"api_id": 165, "api_name": "os.getcwd", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateRandomPeopleData\", \"type\": \"function\", \"signature\": \"(filename)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with random people data including average statistics and returns the file path.\"}"}
{"api_id": 165, "api_name": "os.getcwd", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(filename)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with random data and returns the file path.\"}"}
{"api_id": 165, "api_name": "os.getcwd", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateRandomPeopleData\", \"type\": \"function\", \"signature\": \"(filename)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with randomly generated people data including their names, ages, heights, and weights, and calculates their average values for age, height, and weight.\"}"}
{"api_id": 165, "api_name": "os.getcwd", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"getRandomPersonData\", \"type\": \"function\", \"signature\": \"(count: int)\", \"return_type\": \"list[dict[str, int]]\", \"short_description\": \"Generates a list of dictionaries containing random person data, including name, age, height, and weight.\"}"}
{"api_id": 165, "api_name": "os.getcwd", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(count: int, filename: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with random data and calculates averages for specified columns.\"}"}
{"api_id": 165, "api_name": "os.getcwd", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(count: int, filename: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with random data and returns the file path.\"}"}
{"api_id": 165, "api_name": "os.getcwd", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"getRandomPersonData\", \"type\": \"function\", \"signature\": \"(count: int) -> list[dict[str, int]]\", \"return_type\": \"list[dict[str, int]]\", \"short_description\": \"Generates a list of dictionaries containing randomly generated data for a given number of people, including name, age, height, and weight.\"}"}
{"api_id": 165, "api_name": "os.getcwd", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(filename)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with random data and returns the file path.\"}"}
{"api_id": 165, "api_name": "os.getcwd", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"getUniqueFileName\", \"type\": \"function\", \"signature\": \"(baseName, extension, directory)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique file name based on the base name, extension, and directory.\"}"}
{"api_id": 165, "api_name": "os.getcwd", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"getUniqueIdentifier\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique identifier for a given path, useful for file or directory names.\"}"}
{"api_id": 165, "api_name": "os.getcwd", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"getUniqueFilename\", \"type\": \"function\", \"signature\": \"(prefix, extension, directory)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique filename based on the given prefix, extension, and directory.\"}"}
{"api_id": 165, "api_name": "os.getcwd", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"getRandomQuote\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Retrieves a random quote from a predefined list of quotes.\"}"}
{"api_id": 165, "api_name": "os.getcwd", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"getUniqueFilename\", \"type\": \"function\", \"signature\": \"(baseName, extension)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique filename by appending a timestamp to the base name.\"}"}
{"api_id": 165, "api_name": "os.getcwd", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"generateTimestamp\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a timestamp string in the format YYYYMMDDHHMMSSFFFFFF.\"}"}
{"api_id": 165, "api_name": "os.getcwd", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"getUniqueId\", \"type\": \"callable\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique ID consisting of uppercase letters and digits.\"}"}
{"api_id": 165, "api_name": "os.getcwd", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"getUniqueIdentifier\", \"type\": \"function\", \"signature\": \"(obj)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique identifier for the given object.\"}"}
{"api_id": 165, "api_name": "os.getcwd", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"getSystemInfo\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"dict\", \"short_description\": \"Retrieves system information such as CPU, memory, and disk usage.\"}"}
{"api_id": 165, "api_name": "os.getcwd", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"getUniqueId\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique ID composed of uppercase letters and digits.\"}"}
{"api_id": 166, "api_name": "os.path.isdir", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"check_directory_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path refers to an existing directory.\"}"}
{"api_id": 166, "api_name": "os.path.isdir", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"check_directory_existence\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the specified directory exists.\"}"}
{"api_id": 166, "api_name": "os.path.isdir", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"is_valid_directory\", \"type\": \"callable\", \"signature\": \"(path_str)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the provided path string refers to an existing directory.\"}"}
{"api_id": 166, "api_name": "os.path.isdir", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"is_directory\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path refers to an existing directory.\"}"}
{"api_id": 166, "api_name": "os.path.isdir", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"is_valid_directory\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path is a valid directory.\"}"}
{"api_id": 166, "api_name": "os.path.isdir", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"is_directory\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Check if the given path refers to an existing directory.\"}"}
{"api_id": 166, "api_name": "os.path.isdir", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"validate_directory\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the provided path is a valid directory.\"}"}
{"api_id": 166, "api_name": "os.path.isdir", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"is_directory\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given path refers to an existing directory.\"}"}
{"api_id": 166, "api_name": "os.path.isdir", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"is_valid_directory\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Check if the given path is a valid directory.\"}"}
{"api_id": 166, "api_name": "os.path.isdir", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"check_if_directory\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the provided path is a directory.\"}"}
{"api_id": 166, "api_name": "os.path.isdir", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"check_directory_structure\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"dict\", \"short_description\": \"Analyzes the structure of a given directory and returns a dictionary with the results of specified predicates.\"}"}
{"api_id": 166, "api_name": "os.path.isdir", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"list_directory_items\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"dict\", \"short_description\": \"Returns a dictionary containing details of each item in the specified directory.\"}"}
{"api_id": 166, "api_name": "os.path.isdir", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"check_directory_existence\", \"type\": \"function\", \"signature\": \"(dir_path)\", \"return_type\": \"bool\", \"short_description\": \"Determine if the given directory path exists.\"}"}
{"api_id": 166, "api_name": "os.path.isdir", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"list_directory_contents\", \"type\": \"function\", \"signature\": \"(dir_path)\", \"return_type\": \"list\", \"short_description\": \"Lists the contents of a directory, returning a list of dictionaries with details about each item.\"}"}
{"api_id": 166, "api_name": "os.path.isdir", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"list_directory_contents\", \"type\": \"function\", \"signature\": \"(dir_path)\", \"return_type\": \"dict\", \"short_description\": \"Lists the contents of a directory, including details about each item.\"}"}
{"api_id": 166, "api_name": "os.path.isdir", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"listDirContents\", \"type\": \"function\", \"signature\": \"(dirPath: str)\", \"return_type\": \"dict\", \"short_description\": \"Lists the contents of a directory, including detailed information about each item.\"}"}
{"api_id": 166, "api_name": "os.path.isdir", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"list_directory_contents\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"dict\", \"short_description\": \"Lists the contents of a directory and applies a set of predicates to each item, returning a dictionary with the results.\"}"}
{"api_id": 166, "api_name": "os.path.isdir", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"check_dir_exists\", \"type\": \"function\", \"signature\": \"(dir_path)\", \"return_type\": \"bool\", \"short_description\": \"Determine if the given directory path exists.\"}"}
{"api_id": 166, "api_name": "os.path.isdir", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"list_directory_contents\", \"type\": \"function\", \"signature\": \"(dir_path)\", \"return_type\": \"dict\", \"short_description\": \"List the contents of a directory with predicate functions applied.\"}"}
{"api_id": 166, "api_name": "os.path.isdir", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"listDirContents\", \"type\": \"function\", \"signature\": \"(dir_path: str)\", \"return_type\": \"dict\", \"short_description\": \"List the contents of a directory and check for specified predicates.\"}"}
{"api_id": 167, "api_name": "pandas.to_numeric", "task_id": "BigCodeBench/108", "solution": "{\n  \"name\": \"convert_to_numeric\",\n  \"type\": \"function\",\n  \"signature\": \"(arg, errors='raise', downcast=None, dtype_backend='no_default')\",\n  \"return_type\": \"Numeric if parsing succeeded. Return type depends on input. Series if Series, otherwise ndarray.\",\n  \"short_description\": \"Convert argument to a numeric type.\"\n}"}
{"api_id": 167, "api_name": "pandas.to_numeric", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"convertToNumeric\", \"type\": \"function\", \"signature\": \"(arg, errors='coerce', downcast=None, dtype_backend=None)\", \"return_type\": \"Numeric\", \"short_description\": \"Converts argument to a numeric type, coercing invalid input to NaN.\"}"}
{"api_id": 167, "api_name": "pandas.to_numeric", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"convertToNumeric\", \"type\": \"callable\", \"signature\": \"(arg, errors: 'coerce' = None, downcast: str = None)\", \"return_type\": \"Numeric\", \"short_description\": \"Converts the argument to a numeric type, coercing invalid values to NaN.\"}"}
{"api_id": 167, "api_name": "pandas.to_numeric", "task_id": "BigCodeBench/108", "solution": "{\n  \"name\": \"convert_to_numeric\",\n  \"type\": \"method\",\n  \"signature\": \"(arg, errors: str = 'raise', downcast: str | None = None, dtype_backend: str | None = None)\",\n  \"return_type\": \"Numeric if parsing succeeded. Return type depends on input. Series if Series, otherwise ndarray.\",\n  \"short_description\": \"Convert argument to a numeric type. The default return dtype is float64 or int64 depending on the data supplied. Use the downcast parameter to obtain other dtypes.\"\n}"}
{"api_id": 167, "api_name": "pandas.to_numeric", "task_id": "BigCodeBench/108", "solution": "{\n  \"name\": \"convert_to_numeric\",\n  \"type\": \"function\",\n  \"signature\": \"(arg, errors: str = 'raise', downcast: str | None = None, dtype_backend: str | None = None)\",\n  \"return_type\": \"Union[pd.Series, np.ndarray]\",\n  \"short_description\": \"Converts the argument to a numeric type. Supports error handling and downcasting options.\"\n}"}
{"api_id": 167, "api_name": "pandas.to_numeric", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"convertToNumeric\", \"type\": \"function\", \"signature\": \"(arg, errors: 'coerce' = 'coerce', downcast: str = None, dtype_backend: str = None)\", \"return_type\": \"numeric\", \"short_description\": \"Converts argument to a numeric type, coercing invalid values to NaN.\"}"}
{"api_id": 167, "api_name": "pandas.to_numeric", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"convertToNumeric\", \"type\": \"callable\", \"signature\": \"(arg, errors: 'ignore' | 'coerce' | 'raise' = 'raise', downcast: 'integer' | 'signed' | 'unsigned' | 'float' | None = None)\", \"return_type\": \"numeric\", \"short_description\": \"Convert argument to a numeric type, handling errors by raising, coercing, or ignoring them.\"}"}
{"api_id": 167, "api_name": "pandas.to_numeric", "task_id": "BigCodeBench/108", "solution": "{\n  \"name\": \"convert_to_numeric\",\n  \"type\": \"function\",\n  \"signature\": \"(arg, errors: 'ignore' | 'coerce' | 'raise' = 'raise', downcast: 'integer' | 'signed' | 'unsigned' | 'float' | None = None)\",\n  \"return_type\": \"Numeric if parsing succeeded. Return type depends on input. Series if Series, otherwise ndarray.\",\n  \"short_description\": \"Convert argument to a numeric type, handling errors and downcasting options.\"\n}"}
{"api_id": 167, "api_name": "pandas.to_numeric", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"convertToNumeric\", \"type\": \"callable\", \"signature\": \"(arg, errors: 'ignore' | 'coerce' | 'raise' = 'raise', downcast: 'integer' | 'signed' | 'unsigned' | 'float' | None = None)\", \"return_type\": \"Numeric if parsing succeeded. Return type depends on input. Series if Series, otherwise ndarray.\", \"short_description\": \"Convert argument to a numeric type. The default return dtype is float64 or int64 depending on the data supplied. Use the downcast parameter to obtain other dtypes.\"}"}
{"api_id": 167, "api_name": "pandas.to_numeric", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"convert_to_numeric\", \"type\": \"function\", \"signature\": \"(arg, errors: 'raise' | 'coerce' = 'raise', downcast: str | None = None, dtype_backend: str | None = None)\", \"return_type\": \"Numeric\", \"short_description\": \"Convert argument to a numeric type.\"}"}
{"api_id": 167, "api_name": "pandas.to_numeric", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"convert_to_numeric\", \"type\": \"callable\", \"signature\": \"(arg, errors: str = 'raise', downcast: str = None, dtype_backend: str = 'numpy_nullable')\", \"return_type\": \"pd.Series or np.ndarray\", \"short_description\": \"Converts the argument to a numeric type, with options for error handling, downcasting, and specifying the backend for dtype handling.\"}"}
{"api_id": 167, "api_name": "pandas.to_numeric", "task_id": "BigCodeBench/458", "solution": "{\n  \"name\": \"convert_to_numeric\",\n  \"type\": \"callable\",\n  \"signature\": \"(arg, errors: str = 'raise', downcast: str | None = None, dtype_backend: str | lib.NoDefault = <no_default>)\",\n  \"return_type\": \"Numeric if parsing succeeded. Return type depends on input. Series if Series, otherwise ndarray.\",\n  \"short_description\": \"Convert argument to a numeric type. The default return dtype is float64 or int64 depending on the data supplied. Use the downcast parameter to obtain other dtypes.\"\n}"}
{"api_id": 167, "api_name": "pandas.to_numeric", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"convert_to_numeric\", \"type\": \"callable\", \"signature\": \"(arg, errors='raise', downcast=None, dtype_backend='no_default')\", \"return_type\": \"Numeric if parsing succeeded, Return type depends on input.\", \"short_description\": \"Convert argument to a numeric type. This function is designed to handle the conversion of various data types to numeric types, providing options for error handling and downcasting to smaller numerical dtypes if specified.\"}"}
{"api_id": 167, "api_name": "pandas.to_numeric", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"convert_to_numeric\", \"type\": \"function\", \"signature\": \"(data, errors='raise', downcast=None, dtype_backend=None)\", \"return_type\": \"DataFrame\", \"short_description\": \"Converts the given data to numeric type, handling errors and downcasting as specified.\"}"}
{"api_id": 167, "api_name": "pandas.to_numeric", "task_id": "BigCodeBench/458", "solution": "{\n  \"name\": \"convert_to_numeric\",\n  \"type\": \"function\",\n  \"signature\": \"(data, errors: str = 'raise', downcast: str = None, dtype_backend: str = 'numpy_nullable')\",\n  \"return_type\": \"Union[pd.DataFrame, pd.Series]\",\n  \"short_description\": \"Converts the provided data to a numeric type, handling errors and downcasting options as specified.\"\n}"}
{"api_id": 167, "api_name": "pandas.to_numeric", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"convert_to_numeric\", \"type\": \"callable\", \"signature\": \"(arg, errors: str = 'raise', downcast: str | None = None, dtype_backend: str | None = None)\", \"return_type\": \"numeric\", \"short_description\": \"Convert argument to a numeric type. This function is designed to handle various data types and convert them to their numeric equivalents, with options for error handling and downcasting.\"}"}
{"api_id": 167, "api_name": "pandas.to_numeric", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"convert_to_numeric\", \"type\": \"callable\", \"signature\": \"(arg, errors: str = 'raise', downcast: str | None = None, dtype_backend: str | None = None)\", \"return_type\": \"numeric\", \"short_description\": \"Convert argument to a numeric type. This function handles errors by raising an exception, coercing to NaN, or ignoring the error, and allows downcasting to a smaller numeric type.\"}"}
{"api_id": 167, "api_name": "pandas.to_numeric", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"convert_to_numeric\", \"type\": \"callable\", \"signature\": \"(arg, errors: str = 'raise', downcast: str | None = None, dtype_backend: str | None = None)\", \"return_type\": \"pd.Series | pd.DataFrame\", \"short_description\": \"Convert argument to a numeric type, with options for error handling, downcasting, and dtype backend.\"}"}
{"api_id": 167, "api_name": "pandas.to_numeric", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"convert_to_numeric\", \"type\": \"callable\", \"signature\": \"(arg, errors='raise', downcast=None, dtype_backend='no_default')\", \"return_type\": \"Numeric if parsing succeeded. Return type depends on input. Series if Series, otherwise ndarray.\", \"short_description\": \"Convert argument to a numeric type. The function allows specifying error handling, downcasting options, and dtype backend for the conversion.\"}"}
{"api_id": 167, "api_name": "pandas.to_numeric", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"convert_to_numeric\", \"type\": \"callable\", \"signature\": \"(arg, errors: str = 'raise', downcast: str | None = None, dtype_backend: str | None = None)\", \"return_type\": \"pd.Series | pd.DataFrame\", \"short_description\": \"Convert argument to a numeric type. This function provides a more flexible and clear way to handle numeric conversions, offering options for handling errors and downcasting.\"}"}
{"api_id": 168, "api_name": "pandas.read_html", "task_id": "BigCodeBench/1008", "solution": "{\n  \"name\": \"fetchAndParseHTMLTable\",\n  \"type\": \"callable\",\n  \"signature\": \"(url: 'str', table_id: 'str') -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Fetches an HTML page from the given URL and extracts the first table with the specified ID into a DataFrame.\"\n}"}
{"api_id": 168, "api_name": "pandas.read_html", "task_id": "BigCodeBench/1008", "solution": "{\n  \"name\": \"fetchHTMLTable\",\n  \"type\": \"callable\",\n  \"signature\": \"(url: str, tableId: str) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Fetches an HTML table from a given URL based on its ID and returns it as a DataFrame.\"\n}"}
{"api_id": 168, "api_name": "pandas.read_html", "task_id": "BigCodeBench/1008", "solution": "{\n  \"name\": \"fetchHTMLTable\",\n  \"type\": \"callable\",\n  \"signature\": \"(url: str, tableId: str) -> list[pd.DataFrame]\",\n  \"return_type\": \"list[pd.DataFrame]\",\n  \"short_description\": \"Fetches an HTML table with a specific ID from a given URL and returns it as a list of pandas DataFrames.\"\n}"}
{"api_id": 168, "api_name": "pandas.read_html", "task_id": "BigCodeBench/1008", "solution": "{\n  \"name\": \"extractTableData\",\n  \"type\": \"function\",\n  \"signature\": \"(url: str, tableId: str) -> pandas.DataFrame\",\n  \"return_type\": \"pandas.DataFrame\",\n  \"short_description\": \"Extracts data from an HTML table identified by its ID and returns it as a DataFrame.\"\n}"}
{"api_id": 168, "api_name": "pandas.read_html", "task_id": "BigCodeBench/1008", "solution": "{\n  \"name\": \"fetchHtmlTable\",\n  \"type\": \"function\",\n  \"signature\": \"(url: str, tableId: str) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Fetches and returns the HTML table with the specified ID from the given URL.\"\n}"}
{"api_id": 168, "api_name": "pandas.read_html", "task_id": "BigCodeBench/1008", "solution": "{\n  \"name\": \"parseHTMLTable\",\n  \"type\": \"function\",\n  \"signature\": \"(url: str, tableId: str) -> pandas.DataFrame\",\n  \"return_type\": \"pandas.DataFrame\",\n  \"short_description\": \"Parses an HTML table from a given URL using its ID and returns it as a pandas DataFrame.\"\n}"}
{"api_id": 168, "api_name": "pandas.read_html", "task_id": "BigCodeBench/1008", "solution": "{\n  \"name\": \"fetchHTMLTable\",\n  \"type\": \"function\",\n  \"signature\": \"(url: str, tableId: str) -> pandas.DataFrame\",\n  \"return_type\": \"pandas.DataFrame\",\n  \"short_description\": \"Fetches an HTML table by its ID from a given URL and returns it as a DataFrame.\"\n}"}
{"api_id": 168, "api_name": "pandas.read_html", "task_id": "BigCodeBench/1008", "solution": "{\n  \"name\": \"fetchHtmlTable\",\n  \"type\": \"callable\",\n  \"signature\": \"(url: str, tableId: str) -> pandas.DataFrame\",\n  \"return_type\": \"pandas.DataFrame\",\n  \"short_description\": \"Fetches and parses an HTML table with the specified ID from a given URL and returns it as a DataFrame.\"\n}"}
{"api_id": 168, "api_name": "pandas.read_html", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"extractTableData\", \"type\": \"function\", \"signature\": \"(html: str, tableId: str) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Extracts the HTML table with the specified ID into a DataFrame.\"}"}
{"api_id": 168, "api_name": "pandas.read_html", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"parseHTMLTable\", \"type\": \"callable\", \"signature\": \"(htmlContent: str, tableId: str) -> list[pandas.DataFrame]\", \"return_type\": \"list[pandas.DataFrame]\", \"short_description\": \"Parses HTML content to extract a table by its ID and returns it as a list of DataFrames.\"}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"convert_to_datetime\",\n  \"type\": \"function\",\n  \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\",\n  \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\",\n  \"short_description\": \"Convert argument to datetime.\"\n}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"convert_to_datetime\",\n  \"type\": \"function\",\n  \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\",\n  \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\",\n  \"short_description\": \"Convert argument to datetime. This function converts a scalar, array-like, Series or DataFrame/dict-like to a pandas datetime object.\"\n}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/302", "solution": "{\"name\": \"convertToDatetime\", \"type\": \"function\", \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\", \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\", \"short_description\": \"Convert argument to datetime.\"}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"convert_to_datetime\",\n  \"type\": \"callable\",\n  \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True)\",\n  \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\",\n  \"short_description\": \"Convert argument to datetime.\"\n}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/302", "solution": "{\"name\": \"convertToDatetime\", \"type\": \"callable\", \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\", \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\", \"short_description\": \"Convert argument to datetime. This function converts a scalar, array-like, Series or DataFrame/dict-like to a pandas datetime object.\"}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"convert_to_datetime\",\n  \"type\": \"function\",\n  \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\",\n  \"return_type\": \"datetime\",\n  \"short_description\": \"Convert argument to datetime. This function converts a scalar, array-like, Series or DataFrame/dict-like to a pandas datetime object.\"\n}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"convert_to_datetime\",\n  \"type\": \"callable\",\n  \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\",\n  \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\",\n  \"short_description\": \"Convert argument to datetime.\"\n}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"convert_to_datetime\",\n  \"type\": \"function\",\n  \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True)\",\n  \"return_type\": \"Returns\\n-------\\ndatetime\\n    If parsing succeeded.\\n    Return type depends on input (types in parenthesis correspond to fallback in case of unsuccessful timezone or out-of-range timestamp parsing):\\n\\n    - scalar: :class:`Timestamp` (or :class:`datetime.datetime`)\\n    - array-like: :class:`DatetimeIndex` (or :class:`Series` with :class:`object` dtype containing :class:`datetime.datetime`)\\n    - Series: :class:`Series` of :class:`datetime64` dtype (or :class:`Series` of :class:`object` dtype containing :class:`datetime.datetime`)\\n    - DataFrame: :class:`Series` of :class:`datetime64` dtype (or :class:`Series` of :class:`object` dtype containing :class:`datetime.datetime`)\\n\",\n  \"short_description\": \"Convert argument to datetime.\\n\\nThis function converts a scalar, array-like, :class:`Series` or :class:`DataFrame`/dict-like to a pandas datetime object.\"\n}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"convert_to_datetime\",\n  \"type\": \"callable\",\n  \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\",\n  \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\",\n  \"short_description\": \"Convert argument to datetime. This function converts a scalar, array-like, Series or DataFrame/dict-like to a pandas datetime object.\"\n}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/302", "solution": "{\"name\": \"convertToDatetime\", \"type\": \"function\", \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\", \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\", \"short_description\": \"Convert argument to datetime.\"}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"convertToDatetime\", \"type\": \"function\", \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\", \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\", \"short_description\": \"Converts the provided argument to a datetime object. This function is very different from the hierarchical API call provided in the example, focusing on a high-level functionality to handle datetime conversions.\"}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/914", "solution": "{\n  \"name\": \"convertToDatetime\",\n  \"type\": \"callable\",\n  \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\",\n  \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\",\n  \"short_description\": \"Convert argument to datetime. This function converts a scalar, array-like, Series or DataFrame/dict-like to a pandas datetime object.\"\n}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/914", "solution": "{\n  \"name\": \"convertToDatetime\",\n  \"type\": \"function\",\n  \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\",\n  \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\",\n  \"short_description\": \"Convert argument to datetime. This function converts a scalar, array-like, Series or DataFrame/dict-like to a pandas datetime object.\"\n}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/914", "solution": "{\n  \"name\": \"convertToDatetime\",\n  \"type\": \"function\",\n  \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\",\n  \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\",\n  \"short_description\": \"Convert argument to datetime.\"\n}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/914", "solution": "{\n  \"name\": \"convertToDatetime\",\n  \"type\": \"function\",\n  \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\",\n  \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\",\n  \"short_description\": \"Convert argument to datetime.\"\n}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"convertToDatetime\", \"type\": \"callable\", \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\", \"return_type\": \"\", \"short_description\": \"Convert argument to datetime. This function converts a scalar, array-like, Series or DataFrame/dict-like to a pandas datetime object.\"}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"convertToDatetime\", \"type\": \"function\", \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\", \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\", \"short_description\": \"Convert argument to a datetime object.\"}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"convertToDatetime\", \"type\": \"function\", \"signature\": \"(arg, errors='raise', dayfirst=False, yearfirst=False, utc=False, format=None, exact=True, unit='ns', infer_datetime_format=False, origin='unix', cache=True)\", \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\", \"short_description\": \"Convert argument to datetime.\"}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/914", "solution": "{\n  \"name\": \"convertToDatetime\",\n  \"type\": \"function\",\n  \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\",\n  \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\",\n  \"short_description\": \"Convert argument to datetime. This function converts a scalar, array-like, Series or DataFrame/dict-like to a pandas datetime object.\"\n}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"convertToDatetime\", \"type\": \"function\", \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\", \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\", \"short_description\": \"Convert argument to datetime.\"}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/1022", "solution": "{\n  \"name\": \"convert_to_datetime\",\n  \"type\": \"callable\",\n  \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\",\n  \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\",\n  \"short_description\": \"Convert argument to datetime.\"\n}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/1022", "solution": "{\n  \"name\": \"convert_to_datetime\",\n  \"type\": \"callable\",\n  \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\",\n  \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\",\n  \"short_description\": \"Convert argument to datetime. This function converts a scalar, array-like, Series or DataFrame/dict-like to a pandas datetime object.\"\n}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"parse_datetime\", \"type\": \"function\", \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible', format: 'str | None' = None, errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, infer_datetime_format: 'bool' = False) -> 'DatetimeIndex | Series | DatetimeScalar'\", \"return_type\": \"datetime\", \"short_description\": \"Convert a scalar, array-like, Series or DataFrame/dict-like to a datetime object. This function provides flexibility in handling various input formats and errors.\"}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"parse_datetime\", \"type\": \"function\", \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\", \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\", \"short_description\": \"Convert argument to datetime. This function converts a scalar, array-like, Series or DataFrame/dict-like to a pandas datetime object.\"}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/1022", "solution": "{\n  \"name\": \"parse_date_strings\",\n  \"type\": \"function\",\n  \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\",\n  \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\",\n  \"short_description\": \"Convert a scalar, array-like, Series, or DataFrame/dict-like to a pandas datetime object.\"\n}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/1022", "solution": "{\n  \"name\": \"convert_to_datetime\",\n  \"type\": \"callable\",\n  \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\",\n  \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\",\n  \"short_description\": \"Convert argument to datetime. This function converts a scalar, array-like, Series or DataFrame/dict-like to a pandas datetime object.\"\n}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"convert_to_datetime\", \"type\": \"function\", \"signature\": \"(arg, errors='raise', dayfirst=False, yearfirst=False, utc=False, format=None, exact=True, unit='ns', infer_datetime_format=False, origin='unix', cache=True)\", \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\", \"short_description\": \"Convert argument to a datetime object. This function is designed to handle various input types and convert them to a datetime object, providing options for handling errors, specifying date formats, and controlling timezone-related behaviors.\"}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"convert_to_datetime\", \"type\": \"callable\", \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\", \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\", \"short_description\": \"Convert argument to datetime. This function converts a scalar, array-like, Series or DataFrame/dict-like to a pandas datetime object.\"}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/1022", "solution": "{\n  \"name\": \"convert_to_datetime\",\n  \"type\": \"function\",\n  \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\",\n  \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\",\n  \"short_description\": \"Convert argument to datetime. This function converts a scalar, array-like, Series or DataFrame/dict-like to a pandas datetime object.\"\n}"}
{"api_id": 169, "api_name": "pandas.to_datetime", "task_id": "BigCodeBench/1022", "solution": "{\n  \"name\": \"convert_to_datetime\",\n  \"type\": \"callable\",\n  \"signature\": \"(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'\",\n  \"return_type\": \"DatetimeIndex | Series | DatetimeScalar | NaTType | None\",\n  \"short_description\": \"Convert argument to a datetime object, handling various formats and errors.\"\n}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generateRandomDates\", \"type\": \"function\", \"signature\": \"(start_date: datetime, end_date: datetime, seed: int = 42) -> pandas.Series\", \"return_type\": \"pandas.Series\", \"short_description\": \"Generates a pandas.Series of random dates between two given dates, optionally seeded for reproducibility.\"}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generateDateSeries\", \"type\": \"function\", \"signature\": \"(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42) -> pd.Series\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a pandas Series of random dates between two given dates.\"}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"createSeries\", \"type\": \"function\", \"signature\": \"(data=None, index=None, dtype=None, name=None, copy=False) -> pandas.Series\", \"return_type\": \"pandas.Series\", \"short_description\": \"Creates a pandas Series with the given data, index, dtype, name, and copy option.\"}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/120", "solution": "{\n  \"name\": \"generate_random_dates\",\n  \"type\": \"function\",\n  \"signature\": \"(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42) -> pd.Series\",\n  \"return_type\": \"pd.Series\",\n  \"short_description\": \"Generates a pandas Series of random dates between two given dates.\"\n}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generateRandomDates\", \"type\": \"function\", \"signature\": \"(start_date: datetime, end_date: datetime, seed: int = 42) -> pd.Series\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a pandas Series of random dates between two given dates.\"}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generateRandomDates\", \"type\": \"function\", \"signature\": \"(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42) -> pandas.Series\", \"return_type\": \"pandas.Series\", \"short_description\": \"Generates a pandas.Series of random dates between start_date and end_date.\"}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generateDateSeries\", \"type\": \"function\", \"signature\": \"(start_date=datetime, end_date=datetime, seed=int) -> pandas.Series\", \"return_type\": \"pandas.Series\", \"short_description\": \"Generates a pandas Series of random dates between two given dates.\"}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generateRandomDates\", \"type\": \"function\", \"signature\": \"(startDate, endDate, seed=42) -> pandas.Series\", \"return_type\": \"pandas.Series\", \"short_description\": \"Generates a pandas Series of random dates between two given dates.\"}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/120", "solution": "{\n  \"name\": \"create_date_series\",\n  \"type\": \"function\",\n  \"signature\": \"(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42) -> pd.Series\",\n  \"return_type\": \"pd.Series\",\n  \"short_description\": \"Generates a pandas Series of random dates between start_date and end_date.\"\n}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generateRandomDateSeries\", \"type\": \"function\", \"signature\": \"(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42) -> pd.Series\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a pandas Series of random dates between two given dates.\"}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generateRandomWalk\", \"type\": \"function\", \"signature\": \"(elements: int, seed: int = 0) -> (dict, plt.Axes)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a random walk and returns descriptive statistics and the plot axis.\"}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generateRandomWalk\", \"type\": \"function\", \"signature\": \"(elements: int, seed: int = 0) -> Tuple[Dict, plt.Axes]\", \"return_type\": \"Tuple[Dict, plt.Axes]\", \"short_description\": \"Generates a random walk and provides descriptive statistics and plots the walk.\"}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generateRandomWalk\", \"type\": \"function\", \"signature\": \"(elements: int, seed: int = 0) -> Tuple[dict, plt.Axes]\", \"return_type\": \"Tuple[dict, plt.Axes]\", \"short_description\": \"Generates a random walk and returns descriptive statistics along with the plot axes.\"}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generateRandomWalk\", \"type\": \"function\", \"signature\": \"(elements: int, seed: int = 0) -> (dict, plt.Axes)\", \"return_type\": \"dict, plt.Axes\", \"short_description\": \"Generates a random walk and provides descriptive statistics and plots the walk.\"}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generateRandomWalk\", \"type\": \"function\", \"signature\": \"(numElements, seed=0) -> (Series, plt.Axes)\", \"return_type\": \"descriptive_stats, plt.Axes\", \"short_description\": \"Generates a random walk and provides descriptive statistics along with plotting the walk.\"}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/208", "solution": "{\n  \"name\": \"generateRandomWalk\",\n  \"type\": \"function\",\n  \"signature\": \"(elements: int, seed: int = 0) -> Tuple[Dict[str, float], plt.Axes]\",\n  \"return_type\": \"Tuple[Dict[str, float], plt.Axes]\",\n  \"short_description\": \"Generates a random walk and returns descriptive statistics and the plot axis.\"\n}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generateRandomWalk\", \"type\": \"function\", \"signature\": \"(elements: int, seed: int = 0) -> Tuple[Dict, plt.Axes]\", \"return_type\": \"Tuple[Dict, plt.Axes]\", \"short_description\": \"Generates a random walk and returns descriptive statistics along with the plot axis.\"}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generateRandomWalk\", \"type\": \"function\", \"signature\": \"(elements: int, seed: int = 0) -> Tuple[dict, plt.Axes]\", \"return_type\": \"Tuple[dict, plt.Axes]\", \"short_description\": \"Generates a random walk and provides descriptive statistics and plot of the walk.\"}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"generateRandomWalk\", \"type\": \"function\", \"signature\": \"(elements: int, seed: int = 0) -> Tuple[dict, plt.Axes]\", \"return_type\": \"Tuple[dict, plt.Axes]\", \"short_description\": \"Generates a random walk and provides descriptive statistics along with plotting the walk.\"}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/208", "solution": "{\"name\": \"calculateDescriptiveStats\", \"type\": \"function\", \"signature\": \"(data, percentiles=[0.05, 0.25, 0.5, 0.75, 0.95]) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Calculates descriptive statistics for a given dataset.\"}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"calculateCorrelationMatrix\",\n  \"type\": \"function\",\n  \"signature\": \"(df: 'pd.DataFrame', columns: 'List[str]' = ['Value'], plot: 'bool' = False) -> 'Tuple[pd.DataFrame, Optional[plt.Figure]']\",\n  \"return_type\": \"A tuple containing a DataFrame with the correlation matrix and an optional Matplotlib Figure object if `plot` is set to `True`.\",\n  \"short_description\": \"Calculates the correlation matrix for specified columns in a DataFrame and optionally plots it.\"\n}\n```"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"calculateCorrelationMatrix\",\n  \"type\": \"function\",\n  \"signature\": \"(data: pd.DataFrame, plot: bool = False) -> Tuple[pd.DataFrame, Optional[plt.Figure]]\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Calculates the correlation matrix of the given DataFrame and optionally plots a heatmap.\"\n}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/302", "solution": "{\"name\": \"calculateCorrelationMatrix\", \"type\": \"function\", \"signature\": \"(data: pd.DataFrame, plot: bool = False) -> Tuple[pd.DataFrame, Optional[plt.Figure]]\", \"return_type\": \"Tuple[pd.DataFrame, Optional[plt.Figure]]\", \"short_description\": \"Calculates the correlation matrix of the provided DataFrame and optionally plots it as a heatmap.\"}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"calculate_correlation_matrix\",\n  \"type\": \"function\",\n  \"signature\": \"(df: 'pd.DataFrame', plot: 'bool' = False) -> ('pd.DataFrame', 'Optional[plt.Figure]' if plot else 'pd.DataFrame')\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Calculates the correlation matrix of the given DataFrame. Optionally plots a heatmap if specified.\"\n}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"calculateCorrelationMatrix\",\n  \"type\": \"function\",\n  \"signature\": \"(df: pd.DataFrame, plot: bool = False) -> Tuple[pd.DataFrame, Optional[plt.Figure]]\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Calculates the correlation matrix of the given DataFrame and optionally plots it as a heatmap.\"\n}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/302", "solution": "{\"name\": \"calculateCorrelationMatrix\", \"type\": \"function\", \"signature\": \"(data: pd.DataFrame, plot: bool = False) -> Tuple[pd.DataFrame, Optional[plt.Figure]]\", \"return_type\": \"Tuple[pd.DataFrame, Optional[plt.Figure]]\", \"short_description\": \"Calculates the correlation matrix of the given DataFrame and optionally plots it as a heatmap.\"}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/302", "solution": "{\"name\": \"generateSeries\", \"type\": \"function\", \"signature\": \"(data=None, index=None, dtype=None, name=None, copy=False) -> pd.Series\", \"return_type\": \"pd.Series\", \"short_description\": \"Creates a pandas Series object from the provided data, index, and other parameters.\"}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"calculateCorrelationMatrix\",\n  \"type\": \"function\",\n  \"signature\": \"(df: 'pd.DataFrame', plot: 'bool' = False) -> 'Tuple[pd.DataFrame, Optional[plt.Figure]']\",\n  \"return_type\": \"Tuple[pd.DataFrame, Optional[plt.Figure]]\",\n  \"short_description\": \"Calculates the correlation matrix of a DataFrame and optionally plots it as a heatmap.\"\n}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"fetch_and_plot_data\",\n  \"type\": \"function\",\n  \"signature\": \"(data: pd.DataFrame, plot: bool = False) -> Tuple[pd.DataFrame, Optional[plt.Figure]]\",\n  \"return_type\": \"Tuple[pd.DataFrame, Optional[plt.Figure]]\",\n  \"short_description\": \"Fetches and optionally plots data from a DataFrame, focusing on correlation analysis.\"\n}"}
{"api_id": 170, "api_name": "pandas.Series", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"calculateCorrelationMatrix\",\n  \"type\": \"function\",\n  \"signature\": \"(df: pd.DataFrame, plot: bool = False) -> Tuple[pd.DataFrame, Optional[plt.Figure]]\",\n  \"return_type\": \"Tuple[pd.DataFrame, Optional[plt.Figure]]\",\n  \"short_description\": \"Calculates the correlation matrix of a DataFrame and optionally plots a heatmap.\"\n}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"readExcel\", \"type\": \"function\", \"signature\": \"(filePath: str, sheetName: str | int | list[int | str] | None = 0, **kwargs) -> dict[str, dict[str, float]]\", \"return_type\": \"dict[str, dict[str, float]]\", \"short_description\": \"Reads an Excel file and returns the mean and standard deviation for each column in the specified sheet.\"}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/360", "solution": "{\n  \"name\": \"readExcel\",\n  \"type\": \"function\",\n  \"signature\": \"(filePath: str, sheetName: str | int | list[int | str] | None = 0, **kwargs) -> dict[str, pd.DataFrame]\",\n  \"return_type\": \"dict[str, pd.DataFrame]\",\n  \"short_description\": \"Reads an Excel file into a dictionary of DataFrames, each corresponding to a sheet in the Excel file.\"\n}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"readExcel\", \"type\": \"function\", \"signature\": \"(fileLocation: str, sheetName: str | int | None = 0) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Reads an Excel file into a pandas DataFrame. Supports various options for reading specific sheets, handling headers, and parsing dates.\"}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"readExcel\", \"type\": \"function\", \"signature\": \"(filePath: str, sheetName: str | int | None = 0, **kwargs) -> DataFrame | dict[str | int, DataFrame]\", \"return_type\": \"DataFrame | dict[str | int, DataFrame]\", \"short_description\": \"Reads an Excel file into a pandas DataFrame, supporting multiple sheet names and optional parameters for customization.\"}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/360", "solution": "{\n  \"name\": \"readExcel\",\n  \"type\": \"function\",\n  \"signature\": \"(filePath: str, sheetName: str | int | list[int | str] | None = 0, *, header: int | list[int] | None = 0, names: list[str] | None = None, indexCol: int | list[int] | None = None, usecols: str | list[int | str] | callable | None = None, dtype: dict[str, type] | None = None, engine: str | None = None, converters: dict[str | int, callable] | None = None, trueValues: list[str] | None = None, falseValues: list[str] | None = None, skipRows: list[int] | int | callable | None = None, nrows: int | None = None, naValues: list[str] | None = None, keepDefaultNa: bool = True, naFilter: bool = True, verbose: bool = False, parseDates: bool | list[int | str] | dict[str, list[int | str]] = False, dateParser: callable | None = None, dateFormat: dict[str, str] | str | None = None, thousands: str | None = None, decimal: str = '.', comment: str | None = None, skipFooter: int = 0, storageOptions: dict | None = None, dtypeBackend: str | None = None) -> dict[str, pd.DataFrame] | pd.DataFrame\",\n  \"return_type\": \"dict[str, pd.DataFrame] | pd.DataFrame\",\n  \"short_description\": \"Reads an Excel file into a pandas DataFrame or a dictionary of DataFrames. Supports reading a single sheet or multiple sheets. Provides options to specify column types, converters, and more.\"\n}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/360", "solution": "{\n  \"name\": \"readExcelData\",\n  \"type\": \"function\",\n  \"signature\": \"(fileLocation: str, sheetName: str | int | None = 0) -> dict[str, dict[str, float]]\",\n  \"return_type\": \"dict[str, dict[str, float]]\",\n  \"short_description\": \"Reads an Excel file and returns a dictionary containing the mean and standard deviation of each column in the specified sheet.\"\n}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/360", "solution": "{\n  \"name\": \"readExcel\",\n  \"type\": \"function\",\n  \"signature\": \"(filePath: str, sheetName: str | int | list[str | int] | None = 0, **kwargs) -> dict[str, pd.DataFrame]\",\n  \"return_type\": \"dict[str, pd.DataFrame]\",\n  \"short_description\": \"Reads an Excel file into a dictionary of pandas DataFrames, each corresponding to a sheet in the Excel file. Supports specifying a single sheet or multiple sheets by name or index.\"\n}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/360", "solution": "{\n  \"name\": \"readExcel\",\n  \"type\": \"function\",\n  \"signature\": \"(io, sheetName: 'str | int | list[IntStrT] | None' = 'Sheet1', *, header: 'int | Sequence[int] | None' = 0, names: 'list[str] | None' = None, indexCol: 'int | Sequence[int] | None' = None, usecols: 'int | str | Sequence[int] | Sequence[str] | Callable[[str], bool] | None' = None, dtype: 'DtypeArg | None' = None, engine: \"Literal['xlrd', 'openpyxl', 'odf', 'pyxlsb'] | None\" = None, converters: 'dict[str, Callable] | dict[int, Callable] | None' = None, trueValues: 'Iterable[Hashable] | None' = None, falseValues: 'Iterable[Hashable] | None' = None, skiprows: 'Sequence[int] | int | Callable[[int], object] | None' = None, nrows: 'int | None' = None, naValues: 'Scalar | str | list[str] | dict[str, str] | None' = None, keepDefaultNa: 'bool' = True, naFilter: 'bool' = True, verbose: 'bool' = False, parseDates: 'bool | list[int | str] | dict[str, list[int | str]]' = False, dateParser: 'Callable | lib.NoDefault' = <no_default>, dateFormat: 'str | dict[str, str] | None' = None, thousands: 'str | None' = None, decimal: 'str' = '.', comment: 'str | None' = None, skipfooter: 'int' = 0, storageOptions: 'StorageOptions' = None, dtypeBackend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | dict[IntStrT, DataFrame]'\",\n  \"return_type\": \"DataFrame | dict[IntStrT, DataFrame]\",\n  \"short_description\": \"Read an Excel file into a pandas DataFrame.\"\n}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/360", "solution": "{\"name\": \"readExcel\", \"type\": \"function\", \"signature\": \"(fileLocation: str, sheetName: str | int | None = None, *, header: int | None = 0, indexCol: int | None = None, usecols: str | list[int | str] | None = None, dtype: dict[str, type] | None = None, engine: str | None = None, converters: dict[str | int, callable] | None = None, trueValues: list[any] | None = None, falseValues: list[any] | None = None, skipRows: list[int] | int | callable | None = None, nrows: int | None = None, naValues: list[str] | str | None = None, keepDefaultNa: bool = True, naFilter: bool = True, verbose: bool = False, parseDates: bool | list[int | str] | dict[str, list[int | str]] = False, dateParser: callable | None = None, dateFormat: str | dict[str, str] | None = None, thousands: str | None = None, decimal: str = '.', comment: str | None = None, skipFooter: int = 0, storageOptions: dict | None = None, dtypeBackend: str | None = None) -> 'DataFrame | dict[int | str, DataFrame]'\", \"return_type\": \"DataFrame | dict[int | str, DataFrame]\", \"short_description\": \"Reads an Excel file into a pandas DataFrame. Supports various options for reading specific sheets, columns, and handling different data types and formats.\"}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/360", "solution": "{\n  \"name\": \"readExcel\",\n  \"type\": \"function\",\n  \"signature\": \"(fileLocation: str, sheetName: str) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Reads an Excel file into a pandas DataFrame, supporting various parameters to customize the parsing process.\"\n}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"readExcelData\", \"type\": \"function\", \"signature\": \"(filePath: str, fileName: str, sheetName: str | int | list[str | int] | None = 'default', **kwargs) -> dict[str, pd.DataFrame]\", \"return_type\": \"dict[str, pd.DataFrame]\", \"short_description\": \"Reads data from an Excel file and returns it as a dictionary of DataFrames, with the option to specify a sheet by name or index, or a list of sheets.\"}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/409", "solution": "{\n  \"name\": \"readExcel\",\n  \"type\": \"function\",\n  \"signature\": \"(filePath: str, fileName: str, sheetName: str | int | list[str | int] | None = 'Sheet1', **kwargs) -> dict[str, pd.DataFrame]\",\n  \"return_type\": \"dict[str, pd.DataFrame]\",\n  \"short_description\": \"Reads an Excel file into a dictionary of DataFrames, with each sheet as a DataFrame in the dictionary.\"\n}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/409", "solution": "{\n  \"name\": \"readExcelData\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path: str, sheet_name: str | int = 0) -> dict[str, pd.DataFrame]\",\n  \"return_type\": \"dict[str, pd.DataFrame]\",\n  \"short_description\": \"Reads an Excel file and returns the data for the specified sheet as a dictionary of DataFrames.\"\n}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"readExcel\", \"type\": \"function\", \"signature\": \"(filePath: str, fileName: str, sheetName: str | int | None = 'default', options: dict = {}) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Reads an Excel file into a pandas DataFrame, allowing for specification of the sheet and additional parsing options.\"}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/409", "solution": "{\n  \"name\": \"readExcel\",\n  \"type\": \"callable\",\n  \"signature\": \"(file_path: str, sheet_name: str | int | list[int | str] | None = 'default', *, header: int | list[int] | None = 0, names: list[str] | None = None, index_col: int | list[int] | None = None, usecols: str | list[int | str] | callable | None = None, dtype: str | dict | None = None, engine: str | None = None, converters: dict[str, callable] | dict[int, callable] | None = None, true_values: list[hashable] | None = None, false_values: list[hashable] | None = None, skiprows: list[int] | int | callable | None = None, nrows: int | None = None, na_values: str | list[str] | dict | None = None, keep_default_na: bool = True, na_filter: bool = True, verbose: bool = False, parse_dates: bool | list[int | str] | dict | None = False, date_parser: callable | None = None, date_format: str | dict[str, str] | None = None, thousands: str | None = None, decimal: str = '.', comment: str | None = None, skipfooter: int = 0, storage_options: dict | None = None, dtype_backend: str | None = None) -> 'pd.DataFrame | dict[int | str, pd.DataFrame]'\",\n  \"return_type\": \"pd.DataFrame | dict[int | str, pd.DataFrame]\",\n  \"short_description\": \"Read an Excel file into a pandas DataFrame. Supports various options for reading specific sheets, columns, handling headers, and parsing dates.\"\n}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/409", "solution": "{\n  \"name\": \"readExcel\",\n  \"type\": \"callable\",\n  \"signature\": \"(io, sheet_name: 'str | int | list[int | str] | None' = 'Sheet1', *, header: 'int | list[int] | None' = 0, names: 'list[str] | None' = None, index_col: 'int | list[int] | None' = None, usecols: 'str | list[int | str] | callable | None' = None, dtype: 'dict[str, type] | None' = None, engine: 'str | None' = None, converters: 'dict[str, callable] | dict[int, callable] | None' = None, true_values: 'list[str] | None' = None, false_values: 'list[str] | None' = None, skiprows: 'list[int] | int | callable | None' = None, nrows: 'int | None' = None, na_values: 'list[str] | None' = None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, parse_dates: 'bool | list[int | str] | dict[str, list[int | str]]' = False, date_parser: 'callable | None' = None, date_format: 'str | dict[str, str] | None' = None, thousands: 'str | None' = None, decimal: 'str' = '.', comment: 'str | None' = None, skipfooter: 'int' = 0, storage_options: 'dict | None' = None, dtype_backend: 'str | None' = None) -> 'pd.DataFrame | dict[int | str, pd.DataFrame]'\",\n  \"return_type\": \"pd.DataFrame | dict[int | str, pd.DataFrame]\",\n  \"short_description\": \"Read an Excel file into a pandas DataFrame. Supports reading multiple sheets, specifying headers, parsing dates, and more.\"\n}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/409", "solution": "{\n  \"name\": \"readExcelData\",\n  \"type\": \"function\",\n  \"signature\": \"(filePath: str, fileName: str, sheetName: str | int | list[int | str] | None = 'Sheet1', **kwargs) -> dict[str, pd.DataFrame]\",\n  \"return_type\": \"dict[str, pd.DataFrame]\",\n  \"short_description\": \"Reads an Excel file into a dictionary of DataFrames, allowing for specification of the sheet to read and additional keyword arguments for customization.\"\n}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/409", "solution": "{\n  \"name\": \"readExcel\",\n  \"type\": \"function\",\n  \"signature\": \"(filePath: str, fileName: str, sheetName: str | int | None = 'default', options: dict = {}) -> pandas.DataFrame\",\n  \"return_type\": \"pandas.DataFrame\",\n  \"short_description\": \"Reads an Excel file into a pandas DataFrame. Supports various options for customization such as sheet selection, data types, and handling of missing values.\"\n}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/409", "solution": "{\"name\": \"readExcel\", \"type\": \"function\", \"signature\": \"(io, sheet_name: 'str | int | list[int | str] | None' = '0', *, header: 'int | list[int] | None' = '0', names: 'list[str] | None' = None, index_col: 'int | list[int] | None' = None, usecols: 'str | list[int | str] | callable | None' = None, dtype: 'dict[str, type] | None' = None, engine: 'str | None' = None, converters: 'dict[str, callable] | dict[int, callable] | None' = None, true_values: 'list[hashable] | None' = None, false_values: 'list[hashable] | None' = None, skiprows: 'list[int] | int | callable | None' = None, nrows: 'int | None' = None, na_values: 'list[str] | str | None' = None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, parse_dates: 'bool | list[int | str] | dict[str, list[int | str]]' = False, date_parser: 'callable | None' = None, date_format: 'dict[str, str] | str | None' = None, thousands: 'str | None' = None, decimal: 'str' = '.', comment: 'str | None' = None, skipfooter: 'int' = 0, storage_options: 'dict | None' = None, dtype_backend: 'str | None' = None) -> 'pd.DataFrame | dict[int | str, pd.DataFrame]'\", \"return_type\": \"pd.DataFrame | dict[int | str, pd.DataFrame]\", \"short_description\": \"Read an Excel file into a pandas DataFrame. Supports various options for parsing the data, including specifying sheet names, column types, and handling of missing values.\"}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/409", "solution": "{\n  \"name\": \"readExcel\",\n  \"type\": \"function\",\n  \"signature\": \"(filePath: str, fileName: str, sheetName: 'str | int | list[int | str] | None' = 0, header: 'int | list[int] | None' = 0, converters: 'dict[str, callable] | dict[int, callable] | None' = None) -> 'pd.DataFrame | dict[int | str, pd.DataFrame]'\",\n  \"return_type\": \"pd.DataFrame | dict[int | str, pd.DataFrame]\",\n  \"short_description\": \"Reads an Excel file into a pandas DataFrame, supporting multiple sheets and custom column converters.\"\n}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"readFileData\",\n  \"type\": \"function\",\n  \"signature\": \"(filePath: str, fileType: str, sheetName: str | None = None) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Reads data from a file and returns it as a DataFrame. Supports CSV, Excel, and potentially other file types in the future.\"\n}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"convertFiles\",\n  \"type\": \"function\",\n  \"signature\": \"(sourceDir: str, targetDir: str) -> int\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Converts files in a directory to CSV format. Supports .txt, .docx, .xlsx, and .csv files.\"\n}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"readFileData\",\n  \"type\": \"callable\",\n  \"signature\": \"(io, file_type: str, *, sheet_name: str | int | list[str | int] | None = 'Sheet1', header: int | list[int] | None = 0, names: list[str] | None = None, index_col: int | list[int] | None = None, usecols: str | list[int | str] | callable | None = None, dtype: dict[str, type] | None = None, engine: str | None = 'openpyxl', converters: dict[str | int, callable] | None = None, true_values: list[Hashable] | None = None, false_values: list[Hashable] | None = None, skiprows: list[int] | int | callable | None = None, nrows: int | None = None, na_values: scalar | list[str] | dict[str, str] | None = None, keep_default_na: bool = True, na_filter: bool = True, verbose: bool = False, parse_dates: bool | list[int | str] | dict[str, list[int | str]] | None = False, date_parser: callable | None = None, date_format: str | dict[str, str] | None = None, thousands: str | None = None, decimal: str = '.', comment: str | None = None, skipfooter: int = 0, storage_options: dict | None = None, dtype_backend: str | None = 'numpy_nullable')\",\n  \"return_type\": \"DataFrame | dict[str | int, DataFrame]\",\n  \"short_description\": \"Reads data from a file into a pandas DataFrame. Supports various file types including Excel, CSV, and DOCX. It allows specifying a sheet name, handling headers, column names, and more.\"\n}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"readConvertFiles\",\n  \"type\": \"function\",\n  \"signature\": \"(source_directory: str, target_directory: str) -> int\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Reads files from a source directory, converts them to CSV format, and saves them to a target directory. Supports .txt, .docx, .xlsx, and .csv file extensions.\"\n}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"convertFiles\",\n  \"type\": \"function\",\n  \"signature\": \"(source_directory: str, target_directory: str) -> int\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Converts files from various formats (txt, docx, xlsx, csv) to CSV format and saves them in a specified target directory.\"\n}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"readFileData\",\n  \"type\": \"function\",\n  \"signature\": \"(filePath: str, fileType: str) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Reads data from a file and returns it as a pandas DataFrame.\"\n}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"convertFiles\",\n  \"type\": \"function\",\n  \"signature\": \"(sourceDir: str, targetDir: str) -> int\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Converts files in a directory from various formats to CSV and saves them in a target directory.\"\n}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"readFileDataAsDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(filePath: str, fileType: str = 'auto') -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Reads data from a file into a DataFrame. Supports various file types including CSV, Excel, and DOCX.\"\n}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"read_file_to_dataframe\",\n  \"type\": \"function\",\n  \"signature\": \"(io, file_type: str, *, sheet_name: str | int | list[str | int] | None = 'Sheet1', header: int | list[int] | None = 0, names: list[str] | None = None, index_col: int | list[int] | None = None, usecols: str | list[int | str] | callable | None = None, dtype: dict[str, type] | None = None, engine: str | None = None, converters: dict[str | int, callable] | None = None, true_values: list[Hashable] | None = None, false_values: list[Hashable] | None = None, skiprows: list[int] | int | callable | None = None, nrows: int | None = None, na_values: list[str] | dict[str, str] | None = None, keep_default_na: bool = True, na_filter: bool = True, verbose: bool = False, parse_dates: bool | list[int | str] | dict[str, list[int | str]] = False, date_parser: callable | None = None, date_format: str | dict[str, str] | None = None, thousands: str | None = None, decimal: str = '.', comment: str | None = None, skipfooter: int = 0, storage_options: dict | None = None, dtype_backend: str | None = None) -> pd.DataFrame | dict[int | str, pd.DataFrame]\",\n  \"return_type\": \"pd.DataFrame | dict[int | str, pd.DataFrame]\",\n  \"short_description\": \"Reads a file into a pandas DataFrame. Supports various file types including Excel, CSV, and DOCX.\"\n}"}
{"api_id": 171, "api_name": "pandas.read_excel", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"readFileData\",\n  \"type\": \"function\",\n  \"signature\": \"(filePath: str, fileType: str) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Reads data from a file and returns it as a pandas DataFrame.\"\n}"}
{"api_id": 172, "api_name": "pandas.errors.EmptyDataError", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"calculate_dataframe_statistics\", \"type\": \"function\", \"signature\": \"def calculate_dataframe_statistics(df: pd.DataFrame) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistics for each numeric column in the DataFrame.\"}"}
{"api_id": 172, "api_name": "pandas.errors.EmptyDataError", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"check_csv_data\", \"type\": \"function\", \"signature\": \"check_csv_data(file_path: str, required_column: str, date_format: str = '%Y-%m-%d') -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Checks the integrity and contents of a CSV file, filtering rows based on a specified date column and format.\"}"}
{"api_id": 172, "api_name": "pandas.errors.EmptyDataError", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"validate_csv\", \"type\": \"function\", \"signature\": \"def validate_csv(file_path: str, required_columns: list, date_format: str = '%Y-%m-%d') -> pd.DataFrame:\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Validates a CSV file, checks for required columns and dates, and returns the filtered DataFrame.\"}"}
{"api_id": 172, "api_name": "pandas.errors.EmptyDataError", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"fetch_csv_data\", \"type\": \"function\", \"signature\": \"fetch_csv_data(file_path: str, column_name: str, date_format: str = '%Y-%m-%d') -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches data from a CSV file and processes it based on the given column and date format.\"}"}
{"api_id": 172, "api_name": "pandas.errors.EmptyDataError", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"fetch_csv_data\", \"type\": \"function\", \"signature\": \"(csv_file_path: str, column_name: str, date_format: str = '%Y-%m-%d')\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches and processes data from a CSV file, returning a DataFrame with specified column processed and filtered by current date.\"}"}
{"api_id": 172, "api_name": "pandas.errors.EmptyDataError", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"fetch_csv_data\", \"type\": \"function\", \"signature\": \"fetch_csv_data(file_path: str, column_name: str, date_format: str = '%Y-%m-%d') -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches and processes CSV data based on the provided parameters.\"}"}
{"api_id": 172, "api_name": "pandas.errors.EmptyDataError", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"fetch_csv_data\", \"type\": \"function\", \"signature\": \"fetch_csv_data(file_path: str, column_name: str, date_format: str = '%Y-%m-%d') -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches and processes a CSV file, returning a DataFrame with specified column processed to datetime and filtered by current date.\"}"}
{"api_id": 172, "api_name": "pandas.errors.EmptyDataError", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"calculate_average_value\", \"type\": \"function\", \"signature\": \"([float]) -> float\", \"return_type\": \"float\", \"short_description\": \"Calculates the average value of a list of numbers.\"}"}
{"api_id": 172, "api_name": "pandas.errors.EmptyDataError", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"calculate_average_age\", \"type\": \"function\", \"signature\": \"df\", \"return_type\": \"float\", \"short_description\": \"Calculates the average age of individuals in a DataFrame.\"}"}
{"api_id": 172, "api_name": "pandas.errors.EmptyDataError", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"fetch_csv_data\", \"type\": \"function\", \"signature\": \"(csv_file_path: str, column_name: str, date_format: str = '%Y-%m-%d') -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches data from a CSV file and processes it to filter records based on a specified column and date format.\"}"}
{"api_id": 173, "api_name": "pandas.crosstab", "task_id": "BigCodeBench/879", "solution": "{\n  \"name\": \"compute_crosstab\",\n  \"type\": \"callable\",\n  \"signature\": \"(index, columns, values=None, aggfunc=None, margins=False, margins_name=None, dropna=True, normalize=False) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Computes a cross tabulation of two (or more) factors, similar to pandas.crosstab but with additional parameters.\"\n}"}
{"api_id": 173, "api_name": "pandas.crosstab", "task_id": "BigCodeBench/879", "solution": "{\n  \"name\": \"calculate_chi_square_p_value\",\n  \"type\": \"function\",\n  \"signature\": \"(data: DataFrame, col1: str, col2: str) -> float\",\n  \"return_type\": \"The function calculates the chi-square test p-value for the given data and columns, returning a float.\",\n  \"short_description\": \"This function performs a chi-square test on the provided DataFrame columns and returns the p-value.\"\n}"}
{"api_id": 173, "api_name": "pandas.crosstab", "task_id": "BigCodeBench/879", "solution": "{\n  \"name\": \"calculate_chi_square_p_value\",\n  \"type\": \"function\",\n  \"signature\": \"(data: DataFrame, col1: str, col2: str) -> float\",\n  \"return_type\": \"The p-value from the chi-square test.\",\n  \"short_description\": \"Performs a chi-square test on the contingency table formed by the two specified columns in the DataFrame.\"\n}"}
{"api_id": 173, "api_name": "pandas.crosstab", "task_id": "BigCodeBench/879", "solution": "{\n  \"name\": \"calculate_chi_square_p_value\",\n  \"type\": \"function\",\n  \"signature\": \"(data, col1, col2) -> float\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculates the p-value for the chi-square test of independence on the provided DataFrame columns.\"\n}"}
{"api_id": 173, "api_name": "pandas.crosstab", "task_id": "BigCodeBench/879", "solution": "{\n  \"name\": \"calculate_chi_square_p_value\",\n  \"type\": \"function\",\n  \"signature\": \"(data: pd.DataFrame, col1: str, col2: str) -> float\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculates the p-value of the chi-square test for independence between two categorical columns in a DataFrame.\"\n}"}
{"api_id": 173, "api_name": "pandas.crosstab", "task_id": "BigCodeBench/879", "solution": "{\n  \"name\": \"calculate_chi_square_p_value\",\n  \"type\": \"function\",\n  \"signature\": \"(data: DataFrame, col1: str, col2: str) -> float\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Performs a chi-square test on the provided DataFrame and two categorical columns, returning the p-value of the test.\"\n}"}
{"api_id": 173, "api_name": "pandas.crosstab", "task_id": "BigCodeBench/879", "solution": "{\n  \"name\": \"calculate_chi_square_p_value\",\n  \"type\": \"function\",\n  \"signature\": \"(data: DataFrame, col1: str, col2: str) -> float\",\n  \"return_type\": \"The p-value resulting from the chi-square test.\",\n  \"short_description\": \"Performs a chi-square test on the provided DataFrame and columns, returning the p-value.\"\n}"}
{"api_id": 173, "api_name": "pandas.crosstab", "task_id": "BigCodeBench/879", "solution": "{\n  \"name\": \"calculate_chi_square_p_value\",\n  \"type\": \"function\",\n  \"signature\": \"(data, col1, col2) -> float\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculates the chi-square test p-value for the given data and columns.\"\n}"}
{"api_id": 173, "api_name": "pandas.crosstab", "task_id": "BigCodeBench/879", "solution": "{\n  \"name\": \"calculate_chi_square_p_value\",\n  \"type\": \"function\",\n  \"signature\": \"(data: pd.DataFrame, col1: str, col2: str) -> float\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculates the chi-square test p-value for the independence of two categorical variables.\"\n}"}
{"api_id": 173, "api_name": "pandas.crosstab", "task_id": "BigCodeBench/879", "solution": "{\n  \"name\": \"calculate_chi_square_p_value\",\n  \"type\": \"function\",\n  \"signature\": \"(data: DataFrame, col1: str, col2: str) -> float\",\n  \"return_type\": \"The p-value of the chi-square test.\",\n  \"short_description\": \"Calculates the p-value for the chi-square test given a DataFrame and two column names.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/92", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame object with the provided data, index, columns, dtype, and copy settings. Useful for initializing a DataFrame for data manipulation and analysis.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/92", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a pandas DataFrame with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/92", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a new DataFrame from the provided data, index, columns, dtype, and copy parameters.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/92", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a pandas DataFrame from the provided data, index, columns, dtype, and copy parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/92", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame object with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/92", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a new pandas DataFrame with the provided data, index, columns, dtype, and copy settings. This function is a standalone alternative to pandas.DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/92", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a pandas DataFrame from the provided data. Supports various data formats including nested dictionaries, lists of dictionaries, and numpy arrays.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/92", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a pandas DataFrame from the provided data, with optional indexing, column labeling, data type enforcement, and copying options.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/92", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a new DataFrame with the specified data, index, columns, and data type.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/92", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a pandas DataFrame with the provided data, index, columns, dtype, and copy settings. This function is a standalone alternative to pandas.DataFrame and allows for the creation of DataFrames without using the hierarchical API call.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/93", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters for indexing and data type enforcement.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters for indexing, column labeling, data type enforcement, and copying data.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/93", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters for indexing, column labeling, data type enforcement, and copying.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/93", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters for index, columns, dtype, and copy.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, columns=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, optionally specifying column names.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/93", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from the provided data. This function is a high-level method to construct a DataFrame, supporting various types of input including numpy arrays, dictionaries, and lists of dictionaries.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/93", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters for customization.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, columns=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, optionally specifying column names.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data: 'Any', columns: 'List[str] | None' = None) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, optionally specifying column names.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, columns=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, with optional column names.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from various input data types, providing flexibility in data representation and manipulation.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"generateDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from various input types, including arrays, dictionaries, and more.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/99", "solution": "{\"name\": \"generateDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, index, columns, dtype, and copy parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"createDataFrameFromDict\",\n  \"type\": \"function\",\n  \"signature\": \"(data: dict, index: list = None, columns: list = None, dtype: str = None) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a pandas DataFrame from a dictionary. The function allows specifying index and column labels, as well as enforcing a specific data type.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/99", "solution": "{\"name\": \"calculateDataFrameStats\", \"type\": \"function\", \"signature\": \"(df: pandas.DataFrame) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures for each numerical column in the DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/99", "solution": "{\"name\": \"generatePairPlot\", \"type\": \"function\", \"signature\": \"(data: pd.DataFrame, hue: str, vars: list[str] = None) -> plt.Figure\", \"return_type\": \"plt.Figure\", \"short_description\": \"Generates a pair plot using seaborn for visualizing relationships between variables in a DataFrame, with an optional hue and subset of variables.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"generate_pair_plot\",\n  \"type\": \"function\",\n  \"signature\": \"(data: pd.DataFrame, hue: str, vars: List[str] = None) -> sns.axisgrid.PairGrid\",\n  \"return_type\": \"sns.axisgrid.PairGrid\",\n  \"short_description\": \"Generates a pair plot using seaborn to visualize relationships between features of a dataset.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"createDataFrameFromDict\",\n  \"type\": \"function\",\n  \"signature\": \"(data: dict, index: list = None, columns: list = None) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a pandas DataFrame from a dictionary, with optional indexing and column labeling.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"createDataFrameFromDict\",\n  \"type\": \"function\",\n  \"signature\": \"(data: dict, index: list = None, columns: list = None, dtype: str = None) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a pandas DataFrame from a dictionary. Provides flexibility in specifying index and columns, and allows enforcing a specific data type.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"createDataFrameFromDict\",\n  \"type\": \"function\",\n  \"signature\": \"(data: dict, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a pandas DataFrame from a dictionary. Optionally, specify the index and columns, and enforce a data type.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"createDataFrameFromCSV\",\n  \"type\": \"function\",\n  \"signature\": \"(data_url: str, sep: str = '\\\\s+', skiprows: int = 22, header: int = None, columns: List[str] = None) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a DataFrame from a CSV file given its URL, separator, number of rows to skip, and column names.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"generateHeatmap\",\n  \"type\": \"function\",\n  \"signature\": \"(data: pd.DataFrame, file_path: str = None) -> None\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generates a heatmap of the correlation matrix for the given DataFrame. Optionally saves the heatmap to a file.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"generateHeatmap\", \"type\": \"function\", \"signature\": \"(data: pd.DataFrame, annot: bool = False) -> plt.Axes\", \"return_type\": \"plt.Axes\", \"short_description\": \"Generates a heatmap of the correlation matrix for the given DataFrame. The heatmap includes annotations if specified.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"computeCorrelationMatrix\",\n  \"type\": \"function\",\n  \"signature\": \"(data: pd.DataFrame, columns: List[str] = None) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Computes the correlation matrix for the given DataFrame using the specified columns.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"generateHeatmap\",\n  \"type\": \"function\",\n  \"signature\": \"(data: pd.DataFrame, annot: bool = False) -> None\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generates a heatmap of the correlation matrix for the given DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"generateHeatmap\",\n  \"type\": \"function\",\n  \"signature\": \"(data: pd.DataFrame, annot: bool = False) -> None\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generates a heatmap of the correlation matrix for the given DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"generateHeatmap\",\n  \"type\": \"function\",\n  \"signature\": \"(data: pd.DataFrame, annot: bool = False) -> plt.Axes\",\n  \"return_type\": \"plt.Axes\",\n  \"short_description\": \"Generates a heatmap of the correlation matrix for the given DataFrame. The heatmap includes annotations of the correlation values if specified.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"generateHeatmap\", \"type\": \"function\", \"signature\": \"(data: DataFrame, title: str | None = None) -> None\", \"return_type\": \"None\", \"short_description\": \"Generates a heatmap from the provided DataFrame with an optional title.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"generateHeatmap\",\n  \"type\": \"function\",\n  \"signature\": \"(data: pd.DataFrame, annot: bool = False, figsize: tuple = (10, 8)) -> plt.Axes\",\n  \"return_type\": \"plt.Axes\",\n  \"short_description\": \"Generates a heatmap of the correlation matrix for the given DataFrame. This function is useful for visualizing the correlation between features in a dataset.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"computeCorrelationMatrix\",\n  \"type\": \"function\",\n  \"signature\": \"(data: pd.DataFrame, columns: List[str] = None) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Computes the correlation matrix for the specified columns of a DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a new DataFrame with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"calculateSeasonalDecomposition\", \"type\": \"function\", \"signature\": \"(df: DataFrame, freq: str, decompositionModel: str) -> Tuple[DecompositionResult, plt.Axes]\", \"return_type\": \"Tuple[DecompositionResult, plt.Axes]\", \"short_description\": \"Performs seasonal decomposition on the given time series DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a new DataFrame object with the provided data.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"calculateSeasonalDecomposition\", \"type\": \"function\", \"signature\": \"(df: DataFrame, freq: str = 'D', decomposition_model: str = 'multiplicative') -> Tuple[DecompositionResult, plt.Axes]\", \"return_type\": \"Tuple[DecompositionResult, plt.Axes]\", \"short_description\": \"Performs seasonal decomposition on a time series DataFrame. It validates input, sets up the DataFrame, handles missing values, and returns the decomposition result along with the plot axes for visualization.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a new DataFrame with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a new DataFrame with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/108", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a new DataFrame object with the specified parameters.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/108", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a new DataFrame with the specified parameters.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/108", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a new DataFrame with the specified parameters.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/129", "solution": "{\n  \"name\": \"parseWebPage\",\n  \"type\": \"function\",\n  \"signature\": \"(url='str') -> 'pandas.core.frame.DataFrame'\",\n  \"return_type\": \"pandas.core.frame.DataFrame\",\n  \"short_description\": \"Parses an HTML page to extract data from the first table found and returns it as a pandas DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/129", "solution": "{\n  \"name\": \"parseWebPage\",\n  \"type\": \"function\",\n  \"signature\": \"(url='http://example.com') -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Parses an HTML page to extract data from the first table found and returns it as a DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"parseWebPage\", \"type\": \"function\", \"signature\": \"(url: str) -> 'pandas.DataFrame'\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Parses a webpage and extracts the first table into a pandas DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"parseHtmlTable\", \"type\": \"function\", \"signature\": \"(html: str) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Parses an HTML string to extract data from the first table and returns it as a DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchHtmlTable\", \"type\": \"function\", \"signature\": \"(url: str) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches an HTML table from a given URL and converts it into a pandas DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/129", "solution": "{\n  \"name\": \"parseWebPageTable\",\n  \"type\": \"function\",\n  \"signature\": \"(url: str) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Extracts data from the first table found on a given web page and returns it as a pandas DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"parseWebPage\", \"type\": \"function\", \"signature\": \"(url='str') -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Parses a web page to extract data from its first table and returns it as a pandas DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/129", "solution": "{\n  \"name\": \"parseWebPage\",\n  \"type\": \"function\",\n  \"signature\": \"(url='http://example.com') -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Parses an HTML page to extract data from its first table and returns it as a pandas DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"parseWebPageData\", \"type\": \"function\", \"signature\": \"(url='http://example.com') -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Extracts data from a web page and converts it into a DataFrame. The function targets tables found within the HTML content of the page.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/129", "solution": "{\n  \"name\": \"parseHtmlTable\",\n  \"type\": \"function\",\n  \"signature\": \"(html_content, parser='html.parser') -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Parses an HTML table from the provided HTML content and returns it as a pandas DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/139", "solution": "{\"name\": \"generateHistogramAxes\", \"type\": \"function\", \"signature\": \"(df: pandas.DataFrame) -> List[plt.Axes]\", \"return_type\": \"List[plt.Axes]\", \"short_description\": \"Generates a list of Matplotlib Axes objects, each containing a histogram plot for each numeric column in the given DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/139", "solution": "{\n  \"name\": \"create_histogram_axes\",\n  \"type\": \"function\",\n  \"signature\": \"(df: pd.DataFrame) -> List[plt.Axes]\",\n  \"return_type\": \"List[plt.Axes]\",\n  \"short_description\": \"Creates a list of histogram axes for each numeric column in the given DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/139", "solution": "{\n  \"name\": \"plot_numeric_histograms\",\n  \"type\": \"function\",\n  \"signature\": \"(df: pd.DataFrame) -> List[plt.Axes]\",\n  \"return_type\": \"List[plt.Axes]\",\n  \"short_description\": \"Creates histograms for each numeric column in the given DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/139", "solution": "{\n  \"name\": \"plot_numeric_histograms\",\n  \"type\": \"function\",\n  \"signature\": \"(df: pd.DataFrame) -> List[plt.Axes]\",\n  \"return_type\": \"List[plt.Axes]\",\n  \"short_description\": \"Generates histograms for all numeric columns in a pandas DataFrame and returns a list of the axes objects.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/139", "solution": "{\n  \"name\": \"create_histogram_plots\",\n  \"type\": \"function\",\n  \"signature\": \"(df: pd.DataFrame, title: str = None) -> List[plt.Axes]\",\n  \"return_type\": \"List[plt.Axes]\",\n  \"short_description\": \"Creates histogram plots for each numeric column in the given DataFrame. Each plot is displayed on a separate axis.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/139", "solution": "{\n  \"name\": \"plot_numeric_histograms\",\n  \"type\": \"function\",\n  \"signature\": \"(df: pd.DataFrame) -> List[plt.Axes]\",\n  \"return_type\": \"List[plt.Axes]\",\n  \"short_description\": \"Plots histograms for all numeric columns in a DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/139", "solution": "{\"name\": \"plotHistograms\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame, columns: List[str] = None) -> List[plt.Axes]\", \"return_type\": \"List[plt.Axes]\", \"short_description\": \"Generates histograms for specified numeric columns of a DataFrame using matplotlib.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/139", "solution": "{\n  \"name\": \"create_histogram_plots\",\n  \"type\": \"function\",\n  \"signature\": \"(df: pd.DataFrame) -> List[plt.Axes]\",\n  \"return_type\": \"List[plt.Axes]\",\n  \"short_description\": \"Creates a list of histogram plots for each numeric column in the given DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/139", "solution": "{\"name\": \"plotNumericHistograms\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> List[plt.Axes]\", \"return_type\": \"List[plt.Axes]\", \"short_description\": \"Generates histograms for each numeric column in the given DataFrame and returns a list of Axes objects.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/139", "solution": "{\n  \"name\": \"generate_histogram_axes\",\n  \"type\": \"function\",\n  \"signature\": \"(df: 'pd.DataFrame') -> 'List[plt.Axes]'\",\n  \"return_type\": \"List[plt.Axes]\",\n  \"short_description\": \"Generates a list of matplotlib Axes objects, each containing a histogram plot for each numeric column in the given DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/161", "solution": "{\n  \"name\": \"create_dataframe\",\n  \"type\": \"function\",\n  \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters for customization.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/161", "solution": "{\n  \"name\": \"parse_log_data\",\n  \"type\": \"function\",\n  \"signature\": \"(log_file: str) -> str\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Parses a log file and returns the path to a CSV file containing the parsed data.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/161", "solution": "{\n  \"name\": \"create_dataframe\",\n  \"type\": \"function\",\n  \"signature\": \"(data: list[list[str | int | float]], columns: list[str], index: list[str] | None = None) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a DataFrame from a list of lists, specifying columns and optionally an index.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/161", "solution": "{\n  \"name\": \"parse_log_file\",\n  \"type\": \"function\",\n  \"signature\": \"(log_file: str) -> str\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Parses a log file and returns the path to a CSV file containing the parsed log data.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/161", "solution": "{\n  \"name\": \"parse_log_data\",\n  \"type\": \"function\",\n  \"signature\": \"(log_file: str) -> str\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Parses a log file and returns the path to a CSV file containing the parsed data.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/161", "solution": "{\n  \"name\": \"parse_log_file\",\n  \"type\": \"function\",\n  \"signature\": \"(log_file: str) -> str\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Parses a log file and returns a DataFrame containing log entries.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/161", "solution": "{\"name\": \"parseLogData\", \"type\": \"function\", \"signature\": \"(log_file: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Parses a log file and returns the path to a CSV file containing the parsed data.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/161", "solution": "{\"name\": \"parseLogData\", \"type\": \"function\", \"signature\": \"(log_file: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Parses a log file and returns the path to a CSV file containing the parsed data.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/161", "solution": "{\n  \"name\": \"create_dataframe\",\n  \"type\": \"function\",\n  \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters for customization.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/161", "solution": "{\"name\": \"createDataFrameFromLog\", \"type\": \"function\", \"signature\": \"(log_file: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Creates a DataFrame from log entries, validating timestamp format and saving to CSV.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/184", "solution": "{\n  \"name\": \"cleanAndVectorizeText\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe: pd.DataFrame, text_column: str) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Cleans and vectorizes text data from a specified column in a DataFrame, returning a DataFrame with the vectorized representation of the text.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/184", "solution": "{\n  \"name\": \"normalizeData\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe: 'pd.DataFrame', textColumn: 'str') -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Normalizes text data in a specified column of a DataFrame by converting it to lowercase, removing numbers and punctuation, and removing stopwords. Returns a DataFrame with the normalized text data vectorized using CountVectorizer.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/184", "solution": "{\"name\": \"preprocessDataFrame\", \"type\": \"function\", \"signature\": \"(dataframe: 'pd.DataFrame', textColumn: 'str') -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Preprocesses text data in a DataFrame column by converting to lowercase, removing digits and punctuation, and removing stopwords.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/184", "solution": "{\n  \"name\": \"processDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe: pd.DataFrame, textColumn: str) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Processes a DataFrame by pre-processing text in a specified column and vectorizing the text data.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/184", "solution": "{\n  \"name\": \"normalizeTextData\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe: 'DataFrame', textColumn: 'str') -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Normalizes text data in a specified column of a DataFrame by converting it to lowercase, removing numbers and punctuation, and removing stopwords.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/184", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(dataframe: pd.DataFrame, textColumn: str) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates the frequency of each word in the specified text column of a DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/184", "solution": "{\n  \"name\": \"textPreprocessing\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe: 'DataFrame', textColumn: 'str') -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Performs text preprocessing and vectorization on a specified text column of a DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/184", "solution": "{\n  \"name\": \"transformDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe: 'pd.DataFrame', textColumn: 'str') -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Transforms the specified text column in a DataFrame by applying text preprocessing and vectorizing the text data.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/184", "solution": "{\n  \"name\": \"computeWordFrequency\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe, textColumn) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Computes the frequency of words in a specified text column of a DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/184", "solution": "{\n  \"name\": \"textPreprocessing\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe: DataFrame, textColumn: str) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Performs text preprocessing and vectorization on a specified text column of a DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(utc_datetime: datetime, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'], weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'], timezones={'New York': 'America/New_York', 'London': 'Europe/London', 'Beijing': 'Asia/Shanghai', 'Tokyo': 'Asia/Tokyo', 'Sydney': 'Australia/Sydney'}, seed=42) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing weather reports for specified cities based on a given UTC datetime.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/199", "solution": "{\n  \"name\": \"generateWeatherReport\",\n  \"type\": \"function\",\n  \"signature\": \"(utc_datetime, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'], weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'], timezones={'New York': 'America/New_York', 'London': 'Europe/London', 'Beijing': 'Asia/Shanghai', 'Tokyo': 'Asia/Tokyo', 'Sydney': 'Australia/Sydney'}, seed=42) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Generates a weather report for multiple cities based on a given UTC datetime.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/199", "solution": "{\n  \"name\": \"generate_weather_report\",\n  \"type\": \"function\",\n  \"signature\": \"(utc_datetime: datetime, cities: List[str] = ['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'], weather_conditions: List[str] = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'], timezones: Dict[str, str] = {'New York': 'America/New_York', 'London': 'Europe/London', 'Beijing': 'Asia/Shanghai', 'Tokyo': 'Asia/Tokyo', 'Sydney': 'Australia/Sydney'}, seed: int = 42) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a weather report for a list of cities based on a given UTC datetime.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(utc_datetime, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'], weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'], timezones={'New York': 'America/New_York', 'London': 'Europe/London', 'Beijing': 'Asia/Shanghai', 'Tokyo': 'Asia/Tokyo', 'Sydney': 'Australia/Sydney'}, seed=42) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing weather reports for specified cities and their local times based on a given UTC datetime.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/199", "solution": "{\n  \"name\": \"create_weather_report\",\n  \"type\": \"function\",\n  \"signature\": \"(utc_datetime: datetime, cities: List[str] = ['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'], weather_conditions: List[str] = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'], timezones: Dict[str, str] = {'New York': 'America/New_York', 'London': 'Europe/London', 'Beijing': 'Asia/Shanghai', 'Tokyo': 'Asia/Tokyo', 'Sydney': 'Australia/Sydney'}, seed: int = 42) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a DataFrame containing weather reports for specified cities based on a given UTC datetime.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(utc_datetime: datetime, cities: list[str] = ['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'], weather_conditions: list[str] = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'], timezones: dict[str, str] = {'New York': 'America/New_York', 'London': 'Europe/London', 'Beijing': 'Asia/Shanghai', 'Tokyo': 'Asia/Tokyo', 'Sydney': 'Australia/Sydney'}, seed: int = 42) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a weather report for multiple cities based on a given UTC datetime, weather conditions, and timezones. Uses a random weather condition for each city.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/199", "solution": "{\n  \"name\": \"generate_weather_report\",\n  \"type\": \"function\",\n  \"signature\": \"(utc_datetime: datetime, cities: List[str] = ['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'], weather_conditions: List[str] = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'], timezones: Dict[str, str] = {'New York': 'America/New_York', 'London': 'Europe/London', 'Beijing': 'Asia/Shanghai', 'Tokyo': 'Asia/Tokyo', 'Sydney': 'Australia/Sydney'}, seed: int = 42) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a weather report for a list of cities based on a given UTC datetime, with random weather conditions. The report includes city name, local time, and weather condition.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/199", "solution": "{\n  \"name\": \"generate_weather_report\",\n  \"type\": \"function\",\n  \"signature\": \"(utc_datetime: datetime, cities: List[str] = ['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'], weather_conditions: List[str] = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'], timezones: Dict[str, str] = {'New York': 'America/New_York', 'London': 'Europe/London', 'Beijing': 'Asia/Shanghai', 'Tokyo': 'Asia/Tokyo', 'Sydney': 'Australia/Sydney'}, seed: int = 42) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a weather report for a list of cities based on a given UTC datetime.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(utc_datetime, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'], weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'], timezones={'New York': 'America/New_York', 'London': 'Europe/London', 'Beijing': 'Asia/Shanghai', 'Tokyo': 'Asia/Tokyo', 'Sydney': 'Australia/Sydney'}, seed=42) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame containing weather reports for multiple cities based on a given UTC datetime.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/199", "solution": "{\n  \"name\": \"generate_weather_report\",\n  \"type\": \"function\",\n  \"signature\": \"(utc_datetime: datetime, cities: List[str] = ['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'], weather_conditions: List[str] = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'], timezones: Dict[str, str] = {'New York': 'America/New_York', 'London': 'Europe/London', 'Beijing': 'Asia/Shanghai', 'Tokyo': 'Asia/Tokyo', 'Sydney': 'Australia/Sydney'}, seed: int = 42) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a weather report for a list of cities based on a given UTC datetime, weather conditions, and timezones. Uses a random selection of weather conditions and ensures the datetime is timezone-aware.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/302", "solution": "{\"name\": \"calculateDataFrameCorrelation\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame, plot: bool = False) -> Tuple[pd.DataFrame, Optional[plt.Figure]]\", \"return_type\": \"Tuple[pd.DataFrame, Optional[plt.Figure]]\", \"short_description\": \"Calculates the correlation matrix of the DataFrame and optionally plots a heatmap of the correlation matrix.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/302", "solution": "{\"name\": \"calculateCorrelationMatrix\", \"type\": \"function\", \"signature\": \"(data: pd.DataFrame) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates the correlation matrix for the given DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"generateDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters for customization.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"createDataFrameFromDict\",\n  \"type\": \"function\",\n  \"signature\": \"(data: dict, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a pandas DataFrame from a dictionary. This function allows for specifying the index and columns, and optionally enforces a data type for the DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/302", "solution": "{\"name\": \"calculateCorrelationMatrix\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame, plot: bool = False) -> Tuple[pd.DataFrame, plt.Figure]\", \"return_type\": \"tuple\", \"short_description\": \"Calculates the correlation matrix of the given DataFrame and optionally plots it as a heatmap.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/302", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a DataFrame from various input types, providing flexibility and control over data structure.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"calculateCorrelationMatrix\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe: pd.DataFrame, plot: bool = False) -> Tuple[pd.DataFrame, Optional[plt.Figure]]\",\n  \"return_type\": \"Tuple[pd.DataFrame, Optional[plt.Figure]]\",\n  \"short_description\": \"Calculates the correlation matrix of a given DataFrame and optionally plots a heatmap of the correlation matrix.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"createDataFrameFromDict\",\n  \"type\": \"function\",\n  \"signature\": \"(data: dict, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a DataFrame from a dictionary, allowing for customization of index and columns.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/302", "solution": "{\"name\": \"calculateDataFrameCorrelation\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame, plot: bool = False) -> Tuple[pd.DataFrame, Optional[plt.Figure]]\", \"return_type\": \"Tuple[pd.DataFrame, Optional[plt.Figure]]\", \"short_description\": \"Calculates the correlation matrix of a DataFrame and optionally plots a heatmap.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/302", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from various input data types.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/308", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from the provided data, index, columns, dtype, and copy parameters.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/308", "solution": "{\n  \"name\": \"createDataFrameFromDictionary\",\n  \"type\": \"function\",\n  \"signature\": \"(data: dict, index: list = None, columns: list = None) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a DataFrame from a dictionary of data, with optional index and columns specifications.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/308", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"(additionalFields=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a report DataFrame with random grades for students and their average grades.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/308", "solution": "{\n  \"name\": \"generateReport\",\n  \"type\": \"function\",\n  \"signature\": \"(additionalFields=None) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Generates a report DataFrame containing randomly generated grades for students across various subjects, along with average grades for each student and each subject.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/308", "solution": "{\n  \"name\": \"generateReport\",\n  \"type\": \"function\",\n  \"signature\": \"(additional_fields=None) -> pandas.DataFrame\",\n  \"return_type\": \"pandas.DataFrame\",\n  \"short_description\": \"Generates a report DataFrame with random grades for students in various fields, including optional additional fields.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/308", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"(additionalFields=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a report DataFrame with random grades for students in various fields, including additional fields specified by the user. The DataFrame includes columns for each field and a row for the average grade per student and the average grade per field.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/308", "solution": "{\n  \"name\": \"generateReport\",\n  \"type\": \"function\",\n  \"signature\": \"(additional_fields=None) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Generates a DataFrame containing random grades for students across various subjects, including optional additional fields. It calculates average grades for each student and each subject.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/308", "solution": "{\n  \"name\": \"generateReport\",\n  \"type\": \"function\",\n  \"signature\": \"(additionalFields=None) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Generates a DataFrame containing randomly generated grades for students across various subjects, along with average grades for each student and each subject.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/308", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data: dict, index: list | None = None, columns: list | None = None) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a pandas DataFrame from a dictionary of data, with optional custom index and columns.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/308", "solution": "{\"name\": \"generateReportData\", \"type\": \"function\", \"signature\": \"(additional_fields=None) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame containing random grades for students across various subjects, including optional additional fields. It also calculates the average grade for each student and the average grade for each subject.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a DataFrame object with the specified parameters.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a new DataFrame with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"create_dataframe_visualization\",\n  \"type\": \"function\",\n  \"signature\": \"(df: pandas.DataFrame, col: str) -> matplotlib.figure.Figure\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a visualization of a specified column in a DataFrame, including a histogram and boxplot based on the data type of the column.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"generatePlot\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame, col: str) -> plt.Figure\", \"return_type\": \"plt.Figure\", \"short_description\": \"Generates a plot for the specified column in the DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a new DataFrame object. This function provides a flexible way to construct a DataFrame from various data sources such as dictionaries, numpy arrays, and more.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"create_dataframe_visualization\",\n  \"type\": \"function\",\n  \"signature\": \"(data, columns, title=None) -> 'Figure'\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a visualization for a DataFrame, including histograms and boxplots based on the data type of the specified column.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a pandas DataFrame with the specified parameters.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"createDataframe\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a new DataFrame with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a new DataFrame with the provided data, index, columns, dtype, and copy settings. This function is a simplified version of pandas.DataFrame for educational purposes.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a new DataFrame object with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/458", "solution": "{\n  \"name\": \"transformData\",\n  \"type\": \"function\",\n  \"signature\": \"(data: dict, double_numbers: bool = False) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Transforms the input dictionary by potentially doubling numeric values, and returns a DataFrame with the transformed data.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/458", "solution": "{\n  \"name\": \"processJsonData\",\n  \"type\": \"function\",\n  \"signature\": \"(json_str: str) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Processes JSON data to create a DataFrame, applying specific transformations to numerical values and handling nested structures.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/458", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data: 'dict | list', index: 'list | None' = None, columns: 'list | None' = None, dtype: 'str | None' = None) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a pandas DataFrame from the provided data, index, and columns. Optionally, it can enforce a specific data type for the DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/458", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from various data inputs. Supports dictionaries, numpy arrays, lists of dictionaries, and more. Provides options for specifying index, columns, data type, and copying data.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"transformDataFrame\", \"type\": \"function\", \"signature\": \"(data: dict, multiplier: float = 2.0) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Transforms the input dictionary data by doubling numeric values, optionally applying a multiplier, and returns a DataFrame with appropriate conversions.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/458", "solution": "{\n  \"name\": \"processJsonData\",\n  \"type\": \"function\",\n  \"signature\": \"(json_str: str) -> pandas.DataFrame\",\n  \"return_type\": \"pandas.DataFrame\",\n  \"short_description\": \"Processes JSON data and returns a DataFrame with transformations.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a new DataFrame object. This function is a high-level interface for constructing DataFrame from various data sources.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"normalizeDataFrame\", \"type\": \"function\", \"signature\": \"(data: dict, enforce_single_dtype: bool = False) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Normalizes the data within a DataFrame by applying specified transformations and enforcing a single data type if required.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/458", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a new DataFrame object. This function is a simplified and more versatile alternative to pandas.DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from various input types, handling data transformation and type coercion automatically.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a new DataFrame object.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a new DataFrame object with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a pandas DataFrame object with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"generateDataFrame\", \"type\": \"function\", \"signature\": \"(N=100, CATEGORIES=['A', 'B', 'C', 'D', 'E'], seed=42) -> (DataFrame, Axes)\", \"return_type\": \"DataFrame, Axes\", \"short_description\": \"Generates a DataFrame with random data and plots a scatter plot by category.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/477", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a new DataFrame with the provided data, index, columns, dtype, and copy settings.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, index, columns, dtype, and copy parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from various input data sources, supporting a variety of data types and options for data handling.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/477", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a new DataFrame object with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/477", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters to specify index, columns, data type, and copy behavior.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/477", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a new DataFrame with the specified data, index, columns, and dtype. The DataFrame is a two-dimensional, size-mutable, potentially heterogeneous tabular data structure.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame with the given data, index, columns, dtype, and copy settings.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/486", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters for indexing, columns, data type, and copying.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from various input types, including dictionaries, numpy arrays, and more. Supports optional parameters for specifying index, columns, data type, and copying data.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/486", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from various input types, including dictionaries, numpy arrays, and lists of dictionaries.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame object with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/486", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame object with the provided data, index, columns, dtype, and copy settings.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a new DataFrame object with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a new DataFrame object with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/486", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from various input data types, including arrays, dictionaries, and lists of dictionaries.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/486", "solution": "{\n  \"name\": \"create_dataframe\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from various input types, providing flexible data structure capabilities.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"generate_sales_data\", \"type\": \"function\", \"signature\": \"(epoch_milliseconds, random_seed=0, products=['Product1', 'Product2', 'Product3', 'Product4', 'Product5']) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing simulated sales data based on the provided parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from various input types, including arrays, dictionaries, and lists of dictionaries.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"generate_sales_data\", \"type\": \"function\", \"signature\": \"(epoch_milliseconds, random_seed=0, products=['Product1', 'Product2', 'Product3', 'Product4', 'Product5']) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing simulated sales data based on the provided parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"generateSalesData\", \"type\": \"function\", \"signature\": \"(epoch_milliseconds, random_seed=0, products=['Product1', 'Product2', 'Product3', 'Product4', 'Product5']) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing simulated sales data based on the provided parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/492", "solution": "{\n  \"name\": \"generate_sales_data\",\n  \"type\": \"function\",\n  \"signature\": \"(epoch_milliseconds, random_seed=0, products=['Product1', 'Product2', 'Product3', 'Product4', 'Product5']) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Generates a DataFrame containing simulated sales data based on the provided parameters.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"generateDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with specified data, index, columns, and data type.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from various input types, providing flexibility in data representation.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/492", "solution": "{\n  \"name\": \"create_sales_dataframe\",\n  \"type\": \"function\",\n  \"signature\": \"(epoch_milliseconds, random_seed=0, products=['Product1', 'Product2', 'Product3', 'Product4', 'Product5']) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame containing simulated sales data based on the provided parameters.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/492", "solution": "{\n  \"name\": \"create_sales_dataframe\",\n  \"type\": \"function\",\n  \"signature\": \"(epoch_milliseconds, random_seed=0, products=['Product1', 'Product2', 'Product3', 'Product4', 'Product5']) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame with simulated sales data for given products over a specified date range.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"create_sales_dataframe\", \"type\": \"function\", \"signature\": \"(epoch_milliseconds, random_seed=0, products=['Product1', 'Product2', 'Product3', 'Product4', 'Product5']) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame containing simulated sales data for specified products over a given time period.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"createDailyActivityReport\", \"type\": \"function\", \"signature\": \"(days_in_past: int, random_seed: int) -> Tuple[plt.Axes, pd.DataFrame]\", \"return_type\": \"Tuple[plt.Axes, pd.DataFrame]\", \"short_description\": \"Generates a report of daily activities over a specified number of days, including random data for demonstration purposes.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"generate_activity_dataframe\", \"type\": \"function\", \"signature\": \"(days_in_past: int, random_seed: int) -> pandas.DataFrame\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Generates a DataFrame containing simulated activity data for the specified number of past days, including random durations for different activities.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/502", "solution": "{\n  \"name\": \"generate_activity_data\",\n  \"type\": \"function\",\n  \"signature\": \"(days_in_past=7, random_seed=0) -> Tuple[Axes, DataFrame]\",\n  \"return_type\": \"Tuple[Axes, DataFrame]\",\n  \"short_description\": \"Generates a DataFrame of random activity data and plots it using seaborn for visualization.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/502", "solution": "{\n  \"name\": \"create_activity_dataframe\",\n  \"type\": \"function\",\n  \"signature\": \"(days_in_past=7, random_seed=0) -> (ax: 'Axes', df: 'DataFrame')\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a DataFrame containing random activity data and plots it using seaborn.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"generate_activity_data\", \"type\": \"function\", \"signature\": \"(days_in_past=7, random_seed=0) -> Tuple[Axes, DataFrame]\", \"return_type\": \"Tuple[Axes, DataFrame]\", \"short_description\": \"Generates a DataFrame and plots a line chart of activity durations over the past number of days specified.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data: Iterable, columns: List[str], index: List[Any] = None) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a pandas DataFrame from provided data, columns, and optional index.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"create_activity_dataframe\", \"type\": \"function\", \"signature\": \"(days_in_past=7, random_seed=0) -> Tuple[Axes, DataFrame]\", \"return_type\": \"Tuple[Axes, DataFrame]\", \"short_description\": \"Creates a DataFrame with random activity data and plots it using seaborn.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"createDataFrameFromActivities\", \"type\": \"function\", \"signature\": \"(days_in_past: int, random_seed: int) -> pandas.DataFrame\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Creates a DataFrame from simulated fitness activities data over a specified number of days, including random durations and activities.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"createDataFrameFromActivities\", \"type\": \"function\", \"signature\": \"(activities: List[str], durations: List[int], dates: List[datetime], random_seed: int = 0) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a DataFrame from a list of activities, their corresponding durations, and the dates on which they were performed. Utilizes a random seed for reproducibility.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"createDailyActivityReport\", \"type\": \"function\", \"signature\": \"(days_in_past: int, random_seed: int) -> Tuple[plt.Axes, pd.DataFrame]\", \"return_type\": \"Tuple[plt.Axes, pd.DataFrame]\", \"short_description\": \"Generates a daily activity report using a DataFrame and visualizes it using Seaborn.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/503", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from various input data sources, including numpy arrays, dictionaries, and lists of dictionaries.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/503", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a new DataFrame with the provided data, index, columns, and data type.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from various input types, including arrays, dictionaries, and other DataFrames.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/503", "solution": "{\n  \"name\": \"generateDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(days_in_past=7, stock_names=['AAPL', 'GOOGL', 'MSFT', 'AMZN', 'FB'], random_seed=0) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a DataFrame with random stock prices for specified days in the past.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generateDataFrame\", \"type\": \"function\", \"signature\": \"(days_in_past=7, stock_names=['AAPL', 'GOOGL', 'MSFT', 'AMZN', 'FB'], random_seed=0) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random stock prices over a specified number of days for a list of stock names. The DataFrame includes dates as the index and random prices ranging from 0 to 100.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/503", "solution": "{\n  \"name\": \"generate_stock_price_dataframe\",\n  \"type\": \"function\",\n  \"signature\": \"(days_in_past=7, stock_names=['AAPL', 'GOOGL', 'MSFT', 'AMZN', 'FB'], random_seed=0) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a DataFrame with random stock prices for specified days and stock names.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generateDataFrame\", \"type\": \"function\", \"signature\": \"(days_in_past=7, stock_names=['AAPL', 'GOOGL', 'MSFT', 'AMZN', 'FB'], random_seed=0) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing randomly generated stock prices over a specified number of past days.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame with the given data, index, columns, and data type. This function is used to construct a DataFrame similar to pandas.DataFrame, but tailored for a different use case.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/503", "solution": "{\n  \"name\": \"generateDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(days_in_past=7, stock_names=['AAPL', 'GOOGL', 'MSFT', 'AMZN', 'FB'], random_seed=0) -> pandas.DataFrame\",\n  \"return_type\": \"pandas.DataFrame\",\n  \"short_description\": \"Generates a DataFrame with random stock prices for the specified number of days and stock names, using a specified random seed for reproducibility.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame object with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/509", "solution": "{\"name\": \"generateCsvDiff\", \"type\": \"function\", \"signature\": \"(file_path1, file_path2, delimiter=',', quotechar='\\\"') -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing the differences between two CSV files.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/509", "solution": "{\n  \"name\": \"createDataFrameFromCsv\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path1, file_path2, delimiter=',', quotechar='\"')\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from the contents of two CSV files, comparing their differences line by line.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/509", "solution": "{\n  \"name\": \"generateDataFrameFromDiff\",\n  \"type\": \"function\",\n  \"signature\": \"(csv_content1: List[Tuple[str]], csv_content2: List[Tuple[str]], headers: List[str]) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a DataFrame from the differences between two CSV content lists, with specified headers.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/509", "solution": "{\n  \"name\": \"csvToDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path, delimiter=',', quotechar='\"')\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Converts a CSV file to a pandas DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/509", "solution": "{\"name\": \"createDataFrameFromCsv\", \"type\": \"function\", \"signature\": \"(file_path1: str, file_path2: str, delimiter: str = ',', quotechar: str = '\"') -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a DataFrame from the contents of two CSV files, comparing their contents line by line and highlighting the differences.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/509", "solution": "{\n  \"name\": \"generateDataFrameFromCSV\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path1: str, file_path2: str, delimiter: str = ',', quotechar: str = '\"') -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a DataFrame from the contents of two CSV files, comparing their contents line by line and marking differences.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/509", "solution": "{\n  \"name\": \"csvToDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path: str, delimiter: str = ',', quotechar: str = '\"') -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Converts a CSV file to a pandas DataFrame, providing a detailed comparison of two CSV files.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/509", "solution": "{\"name\": \"csvComparison\", \"type\": \"function\", \"signature\": \"(file_path1: str, file_path2: str, delimiter: str = ',', quotechar: str = '\"') -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Compares two CSV files line by line and returns a DataFrame with the comparison results, including line numbers, status, and content differences.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/509", "solution": "{\n  \"name\": \"generateDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data: list[list[str]], headers: list[str]) -> pandas.DataFrame\",\n  \"return_type\": \"pandas.DataFrame\",\n  \"short_description\": \"Creates a DataFrame from a list of lists and a list of headers.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/509", "solution": "{\n  \"name\": \"csv_to_dataframe\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path: str, delimiter: str = ',', quotechar: str = '\"') -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Converts a CSV file to a pandas DataFrame. This function handles reading the CSV file and converts its content into a DataFrame, which can be used for further data analysis.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, columns=None, dtype=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, with optional columns and data type enforcement.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/511", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data, columns=None, index=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from the provided data, with optional columns, index, dtype, and copy settings.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, with optional columns, dtype, and copy settings.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, columns=None, dtype=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, with optional columns and data type specification.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters for index, columns, data type, and copy behavior.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, columns, and other optional parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, columns=None, dtype=None, index=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, with optional columns, data type, and index.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, columns=None, dtype=None, copy=True) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, allowing specification of columns, data type, and copy behavior.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, columns=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, with optional column labels.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/511", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, columns=None, index=None, dtype=None, copy=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters for columns, index, dtype, and copy.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"plotDataFrame\", \"type\": \"function\", \"signature\": \"(data: pd.DataFrame, column: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Plots a DataFrame and returns summary statistics for a specified column.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/513", "solution": "{\n  \"name\": \"calculate_summary_statistics\",\n  \"type\": \"function\",\n  \"signature\": \"(column_data, data=None) -> dict\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Calculates summary statistics for a given column in a DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data. Supports various data formats including dictionaries, numpy arrays, and lists of dictionaries.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"calculateDailyMetrics\", \"type\": \"function\", \"signature\": \"(data, column) -> {'sum': float, 'mean': float, 'min': float, 'max': float}\", \"return_type\": \"dict\", \"short_description\": \"Calculates daily metrics for a given column in a DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/513", "solution": "{\n  \"name\": \"plot_line_chart\",\n  \"type\": \"function\",\n  \"signature\": \"(data: pd.DataFrame, column: str) -> Tuple[Dict[str, Union[int, float]], plt.Axes]\",\n  \"return_type\": \"Tuple[Dict[str, Union[int, float]], plt.Axes]\",\n  \"short_description\": \"Plots a line chart for the specified column in the given DataFrame and returns summary statistics and the matplotlib Axes object.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"generate_dataframe\", \"type\": \"function\", \"signature\": \"(data: list, columns: list) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data and columns.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data: list | dict, index: list | None = None, columns: list | None = None) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a pandas DataFrame from the provided data, with optional indexing and column labeling.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/513", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data: Iterable, columns: Iterable) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from the provided data and columns. This function ensures that the data is organized according to the specified columns.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data: Iterable, columns: List[str]) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data and columns. Ensures all numeric columns are non-negative.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/513", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, columns=None, index=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, columns, and index.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/526", "solution": "{\n  \"name\": \"calculate_statistics\",\n  \"type\": \"function\",\n  \"signature\": \"(data: list[dict], keys: list[str]) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Calculates basic statistics (mean and median) for specified keys in a list of dictionaries.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateDataFrameStatistics\", \"type\": \"function\", \"signature\": \"(data: List[Dict[str, Any]], columns: List[str]) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates basic statistical measures (mean and median) for numerical data across multiple JSON objects, returning the results in a DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateDataFrameStats\", \"type\": \"function\", \"signature\": \"(data: List[Dict[str, Any]], columns: List[str]) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates basic statistical measures for numerical data in a list of dictionaries and returns a DataFrame with these measures.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculate_statistics\", \"type\": \"function\", \"signature\": \"(data: list[dict], keys: list[str]) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates mean and median statistics for specified keys in a list of dictionaries.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/526", "solution": "{\n  \"name\": \"calculate_statistics\",\n  \"type\": \"function\",\n  \"signature\": \"(data: list[dict], keys: list[str]) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Calculates descriptive statistics (mean and median) for specified keys across a list of dictionaries.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateDataFrameStatistics\", \"type\": \"function\", \"signature\": \"(data: list[dict], columns: list[str]) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates basic statistics (mean and median) for numerical data across multiple JSON objects for specified columns.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"generateDataFrame\", \"type\": \"function\", \"signature\": \"(data: list[dict], columns: list[str]) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame from a list of dictionaries, specifying the columns explicitly.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateDataFrameStats\", \"type\": \"function\", \"signature\": \"(data: list[dict], keys: list[str]) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates statistical metrics for specified keys in a list of dictionaries and returns the results as a DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/526", "solution": "{\n  \"name\": \"parse_json_data\",\n  \"type\": \"function\",\n  \"signature\": \"(data: str, key_path: str) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Parses JSON data and extracts values at a specified key path, returning the results in a DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/526", "solution": "{\"name\": \"calculateDataFrameStats\", \"type\": \"function\", \"signature\": \"(data: List[Dict[str, Any]], columns: List[str]) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Calculates summary statistics for a list of dictionaries and returns a DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"analyzeData\", \"type\": \"function\", \"signature\": \"(file_path: str) -> Tuple[Counter, Optional[plt.Axes]]\", \"return_type\": \"Tuple[Counter, Optional[plt.Axes]]\", \"short_description\": \"Analyzes a CSV file for duplicate entries and optionally plots the results using matplotlib.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/528", "solution": "{\n  \"name\": \"calculateDuplicates\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path: str) -> Tuple[Counter, Optional[plt.Axes]]\",\n  \"return_type\": \"Tuple[Counter, Optional[plt.Axes]]\",\n  \"short_description\": \"Analyzes a CSV file to identify duplicate entries and returns a Counter object of duplicates along with a matplotlib Axes object for plotting, if any duplicates are found.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"analyzeCsv\", \"type\": \"function\", \"signature\": \"(filePath: string) => object\", \"return_type\": \"object\", \"short_description\": \"Analyzes a CSV file and returns a DataFrame of duplicate entries along with optional plotting.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/528", "solution": "{\n  \"name\": \"calculateDuplicates\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path: str) -> Tuple[Counter, Optional[plt.Axes]]\",\n  \"return_type\": \"Tuple[Counter, Optional[plt.Axes]]\",\n  \"short_description\": \"Analyzes a CSV file to find duplicate entries and returns a Counter object of these duplicates along with an optional Matplotlib Axes object for plotting.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"analyzeDuplicateEntries\", \"type\": \"function\", \"signature\": \"(file_path: str) -> Tuple[Counter, Optional[plt.Axes]]\", \"return_type\": \"Tuple[Counter, Optional[plt.Axes]]\", \"short_description\": \"Analyzes a CSV file to identify duplicate entries and returns the counts of duplicates along with a matplotlib plot of the duplicates if any are found.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/528", "solution": "{\n  \"name\": \"analyzeCsvForDuplicates\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path: str) -> Tuple[Counter, Optional[plt.Axes]]\",\n  \"return_type\": \"Tuple[Counter, Optional[plt.Axes]]\",\n  \"short_description\": \"Analyzes a CSV file for duplicate entries and returns the duplicates and a plot of the duplicates if any.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"analyzeDuplicateEntries\", \"type\": \"function\", \"signature\": \"(file_path: str) -> Tuple[Counter, Optional[plt.Axes]]\", \"return_type\": \"Tuple[Counter, Optional[plt.Axes]]\", \"short_description\": \"Analyzes a CSV file for duplicate entries and returns a Counter of duplicates along with a plot of the duplicates using matplotlib, if any.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"analyzeDuplicateEntries\", \"type\": \"function\", \"signature\": \"(file_path: str) -> Tuple[Counter, Optional[plt.Axes]]\", \"return_type\": \"Tuple[Counter, Optional[plt.Axes]]\", \"short_description\": \"Analyzes a CSV file to identify duplicate entries and returns the counts of duplicates along with a matplotlib plot of the duplicates if any are found.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/528", "solution": "{\n  \"name\": \"analyzeCsv\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path: str) -> Tuple[Counter, Optional[plt.Axes]]\",\n  \"return_type\": \"Tuple[Counter, Optional[plt.Axes]]\",\n  \"short_description\": \"Analyzes a CSV file to find and visualize duplicate entries.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/528", "solution": "{\"name\": \"calculateDuplicates\", \"type\": \"function\", \"signature\": \"(file_path: str) -> Tuple[Counter, Optional[plt.Axes]]\", \"return_type\": \"Tuple[Counter, Optional[plt.Axes]]\", \"short_description\": \"Analyzes a CSV file to identify duplicate rows and returns a Counter object with the counts of duplicates and an optional matplotlib Axes object for plotting the results.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a new DataFrame object with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/530", "solution": "{\n  \"name\": \"generate_age_distribution_plot\",\n  \"type\": \"function\",\n  \"signature\": \"(df: pd.DataFrame) -> Tuple[Counter, Optional[plt.Axes]]\",\n  \"return_type\": \"Tuple[Counter, Optional[plt.Axes]]\",\n  \"short_description\": \"Generates a histogram plot of the ages for names that appear more than once in the DataFrame, along with a counter of the ages for these duplicate names.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a new DataFrame with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"calculateAgeDistribution\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> Tuple[Counter, plt.Axes]\", \"return_type\": \"Tuple[Counter, plt.Axes]\", \"short_description\": \"Calculates the distribution of ages for duplicate names in a DataFrame and returns a counter of age counts and a matplotlib Axes object for plotting.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/530", "solution": "{\n  \"name\": \"plotAgeDistribution\",\n  \"type\": \"function\",\n  \"signature\": \"(df: pd.DataFrame, duplicate_names: List[str], duplicates_df: pd.DataFrame) -> Tuple[Counter, plt.Axes]\",\n  \"return_type\": \"Tuple[Counter, plt.Axes]\",\n  \"short_description\": \"Plots the distribution of ages for given duplicate names in a DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"generateHistogram\", \"type\": \"function\", \"signature\": \"(data: pd.DataFrame, column: str, bins: int) -> plt.Axes\", \"return_type\": \"plt.Axes\", \"short_description\": \"Generates a histogram plot for the specified column in the given DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/530", "solution": "{\n  \"name\": \"createDataFrameFromDict\",\n  \"type\": \"function\",\n  \"signature\": \"(data: dict, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a DataFrame from a dictionary, allowing for customization of index and columns.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"generateAgeDistribution\", \"type\": \"function\", \"signature\": \"(df: pandas.DataFrame, minAge: float, maxAge: float, bins: int) -> (Counter, plt.Axes)\", \"return_type\": \"Counter, plt.Axes\", \"short_description\": \"Generates a histogram of the ages for duplicate names in the DataFrame and returns a Counter of ages and the Axes object of the plot.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"generateDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a DataFrame from various input data sources.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"calculateAgesDistribution\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> (Counter, plt.Axes)\", \"return_type\": \"Counter, plt.Axes\", \"short_description\": \"Calculates the distribution of ages for duplicate names in the DataFrame and returns a Counter of age counts and a matplotlib Axes object for plotting.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame object from the provided data, index, columns, dtype, and copy parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a new DataFrame with the specified parameters.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from various input types, including dictionaries, numpy arrays, and more.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters for customization.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters for index, columns, dtype, and copy.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters for indexing, column labeling, data type enforcement, and copying.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, index, and columns. Supports various data formats including dicts, arrays, and lists.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/553", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from the provided data, index, columns, dtype, and copy parameters.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a new DataFrame with the provided data, index, columns, dtype, and copy options.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/553", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame object from various input data types, providing a flexible way to construct a DataFrame for data manipulation and analysis.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/560", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data: str) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a pandas DataFrame from a string of comma-separated date-value pairs, where each pair is in the format 'YYYY-MM-DD'.'value'.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data: Union[pd.DataFrame, dict, list, np.ndarray, Iterable], index: Optional[Union[pd.Index, List[Any]]] = None, columns: Optional[Union[pd.Index, List[str]]] = None, dtype: Optional[Union[np.dtype, Dict[str, np.dtype]]] = None, copy: bool = True) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a pandas DataFrame from various input types, with optional indexing and dtype specification.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/560", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data: Iterable, columns: Iterable) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from the provided data and column labels.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/560", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data: str, delimiter: str = ',', year_index: int = 0, value_index: int = 1) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a DataFrame from a comma-separated string of date-value pairs, where dates are in the format 'YYYY-MM'. This function is useful for processing time series data.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data: Iterable, columns: List[str], index: List[Any] = None) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, columns, and index.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data: Iterable, columns: List[str]) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data and column names.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data: any, index: any = None, columns: any = None, dtype: any = None, copy: bool = True) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters for index, columns, data type, and copy behavior.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/560", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from the provided data, with optional indexing, column labels, data type enforcement, and copying options.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/560", "solution": "{\"name\": \"createDataFrameFromData\", \"type\": \"function\", \"signature\": \"(data: str, delimiter: str = ',', year_format: str = '%Y-%m') -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a pandas DataFrame from a comma-separated string of date-value pairs, where each pair is in the format YYYY-MM.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/560", "solution": "{\n  \"name\": \"createDataFrameFromData\",\n  \"type\": \"function\",\n  \"signature\": \"(data: str, delimiter: str = ',', year_index: int = 0, value_index: int = 1) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a pandas DataFrame from a string of data entries, where each entry is a year and a value separated by a delimiter. The function assumes the data contains entries from a single year.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters to define index, columns, data type, and copy behavior.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/567", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from the provided data, with optional columns, dtype, and copy options.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, with optional indexing and data type enforcement.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters for indexing, column labeling, data type enforcement, and copying.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data. This function is useful for initializing a DataFrame with various data types and configurations.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters to specify index, columns, data type, and copy behavior.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters to specify index, columns, data type, and copy option.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters for indexing, column labeling, data type enforcement, and copying.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/567", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data. This function is useful for initializing a DataFrame with various types of input data, including arrays, dictionaries, and more.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/567", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data: Iterable, columns: List[str] = None) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a pandas DataFrame from the provided iterable data and optional column names.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"fetchAndParseAnchors\", \"type\": \"function\", \"signature\": \"(url: str) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches the HTML content from the provided URL and parses the anchor tags, returning a DataFrame with the text and href of each anchor along with the fetch time.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/590", "solution": "{\n  \"name\": \"fetch_web_data\",\n  \"type\": \"function\",\n  \"signature\": \"(url: str) -> pandas.DataFrame\",\n  \"return_type\": \"pandas.DataFrame\",\n  \"short_description\": \"Fetches data from a given URL and returns it as a DataFrame, including a timestamp of when the data was fetched.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"fetchAndParseHTML\", \"type\": \"function\", \"signature\": \"(url: str) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches the HTML content from the given URL and parses it into a DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"fetchAndParseHtml\", \"type\": \"function\", \"signature\": \"(url: str) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches the HTML content from the provided URL and parses it into a DataFrame containing anchor text and href attributes.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"fetchHtmlData\", \"type\": \"function\", \"signature\": \"(url: str) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches HTML data from a given URL and returns it as a DataFrame containing anchor text and href attributes.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/590", "solution": "{\n  \"name\": \"fetch_web_data\",\n  \"type\": \"function\",\n  \"signature\": \"(url: str) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Fetches data from a given URL and returns it as a DataFrame containing links and their text content.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/590", "solution": "{\n  \"name\": \"fetch_html_data\",\n  \"type\": \"function\",\n  \"signature\": \"(url: str) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Fetches HTML data from a given URL and extracts links and their text, returning a DataFrame with the results.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from various input types, including dictionaries, numpy arrays, and lists of dictionaries. Supports specifying index and column labels, and enforcing a data type.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"createDataFrameFromAnchors\", \"type\": \"function\", \"signature\": \"(anchors: List[Tuple[str, str]], fetchTime: str) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a DataFrame from a list of tuples containing anchor text and href attributes, and adds a fetch_time column.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"fetchHtmlData\", \"type\": \"function\", \"signature\": \"(url: str) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches HTML data from a given URL and returns it as a DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"generateTeamResults\", \"type\": \"function\", \"signature\": \"(teams: list, goals: int, penalties: int) -> tuple[pd.DataFrame, list[plt.Figure]]\", \"return_type\": \"tuple[pd.DataFrame, list[plt.Figure]]\", \"short_description\": \"Generates a DataFrame and plots of team results based on goals and penalties.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"generateMatchResults\", \"type\": \"function\", \"signature\": \"(teams: List[str], goals: int, penalties: int, penaltyCost: int) -> Tuple[pd.DataFrame, List[plt.Figure]]\", \"return_type\": \"Tuple[pd.DataFrame, List[plt.Figure]]\", \"short_description\": \"Generates match results for a set of teams, including goals and penalty costs, and returns the results as a DataFrame along with associated bar plots.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"generateMatchResults\", \"type\": \"function\", \"signature\": \"(teams: List[str], goals: int, penalties: int, penaltyCost: int) -> Tuple[pd.DataFrame, List[plt.Figure]]\", \"return_type\": \"Tuple[pd.DataFrame, List[plt.Figure]]\", \"short_description\": \"Generates a DataFrame and plots of match results including goals and penalty costs for each team.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"generateMatchResults\", \"type\": \"function\", \"signature\": \"(teams: List[str], goals: int, penalties: int) -> Tuple[pd.DataFrame, List[plt.Figure]]\", \"return_type\": \"Tuple[pd.DataFrame, List[plt.Figure]]\", \"short_description\": \"Generates a DataFrame and plots of match results including goals and penalty costs for each team.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"generateMatchResults\", \"type\": \"function\", \"signature\": \"(teams: List[str], goals: int, penalties: int, penaltyCost: int) -> Tuple[pd.DataFrame, List[plt.Figure]]\", \"return_type\": \"Tuple[pd.DataFrame, List[plt.Figure]]\", \"short_description\": \"Generates match results for a list of teams, including goals and penalty costs, and returns a DataFrame along with plots for visualization.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/618", "solution": "{\n  \"name\": \"generateMatchResults\",\n  \"type\": \"function\",\n  \"signature\": \"(teams: List[str], goals: int, penalties: int, penaltyCost: int) -> Tuple[pd.DataFrame, List[plt.Figure]]\",\n  \"return_type\": \"Tuple[pd.DataFrame, List[plt.Figure]]\",\n  \"short_description\": \"Generates a DataFrame of match results including goals and penalty costs for each team, and returns the DataFrame along with a list of bar plots visualizing the results.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"generateMatchResults\", \"type\": \"function\", \"signature\": \"(teams: list, goals: int, penalties: int, penaltyCost: int) -> tuple\", \"return_type\": \"tuple\", \"short_description\": \"Generates a DataFrame containing match results including goals, penalties, and penalty costs for each team. Also returns a list of Seaborn bar plots representing the goals and penalty costs.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/618", "solution": "{\n  \"name\": \"generateMatchResults\",\n  \"type\": \"function\",\n  \"signature\": \"(teams: List[str], goals: int, penalties: int, penaltyCost: int) -> Tuple[pd.DataFrame, List[plt.Figure]]\",\n  \"return_type\": \"Tuple[pd.DataFrame, List[plt.Figure]]\",\n  \"short_description\": \"Generates match results for a list of teams, including goals and penalty costs, and returns the results as a DataFrame along with associated bar plots.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"generateMatchResults\", \"type\": \"function\", \"signature\": \"(teams: list, goals: int, penalties: int, penaltyCost: int) -> tuple[pd.DataFrame, list[plt.Figure]]\", \"return_type\": \"tuple[pd.DataFrame, list[plt.Figure]]\", \"short_description\": \"Generates match results for a list of teams, including goals and penalty costs, and returns the results as a DataFrame along with the corresponding bar plots.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/618", "solution": "{\n  \"name\": \"generate_team_match_results\",\n  \"type\": \"function\",\n  \"signature\": \"(teams: List[str], goals_range: Tuple[int, int], penalties_range: Tuple[int, int], penalty_cost: int) -> Tuple[pd.DataFrame, List[plt.Figure]]\",\n  \"return_type\": \"Tuple[pd.DataFrame, List[plt.Figure]]\",\n  \"short_description\": \"Generates a DataFrame and bar plots representing match results for each team based on the number of goals and penalties, including the penalty cost.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"generateDataFrame\", \"type\": \"function\", \"signature\": \"(rows: int) -> Tuple[pd.DataFrame, plt.Axes]\", \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\", \"short_description\": \"Generates a DataFrame with random data and creates a bar plot showing the count of non-zero values in each column. Returns the DataFrame and the Axes object of the plot.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/636", "solution": "{\n  \"name\": \"generateRandomDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(rows: int, columns: list[str], min_value: int = 1, max_value: int = 10) -> tuple[pd.DataFrame, plt.Axes]\",\n  \"return_type\": \"tuple[pd.DataFrame, plt.Axes]\",\n  \"short_description\": \"Generates a DataFrame with random integers within a specified range and creates a bar plot showing the counts of non-zero values in each column.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"generateRandomDataFrame\", \"type\": \"function\", \"signature\": \"(rows: int) -> Tuple[pd.DataFrame, plt.Axes]\", \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\", \"short_description\": \"Generates a DataFrame with random data and returns it along with the Axes object of the plot.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"generateDataFrame\", \"type\": \"function\", \"signature\": \"(rows: int, columns: List[str]) -> Tuple[pd.DataFrame, plt.Axes]\", \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\", \"short_description\": \"Generates a DataFrame with random data and returns it along with the Axes object for plotting.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/636", "solution": "{\n  \"name\": \"create_dataframe_with_random_data\",\n  \"type\": \"function\",\n  \"signature\": \"(rows: int, columns: List[str]) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a DataFrame with random data and specified columns.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/636", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a new DataFrame with the provided data, index, columns, and data type.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(rows: int, columns: List[str]) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a DataFrame with random data for a specified number of rows and columns.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(rows: int, columns: List[str]) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a DataFrame with random data and specified columns. Returns the DataFrame and plots a bar graph showing the count of non-zero values in each column.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/636", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a new DataFrame with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/636", "solution": "{\n  \"name\": \"generate_dataframe\",\n  \"type\": \"function\",\n  \"signature\": \"(rows: int, columns: list[str]) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a DataFrame with random data of specified columns and rows.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/637", "solution": "{\"name\": \"generateSampleData\", \"type\": \"function\", \"signature\": \"(num_students: int) -> Tuple[pd.DataFrame, plt.Axes]\", \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\", \"short_description\": \"Generates sample student data and grades, and returns a DataFrame along with a matplotlib Axes object for plotting.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/637", "solution": "{\n  \"name\": \"createDataFrameFromGrades\",\n  \"type\": \"function\",\n  \"signature\": \"(grades: np.ndarray, students: List[str], courses: List[str]) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a DataFrame from given grades, student names, and course names.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/637", "solution": "{\"name\": \"generateDataFrame\", \"type\": \"function\", \"signature\": \"(num_students: int) -> Tuple[pd.DataFrame, plt.Axes]\", \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\", \"short_description\": \"Generates a DataFrame with random grades for a specified number of students and creates a plot showing average and passing grade counts.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/637", "solution": "{\"name\": \"generateDataFrame\", \"type\": \"function\", \"signature\": \"(num_students: int) -> Tuple[pd.DataFrame, plt.Axes]\", \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\", \"short_description\": \"Generates a DataFrame with sample students and grades, and creates a bar plot showing course-wise average grades and counts of students passing with a grade of 60 or higher.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/637", "solution": "{\"name\": \"generateDataFrame\", \"type\": \"function\", \"signature\": \"(num_students: int) -> Tuple[pd.DataFrame, plt.Axes]\", \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\", \"short_description\": \"Generates a DataFrame with randomly assigned grades for students and creates a bar plot showing course-wise average grades and the count of students passing each course.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/637", "solution": "{\"name\": \"generateStudentGrades\", \"type\": \"function\", \"signature\": \"(num_students: int) -> Tuple[pd.DataFrame, plt.Axes]\", \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\", \"short_description\": \"Generates a DataFrame of student grades and creates a bar plot showing average grades and counts of passing grades for each course.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/637", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame with the specified parameters.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/637", "solution": "{\"name\": \"generateDataFrame\", \"type\": \"function\", \"signature\": \"(num_students: int) -> Tuple[pd.DataFrame, plt.Axes]\", \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\", \"short_description\": \"Generates a DataFrame with randomly assigned grades for a given number of students and creates a bar plot showing average grades and counts of students who passed each course.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/637", "solution": "{\"name\": \"generateSampleGrades\", \"type\": \"function\", \"signature\": \"(numStudents: int) -> Tuple[pd.DataFrame, plt.Axes]\", \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\", \"short_description\": \"Generates a DataFrame of random grades for a sample of students and creates a bar plot showing course-wise average grades and counts of students passing with grades >= 60.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/637", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters for index, columns, dtype, and copy.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"createDataFrameFromJsonFiles\", \"type\": \"function\", \"signature\": \"(path: str) -> pandas.DataFrame\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Creates a DataFrame from JSON files in a specified directory. Each JSON object is treated as a row in the DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/678", "solution": "{\n  \"name\": \"createDataFrameFromDirectory\",\n  \"type\": \"function\",\n  \"signature\": \"(path: str) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a pandas DataFrame from JSON files in a directory, organizing data by files and including a source column indicating the file name.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"createDataFrameFromDirectory\", \"type\": \"function\", \"signature\": \"(path: str) -> pandas.DataFrame\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Creates a DataFrame from JSON files in a directory, combining them into a single DataFrame with a source column indicating the original file.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a new DataFrame object with the provided data, index, columns, data type, and copy setting.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/678", "solution": "{\n  \"name\": \"parseJsonFiles\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path: str) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Parses all JSON files in a directory and combines their contents into a single DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"parseJsonDirectory\", \"type\": \"function\", \"signature\": \"(path: str) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Parses JSON files from a directory into a single DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/678", "solution": "{\n  \"name\": \"create_dataframe_from_directory\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path: str) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a DataFrame from JSON files in a given directory, combining them into a single DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/678", "solution": "{\n  \"name\": \"parse_json_files\",\n  \"type\": \"function\",\n  \"signature\": \"(path: str) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Parses JSON files from a directory into a single DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/678", "solution": "{\n  \"name\": \"createDataFrameFromFiles\",\n  \"type\": \"function\",\n  \"signature\": \"(path: str) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a DataFrame from JSON files in a given directory. Each JSON object in the files is combined into a single DataFrame, with a source column indicating the original file.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"createDataFrameFromDirectory\", \"type\": \"function\", \"signature\": \"(path: str) -> pandas.DataFrame\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Creates a DataFrame from JSON files in a specified directory. Each JSON object is treated as a row in the DataFrame, and the filename is added as a column to track the source.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a new DataFrame with the provided data, index, columns, and data type.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a new DataFrame object with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a new DataFrame with the provided data, index, columns, and dtype. The data can be a dict, a list of dicts, or other data structures that pandas can interpret as DataFrame input.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/752", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a new DataFrame object with the provided data, index, columns, dtype, and copy settings.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a new DataFrame object with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/752", "solution": "{\n  \"name\": \"generateDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a DataFrame from various input types, including ndarray, dict, Series, etc. It supports various parameters for customization.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/752", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from various input types, including dictionaries, numpy arrays, and lists of dictionaries.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a new DataFrame object with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a new DataFrame with the provided data, index, columns, and dtype. Optionally, it can copy the data from inputs.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/752", "solution": "{\n  \"name\": \"generateDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data: dict, columns: list, index: list = None) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a DataFrame from a dictionary of data, specifying columns and optional index.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/760", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from various input data sources, supporting various data types and options for data alignment and copying.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/760", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from various input types, including dictionaries, numpy arrays, and lists of dictionaries.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/760", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from various input data types, including dictionaries, numpy arrays, and lists of dictionaries.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/760", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from various input data types, including arrays, dictionaries, and lists of dictionaries.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, columns=None, index=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from various input types, including dictionaries, lists of dictionaries, and numpy arrays. Supports optional column labels and index.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/760", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from various input types, including arrays, dictionaries, and other DataFrames.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/760", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame object with the provided data, index, columns, data type, and copy option.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None)\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from various input sources, including dictionaries, numpy arrays, and lists of dictionaries.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from various input types, providing flexibility in data representation and structure.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None)\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, index, and columns, with an optional dtype parameter to enforce a specific data type.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, with optional indexing, column labeling, data type enforcement, and copying options.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/865", "solution": "{\n  \"name\": \"normalize_data\",\n  \"type\": \"function\",\n  \"signature\": \"(data: list[tuple[str, int, float]]) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Normalizes the counts and weights in the provided data and returns a DataFrame with the normalized data.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/865", "solution": "{\n  \"name\": \"create_dataframe\",\n  \"type\": \"function\",\n  \"signature\": \"(data: list[tuple[str, int, float]]) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a DataFrame from a list of tuples containing items, counts, and weights, normalizing the counts and weights before storing them in the DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"normalize_data\", \"type\": \"function\", \"signature\": \"(data: list[tuple[Any, Any, Any]]) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Normalizes the counts and weights of items in the input data and returns a DataFrame with the results.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/865", "solution": "{\n  \"name\": \"create_dataframe\",\n  \"type\": \"function\",\n  \"signature\": \"(data, columns=None, dtype=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from the provided data, with optional column names and data type enforcement.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/865", "solution": "{\n  \"name\": \"normalize_data\",\n  \"type\": \"function\",\n  \"signature\": \"(data: List[Tuple[Any, int, float]]) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Normalizes the counts and weights in the provided data and returns a DataFrame with the normalized data.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"normalize_data\", \"type\": \"function\", \"signature\": \"(data: list[tuple[Any, Any, Any]]) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Normalizes the counts and weights of items in the input data and returns a DataFrame with the normalized data.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"normalize_data\", \"type\": \"function\", \"signature\": \"(data: list[tuple[Any, Any, Any]]) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Normalizes given data by z-scoring counts and Min-Max scaling weights, then returns a DataFrame with the normalized data.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data: list[tuple[Any, Any, Any]], columns: list[str]) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a DataFrame from a list of tuples with specified columns.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, columns=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, with optional column labels.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/870", "solution": "{\"name\": \"calculateMeanValues\", \"type\": \"function\", \"signature\": \"(data_list=[]) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Calculates the mean of numerical values from a list of tuples, ignoring the first column which is assumed to be non-numerical. Returns a DataFrame with the mean values indexed by their positions.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/870", "solution": "{\n  \"name\": \"calculate_mean_values\",\n  \"type\": \"function\",\n  \"signature\": \"(data_list=[('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4), ('e', 5, 6.5)]) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Calculates the mean of numerical values in each column of the provided data list, excluding the first column assuming it's non-numerical, and returns a DataFrame with the results.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/870", "solution": "{\n  \"name\": \"create_dataframe_from_list\",\n  \"type\": \"function\",\n  \"signature\": \"(data: list, columns: list, index: list) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a pandas DataFrame from a list of data, specifying columns and index.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/870", "solution": "{\n  \"name\": \"create_dataframe_from_mixed_data\",\n  \"type\": \"function\",\n  \"signature\": \"(data_list=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from a list of mixed data types, calculating the mean of numerical values in each column.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/870", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data: list, columns: list, index: list) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a DataFrame from provided data, columns, and index. Useful for constructing DataFrames in a structured manner without needing to manually input data.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/870", "solution": "{\n  \"name\": \"calculate_mean_values\",\n  \"type\": \"function\",\n  \"signature\": \"(data_list: List[Tuple[str, int, float]]) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Calculates the mean of numerical values in each column of a list of tuples, ignoring non-numeric values and the first column.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/870", "solution": "{\n  \"name\": \"create_dataframe_from_mixed_data\",\n  \"type\": \"function\",\n  \"signature\": \"(data_list=None, fill_value=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from a list of mixed data types, filling missing values with a specified fill value.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/870", "solution": "{\n  \"name\": \"create_dataframe_from_iterable\",\n  \"type\": \"function\",\n  \"signature\": \"(data: Iterable, columns: List[str] = None, index: List[str] = None) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a pandas DataFrame from an iterable, providing options to specify columns and index.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/870", "solution": "{\n  \"name\": \"calculate_mean_values\",\n  \"type\": \"function\",\n  \"signature\": \"(data_list=[('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4), ('e', 5, 6.5)]) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Calculates the mean of numerical values in each column of a provided list of tuples, ignoring non-numeric values and the first column which is assumed to be non-numerical.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/870", "solution": "{\n  \"name\": \"calculate_mean_values\",\n  \"type\": \"function\",\n  \"signature\": \"(data_list=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Calculates the mean of numerical values in each column of the provided data list, ignoring non-numeric values and the first column which is assumed to be non-numerical.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"create_dataframe\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a pandas DataFrame with the provided data, index, columns, dtype, and copy settings.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"create_dataframe\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a pandas DataFrame with the provided data, index, columns, dtype, and copy settings.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a DataFrame from various input types, including dictionaries, arrays, and more.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"create_dataframe\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a DataFrame with the provided data, index, columns, dtype, and copy settings. Useful for initializing DataFrames for analysis.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"create_dataframe\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a pandas DataFrame with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a DataFrame with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"create_dataframe\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a pandas DataFrame with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"create_dataframe\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a pandas DataFrame with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a new DataFrame object with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a DataFrame with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a pandas DataFrame. This function provides a flexible way to construct a DataFrame from various data sources, including dictionaries, numpy arrays, and more.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/917", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from various input types, including dictionaries, numpy arrays, and more.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"generateARIMAForecast\", \"type\": \"function\", \"signature\": \"(data: pd.DataFrame, steps: int) -> Tuple[List[float], plt.Axes]\", \"return_type\": \"Tuple[List[float], plt.Axes]\", \"short_description\": \"Generates an ARIMA forecast for the next 'steps' days and returns the forecasted values along with the plot axes.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'pd.DataFrame'\", \"return_type\": \"'pd.DataFrame'\", \"short_description\": \"Creates a DataFrame from various input data sources, supporting various data types and options for data handling.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/917", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame with the given data, index, columns, and data type. This function is very different from the hierarchical API call provided in the example.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters to specify index, columns, data type, and copy behavior.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'pd.DataFrame'\", \"return_type\": \"'pd.DataFrame'\", \"short_description\": \"Creates a DataFrame with the provided data, index, columns, dtype, and copy settings.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a DataFrame from various input data sources, supporting various data types and options for customization.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a DataFrame from various input data types, allowing for customization of index, columns, data type, and copying of data.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a DataFrame from various input types, providing flexibility for data representation.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/942", "solution": "{\n  \"name\": \"generateSalesReport\",\n  \"type\": \"function\",\n  \"signature\": \"(start_date='2016-01-01', periods=13, freq='WOM-2FRI', categories=['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']) -> (DataFrame, Axes)\",\n  \"return_type\": \"DataFrame, Axes\",\n  \"short_description\": \"Generates a DataFrame of sales reports and plots a category-wise sales trend graph.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateSalesReport\", \"type\": \"function\", \"signature\": \"(start_date: str = '2016-01-01', periods: int = 13, freq: str = 'WOM-2FRI', categories: list[str] = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']) -> tuple[pd.DataFrame, plt.Axes]\", \"return_type\": \"tuple[pd.DataFrame, plt.Axes]\", \"short_description\": \"Generates a sales report with category-wise sales trends visualization.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateSalesReport\", \"type\": \"function\", \"signature\": \"(start_date: str, periods: int, freq: str, categories: list) -> tuple\", \"return_type\": \"tuple\", \"short_description\": \"Generates a DataFrame containing sales data and plots a category-wise sales trend chart.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/942", "solution": "{\n  \"name\": \"createSalesReport\",\n  \"type\": \"function\",\n  \"signature\": \"(start_date='2016-01-01', periods=13, freq='WOM-2FRI', categories=['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']) -> (DataFrame, Axes)\",\n  \"return_type\": \"DataFrame, Axes\",\n  \"short_description\": \"Generates a sales report with date-wise and category-wise sales trends, and returns the DataFrame and Axes for further manipulation or visualization.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/942", "solution": "{\n  \"name\": \"generateSalesReport\",\n  \"type\": \"function\",\n  \"signature\": \"(start_date: str, periods: int, freq: str, categories: list[str]) -> tuple[pd.DataFrame, plt.Axes]\",\n  \"return_type\": \"tuple[pd.DataFrame, plt.Axes]\",\n  \"short_description\": \"Generates a DataFrame containing sales data and plots a category-wise sales trend graph.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateSalesReport\", \"type\": \"function\", \"signature\": \"(start_date: str = '2016-01-01', periods: int = 13, freq: str = 'WOM-2FRI', categories: list = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']) -> tuple\", \"return_type\": \"tuple\", \"short_description\": \"Generates a sales report dataframe and plots category-wise sales trends.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateSalesReport\", \"type\": \"function\", \"signature\": \"(start_date: str, periods: int, freq: str, categories: List[str]) -> Tuple[pd.DataFrame, plt.Axes]\", \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\", \"short_description\": \"Generates a DataFrame and plots a category-wise sales report.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/942", "solution": "{\n  \"name\": \"generateSalesReport\",\n  \"type\": \"function\",\n  \"signature\": \"(start_date='2016-01-01', periods=13, freq='WOM-2FRI', categories=['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']) -> (DataFrame, plt.Axes)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a DataFrame containing sales data and plots a category-wise sales trend chart.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateSalesReport\", \"type\": \"function\", \"signature\": \"(start_date: str, periods: int, freq: str, categories: list[str]) -> Tuple[pd.DataFrame, plt.Axes]\", \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\", \"short_description\": \"Generates a DataFrame containing sales data and plots a category-wise sales trend chart.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/942", "solution": "{\n  \"name\": \"generateSalesReport\",\n  \"type\": \"function\",\n  \"signature\": \"(start_date: str, periods: int, freq: str, categories: List[str]) -> Tuple[pd.DataFrame, plt.Axes]\",\n  \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\",\n  \"short_description\": \"Generates a DataFrame and plot showing category-wise sales trends over a specified period.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"generateSalesForecast\", \"type\": \"function\", \"signature\": \"(startDate='2016-01-01', periods=13, freq='WOM-2FRI', salesData=None) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame containing future sales forecast based on historical sales data and a linear regression model.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from various input types, handling alignment and dtype enforcement.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, index, columns, and dtype.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame object with the provided data, index, and columns.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"generateTimeSeriesData\", \"type\": \"function\", \"signature\": \"(startDate='2016-01-01', periods=13, freq='WOM-2FRI') -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame containing a time series of sales data based on the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/945", "solution": "{\n  \"name\": \"generate_sales_forecast\",\n  \"type\": \"function\",\n  \"signature\": \"(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None) -> pd.Series\",\n  \"return_type\": \"pd.Series\",\n  \"short_description\": \"Generates a sales forecast based on historical sales data using a simple linear regression model.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a new DataFrame object with the specified parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/945", "solution": "{\n  \"name\": \"createDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters to specify index, columns, dtype, and copy behavior.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"generateSalesForecast\", \"type\": \"function\", \"signature\": \"(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None) -> pd.Series\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a sales forecast based on historical sales data using a simple linear regression model.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/945", "solution": "{\n  \"name\": \"createDataFrameFromData\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, index=None, columns=None, dtype=None, copy=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from the provided data, index, columns, dtype, and copy parameters.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generate_task_assignment\", \"type\": \"function\", \"signature\": \"(task_list, n_tasks, employees=['John Doe', 'Jane Smith', 'James Brown', 'Mary Johnson', 'Robert Davis'], seed=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing task assignments to employees with due dates.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/952", "solution": "{\n  \"name\": \"generateTaskAssignmentReport\",\n  \"type\": \"function\",\n  \"signature\": \"(task_list, n_tasks, employees=None, seed=None) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Generates a DataFrame containing task assignments based on the provided parameters.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generateTaskAssignment\", \"type\": \"function\", \"signature\": \"(task_list, n_tasks, employees=['John Doe', 'Jane Smith', 'James Brown', 'Mary Johnson', 'Robert Davis'], seed=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing task assignments based on the provided parameters.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/952", "solution": "{\n  \"name\": \"generate_task_assignment\",\n  \"type\": \"function\",\n  \"signature\": \"(task_list, n_tasks, employees=['John Doe', 'Jane Smith', 'James Brown', 'Mary Johnson', 'Robert Davis'], seed=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Generates a DataFrame containing task assignments to employees, including a due date.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generate_task_assignment\", \"type\": \"function\", \"signature\": \"(task_list, n_tasks, employees=['John Doe', 'Jane Smith', 'James Brown', 'Mary Johnson', 'Robert Davis'], seed=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing task assignments based on the provided list of tasks, number of tasks, and optional parameters for employees and seed.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/952", "solution": "{\n  \"name\": \"generate_task_assignment\",\n  \"type\": \"function\",\n  \"signature\": \"(task_list, n_tasks, employees=['John Doe', 'Jane Smith', 'James Brown', 'Mary Johnson', 'Robert Davis'], seed=None) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Generates a DataFrame containing task assignments to employees, including a due date.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generateTaskAssignment\", \"type\": \"function\", \"signature\": \"(task_list, n_tasks, employees=['John Doe', 'Jane Smith', 'James Brown', 'Mary Johnson', 'Robert Davis'], seed=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing task assignments to employees with optional seed for reproducibility.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/952", "solution": "{\n  \"name\": \"generate_task_assignment\",\n  \"type\": \"function\",\n  \"signature\": \"(task_list, n_tasks, employees=['John Doe', 'Jane Smith', 'James Brown', 'Mary Johnson', 'Robert Davis'], seed=None) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Generates a DataFrame with task assignments for a given number of tasks, employees, and an optional seed for randomization.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/952", "solution": "{\n  \"name\": \"generate_task_assignment\",\n  \"type\": \"function\",\n  \"signature\": \"(task_list, n_tasks, employees=['John Doe', 'Jane Smith', 'James Brown', 'Mary Johnson', 'Robert Davis'], seed=None) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a DataFrame containing task assignments to employees, including task names, assigned employees, and due dates.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/952", "solution": "{\n  \"name\": \"generate_task_assignment\",\n  \"type\": \"function\",\n  \"signature\": \"(task_list, n_tasks, employees=['John Doe', 'Jane Smith', 'James Brown', 'Mary Johnson', 'Robert Davis'], seed=None)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Generates a DataFrame containing task assignments based on the provided list of tasks, number of tasks, and optional parameters for employee names and seed for random assignment.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convertFiles\", \"type\": \"function\", \"signature\": \"(source_directory: str, target_directory: str) -> int\", \"return_type\": \"int\", \"short_description\": \"Converts files in a directory to CSV format and saves them to a target directory.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convertFiles\", \"type\": \"function\", \"signature\": \"(source_directory: str, target_directory: str) -> int\", \"return_type\": \"int\", \"short_description\": \"Converts files in a directory to CSV format.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"convertFiles\",\n  \"type\": \"function\",\n  \"signature\": \"(sourceDirectory: str, targetDirectory: str) -> int\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Converts files in a directory from various formats to CSV format.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convertFiles\", \"type\": \"function\", \"signature\": \"(source_directory: str, target_directory: str) -> int\", \"return_type\": \"int\", \"short_description\": \"Converts files in a directory to CSV format and saves them to a target directory.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"convertFiles\",\n  \"type\": \"function\",\n  \"signature\": \"(source_directory: str, target_directory: str) -> int\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Converts files in a directory to CSV format and saves them in a target directory.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convertFilesToDataFrames\", \"type\": \"function\", \"signature\": \"(sourceDirectory: str, targetDirectory: str) -> int\", \"return_type\": \"int\", \"short_description\": \"Converts files in a directory to DataFrames and saves them as CSV files in a target directory.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"convertFilesToDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(source_directory: str, target_directory: str) -> int\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Converts files in a directory to DataFrames and saves them as CSV files.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convertFilesToDataFrame\", \"type\": \"function\", \"signature\": \"(source_directory: str, target_directory: str) -> int\", \"return_type\": \"int\", \"short_description\": \"Converts files in a directory to pandas DataFrames and saves them as CSV files in another directory.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"convertFiles\",\n  \"type\": \"function\",\n  \"signature\": \"(sourceDirectory: str, targetDirectory: str) -> int\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Converts files in a directory to CSV format and saves them in a target directory.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"convertFiles\",\n  \"type\": \"function\",\n  \"signature\": \"(sourceDirectory: string, targetDirectory: string) => number\",\n  \"return_type\": \"number\",\n  \"short_description\": \"Converts files in a directory from various formats to CSV format and saves them in a target directory.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/969", "solution": "{\"name\": \"normalizeDataFrame\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> pd.DataFrame\", \"return_type\": \"Normalized DataFrame with cumulative sum.\", \"short_description\": \"Normalizes the cumulative sum of numeric data in the input DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/969", "solution": "{\n  \"name\": \"calculate_normalized_cumsum\",\n  \"type\": \"function\",\n  \"signature\": \"(df: pd.DataFrame) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Calculates the cumulative sum of a DataFrame and normalizes the result using MinMaxScaler.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/969", "solution": "{\n  \"name\": \"normalizeDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(df: pd.DataFrame) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Normalizes the cumulative sum of numeric columns in a DataFrame using Min-Max scaling.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/969", "solution": "{\n  \"name\": \"normalize_cumsum_dataframe\",\n  \"type\": \"function\",\n  \"signature\": \"(df: pd.DataFrame) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Normalizes the cumulative sum of each column in a DataFrame using MinMaxScaler.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/969", "solution": "{\n  \"name\": \"normalize_cumsum\",\n  \"type\": \"function\",\n  \"signature\": \"(df: pandas.DataFrame) -> pandas.DataFrame\",\n  \"return_type\": \"pandas.DataFrame\",\n  \"short_description\": \"Normalizes the cumulative sum of a DataFrame using Min-Max scaling.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/969", "solution": "{\"name\": \"normalizeDataFrame\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Normalizes the cumulative sum of numeric columns in a DataFrame using Min-Max scaling.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/969", "solution": "{\n  \"name\": \"normalizeDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(df: pd.DataFrame) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Normalizes the cumulative sum of numeric columns in a DataFrame using Min-Max scaling.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/969", "solution": "{\n  \"name\": \"calculate_normalized_cumsum\",\n  \"type\": \"function\",\n  \"signature\": \"(df: pd.DataFrame) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Calculates the cumulative sum of a DataFrame and normalizes the result using Min-Max scaling.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/969", "solution": "{\"name\": \"normalizeDataFrame\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> pd.DataFrame\", \"return_type\": \"Normalized DataFrame with cumulative sum applied\", \"short_description\": \"Normalizes the cumulative sum of numeric data in a DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/969", "solution": "{\"name\": \"normalizeDataFrame\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> pd.DataFrame\", \"return_type\": \"Normalized DataFrame with cumulative sum\", \"short_description\": \"Normalizes the cumulative sum of numeric columns in a DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"parseJsonData\", \"type\": \"function\", \"signature\": \"(json_data: str, output_dir: str = '.', file_name: str = 'country_population_report.csv') -> Tuple[str, pd.DataFrame]\", \"return_type\": \"Tuple[str, pd.DataFrame]\", \"short_description\": \"Parses JSON data to extract country population data and saves it as a CSV file.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/985", "solution": "{\n  \"name\": \"load_and_validate_json\",\n  \"type\": \"function\",\n  \"signature\": \"(json_data: str, output_dir: str = '.', file_name: str = 'country_population_report.csv') -> Tuple[str, pd.DataFrame]\",\n  \"return_type\": \"Tuple[str, pd.DataFrame]\",\n  \"short_description\": \"Loads JSON data, validates the country population data, and writes the report to a CSV file.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"generateCountryPopulationReport\", \"type\": \"function\", \"signature\": \"(jsonData: str, outputDir: str = '.', fileName: str = 'country_population_report.csv') -> Tuple[str, pd.DataFrame]\", \"return_type\": \"Tuple[str, pd.DataFrame]\", \"short_description\": \"Generates a CSV report of country population data from JSON and saves it to a specified directory. The function also returns the file path of the generated report and the DataFrame used to create it.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"parseJsonData\", \"type\": \"function\", \"signature\": \"(json_data: str, output_dir: str = '.', file_name: str = 'country_population_report.csv') -> Tuple[str, pd.DataFrame]\", \"return_type\": \"Tuple[str, pd.DataFrame]\", \"short_description\": \"Parses JSON data containing country population data, validates it, and writes it to a CSV file. Returns the file path and the DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/985", "solution": "{\n  \"name\": \"loadAndCleanJsonData\",\n  \"type\": \"function\",\n  \"signature\": \"(json_data: str, output_dir: str = '.', file_name: str = 'country_population_report.csv') -> Tuple[str, pd.DataFrame]\",\n  \"return_type\": \"Tuple[str, pd.DataFrame]\",\n  \"short_description\": \"Loads and cleans JSON data to create a DataFrame for country population data, and saves it as a CSV file.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/985", "solution": "{\n  \"name\": \"load_and_validate_json\",\n  \"type\": \"function\",\n  \"signature\": \"(json_data: str, output_dir: str = '.', file_name: str = 'country_population_report.csv') -> Tuple[str, pd.DataFrame]\",\n  \"return_type\": \"Tuple[str, pd.DataFrame]\",\n  \"short_description\": \"Loads and validates JSON data, processes the population data, and saves it as a CSV file.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/985", "solution": "{\n  \"name\": \"generateCountryPopulationReport\",\n  \"type\": \"function\",\n  \"signature\": \"(json_data: str, output_dir: str = '.', file_name: str = 'country_population_report.csv') -> Tuple[str, pd.DataFrame]\",\n  \"return_type\": \"Tuple[str, pd.DataFrame]\",\n  \"short_description\": \"Generates a CSV report of country populations from JSON data and saves it to a specified directory.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/985", "solution": "{\n  \"name\": \"parse_json_data\",\n  \"type\": \"function\",\n  \"signature\": \"(json_data: str, output_dir: str = '.', file_name: str = 'country_population_report.csv') -> Tuple[str, pd.DataFrame]\",\n  \"return_type\": \"Tuple[str, pd.DataFrame]\",\n  \"short_description\": \"Parses JSON data containing country population information, validates it, and writes the cleaned data to a CSV file.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"parseAndValidateJson\", \"type\": \"function\", \"signature\": \"(json_data: str, output_dir: str = '.', file_name: str = 'country_population_report.csv') -> Tuple[str, pd.DataFrame]\", \"return_type\": \"Tuple[str, pd.DataFrame]\", \"short_description\": \"Parses and validates JSON data, then creates a DataFrame and writes it to a CSV file.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/985", "solution": "{\"name\": \"fetchAndProcessCountryData\", \"type\": \"function\", \"signature\": \"(json_data: str, output_dir: str = '.', file_name: str = 'country_population_report.csv') -> Tuple[str, pd.DataFrame]\", \"return_type\": \"Tuple[str, pd.DataFrame]\", \"short_description\": \"Fetches and processes country population data from JSON, then writes it to a CSV file. Returns the file path and the processed DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1003", "solution": "{\"name\": \"parseXmlToDataFrame\", \"type\": \"function\", \"signature\": \"(xml_data: bytes) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Parses XML data and returns a DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1003", "solution": "{\"name\": \"parse_xml\", \"type\": \"function\", \"signature\": \"(xml_data: bytes) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Parses XML data and returns a DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1003", "solution": "{\"name\": \"parse_xml_to_dataframe\", \"type\": \"function\", \"signature\": \"(xml_data: bytes) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Parses XML data and returns a DataFrame with the parsed information.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1003", "solution": "{\"name\": \"parse_xml_to_dataframe\", \"type\": \"function\", \"signature\": \"(xml_data: bytes) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Parses XML data to a pandas DataFrame. This function is designed to handle XML data fetched from a URL and convert it into a structured DataFrame format.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1003", "solution": "{\"name\": \"parse_xml_to_dataframe\", \"type\": \"function\", \"signature\": \"(xml_data: bytes) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Parses XML data and converts it into a pandas DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1003", "solution": "{\n  \"name\": \"parse_xml_to_dataframe\",\n  \"type\": \"function\",\n  \"signature\": \"(xml_data: bytes) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Parses XML data and returns a DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1003", "solution": "{\"name\": \"parse_xml_to_dataframe\", \"type\": \"function\", \"signature\": \"(xml_data: bytes) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Parses XML data into a pandas DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1003", "solution": "{\"name\": \"parse_xml_to_dataframe\", \"type\": \"function\", \"signature\": \"(xml_data: bytes) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Parses XML data and converts it into a pandas DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1003", "solution": "{\"name\": \"parse_xml_to_dataframe\", \"type\": \"function\", \"signature\": \"(xml_data: bytes) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Parses XML data and returns a DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1003", "solution": "{\"name\": \"parse_xml_to_dataframe\", \"type\": \"function\", \"signature\": \"(xml_data: bytes) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Parses XML data into a pandas DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1008", "solution": "{\n  \"name\": \"fetch_table_data\",\n  \"type\": \"function\",\n  \"signature\": \"(url: str, table_id: str) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Fetches a table from a given web page using its ID and returns it as a pandas DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"scrapeAndParseTable\", \"type\": \"function\", \"signature\": \"(url: str, tableId: str) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Extracts a table from a webpage identified by its ID and returns it as a pandas DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"extractTableData\", \"type\": \"function\", \"signature\": \"(url: str, tableId: str) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Extracts data from an HTML table identified by its ID and returns it as a pandas DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"parseHtmlTable\", \"type\": \"function\", \"signature\": \"(url: str, table_id: str) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Extracts the first table found in the HTML content of a given URL and returns it as a pandas DataFrame. The table is identified by its ID.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"createDataFrameFromHTML\", \"type\": \"function\", \"signature\": \"(html_content, table_id) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from an HTML table identified by its ID.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"parseHtmlTable\", \"type\": \"function\", \"signature\": \"(url: str, table_id: str) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Extracts the first table from a given HTML page based on the specified table ID and returns it as a pandas DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"fetchHtmlTable\", \"type\": \"function\", \"signature\": \"(url, table_id) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Fetches an HTML table from a given URL and returns it as a DataFrame. The table is identified by its ID.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1008", "solution": "{\n  \"name\": \"extractTableData\",\n  \"type\": \"function\",\n  \"signature\": \"(url: str, table_id: str) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Extracts the first table found with the specified ID from a given webpage and returns it as a pandas DataFrame.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"parseHtmlTable\", \"type\": \"function\", \"signature\": \"(url: str, table_id: str) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Extracts and parses an HTML table from a given URL into a pandas DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"extractTableData\", \"type\": \"function\", \"signature\": \"(url: str, table_id: str) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Extracts data from a specified HTML table on a given URL and returns it as a pandas DataFrame.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"createDataFrameFromHTML\", \"type\": \"function\", \"signature\": \"(content: str, columns: List[str] = None) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a DataFrame from HTML content, using specified columns if provided.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"loadAndStoreData\", \"type\": \"function\", \"signature\": \"(webpage_url: str, database_name: str = \\\"my_database.db\\\") -> int\", \"return_type\": \"int\", \"short_description\": \"Loads data from a webpage, converts it into a DataFrame, and stores it in a SQLite database.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1015", "solution": "{\n  \"name\": \"fetchAndStoreData\",\n  \"type\": \"function\",\n  \"signature\": \"(webpage_url: str, database_name: str = 'my_database.db') -> int\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Fetches data from a webpage and stores it in a SQLite database.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"createDataFrameFromHtml\", \"type\": \"function\", \"signature\": \"(content: str, columns: List[str]) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a DataFrame from HTML content, using specified column names.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from the provided data, with optional parameters for index, columns, dtype, and copy.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"createDataFrameFromWebContent\", \"type\": \"function\", \"signature\": \"(content: str, columns: List[str] = None) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Creates a pandas DataFrame from HTML content extracted from a webpage.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1015", "solution": "{\n  \"name\": \"createDataFrameFromWebData\",\n  \"type\": \"function\",\n  \"signature\": \"(content: str, columns: List[str] = None) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a DataFrame from HTML table content extracted from a webpage.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1015", "solution": "{\n  \"name\": \"createDataFrameFromHtml\",\n  \"type\": \"function\",\n  \"signature\": \"(webpage_content: str, table_xpath: str) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a pandas DataFrame from HTML content, extracting data based on an XPath expression.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"createDataFrame\", \"type\": \"function\", \"signature\": \"(data, index=None, columns=None, dtype=None, copy=None) -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from various data inputs, including arrays, dictionaries, and other DataFrames.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1015", "solution": "{\n  \"name\": \"createDataFrameFromHTML\",\n  \"type\": \"function\",\n  \"signature\": \"(content: bytes, columns: List[str] | None = None) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a pandas DataFrame from HTML content, using specified columns if provided.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1022", "solution": "{\n  \"name\": \"extract_recent_data\",\n  \"type\": \"function\",\n  \"signature\": \"(csv_file_path: str, column_name: str, date_format: str = '%Y-%m-%d') -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Extracts and filters data from a CSV file based on a specified date column, returning a DataFrame with recent entries.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1022", "solution": "{\n  \"name\": \"filterDataFrameByDate\",\n  \"type\": \"function\",\n  \"signature\": \"(df: pandas.DataFrame, dateColumn: str, dateFormat: str = '%Y-%m-%d') -> pandas.DataFrame\",\n  \"return_type\": \"pandas.DataFrame\",\n  \"short_description\": \"Filters a DataFrame to include only rows where a specified date column's values are greater than or equal to the current date, formatted according to the provided date format. The DataFrame is also sorted by the specified date column.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1022", "solution": "{\n  \"name\": \"filter_dataframe_by_date\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe: pd.DataFrame, date_column: str, current_date: str) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Filters a DataFrame to include only rows where the specified date column has a date greater than or equal to the given current date, and sorts the DataFrame by the specified date column.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1022", "solution": "{\n  \"name\": \"create_dataframe_from_csv\",\n  \"type\": \"function\",\n  \"signature\": \"(csv_file_path: str, column_name: str, date_format: str = '%Y-%m-%d') -> pandas.DataFrame\",\n  \"return_type\": \"pandas.DataFrame\",\n  \"short_description\": \"Creates a DataFrame from a CSV file, processes the specified column to ensure it contains dates, and filters rows based on a date comparison with the current date.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"filterDataFrameByDate\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame, columnName: str, dateFormat: str = '%Y-%m-%d') -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Filters a DataFrame to include only rows where the specified date column has a date greater than or equal to the current date, and sorts the DataFrame by this date column.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"createDataFrameFromCSV\", \"type\": \"function\", \"signature\": \"(csvFilePath: str, columnName: str, dateFormat: str = '%Y-%m-%d') -> pandas.DataFrame\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Creates a DataFrame from a CSV file, processes the specified column to datetime, and filters rows based on a date comparison.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1022", "solution": "{\n  \"name\": \"filter_dataframe_by_date\",\n  \"type\": \"function\",\n  \"signature\": \"(df: pd.DataFrame, date_column: str, target_date: str, date_format: str = '%Y-%m-%d') -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Filters a DataFrame to include only rows where a specified date column has a date greater than or equal to a given target date.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1022", "solution": "{\n  \"name\": \"createDataFrameFromCSV\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path: str, column_name: str, date_format: str = '%Y-%m-%d') -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame from a CSV file, processes the specified date column to filter and sort based on the current date.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1022", "solution": "{\"name\": \"createDataFrameFromCSV\", \"type\": \"function\", \"signature\": \"(csvFilePath: str, columnName: str, dateFormat: str = '%Y-%m-%d') -> DataFrame\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame from a CSV file, processing the specified column to ensure it contains dates, and filtering rows based on a date comparison.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1022", "solution": "{\n  \"name\": \"load_csv_filter_and_sort\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path: str, column_name: str, date_format: str = '%Y-%m-%d') -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Loads a CSV file into a DataFrame, filters rows based on a date column, and sorts the DataFrame by the filtered date column.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1053", "solution": "{\n  \"name\": \"generateWordFrequencyPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path: str, save_path: str = None) -> None | plt.Axes\",\n  \"return_type\": \"None | plt.Axes\",\n  \"short_description\": \"Generates a word frequency plot from a CSV file and optionally saves it to a specified path.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1053", "solution": "{\n  \"name\": \"analyzeTextData\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path: str, save_path: str = None) -> Optional[plt.Figure]\",\n  \"return_type\": \"Optional[plt.Figure]\",\n  \"short_description\": \"Analyzes text data from a CSV file, counts word frequencies, and optionally saves a plot of the top 10 words.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"generateWordFrequencyPlot\", \"type\": \"function\", \"signature\": \"(data: pd.DataFrame, stopWords: List[str], savePath: Optional[str] = None) -> Optional[plt.Figure]\", \"return_type\": \"Optional[plt.Figure]\", \"short_description\": \"Generates a bar plot of the top 10 most frequent words from a given DataFrame column, optionally saving the plot to a specified path.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1053", "solution": "{\n  \"name\": \"generateWordFrequencyPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path: str, save_path: str = None) -> None | plt.Axes\",\n  \"return_type\": \"None | plt.Axes\",\n  \"short_description\": \"Reads a CSV file, processes the text data to generate word frequencies, and optionally saves a plot of the top 10 words as a bar chart.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1053", "solution": "{\n  \"name\": \"generateWordFrequencyChart\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path: str, save_path: str = None) -> None\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Reads a CSV file, processes the text data to generate word frequency, and optionally saves a bar chart of the top 10 words as an image file.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1053", "solution": "{\n  \"name\": \"generateWordFrequencyPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path, save_path=None) -> 'None | plt.Axes'\",\n  \"return_type\": \"None | plt.Axes\",\n  \"short_description\": \"Reads a CSV file, processes the text data to generate word frequency, and optionally saves a plot of the top 10 words as a bar chart.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"analyzeText\", \"type\": \"function\", \"signature\": \"(file_path: str, save_path: str = None) -> None\", \"return_type\": \"None\", \"short_description\": \"Analyzes text data from a CSV file, vectorizes the text, calculates word frequencies, and optionally saves a plot of the top words.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1053", "solution": "{\n  \"name\": \"generateWordFrequencyChart\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path: str, save_path: str | None = None) -> None | plt.Figure\",\n  \"return_type\": \"None | plt.Figure\",\n  \"short_description\": \"Reads a CSV file into a DataFrame, vectorizes the text, calculates word frequency, and generates a bar chart of the top 10 words. The chart can be optionally saved to a specified path.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1053", "solution": "{\n  \"name\": \"generateWordFrequencyChart\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path: str, save_path: str = None) -> None\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Reads a CSV file, processes the text data to generate word frequencies, and optionally saves a bar chart of the top 10 words as an image.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1053", "solution": "{\n  \"name\": \"generateWordFrequencyPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path: str, save_path: str | None = None) -> None | plt.Axes\",\n  \"return_type\": \"None | plt.Axes\",\n  \"short_description\": \"Generates a bar plot of the top 10 most frequent words from a text file, optionally saving the plot to a specified path.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1057", "solution": "{\n  \"name\": \"createAnimalFoodDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(animals=None, foods=None) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a DataFrame pairing animals with foods, useful for diet analysis.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1057", "solution": "{\n  \"name\": \"createAnimalFoodMatrix\",\n  \"type\": \"function\",\n  \"signature\": \"(animals=None, foods=None) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame where each row represents a unique pairing of animals and foods.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1057", "solution": "{\"name\": \"createAnimalFoodDataFrame\", \"type\": \"function\", \"signature\": \"(animals=None, foods=None) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Creates a DataFrame pairing animals and foods, useful for creating datasets to test machine learning algorithms.\"}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1057", "solution": "{\n  \"name\": \"createDataFrameFromPairs\",\n  \"type\": \"function\",\n  \"signature\": \"(pairs: List[str], columns: List[str]) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a pandas DataFrame from a list of string pairs, using the provided column names.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1057", "solution": "{\n  \"name\": \"createDataFrameFromPairs\",\n  \"type\": \"function\",\n  \"signature\": \"(animals: 'list[str]' = None, foods: 'list[str]' = None) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a pandas DataFrame from provided animal and food pairs.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1057", "solution": "{\n  \"name\": \"createDataFrameFromPairs\",\n  \"type\": \"function\",\n  \"signature\": \"(pairs: List[str], columns: List[str]) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a DataFrame from a list of paired strings, using the provided columns.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1057", "solution": "{\n  \"name\": \"createAnimalFoodDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(animals=None, foods=None) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a DataFrame pairing animals and foods, useful for data analysis tasks.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1057", "solution": "{\n  \"name\": \"createDataFrameFromPairs\",\n  \"type\": \"function\",\n  \"signature\": \"(animals: 'list[str]' = None, foods: 'list[str]' = None) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a DataFrame from pairs of animals and foods.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1057", "solution": "{\n  \"name\": \"createAnimalFoodDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(animals=None, foods=None) -> DataFrame\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Creates a DataFrame pairing animals and foods, useful for diet analysis.\"\n}"}
{"api_id": 174, "api_name": "pandas.DataFrame", "task_id": "BigCodeBench/1057", "solution": "{\n  \"name\": \"createAnimalFoodDataFrame\",\n  \"type\": \"function\",\n  \"signature\": \"(animals: list[str] = None, foods: list[str] = None) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Creates a DataFrame where each row represents a unique pairing of animals and foods.\"\n}"}
{"api_id": 175, "api_name": "pandas.api.types.is_numeric_dtype", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"isNumericDtype\", \"type\": \"function\", \"signature\": \"(arr_or_dtype) -> 'bool'\", \"return_type\": \"boolean\", \"short_description\": \"Determine if the provided array or dtype is of a numeric dtype.\"}"}
{"api_id": 175, "api_name": "pandas.api.types.is_numeric_dtype", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"isNumericDataType\", \"type\": \"function\", \"signature\": \"(data) -> 'bool'\", \"return_type\": \"boolean\", \"short_description\": \"Determine if the provided data is of a numeric data type.\"}"}
{"api_id": 175, "api_name": "pandas.api.types.is_numeric_dtype", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"is_categorical_dtype\", \"type\": \"callable\", \"signature\": \"(arr_or_dtype) -> 'bool'\", \"return_type\": \"boolean\", \"short_description\": \"Check whether the provided array or dtype is of a categorical dtype.\"}"}
{"api_id": 175, "api_name": "pandas.api.types.is_numeric_dtype", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"isNumericColumn\", \"type\": \"function\", \"signature\": \"(df, col) -> 'bool'\", \"return_type\": \"bool\", \"short_description\": \"Check if the specified column in the DataFrame is of a numeric data type.\"}"}
{"api_id": 175, "api_name": "pandas.api.types.is_numeric_dtype", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"checkIfCategorical\", \"type\": \"callable\", \"signature\": \"(arr_or_dtype) -> 'bool'\", \"return_type\": \"boolean\", \"short_description\": \"Determine if the provided array or dtype represents categorical data.\"}"}
{"api_id": 175, "api_name": "pandas.api.types.is_numeric_dtype", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"checkIsDateType\", \"type\": \"callable\", \"signature\": \"(arr_or_dtype) -> 'bool'\", \"return_type\": \"boolean\", \"short_description\": \"Check whether the provided array or dtype is of a date or datetime dtype.\"}"}
{"api_id": 175, "api_name": "pandas.api.types.is_numeric_dtype", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"checkNumericType\", \"type\": \"callable\", \"signature\": \"(arr_or_dtype) -> 'bool'\", \"return_type\": \"boolean\", \"short_description\": \"Determines whether the provided array or dtype is of a numeric dtype.\"}"}
{"api_id": 175, "api_name": "pandas.api.types.is_numeric_dtype", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"isNumericColumn\", \"type\": \"function\", \"signature\": \"(df, col) -> 'bool'\", \"return_type\": \"bool\", \"short_description\": \"Checks if the specified column in a DataFrame is of a numeric data type.\"}"}
{"api_id": 175, "api_name": "pandas.api.types.is_numeric_dtype", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"isNumericDtype\", \"type\": \"function\", \"signature\": \"(arr_or_dtype) -> bool\", \"return_type\": \"boolean\", \"short_description\": \"Determine if the given array or dtype is of a numeric type.\"}"}
{"api_id": 175, "api_name": "pandas.api.types.is_numeric_dtype", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"checkIsDateType\", \"type\": \"callable\", \"signature\": \"(arr_or_dtype) -> 'bool'\", \"return_type\": \"boolean\", \"short_description\": \"Determine if the provided array or dtype is of a date or datetime dtype.\"}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"parseCsvData\",\n  \"type\": \"function\",\n  \"signature\": \"(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: \\\"int | Sequence[int] | None | Literal['infer']\\\" = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace: 'bool' = False, skiprows=None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: \"Literal['high', 'legacy'] | None\" = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'\",\n  \"return_type\": \"DataFrame | TextFileReader\",\n  \"short_description\": \"Read a comma-separated values (csv) file into DataFrame and return it.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"readBostonData\",\n  \"type\": \"function\",\n  \"signature\": \"(data_url: 'str' = 'http://lib.stat.cmu.edu/datasets/boston', seed: 'int' = 42)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Reads the Boston housing dataset from a specified URL and returns it as a DataFrame.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"loadCsvData\",\n  \"type\": \"function\",\n  \"signature\": \"(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: 'int | Sequence[int] | None | Literal[\\'infer\\']' = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace: 'bool' = False, skiprows=None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: 'Literal[\\'high\\', \\'legacy\\'] | None' = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'\",\n  \"return_type\": \"DataFrame | TextFileReader\",\n  \"short_description\": \"Load a comma-separated values (csv) file into a DataFrame or iterate over chunks.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"loadBostonData\",\n  \"type\": \"function\",\n  \"signature\": \"(data_url='str', seed=int)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Loads the Boston housing dataset from a given URL and returns it as a DataFrame.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"loadBostonData\",\n  \"type\": \"function\",\n  \"signature\": \"(data_url: 'str' = 'http://lib.stat.cmu.edu/datasets/boston', seed: 'int' = 42) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Loads the Boston housing dataset into a DataFrame.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"readBostonData\", \"type\": \"function\", \"signature\": \"(data_url: 'str' = 'http://lib.stat.cmu.edu/datasets/boston', seed: 'int' = 42) -> 'DataFrame'\", \"return_type\": \"DataFrame\", \"short_description\": \"Reads the Boston housing dataset from a specified URL and returns it as a DataFrame.\"}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"extractBostonData\",\n  \"type\": \"function\",\n  \"signature\": \"(data_url: 'str' = 'http://lib.stat.cmu.edu/datasets/boston', seed: 'int' = 42) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Extracts and processes the Boston housing dataset from a specified URL, returning a DataFrame with relevant features and their correlations.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"parseCSV\",\n  \"type\": \"function\",\n  \"signature\": \"(filepathOrBuffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: 'int | Sequence[int] | None | Literal[\\'infer\\']' = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, indexCol: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, trueValues=None, falseValues=None, skipInitialSpace: 'bool' = False, skipRows=None, skipFooter: 'int' = 0, nRows: 'int | None' = None, naValues=None, keepDefaultNa: 'bool' = True, naFilter: 'bool' = True, verbose: 'bool' = False, skipBlankLines: 'bool' = True, parseDates: 'bool | Sequence[Hashable] | None' = None, inferDatetimeFormat: 'bool | lib.NoDefault' = <no_default>, keepDateCol: 'bool' = False, dateParser=None, dateFormat: 'str | None' = None, dayFirst: 'bool' = False, cacheDates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineTerminator: 'str | None' = None, quoteChar: 'str' = '\"', quoting: 'int' = 0, doubleQuote: 'bool' = True, escapeChar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encodingErrors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, onBadLines: 'str' = 'error', delimWhitespace: 'bool' = False, lowMemory=True, memoryMap: 'bool' = False, floatPrecision: 'Literal[\\'high\\', \\'legacy\\'] | None' = None, storageOptions: 'StorageOptions' = None, dtypeBackend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'\",\n  \"return_type\": \"DataFrame | TextFileReader\",\n  \"short_description\": \"Parse a comma-separated values (csv) file into a DataFrame or iterate over chunks of the file.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"loadBostonData\",\n  \"type\": \"function\",\n  \"signature\": \"(data_url: 'str' = 'http://lib.stat.cmu.edu/datasets/boston', seed: 'int' = 42) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Loads the Boston housing dataset from a specified URL and returns it as a DataFrame.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"loadBostonData\",\n  \"type\": \"function\",\n  \"signature\": \"(data_url: 'str' = 'http://lib.stat.cmu.edu/datasets/boston', seed: 'int' = 42) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Loads the Boston housing dataset into a DataFrame.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/123", "solution": "{\"name\": \"load_csv_files\", \"type\": \"function\", \"signature\": \"(file_paths: list[str], options: dict = None) -> list[pd.DataFrame]\", \"return_type\": \"list[pd.DataFrame]\", \"short_description\": \"Loads multiple CSV files from the given list of file paths into a list of DataFrames. Additional options can be specified to customize the reading process.\"}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/123", "solution": "{\n  \"name\": \"load_csv_data\",\n  \"type\": \"function\",\n  \"signature\": \"(file_paths: list[str], options: dict = None) -> list[pd.DataFrame]\",\n  \"return_type\": \"list[pd.DataFrame]\",\n  \"short_description\": \"Load multiple CSV files into a list of DataFrames, providing optional parsing options.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/123", "solution": "{\"name\": \"read_csv_multiple\", \"type\": \"callable\", \"signature\": \"(filepaths: list[str], **kwargs)\", \"return_type\": \"DataFrame\", \"short_description\": \"Read multiple CSV files into a single DataFrame. This function takes a list of file paths and optional keyword arguments to customize the CSV reading process.\"}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/123", "solution": "{\n  \"name\": \"read_csv_files\",\n  \"type\": \"function\",\n  \"signature\": \"(file_paths: list[str], options: dict = {}) -> list[pd.DataFrame]\",\n  \"return_type\": \"list[pd.DataFrame]\",\n  \"short_description\": \"Read multiple CSV files into a list of DataFrames, providing options for customization.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/123", "solution": "{\n  \"name\": \"read_csv_directory\",\n  \"type\": \"callable\",\n  \"signature\": \"(directory_path: str, file_extension: str = '.csv', sep: str = ',', header: str = 'infer', names: list = None, index_col: str = None, usecols: list = None, dtype: dict = None, engine: str = 'python', converters: dict = None, true_values: list = None, false_values: list = None, skipinitialspace: bool = False, skiprows: list = None, skipfooter: int = 0, nrows: int = None, na_values: list = None, keep_default_na: bool = True, na_filter: bool = True, verbose: bool = False, skip_blank_lines: bool = True, parse_dates: bool = False, infer_datetime_format: bool = False, keep_date_col: bool = False, date_parser: callable = None, date_format: str = None, dayfirst: bool = False, cache_dates: bool = True, iterator: bool = False, chunksize: int = None, compression: str = 'infer', thousands: str = None, decimal: str = '.', lineterminator: str = None, quotechar: str = '\"', quoting: int = 0, doublequote: bool = True, escapechar: str = None, comment: str = None, encoding: str = None, encoding_errors: str = 'strict', dialect: str = None, on_bad_lines: str = 'error', delim_whitespace: bool = False, low_memory: bool = True, memory_map: bool = False, float_precision: str = None, storage_options: dict = None, dtype_backend: str = 'numpy_nullable') -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Reads all CSV files in a directory into a single DataFrame.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/123", "solution": "{\"name\": \"load_csv_data\", \"type\": \"function\", \"signature\": \"(file_path: 'str', options: 'dict' = None) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Loads a CSV file into a DataFrame with optional parsing options.\"}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/123", "solution": "{\n  \"name\": \"read_csv_from_directory\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path: str, file_extension: str = '.csv', sample_size: int = None)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Reads multiple CSV files from a specified directory and concatenates them into a single DataFrame.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/123", "solution": "{\n  \"name\": \"load_csv_data\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path: str, **kwargs)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Loads a CSV file into a DataFrame, providing flexibility through keyword arguments for customization.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/123", "solution": "{\n  \"name\": \"read_csv_batch\",\n  \"type\": \"function\",\n  \"signature\": \"(file_dir: 'str', file_ext: 'str', num_files: 'int')\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Reads a batch of CSV files from a specified directory with a given extension and returns a concatenated DataFrame.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/123", "solution": "{\n  \"name\": \"read_multi_csv\",\n  \"type\": \"function\",\n  \"signature\": \"(file_dir: str, file_ext: str, num_files: int, my_list: list[int])\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Reads multiple CSV files from a specified directory with a given extension, limited by the number of files indicated by num_files and the elements in my_list.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"readCsvFile\",\n  \"type\": \"function\",\n  \"signature\": \"(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: 'int | Sequence[int] | None | Literal[\\'infer\\']' = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace: 'bool' = False, skiprows=None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: 'Literal[\\'high\\', \\'legacy\\'] | None' = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'\",\n  \"return_type\": \"DataFrame | TextFileReader\",\n  \"short_description\": \"Read a comma-separated values (csv) file into DataFrame.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"readJsonData\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path: str, key: str) -> dict\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Reads JSON data from a file and retrieves a specific value using a provided key.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"readCsv\",\n  \"type\": \"function\",\n  \"signature\": \"(filepath_or_buffer: str | os.PathLike[str], *, sep: str | None = None, delimiter: str | None = None, header: int | list[int] | None = 'infer', names: list[str] | None = None, index_col: int | str | list[int | str] | False | None = None, usecols: list[int | str] | None = None, dtype: dict[str, type] | None = None, engine: str | None = None, converters: dict[int | str, callable] | None = None, true_values: list[str] | None = None, false_values: list[str] | None = None, skipinitialspace: bool = False, skiprows: list[int] | callable | None = None, skipfooter: int = 0, nrows: int | None = None, na_values: str | list[str] | dict[str, list[str]] | None = None, keep_default_na: bool = True, na_filter: bool = True, verbose: bool = False, skip_blank_lines: bool = True, parse_dates: bool | list[int | str] | dict[str, list[int | str]] | None = None, infer_datetime_format: bool = False, keep_date_col: bool = False, date_parser: callable | None = None, date_format: str | dict[str, str] | None = None, dayfirst: bool = False, cache_dates: bool = True, iterator: bool = False, chunksize: int | None = None, compression: str | dict[str, str] | None = 'infer', thousands: str | None = None, decimal: str = '.', lineterminator: str | None = None, quotechar: str = '\"', quoting: int = 0, doublequote: bool = True, escapechar: str | None = None, comment: str | None = None, encoding: str | None = None, encoding_errors: str | None = 'strict', dialect: str | csv.Dialect | None = None, on_bad_lines: str = 'error', delim_whitespace: bool = False, low_memory: bool = True, memory_map: bool = False, float_precision: str | None = None, storage_options: dict[str, str] | None = None, dtype_backend: str | None = 'no_default') -> pd.DataFrame | pd.io.parsers.TextFileReader\",\n  \"return_type\": \"pd.DataFrame | pd.io.parsers.TextFileReader\",\n  \"short_description\": \"Read a comma-separated values (csv) file into a DataFrame.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"readJson\",\n  \"type\": \"callable\",\n  \"signature\": \"(filepath_or_buffer: 'FilePath | str', *, orient: 'str' = 'split', typ: 'str' = 'frame', dtype: 'DtypeArg | None' = None, convert_axes: 'bool' = True, convert_dates: 'bool' = True, keep_default_dates: 'bool' = True, date_unit: 'str | None' = None, errors: 'str' = 'raise', storage_options: 'StorageOptions | None' = None)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Read a JSON file into a DataFrame.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"readJson\",\n  \"type\": \"callable\",\n  \"signature\": \"(file_path: 'str', *, dtype: 'str | None' = None)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Reads a JSON file and returns its content as a dictionary.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"readCsv\",\n  \"type\": \"function\",\n  \"signature\": \"(filepath_or_buffer: 'str | os.PathLike[str]', *, sep: 'str | None' = None, delimiter: 'str | None' = None, header: 'str | int | list[int] | None' = 'infer', names: 'list[str] | None' = None, index_col: 'str | int | list[int] | None' = None, usecols: 'list[str] | list[int] | callable | None' = None, dtype: 'dict[str, type] | None' = None, engine: 'str | None' = None, converters: 'dict[str | int, callable] | None' = None, true_values: 'list[str] | None' = None, false_values: 'list[str] | None' = None, skipinitialspace: 'bool' = False, skiprows: 'list[int] | callable | None' = None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values: 'str | list[str] | dict[str, str] | None' = None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | list[str | int] | dict[str, list[str | int]] | None' = None, infer_datetime_format: 'bool' = False, keep_date_col: 'bool' = False, date_parser: 'callable | None' = None, date_format: 'str | dict[str, str] | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'str | dict | None' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory: 'bool' = True, memory_map: 'bool' = False, float_precision: 'str | None' = None, storage_options: 'dict | None' = None, dtype_backend: 'str | None' = None) -> 'pd.DataFrame | pd.io.parsers.TextFileReader'\",\n  \"return_type\": \"pd.DataFrame | pd.io.parsers.TextFileReader\",\n  \"short_description\": \"Read a comma-separated values (csv) file into a DataFrame. Supports various options for customization.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"readCsvData\",\n  \"type\": \"function\",\n  \"signature\": \"(filepath_or_buffer: 'str | os.PathLike[str]', *, sep: 'str | None' = ',', delimiter: 'str | None' = None, header: 'int | Sequence[int] | None | Literal[\\'infer\\']' = 'infer', names: 'Sequence[Hashable] | None' = None, index_col: 'IndexLabel | Literal[False] | None' = None, usecols: 'Sequence[Union[int, str]] | Callable[[str], bool] | None' = None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = 'c', converters: 'Dict[Union[int, str], Callable[[str], Any]] | None' = None, true_values: 'Sequence[str] | None' = None, false_values: 'Sequence[str] | None' = None, skipinitialspace: 'bool' = False, skiprows: 'Sequence[int] | Callable[[int], bool] | None' = None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values: 'Scalar | Sequence[str] | Dict[str, str] | None' = None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Union[int, str]] | Dict[str, Union[int, str]] | None' = False, infer_datetime_format: 'bool' = False, keep_date_col: 'bool' = False, date_parser: 'Callable[[str], Any] | None' = None, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory: 'bool' = True, memory_map: 'bool' = False, float_precision: 'Literal[\\'high\\', \\'legacy\\'] | None' = None, storage_options: 'Dict[str, str] | None' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'pd.DataFrame | pd.io.parsers.TextFileReader'\",\n  \"return_type\": \"pd.DataFrame | pd.io.parsers.TextFileReader\",\n  \"short_description\": \"Read a comma-separated values (csv) file into a DataFrame. Supports optional iteration or breaking of the file into chunks.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"readCsvWithCustomParams\",\n  \"type\": \"callable\",\n  \"signature\": \"(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: 'int | Sequence[int] | None | Literal[\\'infer\\']' = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace: 'bool' = False, skiprows=None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: 'Literal[\\'high\\', \\'legacy\\'] | None' = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'\",\n  \"return_type\": \"DataFrame | TextFileReader\",\n  \"short_description\": \"Read a comma-separated values (csv) file into DataFrame with custom parameters.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"readCsvFile\",\n  \"type\": \"callable\",\n  \"signature\": \"(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: 'int | Sequence[int] | None | Literal[\\'infer\\']' = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace: 'bool' = False, skiprows=None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: 'Literal[\\'high\\', \\'legacy\\'] | None' = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'\",\n  \"return_type\": \"DataFrame | TextFileReader\",\n  \"short_description\": \"Read a comma-separated values (csv) file into DataFrame.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"readCsv\",\n  \"type\": \"function\",\n  \"signature\": \"(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: 'int | Sequence[int] | None | Literal[\\'infer\\']' = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace: 'bool' = False, skiprows=None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: 'Literal[\\'high\\', \\'legacy\\'] | None' = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'\",\n  \"return_type\": \"DataFrame | TextFileReader\",\n  \"short_description\": \"Read a comma-separated values (csv) file into DataFrame.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"convert_files_to_csv\",\n  \"type\": \"function\",\n  \"signature\": \"(source_directory: str, target_directory: str) -> int\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Converts files with specified extensions to CSV format and saves them to a target directory.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"convert_files_to_csv\",\n  \"type\": \"function\",\n  \"signature\": \"(source_directory: str, target_directory: str) -> int\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Converts files with supported extensions to CSV format and saves them in the target directory.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"convert_files_to_csv\",\n  \"type\": \"function\",\n  \"signature\": \"(source_directory: str, target_directory: str, extensions: list[str] = ['.txt', '.docx', '.xlsx', '.csv']) -> int\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Converts files in specified directories to CSV format.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"read_convert_files\",\n  \"type\": \"function\",\n  \"signature\": \"(source_directory: str, target_directory: str, file_extensions: List[str] = ['.txt', '.docx', '.xlsx', '.csv'], convert_docx_to_csv: bool = True, convert_xlsx_to_csv: bool = True, convert_txt_to_csv: bool = True, convert_csv_to_csv: bool = False) -> int\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Reads files from a source directory, converts them to CSV format if necessary, and saves them to a target directory.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"convert_files_to_csv\",\n  \"type\": \"function\",\n  \"signature\": \"(source_directory: str, target_directory: str) -> int\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Converts files in a directory to CSV format.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"read_multiple_files\",\n  \"type\": \"function\",\n  \"signature\": \"(source_directory: str, target_directory: str, file_extensions: list[str] = ['.txt', '.docx', '.xlsx', '.csv']) -> int\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Reads multiple file types from a source directory and converts them to CSV files, saving them to a target directory.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"convert_files_to_csv\",\n  \"type\": \"function\",\n  \"signature\": \"(source_directory: 'str', target_directory: 'str') -> 'int'\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Converts files of various types (txt, docx, xlsx, csv) to CSV format and saves them in a specified target directory.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"convert_files_to_csv\",\n  \"type\": \"function\",\n  \"signature\": \"(source_directory: 'str', target_directory: 'str') -> 'int'\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Converts files of supported types (txt, docx, xlsx, csv) to CSV format and saves them in a target directory.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"convert_files_to_csv\",\n  \"type\": \"function\",\n  \"signature\": \"(source_directory: str, target_directory: str) -> int\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Converts files of various formats (txt, docx, xlsx, csv) to CSV format and saves them to a target directory.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"convert_files_to_csv\",\n  \"type\": \"function\",\n  \"signature\": \"(source_directory: str, target_directory: str) -> int\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Converts files in a directory to CSV format and saves them in a target directory.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/1022", "solution": "{\n  \"name\": \"read_csv_with_date_filter\",\n  \"type\": \"function\",\n  \"signature\": \"(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: \\\"int | Sequence[int] | None | Literal['infer']\\\" = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace: 'bool' = False, skiprows=None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: \\\"Literal['high', 'legacy'] | None\\\" = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'\",\n  \"return_type\": \"DataFrame | TextFileReader\",\n  \"short_description\": \"Read a comma-separated values (csv) file into DataFrame and filter rows based on a date column.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/1022", "solution": "{\n  \"name\": \"read_csv_with_date_filter\",\n  \"type\": \"callable\",\n  \"signature\": \"(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: \\\"int | Sequence[int] | None | Literal['infer']\\\" = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace: 'bool' = False, skiprows=None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: \"Literal['high', 'legacy'] | None\" = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'\",\n  \"return_type\": \"DataFrame | TextFileReader\",\n  \"short_description\": \"Read a comma-separated values (csv) file into DataFrame and filter rows based on a date column.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/1022", "solution": "{\n  \"name\": \"read_csv_with_date_filter\",\n  \"type\": \"function\",\n  \"signature\": \"(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: \\\"int | Sequence[int] | None | Literal['infer']\\\" = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace: 'bool' = False, skiprows=None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: \\\"Literal['high', 'legacy'] | None\\\" = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'\",\n  \"return_type\": \"DataFrame | TextFileReader\",\n  \"short_description\": \"Read a CSV file and filter rows based on a date column.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/1022", "solution": "{\n  \"name\": \"parse_csv_with_date_filter\",\n  \"type\": \"function\",\n  \"signature\": \"(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: \\\"int | Sequence[int] | None | Literal['infer']\\\" = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace: 'bool' = False, skiprows=None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: \\\"Literal['high', 'legacy'] | None\\\" = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'\",\n  \"return_type\": \"DataFrame | TextFileReader\",\n  \"short_description\": \"Read a comma-separated values (csv) file into DataFrame and apply date filtering.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/1022", "solution": "{\n  \"name\": \"load_csv_with_date_filter\",\n  \"type\": \"callable\",\n  \"signature\": \"(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: \\\"int | Sequence[int] | None | Literal['infer']\\\" = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace: 'bool' = False, skiprows=None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: \"Literal['high', 'legacy'] | None\" = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Load a CSV file into a DataFrame and filter rows based on a date column.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/1022", "solution": "{\n  \"name\": \"read_and_filter_csv\",\n  \"type\": \"function\",\n  \"signature\": \"(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: \\\"int | Sequence[int] | None | Literal['infer']\\\" = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace: 'bool' = False, skiprows=None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: \\\"Literal['high', 'legacy'] | None\\\" = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'\",\n  \"return_type\": \"DataFrame | TextFileReader\",\n  \"short_description\": \"Read a comma-separated values (csv) file into DataFrame and filter rows based on the latest date in a specified column.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/1022", "solution": "{\n  \"name\": \"read_csv_with_date_filter\",\n  \"type\": \"callable\",\n  \"signature\": \"(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: 'int | Sequence[int] | None | Literal[\\'infer\\']' = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace: 'bool' = False, skiprows=None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: 'Literal[\\'high\\', \\'legacy\\'] | None' = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'\",\n  \"return_type\": \"DataFrame | TextFileReader\",\n  \"short_description\": \"Read a comma-separated values (csv) file into DataFrame and filter rows based on a date column.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/1022", "solution": "{\n  \"name\": \"read_csv_with_date_filter\",\n  \"type\": \"function\",\n  \"signature\": \"(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: \\\"int | Sequence[int] | None | Literal['infer']\\\" = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace: 'bool' = False, skiprows=None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: \\\"Literal['high', 'legacy'] | None\\\" = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'\",\n  \"return_type\": \"DataFrame | TextFileReader\",\n  \"short_description\": \"Read a comma-separated values (csv) file into DataFrame and apply date filtering.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/1022", "solution": "{\n  \"name\": \"read_csv_with_date_filter\",\n  \"type\": \"function\",\n  \"signature\": \"(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: \\\"int | Sequence[int] | None | Literal['infer']\\\" = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace: 'bool' = False, skiprows=None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: \\\"Literal['high', 'legacy'] | None\\\" = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'\",\n  \"return_type\": \"DataFrame | TextFileReader\",\n  \"short_description\": \"Read a comma-separated values (csv) file into DataFrame and filter rows based on a date column.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/1022", "solution": "{\n  \"name\": \"read_csv_with_date_filter\",\n  \"type\": \"function\",\n  \"signature\": \"(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: 'int | Sequence[int] | None | Literal[\\'infer\\']' = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace: 'bool' = False, skiprows=None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: 'Literal[\\'high\\', \\'legacy\\'] | None' = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Reads a CSV file and filters rows based on a date column.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/1053", "solution": "{\n  \"name\": \"analyze_csv\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path: 'str', *, usecols: 'list[int] | list[str] | None' = None, names: 'list[str] | None' = None, header: 'int | None' = None, sep: 'str | None' = None, quotechar: 'str | None' = None, compression: 'str | None' = 'infer', encoding: 'str | None' = 'utf-8') -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Analyzes a CSV file and returns a DataFrame with the specified columns and headers.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/1053", "solution": "{\n  \"name\": \"extract_top_words\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, usecols: 'Sequence[Hashable] | None' = None, names: 'Sequence[Hashable] | None' = None, header: 'int | Sequence[int] | None | Literal[\\'infer\\']' = 'infer', dtype: 'DtypeArg | None' = None, sep: 'str | None | lib.NoDefault' = ',', quotechar: 'str' = '\"', quoting: 'int' = 0, skipinitialspace: 'bool' = False, nrows: 'int | None' = None, encoding: 'str | None' = 'utf-8') -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Extracts the top words from a specified column in a CSV file.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/1053", "solution": "{\n  \"name\": \"extract_top_words\",\n  \"type\": \"function\",\n  \"signature\": \"(file_path: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, usecols: 'Sequence[int] | None' = None, names: 'Sequence[Hashable] | None' = None, header: 'int | Sequence[int] | None | Literal[\\'infer\\']' = 'infer', sep: 'str | None | lib.NoDefault' = ',', dtype: 'DtypeArg | None' = None, na_values: 'scalar | list[str] | dict[str, str] | None' = None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | list[int | str] | None' = False, infer_datetime_format: 'bool' = False, keep_date_col: 'bool' = False, date_parser: 'callable | None' = None, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory: 'bool' = True, memory_map: 'bool' = False, float_precision: \"Literal['high', 'legacy'] | None\" = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = 'numpy_nullable') -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Extracts the top words from a specified column of a CSV file.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/1053", "solution": "{\n  \"name\": \"parse_csv\",\n  \"type\": \"function\",\n  \"signature\": \"(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: \\\"int | Sequence[int] | None | Literal['infer']\\\" = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace: 'bool' = False, skiprows=None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: \"Literal['high', 'legacy'] | None\" = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'\",\n  \"return_type\": \"DataFrame | TextFileReader\",\n  \"short_description\": \"Read a comma-separated values (csv) file into DataFrame.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/1053", "solution": "{\n  \"name\": \"read_csv_with_custom_headers\",\n  \"type\": \"function\",\n  \"signature\": \"(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: \\\"int | Sequence[int] | None | Literal['infer']\\\" = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace: 'bool' = False, skiprows=None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: \"Literal['high', 'legacy'] | None\" = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Read a comma-separated values (csv) file into a DataFrame with customizable headers and options.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"loadTextData\", \"type\": \"function\", \"signature\": \"(file_path: 'str', save_path: 'str | None = None)\", \"return_type\": \"None | plt.Axes\", \"short_description\": \"Loads text data from a CSV file, counts word frequencies, and optionally saves a plot of the top 10 words as a bar chart.\"}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/1053", "solution": "{\n  \"name\": \"read_specific_column\",\n  \"type\": \"callable\",\n  \"signature\": \"(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, usecols: 'Sequence[Hashable] | None', names: 'Sequence[Hashable] | None', dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: \"Literal['high', 'legacy'] | None\" = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'\",\n  \"return_type\": \"DataFrame | TextFileReader\",\n  \"short_description\": \"Read a specific column from a comma-separated values (csv) file into a DataFrame.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/1053", "solution": "{\n  \"name\": \"read_csv_with_custom_options\",\n  \"type\": \"callable\",\n  \"signature\": \"(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: 'int | Sequence[int] | None | Literal[\\'infer\\']' = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace: 'bool' = False, skiprows=None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: 'Literal[\\'high\\', \\'legacy\\'] | None' = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'\",\n  \"return_type\": \"DataFrame | TextFileReader\",\n  \"short_description\": \"Read a comma-separated values (csv) file into DataFrame with custom options.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/1053", "solution": "{\n  \"name\": \"parseCsv\",\n  \"type\": \"function\",\n  \"signature\": \"(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: \\\"int | Sequence[int] | None | Literal['infer']\\\" = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace: 'bool' = False, skiprows=None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: \"Literal['high', 'legacy'] | None\" = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'\",\n  \"return_type\": \"DataFrame | TextFileReader\",\n  \"short_description\": \"Read a comma-separated values (csv) file into DataFrame.\"\n}"}
{"api_id": 176, "api_name": "pandas.read_csv", "task_id": "BigCodeBench/1053", "solution": "{\n  \"name\": \"readCsvData\",\n  \"type\": \"callable\",\n  \"signature\": \"(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: 'int | Sequence[int] | None | Literal[\\'infer\\']' = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols=None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace: 'bool' = False, skiprows=None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool' = False, date_parser=<no_default>, date_format: 'str | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool' = False, low_memory=True, memory_map: 'bool' = False, float_precision: 'Literal[\\'high\\', \\'legacy\\'] | None' = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'\",\n  \"return_type\": \"DataFrame | TextFileReader\",\n  \"short_description\": \"Read a comma-separated values (csv) file into DataFrame.\"\n}"}
{"api_id": 177, "api_name": "pandas.Timedelta", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"calculateTimeSeriesForecast\", \"type\": \"function\", \"signature\": \"(dataframe, steps=7, order=(5, 1, 0))\", \"return_type\": \"List[float]\", \"short_description\": \"Calculates a time series forecast using an ARIMA model for a specified number of future steps.\"}"}
{"api_id": 177, "api_name": "pandas.Timedelta", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"calculateTimeSeriesForecast\", \"type\": \"function\", \"signature\": \"(dataframe, steps=7, model_order=(5, 1, 0))\", \"return_type\": \"List[float]\", \"short_description\": \"Calculates a time series forecast using an ARIMA model for a specified number of steps.\"}"}
{"api_id": 177, "api_name": "pandas.Timedelta", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"calculateTimeSeriesForecast\", \"type\": \"function\", \"signature\": \"(dataframe, steps, order)\", \"return_type\": \"List[float]\", \"short_description\": \"Calculates a time series forecast using the ARIMA model for a specified number of steps.\"}"}
{"api_id": 177, "api_name": "pandas.Timedelta", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"calculateArimaForecast\", \"type\": \"function\", \"signature\": \"(dataframe, steps=7, order=(5, 1, 0))\", \"return_type\": \"List[float]\", \"short_description\": \"Calculates the ARIMA forecast for a given number of steps based on historical closing prices.\"}"}
{"api_id": 177, "api_name": "pandas.Timedelta", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"calculateTimeSeriesForecast\", \"type\": \"function\", \"signature\": \"(df: pandas.DataFrame, steps: int, model_order: Tuple[int, int, int])\", \"return_type\": \"Tuple[List[float], matplotlib.axes.Axes]\", \"short_description\": \"Calculates a time series forecast using an ARIMA model and returns the forecasted values along with the plot axes.\"}"}
{"api_id": 177, "api_name": "pandas.Timedelta", "task_id": "BigCodeBench/917", "solution": "{\n  \"name\": \"calculateTimeSeriesForecast\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe, model_order)\",\n  \"return_type\": \"List[float]\",\n  \"short_description\": \"This function takes a pandas DataFrame and an ARIMA model order as input and returns a list of forecasted values for the next 7 days.\"\n}"}
{"api_id": 177, "api_name": "pandas.Timedelta", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"calculateTimeSeriesForecast\", \"type\": \"function\", \"signature\": \"(dataframe, steps=7, order=(5, 1, 0))\", \"return_type\": \"List[float]\", \"short_description\": \"This function calculates a time series forecast using an ARIMA model. It takes a pandas DataFrame, the number of steps to forecast, and the order of the ARIMA model as input. It returns a list of forecasted values.\"}"}
{"api_id": 177, "api_name": "pandas.Timedelta", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"calculateTimeSeriesForecast\", \"type\": \"function\", \"signature\": \"(dataframe, steps=7, order=(5, 1, 0))\", \"return_type\": \"List[float]\", \"short_description\": \"This function takes a pandas DataFrame containing time series data, and calculates a forecast for the next specified number of steps using an ARIMA model with the given order. It returns a list of forecasted values.\"}"}
{"api_id": 177, "api_name": "pandas.Timedelta", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"calculateTimeSeriesForecast\", \"type\": \"function\", \"signature\": \"(dataframe, steps=7, order=(5, 1, 0))\", \"return_type\": \"List[float]\", \"short_description\": \"Calculates a time series forecast using ARIMA model for the next specified number of steps.\"}"}
{"api_id": 177, "api_name": "pandas.Timedelta", "task_id": "BigCodeBench/917", "solution": "{\n  \"name\": \"calculateTimeSeriesForecast\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe, steps=7, order=(5, 1, 0))\",\n  \"return_type\": \"List[float]\",\n  \"short_description\": \"Calculates a time series forecast using an ARIMA model for a specified number of steps.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/123", "solution": "{\n  \"name\": \"mergeDataFrames\",\n  \"type\": \"callable\",\n  \"signature\": \"(frames: 'Iterable[pd.DataFrame]', *, how: 'str' = 'outer', on: 'str' = None, left_on: 'str' = None, right_on: 'str' = None, sort: 'bool' = False, suffixes: 'Tuple[str, str]' = ('_x', '_y'), copy: 'bool' = True, indicator: 'bool' = False, validate: 'str' = None) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Merges multiple DataFrames together based on specified conditions.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/123", "solution": "{\n  \"name\": \"mergeDataFrames\",\n  \"type\": \"callable\",\n  \"signature\": \"(frames: 'Iterable[pd.DataFrame]', *, how: 'str' = 'outer', on: 'Hashable' = None, left_on: 'Hashable' = None, right_on: 'Hashable' = None, sort: 'bool' = False, suffixes: 'Tuple[str, str]' = ('_x', '_y'), copy: 'bool' = True, indicator: 'bool' = False) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Combines multiple pandas DataFrames into one based on a key. Supports various join methods and custom column mappings.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/123", "solution": "{\n  \"name\": \"concatenateDataFrames\",\n  \"type\": \"callable\",\n  \"signature\": \"(dataFrames: 'Iterable[pd.DataFrame]', *, axis: 'int' = 0, join: 'str' = 'outer', ignore_index: 'bool' = False, keys=None, levels=None, names=None, verify_integrity: 'bool' = False, sort: 'bool' = False, copy: 'bool | None' = None) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Concatenates multiple pandas DataFrames along a specified axis.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/123", "solution": "{\n  \"name\": \"concatenateDataFrames\",\n  \"type\": \"callable\",\n  \"signature\": \"(dataFrames: 'Iterable[pd.DataFrame]', *, axis: 'int' = 0, join: 'str' = 'outer', ignore_index: 'bool' = False, keys=None, levels=None, names=None, verify_integrity: 'bool' = False, sort: 'bool' = False, copy: 'bool | None' = None) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Concatenates multiple pandas DataFrames along a specified axis.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/123", "solution": "{\n  \"name\": \"concatenateDataFrames\",\n  \"type\": \"function\",\n  \"signature\": \"(dataFrames: 'Iterable[pd.DataFrame]', axis: 'int' = 0, join: 'str' = 'outer', ignoreIndex: 'bool' = False) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Combines multiple pandas DataFrames along a specified axis.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/123", "solution": "{\n  \"name\": \"mergeDataFrames\",\n  \"type\": \"callable\",\n  \"signature\": \"(frames: 'Iterable[pd.DataFrame]', *, how: 'str' = 'outer', sort: 'bool' = False) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Combines multiple DataFrame objects into one, allowing for different join strategies and optional sorting.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/123", "solution": "{\n  \"name\": \"concatenateDataFrames\",\n  \"type\": \"function\",\n  \"signature\": \"(dataFrames: 'Iterable[pd.DataFrame]', *, axis: 'int' = 0, join: 'str' = 'outer', ignore_index: 'bool' = False, keys=None, levels=None, names=None, verify_integrity: 'bool' = False, sort: 'bool' = False, copy: 'bool | None' = None) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Combines multiple pandas DataFrame objects along a specified axis.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/123", "solution": "{\n  \"name\": \"mergeDataFrames\",\n  \"type\": \"callable\",\n  \"signature\": \"(frames: 'Iterable[pd.DataFrame]', *, how: 'str' = 'outer', on: 'str' = None, left_on: 'str' = None, right_on: 'str' = None, sort: 'bool' = False, suffixes: 'Tuple[str, str]' = ('_x', '_y'), copy: 'bool' = True) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Merges multiple pandas DataFrames into a single DataFrame based on specified conditions.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/123", "solution": "{\n  \"name\": \"mergeDataFrames\",\n  \"type\": \"callable\",\n  \"signature\": \"(frames: 'Iterable[pd.DataFrame]', *, how: 'str' = 'outer', sort: 'bool' = False) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Merges multiple DataFrame objects into one. Supports 'inner' and 'outer' joins.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/123", "solution": "{\n  \"name\": \"concatenateDataFrames\",\n  \"type\": \"callable\",\n  \"signature\": \"(data_frames: 'Iterable[pd.DataFrame]', *, axis: 'Axis' = 0, join: 'str' = 'outer', ignore_index: 'bool' = False, verify_integrity: 'bool' = False, sort: 'bool' = False, copy: 'bool | None' = None) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Concatenates a list of pandas DataFrames along a specified axis.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"mergeDataFrames\",\n  \"type\": \"callable\",\n  \"signature\": \"(dfs: 'Iterable[pd.DataFrame]', join: 'str' = 'outer', sort: 'bool' = False) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Combines multiple DataFrame objects along a specified axis with an optional join type and sorting option.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"mergeDataFrames\",\n  \"type\": \"callable\",\n  \"signature\": \"(frames: 'Iterable[pd.DataFrame]', *, how: 'str' = 'outer', sort: 'bool' = False) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Merges multiple DataFrames together along a specified axis.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"mergeDataFrames\",\n  \"type\": \"callable\",\n  \"signature\": \"(dataframes: 'Iterable[pd.DataFrame]', *, on: 'str' = 'index', how: 'str' = 'inner', sort: 'bool' = False) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Merges multiple DataFrames on a common column or index.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"mergeDataFrames\",\n  \"type\": \"callable\",\n  \"signature\": \"(frames: 'Iterable[pd.DataFrame] | Mapping[Hashable, pd.DataFrame]', *, how: 'str' = 'outer', on: 'Hashable | Iterable[Hashable] | None' = None, left_on: 'Hashable | Iterable[Hashable] | None' = None, right_on: 'Hashable | Iterable[Hashable] | None' = None, left_index: 'bool' = False, right_index: 'bool' = False, sort: 'bool' = False, suffixes: 'Tuple[str, str]' = ('_x', '_y'), copy: 'bool' = True, indicator: 'bool' = False, validate: 'str | None' = None) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Merges two or more DataFrames based on one or more keys.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"calculateCorrelationMatrix\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe: 'pd.DataFrame', plot: 'bool' = False) -> ('pd.DataFrame', 'Optional[plt.Figure]')\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Calculates the correlation matrix of the given DataFrame and optionally plots it as a heatmap.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"mergeDataFrames\",\n  \"type\": \"callable\",\n  \"signature\": \"(objs: 'Iterable[pd.DataFrame] | Mapping[Hashable, pd.DataFrame]', *, on: 'Hashable' = None, how: 'str' = 'inner', sort: 'bool' = False, suffixes: 'Tuple[str, str]' = ('_x', '_y'), copy: 'bool' = True) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Merges multiple DataFrame objects either by their index or a common column.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"mergeDataFrames\",\n  \"type\": \"callable\",\n  \"signature\": \"(objs: 'Iterable[pd.DataFrame] | Mapping[Hashable, pd.DataFrame]', *, how: 'str' = 'outer', on: 'str | Iterable[str]' = None, left_on: 'str | Iterable[str]' = None, right_on: 'str | Iterable[str]' = None, sort: 'bool' = False, suffixes: 'Tuple[str, str]' = ('_x', '_y'), copy: 'bool' = True, indicator: 'bool' = False, validate: 'str' = None) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Merges multiple DataFrames together based on specified conditions.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"concatenateDataFrames\",\n  \"type\": \"callable\",\n  \"signature\": \"(dataframes: 'Iterable[pd.DataFrame]', axis: 'int' = 0, join: 'str' = 'outer', ignore_index: 'bool' = False, keys=None, levels=None, names=None, verify_integrity: 'bool' = False, sort: 'bool' = False, copy: 'bool | None' = None) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Combines multiple pandas DataFrame objects along a specified axis.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"concatenateDataFrames\",\n  \"type\": \"callable\",\n  \"signature\": \"(objs: 'Iterable[pd.DataFrame] | Mapping[Hashable, pd.DataFrame]', *, axis: 'int' = 0, join: 'str' = 'outer', ignore_index: 'bool' = False, keys=None, levels=None, names=None, verify_integrity: 'bool' = False, sort: 'bool' = False, copy: 'bool | None' = None) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Concatenates multiple pandas DataFrames along a specified axis.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"mergeDataFrames\",\n  \"type\": \"callable\",\n  \"signature\": \"(frames: 'Iterable[pd.DataFrame] | Mapping[Hashable, pd.DataFrame]', *, on: 'str' | Iterable[str] = None, how: 'str' = 'inner', sort: 'bool' = False, suffixes: 'Tuple[str, str]' = ('_x', '_y'), copy: 'bool' = True) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Combines multiple DataFrames either on specified columns or index. Supports different types of joins and customizable suffixes for overlapping columns.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"concatenateDataFrames\", \"type\": \"callable\", \"signature\": \"(dataFrames: 'Iterable[pd.DataFrame] | Mapping[Hashable, pd.DataFrame]', *, axis: 'Axis' = 0, join: 'str' = 'outer', ignore_index: 'bool' = False, keys=None, levels=None, names=None, verify_integrity: 'bool' = False, sort: 'bool' = False, copy: 'bool | None' = None) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Combines multiple pandas DataFrame objects along a specified axis, allowing for set logic along the other axes and the option to add hierarchical indexing.\"}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/678", "solution": "{\n  \"name\": \"concatenateDataFrames\",\n  \"type\": \"function\",\n  \"signature\": \"(dataFrames: 'Iterable[pd.DataFrame]', axis: 'int' = 0, join: 'str' = 'outer') -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Combines multiple DataFrame objects along a specified axis with an optional join method.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/678", "solution": "{\n  \"name\": \"concatenateDataFrames\",\n  \"type\": \"callable\",\n  \"signature\": \"(dataFrames: 'Iterable[pd.DataFrame]', *, axis: 'int' = 0, join: 'str' = 'outer', ignore_index: 'bool' = False, keys=None, levels=None, names=None, verify_integrity: 'bool' = False, sort: 'bool' = False, copy: 'bool | None' = True)\",\n  \"return_type\": \"pd.DataFrame | pd.Series\",\n  \"short_description\": \"Concatenates multiple pandas DataFrames or Series along a specified axis.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"concatenateDataFrames\", \"type\": \"callable\", \"signature\": \"(dataFrames: 'Iterable[pd.DataFrame]', *, axis: 'Axis' = 0, join: 'str' = 'outer', ignore_index: 'bool' = False, keys=None, levels=None, names=None, verify_integrity: 'bool' = False, sort: 'bool' = False, copy: 'bool | None' = None) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Combines multiple pandas DataFrame objects along a particular axis.\"}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/678", "solution": "{\n  \"name\": \"concatenateDataFrames\",\n  \"type\": \"callable\",\n  \"signature\": \"(dataFrames: 'Iterable[pd.DataFrame]', join: 'str' = 'outer') -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Combines multiple pandas DataFrames into one along the specified axis. Allows for outer or inner joins.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/678", "solution": "{\n  \"name\": \"concatenateDataFrames\",\n  \"type\": \"function\",\n  \"signature\": \"(dataFrames: 'List[DataFrame]', *, axis: 'int' = 0, join: 'str' = 'outer', ignore_index: 'bool' = False, keys=None, levels=None, names=None, verify_integrity: 'bool' = False, sort: 'bool' = False, copy: 'bool' = True) -> 'DataFrame'\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Combines multiple DataFrame objects along a specified axis.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"concatenateDataFrames\", \"type\": \"callable\", \"signature\": \"(dataFrames: 'Iterable[pd.DataFrame]', *, axis: 'Axis' = 0, join: 'str' = 'outer', ignore_index: 'bool' = False, keys=None, levels=None, names=None, verify_integrity: 'bool' = False, sort: 'bool' = False, copy: 'bool | None' = None) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Combines multiple pandas DataFrame objects along a particular axis.\"}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/678", "solution": "{\n  \"name\": \"concatenateDataFrames\",\n  \"type\": \"callable\",\n  \"signature\": \"(dataFrames: 'Iterable[pd.DataFrame]', *, axis: 'int' = 0, join: 'str' = 'outer', ignore_index: 'bool' = False, keys=None, levels=None, names=None, verify_integrity: 'bool' = False, sort: 'bool' = False, copy: 'bool' = True) -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Combines multiple DataFrame objects along a specified axis.\"\n}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"concatenateDataFrames\", \"type\": \"callable\", \"signature\": \"(dataFrames: 'Iterable[pd.DataFrame]', join: 'str' = 'outer', sort: 'bool' = False) -> 'pd.DataFrame'\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Combines multiple DataFrame objects along a particular axis with an option to handle indexes on other axes.\"}"}
{"api_id": 178, "api_name": "pandas.concat", "task_id": "BigCodeBench/678", "solution": "{\n  \"name\": \"concatenateDataFrames\",\n  \"type\": \"function\",\n  \"signature\": \"(dataFrames: 'Iterable[pd.DataFrame]', axis: 'int' = 0, join: 'str' = 'outer') -> 'pd.DataFrame'\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Combines multiple pandas DataFrames along a specified axis with optional set logic for joining.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateDateRange\", \"type\": \"callable\", \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\", \"return_type\": \"DatetimeIndex\", \"short_description\": \"Generate a fixed frequency DatetimeIndex with customizable parameters.\"}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/100", "solution": "{\n  \"name\": \"generateDateRange\",\n  \"type\": \"function\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Generates a fixed frequency DatetimeIndex with the specified parameters.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/100", "solution": "{\n  \"name\": \"generateDateRange\",\n  \"type\": \"callable\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None, **kwargs)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Creates a fixed frequency DatetimeIndex with the specified parameters.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"createDateRange\", \"type\": \"callable\", \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\", \"return_type\": \"DatetimeIndex\", \"short_description\": \"Create a fixed frequency DatetimeIndex with the specified parameters.\"}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/100", "solution": "{\n  \"name\": \"generateDateRange\",\n  \"type\": \"callable\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Generates a fixed frequency DatetimeIndex with specified parameters.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/100", "solution": "{\n  \"name\": \"generateDateRange\",\n  \"type\": \"callable\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None, **kwargs)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Creates a fixed frequency DatetimeIndex with specified parameters.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateDateRange\", \"type\": \"callable\", \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\", \"return_type\": \"DatetimeIndex\", \"short_description\": \"Return a fixed frequency DatetimeIndex with customizable parameters.\"}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/100", "solution": "{\n  \"name\": \"generateDateRange\",\n  \"type\": \"callable\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None, **kwargs) -> 'DatetimeIndex'\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Return a fixed frequency DatetimeIndex with a specified start, end, periods, and frequency.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateDateRange\", \"type\": \"callable\", \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', unit=None)\", \"return_type\": \"DatetimeIndex\", \"short_description\": \"Creates a fixed frequency DatetimeIndex with the specified parameters.\"}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateDateRange\", \"type\": \"callable\", \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\", \"return_type\": \"DatetimeIndex\", \"short_description\": \"Generates a fixed frequency DatetimeIndex with the specified parameters.\"}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/492", "solution": "{\n  \"name\": \"generate_date_ranges\",\n  \"type\": \"function\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Generates a range of equally spaced time points with a fixed frequency, allowing for specification of start, end, periods, and frequency.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/492", "solution": "{\n  \"name\": \"generate_date_range\",\n  \"type\": \"callable\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Create a fixed frequency DatetimeIndex for a given range of dates.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/492", "solution": "{\n  \"name\": \"generate_date_range\",\n  \"type\": \"callable\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Generates a fixed frequency DatetimeIndex with options to specify start, end, periods, frequency, timezone, normalization, name, inclusivity, and unit.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/492", "solution": "{\n  \"name\": \"generate_date_range\",\n  \"type\": \"function\",\n  \"signature\": \"(start_date, end_date, freq='D', tz=None, normalize=False, name=None, inclusive='both', unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Generates a fixed frequency DatetimeIndex between the specified start and end dates, with optional frequency, timezone, normalization, and inclusive options.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/492", "solution": "{\n  \"name\": \"generate_date_range\",\n  \"type\": \"callable\",\n  \"signature\": \"(start_date=None, end_date=None, frequency='D', normalize=False, name=None, inclusive='both', unit=None, **kwargs) -> 'DatetimeIndex'\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Generates a fixed frequency DatetimeIndex from a start date to an end date based on the specified frequency.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"generate_date_range\", \"type\": \"callable\", \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', unit=None, **kwargs) -> 'DatetimeIndex'\", \"return_type\": \"DatetimeIndex\", \"short_description\": \"Create a fixed frequency DatetimeIndex with customizable parameters.\"}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/492", "solution": "{\n  \"name\": \"generate_date_range\",\n  \"type\": \"callable\",\n  \"signature\": \"(start_date=None, end_date=None, frequency='D', normalize=False, name=None, inclusive='both', unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Generates a fixed frequency DatetimeIndex with the specified start and end dates and frequency.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"generate_date_range\", \"type\": \"callable\", \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\", \"return_type\": \"DatetimeIndex\", \"short_description\": \"Return a fixed frequency DatetimeIndex. This function is very different from pandas.date_range and does not follow a hierarchical structure.\"}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"generate_date_range\", \"type\": \"callable\", \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\", \"return_type\": \"DatetimeIndex\", \"short_description\": \"Generates a fixed frequency DatetimeIndex with the specified parameters.\"}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/492", "solution": "{\n  \"name\": \"generate_date_range\",\n  \"type\": \"callable\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Generate a fixed frequency DatetimeIndex with customizable parameters.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/503", "solution": "{\n  \"name\": \"generateDateRange\",\n  \"type\": \"function\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Generates a fixed frequency DatetimeIndex with customizable parameters.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generateDateRange\", \"type\": \"callable\", \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\", \"return_type\": \"DatetimeIndex\", \"short_description\": \"Generates a fixed frequency DatetimeIndex with the specified parameters.\"}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/503", "solution": "{\n  \"name\": \"generateDateRange\",\n  \"type\": \"callable\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Generates a fixed frequency DatetimeIndex with customizable parameters.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/503", "solution": "{\n  \"name\": \"generateDateRange\",\n  \"type\": \"callable\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Generates a fixed frequency DatetimeIndex with customizable parameters for start, end, periods, frequency, timezone, and normalization.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/503", "solution": "{\n  \"name\": \"generateDateRange\",\n  \"type\": \"function\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Generates a fixed frequency DatetimeIndex with the specified parameters.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/503", "solution": "{\n  \"name\": \"generateDateRange\",\n  \"type\": \"callable\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Generates a fixed frequency DatetimeIndex with customizable parameters.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/503", "solution": "{\"name\": \"generateDateRange\", \"type\": \"callable\", \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\", \"return_type\": \"DatetimeIndex\", \"short_description\": \"Generates a fixed frequency DatetimeIndex with options to specify start, end, periods, frequency, timezone, normalization, and inclusion of boundaries.\"}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/503", "solution": "{\n  \"name\": \"generateDateRange\",\n  \"type\": \"function\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Create a fixed frequency DatetimeIndex with options to specify start, end, periods, and frequency.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/503", "solution": "{\n  \"name\": \"generateDateRange\",\n  \"type\": \"callable\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Generate a fixed frequency DatetimeIndex with flexible parameters.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/503", "solution": "{\n  \"name\": \"generateDateRange\",\n  \"type\": \"callable\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Generate a fixed frequency DatetimeIndex with customizable parameters.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"generateDateRange\", \"type\": \"callable\", \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', unit=None)\", \"return_type\": \"DatetimeIndex\", \"short_description\": \"Generates a fixed frequency DatetimeIndex with the specified parameters.\"}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"generateDateRange\", \"type\": \"callable\", \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\", \"return_type\": \"DatetimeIndex\", \"short_description\": \"Generates a fixed frequency DatetimeIndex with options to specify start, end, periods, freq, tz, normalize, name, inclusive, and unit.\"}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/917", "solution": "{\n  \"name\": \"generate_date_range\",\n  \"type\": \"callable\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None, **kwargs)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Generates a fixed frequency DatetimeIndex with the specified parameters.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/917", "solution": "{\n  \"name\": \"generate_date_range\",\n  \"type\": \"function\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None, **kwargs) -> 'DatetimeIndex'\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Generates a fixed frequency DatetimeIndex with options for start, end, periods, and frequency.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/917", "solution": "{\n  \"name\": \"generate_date_range\",\n  \"type\": \"function\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None, **kwargs)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Generates a fixed frequency DatetimeIndex with options for start, end, periods, frequency, timezone, and normalization.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/917", "solution": "{\n  \"name\": \"generate_date_range\",\n  \"type\": \"callable\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Generates a fixed frequency DatetimeIndex with the specified parameters.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/917", "solution": "{\n  \"name\": \"generate_date_range\",\n  \"type\": \"callable\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None, **kwargs)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Return a fixed frequency DatetimeIndex. This function is designed to generate a range of dates with specified parameters, providing flexibility in defining the start, end, frequency, and other attributes.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/917", "solution": "{\n  \"name\": \"generate_date_range\",\n  \"type\": \"callable\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Generates a fixed frequency DatetimeIndex with options for start, end, periods, freq, tz, normalize, name, inclusive, and unit.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"generateDateRange\", \"type\": \"function\", \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', unit=None)\", \"return_type\": \"DatetimeIndex\", \"short_description\": \"Generates a fixed frequency DatetimeIndex with the specified parameters.\"}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/917", "solution": "{\n  \"name\": \"generate_date_range\",\n  \"type\": \"function\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Generates a fixed frequency DatetimeIndex with the specified parameters.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/942", "solution": "{\n  \"name\": \"generateDateRange\",\n  \"type\": \"function\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Creates a fixed frequency DatetimeIndex with the specified parameters.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateDateRange\", \"type\": \"callable\", \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', unit=None)\", \"return_type\": \"DatetimeIndex\", \"short_description\": \"Generates a fixed frequency DatetimeIndex with options to specify start, end, periods, frequency, timezone, normalization, and boundary inclusivity.\"}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/942", "solution": "{\n  \"name\": \"generateDateRange\",\n  \"type\": \"callable\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive=None, unit=None, **kwargs)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Generates a fixed frequency DatetimeIndex with the specified parameters.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateDateRange\", \"type\": \"callable\", \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', unit=None)\", \"return_type\": \"DatetimeIndex\", \"short_description\": \"Generates a fixed frequency DatetimeIndex with the specified parameters.\"}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/942", "solution": "{\n  \"name\": \"generateDateRange\",\n  \"type\": \"callable\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Generates a fixed frequency DatetimeIndex with options to specify start, end, periods, frequency, timezone, and normalization.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateDateRange\", \"type\": \"function\", \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', unit=None)\", \"return_type\": \"DatetimeIndex\", \"short_description\": \"Generates a fixed frequency DatetimeIndex with the specified parameters.\"}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/942", "solution": "{\n  \"name\": \"generateDateRange\",\n  \"type\": \"callable\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Creates a fixed frequency DatetimeIndex with the specified parameters.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/942", "solution": "{\n  \"name\": \"generate_date_range\",\n  \"type\": \"function\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', unit=None, **kwargs) -> DatetimeIndex\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Generates a fixed frequency DatetimeIndex with customizable parameters for start, end, periods, frequency, timezone, normalization, name, inclusive boundaries, and resolution unit.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateDateRange\", \"type\": \"callable\", \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', unit=None)\", \"return_type\": \"DatetimeIndex\", \"short_description\": \"Create a fixed frequency DatetimeIndex with the specified parameters.\"}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/942", "solution": "{\"name\": \"generateDateRange\", \"type\": \"callable\", \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', unit=None)\", \"return_type\": \"DatetimeIndex\", \"short_description\": \"Generate a fixed frequency DatetimeIndex with customizable parameters.\"}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/945", "solution": "{\n  \"name\": \"generate_date_range\",\n  \"type\": \"function\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Creates a fixed frequency DatetimeIndex with the specified parameters.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/945", "solution": "{\n  \"name\": \"generateDateRange\",\n  \"type\": \"function\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Creates a fixed frequency DatetimeIndex with the specified parameters.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/945", "solution": "{\n  \"name\": \"generate_date_range\",\n  \"type\": \"function\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Creates a fixed frequency DatetimeIndex with the specified parameters.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"createDateRange\", \"type\": \"function\", \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', unit=None)\", \"return_type\": \"DatetimeIndex\", \"short_description\": \"Creates a fixed frequency DatetimeIndex with the specified parameters.\"}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/945", "solution": "{\n  \"name\": \"generate_date_range\",\n  \"type\": \"function\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Create a fixed frequency DatetimeIndex with the specified parameters.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/945", "solution": "{\n  \"name\": \"generate_date_range\",\n  \"type\": \"callable\",\n  \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\",\n  \"return_type\": \"DatetimeIndex\",\n  \"short_description\": \"Create a fixed frequency DatetimeIndex with customizable parameters.\"\n}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"generateDateRange\", \"type\": \"callable\", \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', unit=None)\", \"return_type\": \"DatetimeIndex\", \"short_description\": \"Generates a fixed frequency DatetimeIndex with customizable options.\"}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"generateDateRange\", \"type\": \"function\", \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\", \"return_type\": \"DatetimeIndex\", \"short_description\": \"Generates a fixed frequency DatetimeIndex with specified parameters.\"}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"generateDateRange\", \"type\": \"callable\", \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\", \"return_type\": \"DatetimeIndex\", \"short_description\": \"Generates a fixed frequency DatetimeIndex with the specified parameters.\"}"}
{"api_id": 179, "api_name": "pandas.date_range", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"createDateRange\", \"type\": \"callable\", \"signature\": \"(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None)\", \"return_type\": \"DatetimeIndex\", \"short_description\": \"Create a fixed frequency DatetimeIndex with the specified parameters.\"}"}
{"api_id": 180, "api_name": "pandas.read_json", "task_id": "BigCodeBench/501", "solution": "{\n  \"name\": \"parseJsonData\",\n  \"type\": \"function\",\n  \"signature\": \"(jsonString: str, parseDates: bool = True, keepDefaultDates: bool = True, orient: str = 'columns', typ: str = 'frame', dtype: bool | dict = None, compression: str | dict = 'infer', engine: str = 'ujson') -> pd.DataFrame | pd.Series\",\n  \"return_type\": \"pd.DataFrame | pd.Series\",\n  \"short_description\": \"Parses a JSON string into a pandas DataFrame or Series based on the specified parameters.\"\n}"}
{"api_id": 180, "api_name": "pandas.read_json", "task_id": "BigCodeBench/501", "solution": "{\n  \"name\": \"parseJson\",\n  \"type\": \"callable\",\n  \"signature\": \"(jsonString: 'str', *, type: 'Literal[\\'frame\\', \\'series\\']' = 'frame') -> 'DataFrame | Series'\",\n  \"return_type\": \"DataFrame | Series\",\n  \"short_description\": \"Converts a JSON string to a pandas DataFrame or Series.\"\n}"}
{"api_id": 180, "api_name": "pandas.read_json", "task_id": "BigCodeBench/501", "solution": "{\n  \"name\": \"parseJson\",\n  \"type\": \"function\",\n  \"signature\": \"(jsonString: str, options: dict = None) -> dict\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Parses a JSON string into a dictionary with specified options.\"\n}"}
{"api_id": 180, "api_name": "pandas.read_json", "task_id": "BigCodeBench/501", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(jsonString: str, options: dict = None) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Parses a JSON string into a pandas DataFrame. Provides options to customize the parsing process.\"}"}
{"api_id": 180, "api_name": "pandas.read_json", "task_id": "BigCodeBench/501", "solution": "{\n  \"name\": \"loadJsonData\",\n  \"type\": \"function\",\n  \"signature\": \"(jsonStr: 'str | bytes', *, orient: 'str | None' = None, typ: 'Literal[\\'frame\\', \\'series\\']' = 'frame', dtype: 'DtypeArg | None' = None, convert_axes=None, convert_dates: 'bool | list[str]' = True, keep_default_dates: 'bool' = True, precise_float: 'bool' = False, date_unit: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', lines: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', nrows: 'int | None' = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | Series'\",\n  \"return_type\": \"DataFrame | Series\",\n  \"short_description\": \"Load JSON data into a DataFrame or Series.\"\n}"}
{"api_id": 180, "api_name": "pandas.read_json", "task_id": "BigCodeBench/501", "solution": "{\n  \"name\": \"parseJson\",\n  \"type\": \"function\",\n  \"signature\": \"(jsonStr: str, options: dict = None) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Parses a JSON string into a pandas DataFrame, providing options for customization.\"\n}"}
{"api_id": 180, "api_name": "pandas.read_json", "task_id": "BigCodeBench/501", "solution": "{\n  \"name\": \"readJsonData\",\n  \"type\": \"function\",\n  \"signature\": \"(jsonStr: 'str | bytes | bytearray', *, orient: 'str | None' = None, typ: 'Literal[\\'frame\\', \\'series\\']' = 'frame', dtype: 'DtypeArg | None' = None, convert_axes=None, convert_dates: 'bool | list[str]' = True, keep_default_dates: 'bool' = True, precise_float: 'bool' = False, date_unit: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', lines: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', nrows: 'int | None' = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>, engine: 'JSONEngine' = 'ujson') -> 'DataFrame | Series'\",\n  \"return_type\": \"DataFrame | Series\",\n  \"short_description\": \"Convert a JSON string to a pandas object.\"\n}"}
{"api_id": 180, "api_name": "pandas.read_json", "task_id": "BigCodeBench/501", "solution": "{\n  \"name\": \"readJsonData\",\n  \"type\": \"function\",\n  \"signature\": \"(json_str: str, *, orient: str = 'columns', typ: str = 'frame', dtype: str = None, convert_dates: bool = True, keep_default_dates: bool = True, precise_float: bool = False, date_unit: str = None, encoding: str = 'utf-8', encoding_errors: str = 'strict', lines: bool = False, chunksize: int = None, compression: str = 'infer', nrows: int = None, storage_options: dict = None, dtype_backend: str = 'numpy_nullable', engine: str = 'ujson') -> 'pd.DataFrame | pd.Series'\",\n  \"return_type\": \"pd.DataFrame | pd.Series\",\n  \"short_description\": \"Converts a JSON string to a pandas DataFrame or Series.\"\n}"}
{"api_id": 180, "api_name": "pandas.read_json", "task_id": "BigCodeBench/501", "solution": "{\"name\": \"parseJsonData\", \"type\": \"callable\", \"signature\": \"(jsonStr: 'str | bytes', *, orient: 'str | None' = 'columns', typ: 'Literal[\\'frame\\', \\'series\\']' = 'frame', dtype: 'DtypeArg | None' = None, convert_axes=None, convert_dates: 'bool | list[str]' = True, keep_default_dates: 'bool' = True, precise_float: 'bool' = False, date_unit: 'str | None' = None, encoding: 'str | None' = 'utf-8', encoding_errors: 'str | None' = 'strict', lines: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', nrows: 'int | None' = None, storage_options: 'StorageOptions' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | Series'\", \"return_type\": \"DataFrame | Series\", \"short_description\": \"Converts a JSON string to a pandas DataFrame or Series.\"}"}
{"api_id": 180, "api_name": "pandas.read_json", "task_id": "BigCodeBench/501", "solution": "{\n  \"name\": \"parseJson\",\n  \"type\": \"callable\",\n  \"signature\": \"(json_str: \\'str | bytes | bytearray\\', *, orient: \\'str | None\\' = None, typ: \\'Literal[\\'frame\\', \\'series\\']\\' = \\'frame\\', dtype: \\'DtypeArg | None\\' = None, convert_axes=None, convert_dates: \\'bool | list[str]\\' = True, keep_default_dates: \\'bool\\' = True, precise_float: \\'bool\\' = False, date_unit: \\'str | None\\' = None, encoding: \\'str | None\\' = None, encoding_errors: \\'str | None\\' = \\'strict\\', lines: \\'bool\\' = False, chunksize: \\'int | None\\' = None, compression: \\'CompressionOptions\\' = \\'infer\\', nrows: \\'int | None\\' = None, storage_options: \\'StorageOptions\\' = None, dtype_backend: \\'DtypeBackend | lib.NoDefault\\' = <no_default>, engine: \\'JSONEngine\\' = \\'ujson\\') -> \\'DataFrame | Series\\'\",\n  \"return_type\": \"DataFrame | Series\",\n  \"short_description\": \"Convert a JSON string to a pandas DataFrame or Series based on the specified orientation and type.\"\n}"}
{"api_id": 181, "api_name": "pandas.Timestamp.timestamp", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"convertToTimestamp\", \"type\": \"function\", \"signature\": \"convertToTimestamp(dateColumn: pd.Series) -> pd.Series\", \"return_type\": \"pd.Series\", \"short_description\": \"Converts a pandas Series of dates to a Series of POSIX timestamps.\"}"}
{"api_id": 181, "api_name": "pandas.Timestamp.timestamp", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"convertToTimestamp\", \"type\": \"method\", \"signature\": \"timestamp()\", \"return_type\": \"float\", \"short_description\": \"Converts a pandas Timestamp to a POSIX timestamp as float.\"}"}
{"api_id": 181, "api_name": "pandas.Timestamp.timestamp", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"convertToTimestamp\", \"type\": \"function\", \"signature\": \"(dateColumn: pd.Series) -> pd.Series\", \"return_type\": \"pd.Series\", \"short_description\": \"Converts a pandas Series of dates to a Series of POSIX timestamps.\"}"}
{"api_id": 181, "api_name": "pandas.Timestamp.timestamp", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"convertToTimestamp\", \"type\": \"method\", \"signature\": \"pd.Timestamp(date_str)\", \"return_type\": \"float\", \"short_description\": \"Converts a date string to a POSIX timestamp as float.\"}"}
{"api_id": 181, "api_name": "pandas.Timestamp.timestamp", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"convertToTimestamp\", \"type\": \"function\", \"signature\": \"df, date_column\", \"return_type\": \"pd.Series\", \"short_description\": \"Converts a given date column in a DataFrame to POSIX timestamps.\"}"}
{"api_id": 181, "api_name": "pandas.Timestamp.timestamp", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"convertToPOSIX\", \"type\": \"method\", \"signature\": \"df['date']\", \"return_type\": \"np.ndarray\", \"short_description\": \"Converts a pandas datetime series to a POSIX timestamp array.\"}"}
{"api_id": 181, "api_name": "pandas.Timestamp.timestamp", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"convertDateToTimestamp\", \"type\": \"function\", \"signature\": \"convert_date_to_timestamp(date_series)\", \"return_type\": \"list\", \"short_description\": \"Converts a series of dates to their POSIX timestamps.\"}"}
{"api_id": 181, "api_name": "pandas.Timestamp.timestamp", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"convertToTimestamp\", \"type\": \"method\", \"signature\": \"convertToTimestamp(date: pd.Timestamp) -> float\", \"return_type\": \"float\", \"short_description\": \"Converts a pandas Timestamp to a POSIX timestamp as float.\"}"}
{"api_id": 181, "api_name": "pandas.Timestamp.timestamp", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"convertToTimestamp\", \"type\": \"function\", \"signature\": \"convertToTimestamp(dateColumn: pd.Series) -> pd.Series\", \"return_type\": \"pd.Series\", \"short_description\": \"Converts a pandas Series of dates to a Series of POSIX timestamps.\"}"}
{"api_id": 181, "api_name": "pandas.Timestamp.timestamp", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"convertToTimestamp\", \"type\": \"method\", \"signature\": \"convertToTimestamp(date: datetime) -> float\", \"return_type\": \"float\", \"short_description\": \"Converts a given datetime object to a POSIX timestamp.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in a specified directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"createDirectoryIfNotExists\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"bool\", \"short_description\": \"Creates a directory if it does not exist at the given path.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in the specified directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in a given directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in a specified directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"copyFilesToDirectory\", \"type\": \"function\", \"signature\": \"(sourceFiles, targetDirectory)\", \"return_type\": \"list\", \"short_description\": \"Copies the specified files to the target directory and returns a list of the copied file paths.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"createDirIfNotExists\", \"type\": \"function\", \"signature\": \"(dir_path)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory at the specified path if it does not already exist.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of file paths within the specified directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"copyFiles\", \"type\": \"function\", \"signature\": \"(sourcePaths, destinationDir)\", \"return_type\": \"list\", \"short_description\": \"Copies files from the source paths to a specified destination directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"listFilesInDirectory\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in a specified directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"generateUniquePrefixes\", \"type\": \"function\", \"signature\": \"(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\", \"return_type\": \"list\", \"short_description\": \"Extracts unique prefixes from filenames matching a given pattern in a specified directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/771", "solution": "{\n  \"name\": \"listFilesWithPrefix\",\n  \"type\": \"function\",\n  \"signature\": \"(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Lists and renames files in a directory based on a given pattern.\"\n}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/771", "solution": "{\n  \"name\": \"listFilesWithPrefix\",\n  \"type\": \"function\",\n  \"signature\": \"(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Lists files in a directory that match a specific pattern and creates new CSV files with the prefix of the original filenames.\"\n}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"listFilesWithPrefix\", \"type\": \"function\", \"signature\": \"(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\", \"return_type\": \"list\", \"short_description\": \"Lists and renames CSV files in a directory based on a given pattern.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"listFilesByPrefix\", \"type\": \"function\", \"signature\": \"(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\", \"return_type\": \"list\", \"short_description\": \"Lists and renames CSV files in a directory based on a given pattern.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"resolveFilePaths\", \"type\": \"function\", \"signature\": \"(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\", \"return_type\": \"list[str]\", \"short_description\": \"Resolves and processes CSV files in a directory based on a given pattern, copying data between files.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"listFilesByPattern\", \"type\": \"function\", \"signature\": \"(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\", \"return_type\": \"list\", \"short_description\": \"Lists and renames CSV files in a directory based on a given pattern.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/771", "solution": "{\n  \"name\": \"listFilesWithPrefix\",\n  \"type\": \"function\",\n  \"signature\": \"(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Lists and renames CSV files in a directory based on a regex pattern.\"\n}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"listFilesByPattern\", \"type\": \"function\", \"signature\": \"(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\", \"return_type\": \"list[str]\", \"short_description\": \"Lists files in a directory that match a specified pattern and renames them by replacing the numeric suffix.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"generateUniqueFileName\", \"type\": \"function\", \"signature\": \"(prefix: str, extension: str)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique file name by appending a timestamp to the given prefix.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, zipName)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive from files in the specified source directory and saves it to the target directory with the given name.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"createZipFromDirectory\", \"type\": \"function\", \"signature\": \"(sourceDirectory, targetDirectory, zipName)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip file from the contents of a specified directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, zipName)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive containing files with specified extensions from a source directory and saves it to a target directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"createZipFromDirectory\", \"type\": \"function\", \"signature\": \"(sourceDirectory, targetDirectory, zipName)\", \"return_type\": \"str\", \"short_description\": \"Creates a ZIP file from the contents of a specified directory and returns the path to the created ZIP file.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, zipName)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive containing all files with specified extensions from the source directory and saves it to the target directory with the given zip name.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"createZipFromDirectory\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, zipName)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive from the contents of a specified directory and returns the path to the created zip file.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, zipName)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive from files in the specified source directory and saves it to the target directory with the given zip name.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"generateZipArchive\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, zipName)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive from files in the specified source directory and saves it to the target directory with the given zip name.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, zipName)\", \"return_type\": \"str\", \"short_description\": \"Creates a ZIP archive containing files with specified extensions from the source directory and saves it to the target directory. Returns the absolute path of the created ZIP file.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, zipName)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive from files in the source directory and saves it to the target directory with the specified name.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convertFiles\", \"type\": \"function\", \"signature\": \"(sourceDir: str, targetDir: str)\", \"return_type\": \"int\", \"short_description\": \"Converts files from various formats to CSV and saves them in a target directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"convertFiles\",\n  \"type\": \"function\",\n  \"signature\": \"(sourceDir: str, targetDir: str) -> int\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Converts files from various formats to CSV and saves them in a target directory.\"\n}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/964", "solution": "{\n  \"name\": \"convertFiles\",\n  \"type\": \"function\",\n  \"signature\": \"(sourceDirectory, targetDirectory)\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Converts files of specific types from a source directory to CSV format and saves them in a target directory.\"\n}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convertFiles\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir)\", \"return_type\": \"int\", \"short_description\": \"Converts files in a directory to CSV format.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convertFiles\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir)\", \"return_type\": \"int\", \"short_description\": \"Converts files in a source directory to CSV format and saves them in a target directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convertFiles\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir)\", \"return_type\": \"int\", \"short_description\": \"Converts files in a directory from various formats to CSV format.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convertFiles\", \"type\": \"function\", \"signature\": \"(sourceDir: str, targetDir: str)\", \"return_type\": \"int\", \"short_description\": \"Converts files from various formats to CSV and saves them in a target directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convertFiles\", \"type\": \"function\", \"signature\": \"(sourceDirectory, targetDirectory)\", \"return_type\": \"int\", \"short_description\": \"Converts files from various formats to CSV and saves them to a target directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convertFiles\", \"type\": \"function\", \"signature\": \"(sourceDir: str, targetDir: str)\", \"return_type\": \"int\", \"short_description\": \"Converts files in a source directory to CSV format and saves them in a target directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/964", "solution": "{\"name\": \"convertFiles\", \"type\": \"function\", \"signature\": \"(sourceDir: str, targetDir: str) => int\", \"return_type\": \"int\", \"short_description\": \"Converts files from various formats to CSV and saves them in a target directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"listDirectoryFiles\", \"type\": \"function\", \"signature\": \"(directoryPath: str)\", \"return_type\": \"list[tuple[str, int, str, str]]\", \"short_description\": \"Lists details of files in a given directory, including file names, sizes, creation times, and modification times.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"listDirectoryDetails\", \"type\": \"function\", \"signature\": \"(directoryPath: str)\", \"return_type\": \"list\", \"short_description\": \"Returns detailed information about files in a specified directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"listDirectoryFiles\", \"type\": \"function\", \"signature\": \"(directoryPath: str)\", \"return_type\": \"List[Tuple[str, int, str, str]]\", \"short_description\": \"Lists details of files in a given directory, including file names, sizes, creation times, and modification times.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"getDirectoryFiles\", \"type\": \"function\", \"signature\": \"(directoryPath: str)\", \"return_type\": \"list\", \"short_description\": \"Retrieves detailed information about files in a specified directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"listDirectoryFiles\", \"type\": \"function\", \"signature\": \"(directoryPath: str)\", \"return_type\": \"List[Tuple[str, int, str, str]]\", \"short_description\": \"Lists detailed information about files in a given directory, including their names, sizes, creation times, and modification times.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"listDirectoryFiles\", \"type\": \"function\", \"signature\": \"(directoryPath: str)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of details for files in the specified directory, including file names, sizes, creation times, and modification times.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"listDirectoryFiles\", \"type\": \"function\", \"signature\": \"(directoryPath: str)\", \"return_type\": \"list\", \"short_description\": \"Lists details of files in a directory, including file names, sizes, creation times, and modification times.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"listDirectoryFiles\", \"type\": \"function\", \"signature\": \"(directoryPath: str)\", \"return_type\": \"List[Tuple[str, int, str, str]]\", \"short_description\": \"Lists details of files in a specified directory, including file names, sizes, creation times, and modification times.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"getDirectoryFiles\", \"type\": \"function\", \"signature\": \"(directoryPath: str)\", \"return_type\": \"list\", \"short_description\": \"Retrieves detailed information about files in a given directory, including their names, sizes, creation times, and modification times.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/971", "solution": "{\"name\": \"listDirectoryFiles\", \"type\": \"function\", \"signature\": \"(directoryPath: str)\", \"return_type\": \"List[Tuple[str, int, str, str]]\", \"short_description\": \"Retrieves detailed information about files in a specified directory, including their names, sizes, creation times, and modification times.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"listFilesWithPredicates\", \"type\": \"function\", \"signature\": \"(dir_path: str, predicates: list) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Lists files in a directory and applies a set of predicates to each file.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"listDirectoryFiles\", \"type\": \"function\", \"signature\": \"(dir_path: str)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in the specified directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"getDirectoryDetails\", \"type\": \"function\", \"signature\": \"(directoryPath, predicates)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about files and directories within a specified directory, based on a list of predicates.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"listDirectoryContents\", \"type\": \"function\", \"signature\": \"(directoryPath: str)\", \"return_type\": \"dict\", \"short_description\": \"Lists the contents of a directory, including file properties such as being a file or directory, and checks for special characters and numbers in filenames.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"listDirectoryContents\", \"type\": \"function\", \"signature\": \"(dir_path: str)\", \"return_type\": \"list\", \"short_description\": \"Lists the contents of a directory, providing detailed information about each item.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"listDirectoryContents\", \"type\": \"function\", \"signature\": \"(dir_path: str, predicates: list)\", \"return_type\": \"dict\", \"short_description\": \"Lists the contents of a directory and applies a set of predicates to each item.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"listDirectoryFiles\", \"type\": \"function\", \"signature\": \"(directory_path: str)\", \"return_type\": \"list\", \"short_description\": \"Lists all files in the specified directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"listDirectoryContents\", \"type\": \"function\", \"signature\": \"(directory_path, predicates)\", \"return_type\": \"dict\", \"short_description\": \"Lists the contents of a directory and applies a set of predicates to each item, returning a dictionary with the results.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"listFilesAndDirs\", \"type\": \"function\", \"signature\": \"(directory_path: str)\", \"return_type\": \"list\", \"short_description\": \"Lists all files and directories within the specified directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"listDirectoryContents\", \"type\": \"function\", \"signature\": \"(dir_path: str)\", \"return_type\": \"dict\", \"short_description\": \"Lists the contents of a directory, applying a set of predicates to each item.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"fetchAndExtract\", \"type\": \"function\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple\", \"short_description\": \"Downloads a file from a given URL and extracts it to a specified directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"downloadAndUnzip\", \"type\": \"function\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple\", \"short_description\": \"Downloads a file from a given URL and extracts it to a specified directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"fetchAndUnzip\", \"type\": \"function\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple\", \"short_description\": \"Downloads a file from a given URL and extracts it to a specified directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"downloadAndUnzipFile\", \"type\": \"function\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple[str, list[str]]\", \"short_description\": \"Downloads a file from a given URL and extracts it to a specified directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"fetchAndUnzipFile\", \"type\": \"function\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple\", \"short_description\": \"Downloads a file from a given URL and extracts its contents into a specified directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"downloadFile\", \"type\": \"function\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple\", \"short_description\": \"Downloads a file from a given URL and saves it with the specified filename.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"downloadAndUnzip\", \"type\": \"function\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple[str, list[str]]\", \"short_description\": \"Downloads a file from a given URL and extracts its contents into a specified directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"downloadAndUnzip\", \"type\": \"function\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple\", \"short_description\": \"Downloads a file from a given URL and unzips it to a specified directory.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"fetchAndUnzipFile\", \"type\": \"function\", \"signature\": \"(url, filename, downloadDir, zipDir)\", \"return_type\": \"tuple[str, list[str]]\", \"short_description\": \"Downloads a file from a given URL and extracts its contents into a specified directory. Returns a tuple containing a status message and a list of extracted file names.\"}"}
{"api_id": 182, "api_name": "pathlib.Path", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"fetchAndUnzip\", \"type\": \"function\", \"signature\": \"(url: str, filename: str)\", \"return_type\": \"Tuple[str, List[str]]\", \"short_description\": \"Downloads a file from a given URL and extracts its contents into a specified directory.\"}"}
{"api_id": 183, "api_name": "psutil.ZombieProcess", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"fetch_process_info\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about a running process given its PID.\"}"}
{"api_id": 183, "api_name": "psutil.ZombieProcess", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"get_process_info\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about a process with the given PID.\"}"}
{"api_id": 183, "api_name": "psutil.ZombieProcess", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"get_process_info\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about a process with the given PID.\"}"}
{"api_id": 183, "api_name": "psutil.ZombieProcess", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"get_process_status\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the current status of a process given its PID. Includes CPU and memory usage if the process is still running.\"}"}
{"api_id": 183, "api_name": "psutil.ZombieProcess", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"fetch_process_info\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about a process with the given PID.\"}"}
{"api_id": 183, "api_name": "psutil.ZombieProcess", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"fetch_process_info\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about a process with the given PID.\"}"}
{"api_id": 183, "api_name": "psutil.ZombieProcess", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"fetch_process_resources\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Fetches the CPU and memory usage of a process given its PID.\"}"}
{"api_id": 183, "api_name": "psutil.ZombieProcess", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"get_process_status\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the current status of a process with the given PID. The status includes CPU and memory usage if the process is still running, or an error message if the process no longer exists or is a zombie process.\"}"}
{"api_id": 183, "api_name": "psutil.ZombieProcess", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"fetch_process_info\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about a process with the given PID.\"}"}
{"api_id": 183, "api_name": "psutil.ZombieProcess", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"get_process_status\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the current status of a process with the given PID. The status includes CPU and memory usage if the process is still running.\"}"}
{"api_id": 184, "api_name": "psutil.NoSuchProcess", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"getProcessStats\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the CPU and memory usage statistics of a process with the given PID.\"}"}
{"api_id": 184, "api_name": "psutil.NoSuchProcess", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"get_process_status\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the current status of a process with the given PID.\"}"}
{"api_id": 184, "api_name": "psutil.NoSuchProcess", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"getProcessStats\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the CPU and memory usage statistics of a process given its PID.\"}"}
{"api_id": 184, "api_name": "psutil.NoSuchProcess", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"getProcessStats\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the CPU and memory usage statistics of a process with the given PID.\"}"}
{"api_id": 184, "api_name": "psutil.NoSuchProcess", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"getProcessStats\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the CPU and memory usage statistics of a process given its PID.\"}"}
{"api_id": 184, "api_name": "psutil.NoSuchProcess", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"fetchProcessStats\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Fetches CPU and memory usage statistics for a process with the given PID.\"}"}
{"api_id": 184, "api_name": "psutil.NoSuchProcess", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"fetchProcessInfo\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about a process with the given PID.\"}"}
{"api_id": 184, "api_name": "psutil.NoSuchProcess", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"fetchProcessStats\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Fetches the CPU and memory usage statistics of a process given its PID.\"}"}
{"api_id": 184, "api_name": "psutil.NoSuchProcess", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"getProcessStats\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves CPU and memory usage statistics of a process given its PID.\"}"}
{"api_id": 184, "api_name": "psutil.NoSuchProcess", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"fetchProcessStats\", \"type\": \"function\", \"signature\": \"(pid, timeout=10)\", \"return_type\": \"dict\", \"short_description\": \"Fetches the CPU and memory usage statistics of a process with the given PID for a specified timeout period.\"}"}
{"api_id": 185, "api_name": "psutil.process_iter", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"get_process_info\", \"type\": \"function\", \"signature\": \"(process_name: str)\", \"return_type\": \"dict\", \"short_description\": \"Retrieve detailed information about a specific process by name.\"}"}
{"api_id": 185, "api_name": "psutil.process_iter", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"get_process_info\", \"type\": \"function\", \"signature\": \"(process_name: str)\", \"return_type\": \"dict\", \"short_description\": \"Retrieve detailed information about a specific process by name.\"}"}
{"api_id": 185, "api_name": "psutil.process_iter", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"get_process_status\", \"type\": \"function\", \"signature\": \"(process_name: str)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the status of a process by name, including whether it is running and other relevant details.\"}"}
{"api_id": 185, "api_name": "psutil.process_iter", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"get_system_info\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed system information including CPU, memory, disks, and network stats.\"}"}
{"api_id": 185, "api_name": "psutil.process_iter", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"get_system_info\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"dict\", \"short_description\": \"Retrieve detailed system information such as CPU, memory, disks, and network usage.\"}"}
{"api_id": 185, "api_name": "psutil.process_iter", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"get_process_status\", \"type\": \"function\", \"signature\": \"(process_name: str)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the current status of a process by name.\"}"}
{"api_id": 185, "api_name": "psutil.process_iter", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"get_process_info\", \"type\": \"function\", \"signature\": \"(process_name: str)\", \"return_type\": \"dict\", \"short_description\": \"Retrieve detailed information about a specific process by name.\"}"}
{"api_id": 185, "api_name": "psutil.process_iter", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"get_process_info\", \"type\": \"function\", \"signature\": \"(process_name: str)\", \"return_type\": \"dict\", \"short_description\": \"Retrieve detailed information about a specific process by name.\"}"}
{"api_id": 185, "api_name": "psutil.process_iter", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"get_system_info\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"dict\", \"short_description\": \"Retrieve detailed system information including CPU, memory, disks, and network stats.\"}"}
{"api_id": 185, "api_name": "psutil.process_iter", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"check_process_status\", \"type\": \"function\", \"signature\": \"(process_name: str)\", \"return_type\": \"str\", \"short_description\": \"Checks if a process is running and returns a message indicating whether it was found and what action was taken.\"}"}
{"api_id": 186, "api_name": "psutil.Process", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"getProcessDetails\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about a process with the given PID.\"}"}
{"api_id": 186, "api_name": "psutil.Process", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"getProcessInfo\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about the process with the given PID.\"}"}
{"api_id": 186, "api_name": "psutil.Process", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"getProcessInfo\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about a process with the given PID.\"}"}
{"api_id": 186, "api_name": "psutil.Process", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"getProcessStats\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the CPU and memory usage statistics of a process with the given PID.\"}"}
{"api_id": 186, "api_name": "psutil.Process", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"getProcessInfo\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about the process with the given PID.\"}"}
{"api_id": 186, "api_name": "psutil.Process", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"fetchProcessInfo\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Fetches detailed information about a process with the given PID.\"}"}
{"api_id": 186, "api_name": "psutil.Process", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"getProcessInfo\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about the process with the given PID.\"}"}
{"api_id": 186, "api_name": "psutil.Process", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"getProcessInfo\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about a process with the given PID.\"}"}
{"api_id": 186, "api_name": "psutil.Process", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"fetchProcessStats\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the CPU and memory usage statistics of a process with the given PID.\"}"}
{"api_id": 186, "api_name": "psutil.Process", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"fetchProcessInfo\", \"type\": \"function\", \"signature\": \"(pid)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about a process with the given PID.\"}"}
{"api_id": 187, "api_name": "pyquery.PyQuery", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"fetchHtmlContent\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"dict\", \"short_description\": \"Fetches HTML content from a given URL and returns it as a dictionary with keys 'html' and 'fetch_time'.\"}"}
{"api_id": 187, "api_name": "pyquery.PyQuery", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"fetchHtmlContent\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"dict\", \"short_description\": \"Fetches HTML content from a given URL and returns it as a dictionary with 'html' and 'fetch_time' keys.\"}"}
{"api_id": 187, "api_name": "pyquery.PyQuery", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"fetchHtmlContent\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"dict\", \"short_description\": \"Fetches HTML content from a given URL and returns it as a dictionary.\"}"}
{"api_id": 187, "api_name": "pyquery.PyQuery", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"fetchHtmlData\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"DataFrame\", \"short_description\": \"Fetches HTML data from the given URL and returns it as a DataFrame.\"}"}
{"api_id": 187, "api_name": "pyquery.PyQuery", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"fetchHtmlContent\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"dict\", \"short_description\": \"Fetches HTML content from a given URL and returns a dictionary with parsed data.\"}"}
{"api_id": 187, "api_name": "pyquery.PyQuery", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"fetchHtmlContent\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"dict\", \"short_description\": \"Fetches HTML content from a given URL and returns it as a dictionary with 'html' key.\"}"}
{"api_id": 187, "api_name": "pyquery.PyQuery", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"fetchHtmlContent\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"dict\", \"short_description\": \"Fetches HTML content from a given URL and returns it as a dictionary with 'html' and 'fetch_time' keys.\"}"}
{"api_id": 187, "api_name": "pyquery.PyQuery", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"fetchHtmlData\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches HTML data from the given URL and returns it as a DataFrame.\"}"}
{"api_id": 187, "api_name": "pyquery.PyQuery", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"fetchHtmlContent\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"dict\", \"short_description\": \"Fetches HTML content from a given URL and returns it as a dictionary with 'html' key.\"}"}
{"api_id": 187, "api_name": "pyquery.PyQuery", "task_id": "BigCodeBench/590", "solution": "{\"name\": \"fetchHtmlData\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"DataFrame\", \"short_description\": \"Fetches HTML data from the given URL and returns it as a DataFrame.\"}"}
{"api_id": 188, "api_name": "pytesseract.image_to_string", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"extract_text_from_image\", \"type\": \"callable\", \"signature\": \"(image, language=None, configuration='', timeout=0)\", \"return_type\": \"str\", \"short_description\": \"Extracts text from an image using OCR.\"}"}
{"api_id": 188, "api_name": "pytesseract.image_to_string", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"extract_text_from_image\", \"type\": \"callable\", \"signature\": \"(image, language=None, config='', timeout=0)\", \"return_type\": \"str\", \"short_description\": \"Extracts text from an image using OCR (Optical Character Recognition).\"}"}
{"api_id": 188, "api_name": "pytesseract.image_to_string", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"extractTextFromImage\", \"type\": \"callable\", \"signature\": \"(image, lang=None, config='', nice=0, output_type='string', timeout=0)\", \"return_type\": \"str\", \"short_description\": \"Extracts text from the provided image using Tesseract OCR.\"}"}
{"api_id": 188, "api_name": "pytesseract.image_to_string", "task_id": "BigCodeBench/1019", "solution": "{\n  \"name\": \"extract_text_from_image\",\n  \"type\": \"callable\",\n  \"signature\": \"(image, lang=None, config='', nice=0, output_type='string', timeout=0)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Performs OCR on the provided image and returns the extracted text.\"\n}"}
{"api_id": 188, "api_name": "pytesseract.image_to_string", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"extract_text_from_image\", \"type\": \"callable\", \"signature\": \"(image, language=None, configuration='', timeout=0)\", \"return_type\": \"str\", \"short_description\": \"Extracts and returns text from an image using OCR.\"}"}
{"api_id": 188, "api_name": "pytesseract.image_to_string", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"extract_text_from_image\", \"type\": \"callable\", \"signature\": \"(image, language=None, config='', timeout=0)\", \"return_type\": \"str\", \"short_description\": \"Extracts text from an image using OCR and returns it as a string.\"}"}
{"api_id": 188, "api_name": "pytesseract.image_to_string", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"extract_text_from_image\", \"type\": \"callable\", \"signature\": \"(image, lang=None, config='', nice=0, timeout=0)\", \"return_type\": \"str\", \"short_description\": \"Extracts text from an image using OCR (Optical Character Recognition).\"}"}
{"api_id": 188, "api_name": "pytesseract.image_to_string", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"extract_text_from_image\", \"type\": \"callable\", \"signature\": \"(image, lang=None, config='', nice=0, timeout=0)\", \"return_type\": \"str\", \"short_description\": \"Extracts text from an image using OCR (Optical Character Recognition).\"}"}
{"api_id": 188, "api_name": "pytesseract.image_to_string", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"extract_text_from_image\", \"type\": \"callable\", \"signature\": \"(image, language=None, configuration='', timeout=0)\", \"return_type\": \"str\", \"short_description\": \"Extracts text from an image using OCR (Optical Character Recognition).\"}"}
{"api_id": 188, "api_name": "pytesseract.image_to_string", "task_id": "BigCodeBench/1019", "solution": "{\"name\": \"extract_text_from_image\", \"type\": \"callable\", \"signature\": \"(image, lang=None, config='', nice=0, output_type='string', timeout=0)\", \"return_type\": \"string\", \"short_description\": \"Extracts text from an image using OCR.\"}"}
{"api_id": 189, "api_name": "pytz.UTC", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"getUTCTime\", \"type\": \"function\", \"signature\": \"getUTCTime(dateTimeStr: str, timezoneStr: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Converts a given datetime string to a datetime object in UTC, then converts it to the specified timezone.\"}"}
{"api_id": 189, "api_name": "pytz.UTC", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"getCurrentTime\", \"type\": \"function\", \"signature\": \"getCurrentTime()\", \"return_type\": \"datetime\", \"short_description\": \"Returns the current time in UTC.\"}"}
{"api_id": 189, "api_name": "pytz.UTC", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"getWorldTimeZones\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"list\", \"short_description\": \"Returns a list of all available time zones in the world.\"}"}
{"api_id": 189, "api_name": "pytz.UTC", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"getUTCTime\", \"type\": \"function\", \"signature\": \"getUTCTime(datetime_obj)\", \"return_type\": \"datetime\", \"short_description\": \"Converts a given datetime object to UTC time.\"}"}
{"api_id": 189, "api_name": "pytz.UTC", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"getTimeZones\", \"type\": \"function\", \"signature\": \"getTimeZones()\", \"return_type\": \"list\", \"short_description\": \"Retrieves a list of all available time zones.\"}"}
{"api_id": 189, "api_name": "pytz.UTC", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"getUTCTime\", \"type\": \"function\", \"signature\": \"getUTCTime(datetime_obj)\", \"return_type\": \"datetime\", \"short_description\": \"Converts a datetime object to UTC.\"}"}
{"api_id": 189, "api_name": "pytz.UTC", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"getCurrentTime\", \"type\": \"function\", \"signature\": \"getCurrentTime(timezone: str) -> datetime\", \"return_type\": \"datetime\", \"short_description\": \"Returns the current time in the specified timezone.\"}"}
{"api_id": 189, "api_name": "pytz.UTC", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"getUTCTime\", \"type\": \"function\", \"signature\": \"getUTCTime(datetime_obj)\", \"return_type\": \"datetime\", \"short_description\": \"Converts a datetime object to UTC timezone.\"}"}
{"api_id": 189, "api_name": "pytz.UTC", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"getTimeZoneInfo\", \"type\": \"function\", \"signature\": \"getTimeZoneInfo(timezone: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about a given timezone.\"}"}
{"api_id": 189, "api_name": "pytz.UTC", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"getCurrentTime\", \"type\": \"function\", \"signature\": \"getCurrentTime()\", \"return_type\": \"str\", \"short_description\": \"Returns the current time as a string in the format 'YYYY-MM-DD HH:MM:SS'.\"}"}
{"api_id": 190, "api_name": "pytz.timezone", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"getTimeZoneInfo\", \"type\": \"function\", \"signature\": \"(zone)\", \"return_type\": \"datetime.tzinfo\", \"short_description\": \"Returns a datetime.tzinfo implementation for the given timezone.\"}"}
{"api_id": 190, "api_name": "pytz.timezone", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"getTimezoneInfo\", \"type\": \"function\", \"signature\": \"(city)\", \"return_type\": \"pytz.timezone\", \"short_description\": \"Retrieve the timezone information for a given city.\"}"}
{"api_id": 190, "api_name": "pytz.timezone", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"getCityTime\", \"type\": \"function\", \"signature\": \"(city, timezone)\", \"return_type\": \"datetime\", \"short_description\": \"Returns the local time in a specified city given its timezone.\"}"}
{"api_id": 190, "api_name": "pytz.timezone", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"getCityTime\", \"type\": \"function\", \"signature\": \"(city, utcDateTime)\", \"return_type\": \"datetime\", \"short_description\": \"Returns the local time in a given city based on the provided UTC datetime.\"}"}
{"api_id": 190, "api_name": "pytz.timezone", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"getCityTime\", \"type\": \"function\", \"signature\": \"(city, timezone)\", \"return_type\": \"datetime\", \"short_description\": \"Returns the local time in the specified city given its timezone.\"}"}
{"api_id": 190, "api_name": "pytz.timezone", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"getTimeZoneInfo\", \"type\": \"function\", \"signature\": \"(zoneString)\", \"return_type\": \"TimeZoneInfo\", \"short_description\": \"Returns detailed information about a timezone, including its name, UTC offset, and DST rules.\"}"}
{"api_id": 190, "api_name": "pytz.timezone", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"getTimeZone\", \"type\": \"function\", \"signature\": \"(zone)\", \"return_type\": \"datetime.tzinfo\", \"short_description\": \"Returns a datetime.tzinfo implementation for the given timezone.\"}"}
{"api_id": 190, "api_name": "pytz.timezone", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"getTimeZone\", \"type\": \"function\", \"signature\": \"(zone)\", \"return_type\": \"datetime.tzinfo\", \"short_description\": \"Retrieve a datetime.tzinfo object for the specified timezone.\"}"}
{"api_id": 190, "api_name": "pytz.timezone", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"getTimeZoneInfo\", \"type\": \"function\", \"signature\": \"(zone)\", \"return_type\": \"datetime.tzinfo\", \"short_description\": \"Returns a datetime.tzinfo implementation for the given timezone. This function does not use pytz but instead uses a hypothetical alternative library that provides similar functionality.\"}"}
{"api_id": 190, "api_name": "pytz.timezone", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"getTimeZoneInfo\", \"type\": \"function\", \"signature\": \"(zone)\", \"return_type\": \"datetime.tzinfo\", \"short_description\": \"Retrieve timezone information for a given zone.\"}"}
{"api_id": 190, "api_name": "pytz.timezone", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"getTimeZone\", \"type\": \"function\", \"signature\": \"(zone)\", \"return_type\": \"datetime.tzinfo\", \"short_description\": \"Retrieve a timezone object for the given zone name.\"}"}
{"api_id": 190, "api_name": "pytz.timezone", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"getPytzTimeZone\", \"type\": \"function\", \"signature\": \"(zone)\", \"return_type\": \"datetime.tzinfo\", \"short_description\": \"Retrieve a pytz timezone object for the specified zone.\"}"}
{"api_id": 190, "api_name": "pytz.timezone", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"getZoneInfo\", \"type\": \"function\", \"signature\": \"(zoneName)\", \"return_type\": \"datetime.tzinfo\", \"short_description\": \"Retrieves the timezone information for the given zone name.\"}"}
{"api_id": 190, "api_name": "pytz.timezone", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"getPytzTimezone\", \"type\": \"function\", \"signature\": \"(zoneName)\", \"return_type\": \"datetime.tzinfo\", \"short_description\": \"Returns a datetime.tzinfo object for the specified timezone.\"}"}
{"api_id": 190, "api_name": "pytz.timezone", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"getTimezone\", \"type\": \"function\", \"signature\": \"(zone)\", \"return_type\": \"datetime.tzinfo\", \"short_description\": \"Retrieve a timezone object for the specified zone.\"}"}
{"api_id": 190, "api_name": "pytz.timezone", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"getUTCTime\", \"type\": \"function\", \"signature\": \"(dateTime)\", \"return_type\": \"datetime\", \"short_description\": \"Converts a datetime object to UTC time.\"}"}
{"api_id": 190, "api_name": "pytz.timezone", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"getTimeZone\", \"type\": \"function\", \"signature\": \"(zone)\", \"return_type\": \"datetime.tzinfo\", \"short_description\": \"Returns a datetime.tzinfo object for the specified timezone. This function is used to get the timezone information for a given zone.\"}"}
{"api_id": 190, "api_name": "pytz.timezone", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"getDateTime\", \"type\": \"function\", \"signature\": \"(times, timezone)\", \"return_type\": \"list\", \"short_description\": \"Converts a list of time strings to a list of datetime objects in the specified timezone.\"}"}
{"api_id": 190, "api_name": "pytz.timezone", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"getDateTimeInformation\", \"type\": \"function\", \"signature\": \"(dateStr, timeZone)\", \"return_type\": \"datetime\", \"short_description\": \"Converts a date string to a datetime object in the specified timezone.\"}"}
{"api_id": 190, "api_name": "pytz.timezone", "task_id": "BigCodeBench/1077", "solution": "{\"name\": \"getPytzTimezone\", \"type\": \"function\", \"signature\": \"(zone)\", \"return_type\": \"datetime.tzinfo\", \"short_description\": \"Returns a datetime.tzinfo object for the specified timezone.\"}"}
{"api_id": 191, "api_name": "queue.Empty", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"fetchQueueEmptyException\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"dict\", \"short_description\": \"Retrieves information about the Queue.Empty exception.\"}"}
{"api_id": 191, "api_name": "queue.Empty", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"generateStatusReport\", \"type\": \"function\", \"signature\": \"generate_status_report(duration: int, address: str, port: int)\", \"return_type\": \"str\", \"short_description\": \"Generates a status report of the server's operation for a given duration.\"}"}
{"api_id": 191, "api_name": "queue.Empty", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"fetchQueueException\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"Exception\", \"short_description\": \"Raises an exception for a queue when it's empty.\"}"}
{"api_id": 191, "api_name": "queue.Empty", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"fetchQueueEmptyException\", \"type\": \"function\", \"signature\": \"() -> dict\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about the Queue.Empty exception.\"}"}
{"api_id": 191, "api_name": "queue.Empty", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"getQueueItem\", \"type\": \"function\", \"signature\": \"get_queue_item(queue)\", \"return_type\": \"str\", \"short_description\": \"Retrieves the next item from the specified queue without removing it.\"}"}
{"api_id": 191, "api_name": "queue.Empty", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"generate_report(data: dict, report_type: str)\", \"return_type\": \"dict\", \"short_description\": \"Generates a report based on the provided data and report type.\"}"}
{"api_id": 191, "api_name": "queue.Empty", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"getQueueEmptyException\", \"type\": \"function\", \"signature\": \"() -> str\", \"return_type\": \"str\", \"short_description\": \"Returns a string representation of the Queue.Empty exception, which is used to indicate that a queue operation failed because the queue was empty.\"}"}
{"api_id": 191, "api_name": "queue.Empty", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"generate_report(data: List[Dict[str, Any]], report_type: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a comprehensive report based on the provided data and report type.\"}"}
{"api_id": 191, "api_name": "queue.Empty", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"generate_report(data: List[Dict[str, Any]], report_type: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a detailed report from the provided data based on the specified report type.\"}"}
{"api_id": 191, "api_name": "queue.Empty", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"generateQueueReport\", \"type\": \"function\", \"signature\": \"generate_queue_report(queue_instance)\", \"return_type\": \"dict\", \"short_description\": \"Generates a report of the current state of the queue, including its size and contents.\"}"}
{"api_id": 192, "api_name": "queue.Queue", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createQueue\", \"type\": \"function\", \"signature\": \"(maxsize=0)\", \"return_type\": \"Queue\", \"short_description\": \"Creates a queue object with a given maximum size. If maxsize is <= 0, the queue size is infinite.\"}"}
{"api_id": 192, "api_name": "queue.Queue", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createQueue\", \"type\": \"function\", \"signature\": \"(maxsize=0)\", \"return_type\": \"Queue\", \"short_description\": \"Creates a queue object with a given maximum size. If maxsize is <= 0, the queue size is infinite.\"}"}
{"api_id": 192, "api_name": "queue.Queue", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createQueue\", \"type\": \"function\", \"signature\": \"(maxsize=0)\", \"return_type\": \"Queue\", \"short_description\": \"Create a queue object with a given maximum size.\\n\\nIf maxsize is <= 0, the queue size is infinite.\"}"}
{"api_id": 192, "api_name": "queue.Queue", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createQueue\", \"type\": \"function\", \"signature\": \"(maxsize=0)\", \"return_type\": \"Queue\", \"short_description\": \"Creates a queue object with a given maximum size. If maxsize is <= 0, the queue size is infinite.\"}"}
{"api_id": 192, "api_name": "queue.Queue", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createQueue\", \"type\": \"function\", \"signature\": \"(maxsize=0)\", \"return_type\": \"Queue\", \"short_description\": \"Create a queue object with a given maximum size. If maxsize is <= 0, the queue size is infinite.\"}"}
{"api_id": 192, "api_name": "queue.Queue", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createQueue\", \"type\": \"function\", \"signature\": \"(maxsize=0)\", \"return_type\": \"Queue\", \"short_description\": \"Creates a queue object with a given maximum size. If maxsize is <= 0, the queue size is infinite.\"}"}
{"api_id": 192, "api_name": "queue.Queue", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"(data, format)\", \"return_type\": \"str\", \"short_description\": \"Generates a report based on the provided data in the specified format.\"}"}
{"api_id": 192, "api_name": "queue.Queue", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createQueue\", \"type\": \"function\", \"signature\": \"(maxsize=0)\", \"return_type\": \"Queue\", \"short_description\": \"Create a queue object with a given maximum size. If maxsize is <= 0, the queue size is infinite.\"}"}
{"api_id": 192, "api_name": "queue.Queue", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createQueue\", \"type\": \"function\", \"signature\": \"(maxsize=0)\", \"return_type\": \"Queue\", \"short_description\": \"Creates a queue object with a given maximum size. If maxsize is <= 0, the queue size is infinite.\"}"}
{"api_id": 192, "api_name": "queue.Queue", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createQueue\", \"type\": \"function\", \"signature\": \"(maxsize=0)\", \"return_type\": \"Queue\", \"short_description\": \"Creates a queue object with a given maximum size. If maxsize is <= 0, the queue size is infinite.\"}"}
{"api_id": 193, "api_name": "random.sample", "task_id": "BigCodeBench/637", "solution": "{\n  \"name\": \"generate_random_student_grades\",\n  \"type\": \"function\",\n  \"signature\": \"(num_students, num_courses)\",\n  \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\",\n  \"short_description\": \"Generates a sample of students and their grades for a given number of courses, and returns a DataFrame and plot.\"\n}"}
{"api_id": 193, "api_name": "random.sample", "task_id": "BigCodeBench/637", "solution": "{\"name\": \"generateRandomSample\", \"type\": \"callable\", \"signature\": \"(population, k)\", \"return_type\": \"List[Any]\", \"short_description\": \"Generates a list of k unique random elements from a given population sequence or set.\"}"}
{"api_id": 193, "api_name": "random.sample", "task_id": "BigCodeBench/637", "solution": "{\"name\": \"generateRandomSample\", \"type\": \"callable\", \"signature\": \"(population, k)\", \"return_type\": \"List[Any]\", \"short_description\": \"Generates a list of k unique random elements from a given population.\"}"}
{"api_id": 193, "api_name": "random.sample", "task_id": "BigCodeBench/637", "solution": "{\n  \"name\": \"generate_random_student_sample\",\n  \"type\": \"callable\",\n  \"signature\": \"(students_list, num_students)\",\n  \"return_type\": \"Tuple[List[str], np.ndarray]\",\n  \"short_description\": \"Generates a random sample of students from a given list and returns the sample along with their grades.\"\n}"}
{"api_id": 193, "api_name": "random.sample", "task_id": "BigCodeBench/637", "solution": "{\n  \"name\": \"generate_random_sample\",\n  \"type\": \"function\",\n  \"signature\": \"(population, k, *, counts=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Generates a list of k unique random elements from a population sequence or set.\"\n}"}
{"api_id": 193, "api_name": "random.sample", "task_id": "BigCodeBench/637", "solution": "{\"name\": \"generateRandomSample\", \"type\": \"function\", \"signature\": \"(population, k)\", \"return_type\": \"List[Any]\", \"short_description\": \"Generates a list of k unique random elements from a given population.\"}"}
{"api_id": 193, "api_name": "random.sample", "task_id": "BigCodeBench/637", "solution": "{\"name\": \"generateRandomSample\", \"type\": \"function\", \"signature\": \"(population, k)\", \"return_type\": \"List[Any]\", \"short_description\": \"Generates a list of k unique random elements from a given population.\"}"}
{"api_id": 193, "api_name": "random.sample", "task_id": "BigCodeBench/637", "solution": "{\"name\": \"generateRandomSample\", \"type\": \"callable\", \"signature\": \"(population, k)\", \"return_type\": \"List[Any]\", \"short_description\": \"Generates a random sample of k elements from a given population.\"}"}
{"api_id": 193, "api_name": "random.sample", "task_id": "BigCodeBench/637", "solution": "{\"name\": \"generateRandomSample\", \"type\": \"function\", \"signature\": \"(population, k)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of k unique random elements from a population sequence or set.\"}"}
{"api_id": 193, "api_name": "random.sample", "task_id": "BigCodeBench/637", "solution": "{\"name\": \"generateRandomSample\", \"type\": \"function\", \"signature\": \"(population, k)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of k unique random elements from a given population.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateRandomPlot\", \"type\": \"function\", \"signature\": \"(num_points=30, seed=42)\", \"return_type\": \"matplotlib.axes._subplots.AxesSubplot\", \"short_description\": \"Generates a plot of random time series data based on the given seed.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"callable\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Sets the seed for the random number generator. Supports None, int, float, str, bytes, and bytearray.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"callable\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Initializes the internal state of the random number generator from a given seed. The seed can be an integer, a string, bytes, or bytearray.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"function\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Initializes the internal state of the random number generator using the provided seed.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateRandomPlot\", \"type\": \"function\", \"signature\": \"(num_points=30, seed=42)\", \"return_type\": \"matplotlib.axes._axes.Axes\", \"short_description\": \"Generates a random time series plot using the specified number of points and seed for reproducibility.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"callable\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Sets the seed for the random number generator. If seed is None or not provided, the random number generator will be seeded based on the current time or an operating system specific randomness source.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateRandomSeries\", \"type\": \"function\", \"signature\": \"(int seed)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random integers based on the provided seed.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateRandomPlot\", \"type\": \"function\", \"signature\": \"(seed=42)\", \"return_type\": \"matplotlib.axes._axes.Axes\", \"short_description\": \"Generates a plot of random time series data based on the provided seed.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"callable\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Initializes the internal state of the random number generator using the provided seed. If no seed is given, it will use the current time or an operating system specific randomness source.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"callable\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Initializes the internal state of the random number generator from a given seed. Supports seed types of None, int, float, str, bytes, and bytearray. If no seed is provided, it uses the current time or an operating system specific randomness source.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"function\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Sets the seed for the random number generator. The seed can be an integer, a string, a float, or None.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_random_dates\", \"type\": \"function\", \"signature\": \"(start_date, end_date, seed)\", \"return_type\": \"pd.Series[datetime]\", \"short_description\": \"Generates a series of random dates between two given dates, using a specified seed for reproducibility.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generateRandomDates\", \"type\": \"function\", \"signature\": \"(startDate, endDate, seedValue)\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a series of random dates between two given dates, using a specified seed for reproducibility.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generateRandomDates\", \"type\": \"function\", \"signature\": \"(startDate, endDate, seed)\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a pandas Series of random dates between two given dates, using a specified seed for reproducibility.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_random_dates\", \"type\": \"function\", \"signature\": \"(start_date, end_date, num_dates)\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a specified number of random dates between two given dates.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_random_dates\", \"type\": \"function\", \"signature\": \"(start_date, end_date, seed=42)\", \"return_type\": \"pd.Series[datetime]\", \"short_description\": \"Generates a series of random dates between start_date and end_date using a specified seed for reproducibility.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_random_dates\", \"type\": \"function\", \"signature\": \"(start_date, end_date, seed)\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a pandas Series of random dates between two given dates, using a specified seed for reproducibility.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generateRandomDates\", \"type\": \"function\", \"signature\": \"(start_date, end_date, seed)\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a series of random dates between two given dates using a specified seed for reproducibility.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_random_dates\", \"type\": \"function\", \"signature\": \"(start_date, end_date, num_dates, seed=None)\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a specified number of random dates within a given date range. Optionally, a seed can be provided for reproducibility.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_random_dates\", \"type\": \"function\", \"signature\": \"(start_date, end_date, seed=42)\", \"return_type\": \"pd.Series[datetime]\", \"short_description\": \"Generates a Series of random dates between start_date and end_date, using a specified seed for reproducibility.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generateRandomSeed\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"int\", \"short_description\": \"Generates a random seed value suitable for use in random number generation.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generate_random_seed\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"int\", \"short_description\": \"Generates a random seed value.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generate_histogram\", \"type\": \"function\", \"signature\": \"(data, bins=20)\", \"return_type\": \"tuple[float, plt.Axes]\", \"short_description\": \"Generates a histogram from the provided data and returns the execution time and the Axes object of the plot.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generateRandomPlot\", \"type\": \"function\", \"signature\": \"(dataList, size=100)\", \"return_type\": \"tuple(float, matplotlib.axes._axes.Axes)\", \"short_description\": \"Generates a histogram plot from a list of random numbers.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"callable\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Initializes the internal state of the random number generator from a seed. Supports seed types of None, int, float, str, bytes, and bytearray. If no seed is provided, it uses the current time or an operating system specific randomness source.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/124", "solution": "{\n  \"name\": \"generate_random_seed\",\n  \"type\": \"function\",\n  \"signature\": \"()\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Generates a random seed value suitable for use in random number generation.\"\n}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generateRandomPlot\", \"type\": \"function\", \"signature\": \"(dataList, size=100)\", \"return_type\": \"tuple(float, Axes)\", \"short_description\": \"Generates a histogram plot of random numbers from the given list and returns the execution time and the matplotlib Axes object.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generateRandomPlot\", \"type\": \"function\", \"signature\": \"(data, bins=20)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a histogram plot from the provided data and returns the execution time and the plot axes.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generateRandomPlot\", \"type\": \"function\", \"signature\": \"(dataList, size=100)\", \"return_type\": \"tuple(float, matplotlib.axes._axes.Axes)\", \"short_description\": \"Generates a histogram plot of random numbers from a provided list and returns the execution time and the matplotlib Axes object.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generateRandomPalette\", \"type\": \"function\", \"signature\": \"(colorCount)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random colors based on the specified count.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/199", "solution": "{\n  \"name\": \"generate_weather_report\",\n  \"type\": \"function\",\n  \"signature\": \"(datetime utc_datetime, list cities, dict timezones, int seed)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Generates a weather report for a list of cities based on a given UTC datetime and weather conditions.\"\n}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/199", "solution": "{\n  \"name\": \"generate_weather_report\",\n  \"type\": \"function\",\n  \"signature\": \"(datetime utc_datetime, list cities, dict timezones, list weather_conditions, int seed)\",\n  \"return_type\": \"pandas.DataFrame\",\n  \"short_description\": \"Generates a weather report for a list of cities based on a given datetime, weather conditions, and seed for reproducibility.\"\n}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(utc_datetime, cities=[], weather_conditions=[], timezones={}, seed=42)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Generates a weather report for a list of cities based on a given UTC datetime, weather conditions, and timezones, using a specified seed for random weather conditions.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(datetime utc_datetime, list[str] cities, list[str] weather_conditions, dict[str, str] timezones, int seed)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Generates a weather report for a list of cities based on a given datetime, weather conditions, and timezones. The report includes city, local time, and weather condition for each city.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(utc_datetime, cities, weather_conditions, timezones, seed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a weather report for a list of cities based on a given datetime, weather conditions, and timezones, using a specified seed for random weather conditions.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/199", "solution": "{\n  \"name\": \"generate_weather_report\",\n  \"type\": \"function\",\n  \"signature\": \"(datetime utc_datetime, list cities, dict timezones, int seed)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Generates a weather report for a list of cities based on a given datetime and seed for random weather conditions.\"\n}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(datetime utc_datetime, list cities, dict timezones, int seed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a weather report for a list of cities based on a given UTC datetime and weather conditions. Uses a specified seed for random weather condition selection.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/199", "solution": "{\n  \"name\": \"generate_weather_report\",\n  \"type\": \"function\",\n  \"signature\": \"(utc_datetime, cities, weather_conditions, timezones, seed)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Generates a weather report for a list of cities based on a given UTC datetime and other parameters.\"\n}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(utc_datetime, cities, weather_conditions, timezones, seed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a weather report for a list of cities based on a given UTC datetime, weather conditions, and timezones, with an optional seed for randomization.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(utc_datetime, cities, weather_conditions, timezones, seed)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Generates a weather report for a list of cities based on the provided datetime, weather conditions, and timezones. The report is generated using a specified seed for reproducibility.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"callable\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Sets the seed for the random number generator. The seed can be an integer, a string, a float, or None.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"callable\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Sets the seed for the random number generator. If no seed is provided, it uses the current time to seed the generator.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"set_custom_seed\", \"type\": \"callable\", \"signature\": \"(seed: int)\", \"return_type\": \"None\", \"short_description\": \"Sets a custom seed for the random number generator, allowing for reproducibility of results.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"method\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Sets the seed for the random number generator, allowing for reproducibility of sequences.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"function\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Sets the seed for the random number generator. If no seed is provided, the seed will be set based on the current time or an operating system specific randomness source.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"callable\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Sets the seed for the random number generator, enabling reproducible random sequences.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/368", "solution": "{\n  \"name\": \"set_random_seed\",\n  \"type\": \"function\",\n  \"signature\": \"(seed=None)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets the seed for the random number generator.\"\n}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/368", "solution": "{\n  \"name\": \"set_random_seed\",\n  \"type\": \"function\",\n  \"signature\": \"(seed)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets the seed for the random number generator.\"\n}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"function\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Sets the seed for the random number generator. If no seed is provided, it will use the current time as the seed.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"callable\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Sets the seed for the random number generator, allowing for reproducibility of random sequences.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"generate_sales_report\", \"type\": \"function\", \"signature\": \"(products_list, start_date, end_date)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a sales report for the given list of products within a specified date range.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"set_random_seed\", \"type\": \"callable\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Initializes the internal state of the random number generator from a given seed. The seed can be of type None, int, float, str, bytes, or bytearray.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"generate_random_sales_data\", \"type\": \"function\", \"signature\": \"(product_list, seed=None)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Generates a DataFrame of random sales data for given products and an optional seed for reproducibility.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"set_random_seed\", \"type\": \"function\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Sets the seed for the random number generator, allowing for reproducible random sequences.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"set_random_seed\", \"type\": \"method\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Sets the seed for the random number generator. If no seed is provided, it will use the current time to seed the generator.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"set_random_seed\", \"type\": \"method\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Sets the seed for the random number generator. If no seed is provided, the seed will be set based on the current time or another system-specific source.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"generate_sales_report\", \"type\": \"function\", \"signature\": \"(products_list, start_time, end_time)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a sales report for a given list of products within a specified date range.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/492", "solution": "{\n  \"name\": \"set_random_seed\",\n  \"type\": \"function\",\n  \"signature\": \"(seed=None)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets the seed for the random number generator, allowing for reproducible random sequences.\"\n}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"generate_sales_data\", \"type\": \"function\", \"signature\": \"(start_date, end_date, products, seed=None)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame of sales data for specified products within a given date range. Optionally, a seed can be provided for reproducibility.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"generate_sales_data\", \"type\": \"function\", \"signature\": \"(epoch_milliseconds, random_seed=0, products=['Product1', 'Product2', 'Product3', 'Product4', 'Product5'])\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame of sales data based on given parameters. It includes the product, date, and sales for each day in the specified date range.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"callable\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Sets the seed for the random number generator. If seed is not provided, the random generator will be seeded from the current time or an operating system specific randomness source if available.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"callable\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Sets the seed for the random number generator. This is used to ensure reproducibility of results when generating random numbers.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"set_random_seed\", \"type\": \"callable\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Initializes the internal state of the random number generator from a given seed. Supports seed values of None, int, float, str, bytes, or bytearray.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"callable\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Initializes the internal state of the random number generator. Accepts an optional seed parameter which can be of type None, int, float, str, bytes, or bytearray.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"method\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Sets the seed for the random number generator. If seed is not provided, it will use the current time as the seed.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/502", "solution": "{\n  \"name\": \"set_random_seed\",\n  \"type\": \"method\",\n  \"signature\": \"(seed=None)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets the seed for the random number generator, allowing for reproducible random sequences.\"\n}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"set_random_seed\", \"type\": \"callable\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Sets the seed for the random number generator. If no seed is provided, the seed will be set based on the current time or an operating system specific randomness source.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"callable\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Initialize the internal state of the random number generator. The seed can be an integer, a string, a bytes-like object, or None, which will initialize the seed from the current time or an operating system specific randomness source if available.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"callable\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Sets the seed for the random number generator. The seed can be an integer, a string, or None. If seed is None or not provided, the seed is set based on the current time or an operating system specific randomness source.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"setRandomSeed\", \"type\": \"callable\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Initializes the internal state of the random number generator using the provided seed. The seed can be an integer, a string, a bytes-like object, or None to use a random seed based on the current time or an operating system specific randomness source.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"generate_random_sequence\", \"type\": \"function\", \"signature\": \"(length, seed=None)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random numbers of a specified length, optionally seeded for reproducibility.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"generate_random_sequence\", \"type\": \"function\", \"signature\": \"(length, seed=None)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random numbers of specified length. Optionally, seeds the random number generator with a given seed.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"generate_dice_roll_histogram\", \"type\": \"function\", \"signature\": \"(rolls, seed=None)\", \"return_type\": \"Tuple[np.ndarray, plt.Axes]\", \"short_description\": \"Generates a histogram of dice roll outcomes. Takes the number of rolls and an optional seed for random number generation.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"generateDiceHistogram\", \"type\": \"function\", \"signature\": \"(rolls, seed=None)\", \"return_type\": \"Tuple[np.ndarray, plt.Axes]\", \"short_description\": \"Generates a histogram of dice rolls and returns the frequencies and the matplotlib Axes object.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/897", "solution": "{\n  \"name\": \"set_random_seed\",\n  \"type\": \"method\",\n  \"signature\": \"(seed=None)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Initialize the internal state of the random number generator from a seed.\"\n}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"seedRandom\", \"type\": \"function\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Initializes the internal state of the random number generator from a seed. Supports various types of seeds including None, int, float, str, bytes, and bytearray.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"generateDiceRollHistogram\", \"type\": \"function\", \"signature\": \"(int rolls, optional[int] seed=None)\", \"return_type\": \"tuple[list[int], plt.Axes]\", \"short_description\": \"Generates a histogram of dice roll outcomes. Optionally seeds the random number generator for reproducibility.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"setSeed\", \"type\": \"method\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Sets the seed for the random number generator. If no seed is provided, it uses the current time or an operating system specific randomness source.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"generate_dice_rolls\", \"type\": \"function\", \"signature\": \"(num_rolls, seed=None)\", \"return_type\": \"Tuple[List[int], Axes]\", \"short_description\": \"Generates a specified number of dice rolls and optionally seeds the random number generator for reproducibility.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"setSeed\", \"type\": \"method\", \"signature\": \"(seed=None)\", \"return_type\": \"None\", \"short_description\": \"Sets the seed for the random number generator. If no seed is provided, it will use the current time or an operating system specific randomness source.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generate_random_tasks\", \"type\": \"function\", \"signature\": \"(task_list, n_tasks, employees=None, seed=None)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame of random task assignments based on the provided parameters. The DataFrame includes task names, assigned employees, and due dates.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/952", "solution": "{\n  \"name\": \"generate_random_assignment\",\n  \"type\": \"function\",\n  \"signature\": \"(task_list, n_tasks, employees=[], seed=None)\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a random assignment of tasks to employees with an optional seed for reproducibility.\"\n}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generate_random_tasks\", \"type\": \"function\", \"signature\": \"(task_list, n_tasks, employees=[], seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame of random task assignments to employees, with an optional seed for reproducibility.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/952", "solution": "{\n  \"name\": \"generate_random_tasks\",\n  \"type\": \"function\",\n  \"signature\": \"(task_list, n_tasks, employees=[], seed=None)\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a DataFrame containing task assignments based on the provided list of tasks, number of tasks, and optional seed for random number generation.\"\n}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generate_random_assignment\", \"type\": \"function\", \"signature\": \"(task_list, n_tasks, employees=[], seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a random assignment of tasks to employees with an optional seed for reproducibility.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generate_task_assignments\", \"type\": \"function\", \"signature\": \"(task_list, n_tasks, employees=[], seed=None)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame of task assignments based on the provided list of tasks, number of tasks, optional list of employees, and optional seed for random number generation.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generate_random_assignments\", \"type\": \"function\", \"signature\": \"(task_list, n_tasks, employees=None, seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame of random task assignments for employees, optionally seeded for reproducibility.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generate_random_assignment\", \"type\": \"function\", \"signature\": \"(task_list, n_tasks, employees=[], seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a random assignment of tasks to employees, with an optional seed for reproducibility.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generate_random_assignment\", \"type\": \"function\", \"signature\": \"(task_list, n_tasks, employees=[], seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a random assignment of tasks to employees with optional seed for reproducibility.\"}"}
{"api_id": 194, "api_name": "random.seed", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generate_random_tasks\", \"type\": \"function\", \"signature\": \"(task_list, n_tasks, employees=None, seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame of random task assignments to employees with an optional seed for reproducibility.\"}"}
{"api_id": 195, "api_name": "random.uniform", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomNumber\", \"type\": \"function\", \"signature\": \"(min, max)\", \"return_type\": \"float\", \"short_description\": \"Generates a random float number within the specified range [min, max).\"}"}
{"api_id": 195, "api_name": "random.uniform", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomNumber\", \"type\": \"function\", \"signature\": \"(min, max)\", \"return_type\": \"float\", \"short_description\": \"Generates a random float number within the specified range [min, max).\"}"}
{"api_id": 195, "api_name": "random.uniform", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomPair\", \"type\": \"function\", \"signature\": \"(min, max)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a tuple of two random numbers within the specified range.\"}"}
{"api_id": 195, "api_name": "random.uniform", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(data_type, range_start, range_end)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random data points within a specified range for a given data type.\"}"}
{"api_id": 195, "api_name": "random.uniform", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomNumber\", \"type\": \"function\", \"signature\": \"(min, max)\", \"return_type\": \"float\", \"short_description\": \"Generates a random number within the specified range [min, max).\"}"}
{"api_id": 195, "api_name": "random.uniform", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomNumber\", \"type\": \"function\", \"signature\": \"(min, max)\", \"return_type\": \"float\", \"short_description\": \"Generates a random number within the specified range.\"}"}
{"api_id": 195, "api_name": "random.uniform", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomNumber\", \"type\": \"function\", \"signature\": \"(min, max)\", \"return_type\": \"float\", \"short_description\": \"Generates a random float number within the specified range.\"}"}
{"api_id": 195, "api_name": "random.uniform", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomNumber\", \"type\": \"function\", \"signature\": \"(min, max)\", \"return_type\": \"float\", \"short_description\": \"Generates a random number within the specified range.\"}"}
{"api_id": 195, "api_name": "random.uniform", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(data_type, min_value, max_value)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random data points within a specified range for a given data type.\"}"}
{"api_id": 195, "api_name": "random.uniform", "task_id": "BigCodeBench/720", "solution": "{\"name\": \"generateRandomNumber\", \"type\": \"callable\", \"signature\": \"(min_value, max_value)\", \"return_type\": \"float\", \"short_description\": \"Generates a random float number within the specified range.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"shuffleList\", \"type\": \"method\", \"signature\": \"(sequence)\", \"return_type\": \"list\", \"short_description\": \"Randomly shuffles the elements of a sequence in place.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"shuffleList\", \"type\": \"method\", \"signature\": \"(sequence)\", \"return_type\": \"list\", \"short_description\": \"Randomly shuffles the elements of a sequence in place.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"generateRandomFile\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a random file name from the specified directory.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"shuffleList\", \"type\": \"method\", \"signature\": \"(sequence)\", \"return_type\": \"list\", \"short_description\": \"Randomly shuffles the elements of a sequence in place.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"shuffleList\", \"type\": \"method\", \"signature\": \"(sequence)\", \"return_type\": \"list\", \"short_description\": \"Randomly shuffles the elements of a sequence in place.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"shuffleList\", \"type\": \"method\", \"signature\": \"(sequence)\", \"return_type\": \"list\", \"short_description\": \"Randomly shuffles the elements of a sequence in place.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"shuffleList\", \"type\": \"function\", \"signature\": \"(seq)\", \"return_type\": \"list\", \"short_description\": \"Randomly shuffles the elements of a sequence.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"shuffleList\", \"type\": \"method\", \"signature\": \"(seq)\", \"return_type\": \"list\", \"short_description\": \"Randomly shuffles the elements of the given sequence.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"shuffleList\", \"type\": \"function\", \"signature\": \"(sequence)\", \"return_type\": \"sequence\", \"short_description\": \"Shuffles the elements of the given sequence in place.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"shuffleList\", \"type\": \"function\", \"signature\": \"(seq)\", \"return_type\": \"List\", \"short_description\": \"Shuffles the elements of the given sequence.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"shuffleList\", \"type\": \"method\", \"signature\": \"(sequence)\", \"return_type\": \"sequence\", \"short_description\": \"Randomly shuffles the elements of the provided sequence.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"shuffleList\", \"type\": \"method\", \"signature\": \"(list)\", \"return_type\": \"list\", \"short_description\": \"Randomly shuffles the elements of the provided list.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"generateRandomDiceRolls\", \"type\": \"function\", \"signature\": \"(numRolls, seed=None)\", \"return_type\": \"Tuple[List[int], Axes]\", \"short_description\": \"Generates a specified number of random dice rolls and returns the frequencies and a histogram plot.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"rollDice\", \"type\": \"callable\", \"signature\": \"(num_rolls, seed=None)\", \"return_type\": \"Tuple[List[int], plt.Axes]\", \"short_description\": \"Simulates rolling a six-sided die a specified number of times and returns the frequencies of each outcome along with the histogram plot.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"generateRandomSequence\", \"type\": \"function\", \"signature\": \"(length, min, max)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random integers within a specified range.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"generateRandomSequence\", \"type\": \"function\", \"signature\": \"(length, min_val, max_val)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random integers within a specified range.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"generateDiceOutcomes\", \"type\": \"function\", \"signature\": \"(rolls, seed=None)\", \"return_type\": \"Tuple[List[int], Axes]\", \"short_description\": \"Generates and plots the outcomes of rolling a six-sided die a specified number of times.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"generateRandomDiceRolls\", \"type\": \"function\", \"signature\": \"(numRolls, seed=None)\", \"return_type\": \"List[int], Axes\", \"short_description\": \"Generates a specified number of random dice rolls and optionally seeds the random number generator. Returns the frequencies of each dice value and the matplotlib Axes object for the histogram.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"shuffleList\", \"type\": \"callable\", \"signature\": \"(seq)\", \"return_type\": \"list\", \"short_description\": \"Randomly shuffles the elements of a sequence.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/897", "solution": "{\"name\": \"generate_histogram\", \"type\": \"function\", \"signature\": \"(data, bins=None, ax=None)\", \"return_type\": \"tuple(numpy.ndarray, matplotlib.axes._axes.Axes)\", \"short_description\": \"Generates a histogram from the provided data and optionally plots it on the given Axes instance.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generate_random_task_assignment\", \"type\": \"function\", \"signature\": \"(task_list, n_tasks, employees=None, seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame of randomly assigned tasks to employees with an optional seed for reproducibility.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generate_random_tasks\", \"type\": \"function\", \"signature\": \"(task_list, n_tasks, employees=[], seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame of random task assignments to employees with optional seed for reproducibility.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"shuffle_list\", \"type\": \"callable\", \"signature\": \"(seq)\", \"return_type\": \"list\", \"short_description\": \"Randomly shuffles the elements of the provided sequence.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"shuffle_list\", \"type\": \"callable\", \"signature\": \"(seq)\", \"return_type\": \"list\", \"short_description\": \"Randomly shuffles the elements of the given sequence.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generate_random_task\", \"type\": \"function\", \"signature\": \"(task_list, n_tasks, employees=None, seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame with randomly assigned tasks to employees, including an optional seed for reproducibility.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"shuffle_sequence\", \"type\": \"callable\", \"signature\": \"(seq)\", \"return_type\": \"list\", \"short_description\": \"Randomly shuffles the elements of the given sequence.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generate_random_assignment\", \"type\": \"function\", \"signature\": \"(task_list, n_tasks, employees=[], seed=None)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a random assignment of tasks to employees with optional seed for reproducibility.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generate_random_assignment\", \"type\": \"function\", \"signature\": \"(task_list, n_tasks, employees=[], seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a random assignment of tasks to employees with an optional seed for reproducibility.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generate_random_assignment\", \"type\": \"function\", \"signature\": \"(task_list, n_tasks, employees=[], seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a random assignment of tasks to employees with optional seed for reproducibility.\"}"}
{"api_id": 196, "api_name": "random.choice", "task_id": "BigCodeBench/952", "solution": "{\"name\": \"generate_random_assignment\", \"type\": \"function\", \"signature\": \"(task_list, n_tasks, employees=[], seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a random assignment of tasks to employees with optional seed for reproducibility.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateRandomTimeSeries\", \"type\": \"function\", \"signature\": \"(periods, start_date, end_date, min_value, max_value)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing random time series data within a specified range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateRandomTimeSeries\", \"type\": \"function\", \"signature\": \"(num_points, min_val, max_val)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random integers representing a time series.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generate_random_series\", \"type\": \"function\", \"signature\": \"(num_points, min_val, max_val)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random integers within a specified range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateRandomTimeSeries\", \"type\": \"function\", \"signature\": \"(int, int, int)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random integers representing a time series over a specified range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateRandomSeries\", \"type\": \"function\", \"signature\": \"(int, int, int)\", \"return_type\": \"List[int]\", \"short_description\": \"Generates a list of random integers within a specified range for a given number of periods.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateRandomSeries\", \"type\": \"function\", \"signature\": \"(length, min_value, max_value)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random integers within a specified range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generate_random_series\", \"type\": \"function\", \"signature\": \"(num_points, min_val, max_val)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random integers within a specified range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateRandomSeries\", \"type\": \"function\", \"signature\": \"(int start, int end, int count)\", \"return_type\": \"list[int]\", \"short_description\": \"Generates a list of random integers within a specified range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateRandomSeries\", \"type\": \"function\", \"signature\": \"(num_points, min_val, max_val)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random integers within a specified range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/100", "solution": "{\"name\": \"generateRandomSeries\", \"type\": \"function\", \"signature\": \"(length, min_val, max_val)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random integers within a specified range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_random_dates\", \"type\": \"function\", \"signature\": \"(start_date, end_date, seed)\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a Series of random dates between start_date and end_date, inclusive.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_random_dates\", \"type\": \"function\", \"signature\": \"(start_date, end_date, seed)\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a series of random dates between start_date and end_date, inclusive.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_random_dates\", \"type\": \"function\", \"signature\": \"(start_date, end_date, seed)\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a series of random dates within the given range, using a specified seed for reproducibility.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_random_dates\", \"type\": \"function\", \"signature\": \"(start_date, end_date, seed)\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a series of random dates within a specified range, using a random seed for reproducibility.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_random_dates\", \"type\": \"function\", \"signature\": \"(start_date, end_date, seed)\", \"return_type\": \"pd.Series[datetime]\", \"short_description\": \"Generates a pandas Series of random dates between start_date and end_date, inclusive.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_random_dates\", \"type\": \"function\", \"signature\": \"(start_date, end_date, seed)\", \"return_type\": \"pd.Series[datetime]\", \"short_description\": \"Generates a Series of random dates between start_date and end_date, inclusive.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_random_dates\", \"type\": \"function\", \"signature\": \"(start_date, end_date, seed)\", \"return_type\": \"pd.Series[datetime]\", \"short_description\": \"Generates a pandas Series of random dates between start_date and end_date, inclusive.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_random_dates\", \"type\": \"function\", \"signature\": \"(start_date, end_date, seed)\", \"return_type\": \"pd.Series\", \"short_description\": \"Generates a pandas Series of random dates between start_date and end_date, inclusive.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_dates\", \"type\": \"function\", \"signature\": \"(start_date, end_date, seed)\", \"return_type\": \"pd.Series\", \"short_description\": \"Generate a series of random dates within a specified range, using a random seed for reproducibility.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/120", "solution": "{\"name\": \"generate_random_dates\", \"type\": \"function\", \"signature\": \"(start_date, end_date, seed)\", \"return_type\": \"pd.Series\", \"short_description\": \"Generate a Series of random dates between start_date and end_date, inclusive.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generate_unique_id\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique string identifier.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generateRandomNumbers\", \"type\": \"function\", \"signature\": \"(size, rangeStart, rangeEnd)\", \"return_type\": \"list[int]\", \"short_description\": \"Generates a list of random integers within a specified range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generateRandomList\", \"type\": \"function\", \"signature\": \"(size, min, max)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random integers within a specified range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"(length, chars)\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of a specified length using a given set of characters.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generateRandomList\", \"type\": \"function\", \"signature\": \"(size, min, max)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random integers within a specified range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generateRandomList\", \"type\": \"function\", \"signature\": \"(size, minVal, maxVal)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random integers within a specified range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generateRandomNumbers\", \"type\": \"function\", \"signature\": \"(size, min, max)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random numbers within a specified range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generateRandomHistogram\", \"type\": \"function\", \"signature\": \"(list_data, size=100, seed=100)\", \"return_type\": \"tuple(float, plt.Axes)\", \"short_description\": \"Generates a histogram of random numbers from the given list and measures the execution time.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generateRandomList\", \"type\": \"function\", \"signature\": \"(size, min, max)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random numbers within a specified range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generateRandomList\", \"type\": \"function\", \"signature\": \"(size, min_value, max_value)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random integers within a specified range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(utc_datetime, cities, weather_conditions, timezones, seed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a weather report for a list of cities based on a given UTC datetime, weather conditions, and timezones. Uses a random weather condition for each city.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"generate_weather_report\", \"type\": \"function\", \"signature\": \"(utc_datetime, cities, weather_conditions, timezones, seed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a weather report for a list of cities based on a given UTC datetime.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(utc_datetime, cities, weather_conditions, timezones, seed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a weather report for a list of cities based on a given UTC datetime, weather conditions, and timezones.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"generate_weather_report\", \"type\": \"function\", \"signature\": \"(utc_datetime, cities, weather_conditions, timezones, seed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing weather reports for specified cities based on the provided parameters.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/199", "solution": "{\n  \"name\": \"generate_weather_report\",\n  \"type\": \"function\",\n  \"signature\": \"(utc_datetime, cities=[], weather_conditions=[], timezones={}, seed=42)\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a weather report for a list of cities based on a given UTC datetime and weather conditions.\"\n}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"generate_weather_report\", \"type\": \"function\", \"signature\": \"(utc_datetime, cities, weather_conditions, timezones, seed)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a weather report for a list of cities based on a given UTC datetime, weather conditions, and timezones. Returns a DataFrame with the report data.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(utc_datetime, cities=[], weather_conditions=[], timezones={}, seed=42)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a weather report for a list of cities based on a given UTC datetime.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/199", "solution": "{\n  \"name\": \"generate_weather_report\",\n  \"type\": \"function\",\n  \"signature\": \"(utc_datetime, cities, weather_conditions, timezones, seed)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Generates a weather report for a list of cities based on a given datetime and weather conditions.\"\n}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(utc_datetime, cities, weather_conditions, timezones, seed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing weather reports for specified cities based on the provided UTC datetime, weather conditions, and timezones.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/199", "solution": "{\"name\": \"generateCityWeatherReport\", \"type\": \"function\", \"signature\": \"(utc_datetime, cities=[], weather_conditions=[], timezones={}, seed=42)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame containing weather reports for specified cities based on the provided datetime and weather conditions.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"(size, range_low, range_high)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Generates a random image of the specified size with pixel values within the given range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"(size, range_low, range_high, seed)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Generates a random image of specified size with pixel values in the given range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"(size, low, high)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Generates a random image of specified size with pixel values in the given range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomPalette\", \"type\": \"function\", \"signature\": \"(num_colors, range_low, range_high)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random RGB colors.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"(size, range_low, range_high)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Generates a random image of specified size with pixel values in the given range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"(size, low, high)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Generates a random image of given size with pixel values in the specified range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomPalette\", \"type\": \"function\", \"signature\": \"(num_colors, range_low, range_high)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random RGB colors.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomPalette\", \"type\": \"function\", \"signature\": \"(num_colors, min_value, max_value)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random RGB color values.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"(size, range_low, range_high)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Generates a random image of specified size with pixel values in the given range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/214", "solution": "{\"name\": \"generateRandomImage\", \"type\": \"function\", \"signature\": \"(size, rangeLow, rangeHigh)\", \"return_type\": \"numpy.ndarray\", \"short_description\": \"Generates a random image of specified size with pixel values in the given range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/308", "solution": "{\"name\": \"generateRandomGrades\", \"type\": \"function\", \"signature\": \"(fields, students)\", \"return_type\": \"dict\", \"short_description\": \"Generates a dictionary of random grades for given fields and students.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/308", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a report DataFrame containing random grades for students in various subjects, including optional additional fields. The DataFrame includes averages for each student and each subject.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/308", "solution": "{\"name\": \"generateRandomGrades\", \"type\": \"function\", \"signature\": \"(fields, students)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random grades for specified fields and students.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/308", "solution": "{\"name\": \"generateRandomGrades\", \"type\": \"function\", \"signature\": \"(fields, students)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random grades for given fields and students.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/308", "solution": "{\"name\": \"generateRandomGrades\", \"type\": \"function\", \"signature\": \"(fields, students)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random grades for specified fields and students.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/308", "solution": "{\"name\": \"generate_report\", \"type\": \"function\", \"signature\": \"(fields, students)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing random grades for students in various fields, and calculates averages.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/308", "solution": "{\"name\": \"generateRandomGrades\", \"type\": \"function\", \"signature\": \"(fields, students)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random grades for given fields and students, and calculates average grades for each student and each subject.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/308", "solution": "{\"name\": \"generateRandomGrades\", \"type\": \"function\", \"signature\": \"(fields, students)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame with random grades for students in specified fields.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/308", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"(fields, students)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a report DataFrame with random grades for students in specified fields.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/308", "solution": "{\"name\": \"generate_random_grades\", \"type\": \"function\", \"signature\": \"(fields, students)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame with random grades for specified fields and students, including an average grade for each student and each field.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(count, min_age, max_age, min_height, max_height, min_weight, max_weight)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with random demographic data for a given number of people.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateRandomPeopleData\", \"type\": \"function\", \"signature\": \"(count)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with random people data including their names, ages, heights, and weights, and calculates their average values.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateRandomPeopleData\", \"type\": \"function\", \"signature\": \"(filename, count)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with random people data, including averages of age, height, and weight.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(count, min_age, max_age, min_height, max_height, min_weight, max_weight)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with random demographic data for a specified number of people, within given age, height, and weight ranges.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(count, minAge, maxAge, minHeight, maxHeight, minWeight, maxWeight)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with random demographic data for a given number of people and weight range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(count, min_age, max_age, min_height, max_height, min_weight, max_weight)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with random demographic data for a given count of people, with specified ranges for age, height, and weight.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateRandomPeopleData\", \"type\": \"function\", \"signature\": \"(count, filename)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with random people data, including averages, and returns the file path.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(count, min_age, max_age, min_height, max_height, min_weight, max_weight)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with random data for a given number of people and weight range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(count)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with random data for a given count of people.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"generateRandomPeopleData\", \"type\": \"function\", \"signature\": \"(count, filename)\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with random people data including their names, ages, heights, and weights, and calculates their averages.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"generate_sales_report\", \"type\": \"function\", \"signature\": \"(start_date, end_date, products)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a sales report for a given date range and list of products, including random sales figures for each product on each date.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"generate_sales_report\", \"type\": \"function\", \"signature\": \"(epoch_milliseconds, random_seed, products)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing sales data for specified products over a date range based on epoch milliseconds.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"generate_sales_data\", \"type\": \"function\", \"signature\": \"(epoch_milliseconds, random_seed=0, products=['Product1', 'Product2', 'Product3', 'Product4', 'Product5'])\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame of sales data based on the provided parameters.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"generate_sales_report\", \"type\": \"function\", \"signature\": \"(start_date, end_date, products)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a sales report for a given date range and list of products.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"generate_sales_report\", \"type\": \"function\", \"signature\": \"(epoch_milliseconds, random_seed, products)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing sales data for specified products within a date range based on epoch milliseconds and random seed.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"generate_sales_report\", \"type\": \"function\", \"signature\": \"(epoch_milliseconds, random_seed, products)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a sales report DataFrame based on given parameters.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"generate_sales_report\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing sales data for the current week.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"generate_sales_report\", \"type\": \"function\", \"signature\": \"(products, start_date, end_date)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a sales report for a given list of products within a specified date range.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"generate_sales_report\", \"type\": \"function\", \"signature\": \"(start_date, end_date, products)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generate a sales report for a given date range and products.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/492", "solution": "{\"name\": \"generate_sales_data\", \"type\": \"function\", \"signature\": \"(epoch_milliseconds, random_seed=0, products=['Product1', 'Product2', 'Product3', 'Product4', 'Product5'])\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing sales data for specified products over a date range starting from a given epoch milliseconds timestamp.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"generate_random_activities\", \"type\": \"function\", \"signature\": \"(days_in_past, random_seed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing random activities for a given number of past days.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"generate_activity_data\", \"type\": \"function\", \"signature\": \"(days_in_past, random_seed)\", \"return_type\": \"Tuple[plt.Axes, pd.DataFrame]\", \"short_description\": \"Generates a DataFrame of random activity data and plots it using a line plot.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"generate_activity_data\", \"type\": \"function\", \"signature\": \"(days, seed)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of activity data for the specified number of days, using a given random seed.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"generate_activity_data\", \"type\": \"function\", \"signature\": \"(days_in_past, random_seed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing random activity data for the specified number of past days.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"generate_random_activities\", \"type\": \"function\", \"signature\": \"(num_activities, activity_list)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random activities with durations based on the input parameters.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"generate_activity_data\", \"type\": \"function\", \"signature\": \"(days_in_past, random_seed)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a DataFrame of random activity data for the past number of days specified.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"generate_activity_data\", \"type\": \"function\", \"signature\": \"(days, activities, seed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing random activity data for a specified number of days, including a list of activities and a random seed for reproducibility.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"generate_activity_data\", \"type\": \"function\", \"signature\": \"(days, activities, seed)\", \"return_type\": \"tuple(DataFrame, plt.Axes)\", \"short_description\": \"Generates a DataFrame and plots line chart of activity durations over days with random seed for reproducibility.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"generate_activity_data\", \"type\": \"function\", \"signature\": \"(days_in_past, random_seed)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a DataFrame containing random activity data for the past number of days specified.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/502", "solution": "{\"name\": \"generate_random_activities\", \"type\": \"function\", \"signature\": \"(activities, days)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of random activities and durations for a given number of days.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file containing sensor data for a given number of hours and saves it to the specified directory.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with sensor data for a given number of hours and saves it to the specified output directory. Returns the path to the generated CSV file.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with sensor data for a given number of hours and saves it to the specified directory.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with sensor data for a given number of hours and saves it in the specified directory.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates sensor data and saves it to a CSV file. Returns the path to the generated CSV file.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file containing sensor data for a given number of hours and saves it to the specified directory. Returns the path to the generated CSV file.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file containing sensor data for a specified number of hours and saves it in the specified output directory.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file containing sensor data for a given number of hours and saves it to the specified output directory.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file containing sensor data for a given number of hours and saves it to the specified directory.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/592", "solution": "{\"name\": \"generateSensorData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with sensor data for the specified number of hours and saves it in the given output directory. Returns the file path of the generated CSV file.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple(str, plt.Axes)\", \"short_description\": \"Generates a CSV file with traffic data and plots the data using matplotlib.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple\", \"short_description\": \"Generates a CSV file with simulated traffic data and plots the data over time.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple(str, matplotlib.axes._axes.Axes)\", \"short_description\": \"Generates a CSV file containing simulated traffic data for a given number of hours and plots the data using matplotlib.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple\", \"short_description\": \"Generates a CSV file containing traffic data for a given number of hours and plots the data using matplotlib.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple\", \"short_description\": \"Generates a CSV file with simulated traffic data and plots it using matplotlib.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple(str, matplotlib.axes._subplots.AxesSubplot)\", \"short_description\": \"Generates traffic data over a specified number of hours and optionally saves it to a specified directory, then plots the data.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple(str, matplotlib.axes._subplots.AxesSubplot)\", \"short_description\": \"Generates a CSV file with simulated traffic data and plots it over time.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"tuple(str, matplotlib.axes._subplots.AxesSubplot)\", \"short_description\": \"Generates a CSV file with simulated traffic data and plots it over time.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/593", "solution": "{\"name\": \"generateTrafficData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"Tuple[str, Optional[plt.Axes]]\", \"short_description\": \"Generates a CSV file with traffic data for a given number of hours and plots the data using matplotlib.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/593", "solution": "{\n  \"name\": \"generateTrafficData\",\n  \"type\": \"function\",\n  \"signature\": \"(hours, output_dir='./output')\",\n  \"return_type\": \"tuple(str, matplotlib.axes._subplots.AxesSubplot)\",\n  \"short_description\": \"Generates a CSV file with simulated traffic data and plots the data over time.\"\n}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with simulated weather data for a given number of hours and saves it to the specified output directory, including a backup of the file.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"getWeatherForecast\", \"type\": \"function\", \"signature\": \"(location, days)\", \"return_type\": \"list\", \"short_description\": \"Retrieves a forecast of weather conditions for a specified location over a given number of days.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with simulated weather data and returns the file path.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with simulated weather data for a given number of hours and saves it to the specified output directory. Returns the path to the generated CSV file.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with simulated weather data for a given number of hours and saves it in the specified output directory. Returns the path to the generated CSV file.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for a given number of hours and saves it to a CSV file in the specified output directory. It also creates a backup of the generated file.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with simulated weather data for a given number of hours and saves it to the specified output directory.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with simulated weather data for a given number of hours and saves it in the specified output directory.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with simulated weather data for the specified number of hours and saves it in the given output directory.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with simulated weather data and returns the file path.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"generateTeamResults\", \"type\": \"function\", \"signature\": \"(teams, goalsRange, penaltiesRange, penaltyCost)\", \"return_type\": \"tuple[pd.DataFrame, list[plt.Figure]]\", \"short_description\": \"Generates a DataFrame and plots representing the results of a match for each team, including goals and penalty costs.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"generateMatchResults\", \"type\": \"function\", \"signature\": \"(teams, goalsRange, penaltiesRange, penaltyCost)\", \"return_type\": \"tuple\", \"short_description\": \"Generates match results for a set of teams, including goals and penalty costs. Returns a DataFrame and a list of Seaborn bar plots.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"generateMatchResults\", \"type\": \"function\", \"signature\": \"(teams, goalsRange, penaltiesRange, penaltyCost)\", \"return_type\": \"tuple(DataFrame, list(plots))\", \"short_description\": \"Generates match results including goals, penalty costs for each team, and returns a DataFrame along with visualization plots.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"generateTeamResults\", \"type\": \"function\", \"signature\": \"(teams, goalsRange, penaltiesRange, penaltyCost)\", \"return_type\": \"tuple\", \"short_description\": \"Generates simulated match results for a given list of teams, including goals and penalty costs.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"generateMatchResults\", \"type\": \"function\", \"signature\": \"(teams, goalsRange, penaltiesRange, penaltyCost)\", \"return_type\": \"tuple\", \"short_description\": \"Generates match results for a set of teams, including goals and penalty costs.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"generateTeamResults\", \"type\": \"function\", \"signature\": \"(goals, penalties)\", \"return_type\": \"Tuple[pd.DataFrame, List[plt.Figure]]\", \"short_description\": \"Generates a DataFrame and plots of team results based on goals and penalties.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"generateMatchResults\", \"type\": \"function\", \"signature\": \"(teams, goals, penalties, penaltyCost)\", \"return_type\": \"Tuple[pd.DataFrame, List[plt.Axes]]\", \"short_description\": \"Generates match results for a given list of teams, including the number of goals scored and the penalty costs, and returns the results as a DataFrame and a list of bar plots.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"generateMatchResults\", \"type\": \"function\", \"signature\": \"(teams, goals, penalties, penaltyCost)\", \"return_type\": \"tuple(DataFrame, list(plots))\", \"short_description\": \"Generates match results for a set of teams, including goals and penalty costs, and returns the results as a DataFrame along with associated bar plots.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"generateTeamResults\", \"type\": \"function\", \"signature\": \"(teams, goalsRange, penaltiesRange, penaltyCost)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a DataFrame and plots representing team results including goals and penalty costs.\"}"}
{"api_id": 197, "api_name": "random.randint", "task_id": "BigCodeBench/618", "solution": "{\"name\": \"generateTeamResults\", \"type\": \"function\", \"signature\": \"(goals, penalties, teams)\", \"return_type\": \"tuple(DataFrame, list(plots))\", \"short_description\": \"Generates simulated team performance data including goals and penalty costs, and returns a DataFrame along with visualization plots.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"findAllMatches\", \"type\": \"function\", \"signature\": \"(pattern, string)\", \"return_type\": \"list\", \"short_description\": \"Searches through the given string for all non-overlapping matches of the pattern and returns a list of all matches found.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"findAndGroupMatches\", \"type\": \"function\", \"signature\": \"(pattern, string)\", \"return_type\": \"dict\", \"short_description\": \"Searches through a string for all occurrences of a pattern and groups them by their match result.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"find_pattern_groups\", \"type\": \"function\", \"signature\": \"(pattern, string)\", \"return_type\": \"list of tuples\", \"short_description\": \"Searches through the given string for all occurrences of the pattern and returns a list of tuples containing the matched groups.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"extractPatternGroups\", \"type\": \"function\", \"signature\": \"(pattern, string)\", \"return_type\": \"list\", \"short_description\": \"Extracts groups from the first match of the pattern in the given string.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"find_pattern_in_strings\", \"type\": \"function\", \"signature\": \"(patterns, strings, flags=0)\", \"return_type\": \"list[dict[str, str|None]]\", \"short_description\": \"Searches for each pattern in a list of strings and returns a list of dictionaries containing the match and the pattern used.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"find_matches\", \"type\": \"function\", \"signature\": \"(pattern, string, flags=0)\", \"return_type\": \"list\", \"short_description\": \"Searches through the given string for all occurrences of the pattern and returns a list of all matches.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"findPattern\", \"type\": \"callable\", \"signature\": \"(pattern, string)\", \"return_type\": \"Match object or None\", \"short_description\": \"Searches through the given string for the first occurrence of the specified pattern and returns a Match object if a match is found, otherwise returns None.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"findAllMatches\", \"type\": \"function\", \"signature\": \"(pattern, string, flags=0)\", \"return_type\": \"list\", \"short_description\": \"Searches through the string for all non-overlapping matches of the pattern and returns them as a list.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"findPatternInFiles\", \"type\": \"function\", \"signature\": \"(directory, pattern)\", \"return_type\": \"dict\", \"short_description\": \"Searches through all files in the given directory for a specified pattern and returns a dictionary mapping subdirectories to lists of matched filenames.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"findMatches\", \"type\": \"function\", \"signature\": \"(pattern, string)\", \"return_type\": \"list\", \"short_description\": \"Searches through the given string for all non-overlapping matches of the pattern and returns them as a list of strings.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"extract_text_from_pdf\", \"type\": \"function\", \"signature\": \"(file_path: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Extracts text from a PDF file.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"parse_string\", \"type\": \"function\", \"signature\": \"(pattern, string)\", \"return_type\": \"list\", \"short_description\": \"Searches through a string for all occurrences of a pattern and returns a list of all matches.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"find_substring_positions\", \"type\": \"function\", \"signature\": \"(pattern, string)\", \"return_type\": \"list[int]\", \"short_description\": \"Searches for all non-overlapping matches of the pattern in the string and returns a list of starting positions.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"find_and_replace\", \"type\": \"function\", \"signature\": \"(text, pattern, replacement)\", \"return_type\": \"str\", \"short_description\": \"Searches for occurrences of a pattern in a text and replaces them with a specified replacement string.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"extract_text\", \"type\": \"function\", \"signature\": \"(file_path)\", \"return_type\": \"str\", \"short_description\": \"Extracts text from a given file and returns it as a string.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"find_processed_files\", \"type\": \"function\", \"signature\": \"(directory_path: str)\", \"return_type\": \"List[str]\", \"short_description\": \"Searches through the given directory for files that end with '_processed' and returns a list of their names.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"find_matches\", \"type\": \"function\", \"signature\": \"(pattern, string, flags=0)\", \"return_type\": \"list\", \"short_description\": \"Searches through the string for all matches of the pattern and returns a list of all matches.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"generate_unique_filename\", \"type\": \"function\", \"signature\": \"(prefix, extension)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique filename by appending a unique identifier to the given prefix and extension.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"regexFind\", \"type\": \"function\", \"signature\": \"(pattern, string, flags=0)\", \"return_type\": \"Match object or None\", \"short_description\": \"Searches through a string for a match to the given pattern, returning a Match object if a match is found, or None otherwise.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"extract_text_from_files\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Extracts and returns all text content from files in the specified directory.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"findFilesWithPredicate\", \"type\": \"function\", \"signature\": \"(directory_path, predicate_functions)\", \"return_type\": \"dict\", \"short_description\": \"Searches through the files in a directory and applies a set of predicates to each file, returning a dictionary of results.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"find_files_with_conditions\", \"type\": \"function\", \"signature\": \"(directory_path, conditions)\", \"return_type\": \"list\", \"short_description\": \"Searches through the files in a directory and returns a list of file paths that match specified conditions.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"find_files_with_predicates\", \"type\": \"function\", \"signature\": \"(directory_path, predicates)\", \"return_type\": \"dict\", \"short_description\": \"Searches through the files in a directory and applies a list of predicates to each file, returning a dictionary with the results.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"find_special_chars\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"dict\", \"short_description\": \"Searches through the files in a directory and identifies those containing special characters in their filenames.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"findFilesWithPredicates\", \"type\": \"function\", \"signature\": \"(directory_path, predicates)\", \"return_type\": \"dict\", \"short_description\": \"Searches through the files in a directory and applies a list of predicates to each file, returning a dictionary of results.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"find_files_with_predicates\", \"type\": \"function\", \"signature\": \"(dir_path: str, predicates: list)\", \"return_type\": \"dict\", \"short_description\": \"Searches through the files in a directory and applies a list of predicates to each file, returning a dictionary with the results.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"findFilesWithPredicates\", \"type\": \"function\", \"signature\": \"(directoryPath, predicates)\", \"return_type\": \"dict\", \"short_description\": \"Searches through the files in the given directory and returns a dictionary with the results of applying the provided predicates to each file.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"findAllFilesWithExtension\", \"type\": \"function\", \"signature\": \"(directory_path, extension)\", \"return_type\": \"list\", \"short_description\": \"Searches for all files with a specific extension within a given directory and returns a list of their paths.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"findFilesWithPredicate\", \"type\": \"function\", \"signature\": \"(directoryPath, predicates)\", \"return_type\": \"dict\", \"short_description\": \"Searches through the files in the specified directory and returns a dictionary of results based on the provided predicates.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/988", "solution": "{\"name\": \"findFilesWithConditions\", \"type\": \"function\", \"signature\": \"(directoryPath, conditions)\", \"return_type\": \"dict\", \"short_description\": \"Searches through the files in the specified directory and returns a dictionary containing the results of applying the given conditions to each file.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"extract_url\", \"type\": \"function\", \"signature\": \"(myString)\", \"return_type\": \"str\", \"short_description\": \"Extracts the first URL found in the given string.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"extractTitleFromUrl\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"str\", \"short_description\": \"Extracts the title from a webpage given its URL.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"extractUrlContent\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"str\", \"short_description\": \"Extracts content from a given webpage and returns its title as a string.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"extractWebpageTitle\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"str\", \"short_description\": \"Extracts the title from a given webpage.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/1124", "solution": "{\n  \"name\": \"find_image_urls\",\n  \"type\": \"function\",\n  \"signature\": \"(html_content)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Extracts URLs of image tags from the provided HTML content.\"\n}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"extractUrlContent\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"str\", \"short_description\": \"Extracts the content of a webpage given its URL and returns it as a string.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"extractUrlContent\", \"type\": \"function\", \"signature\": \"(url, headers)\", \"return_type\": \"str\", \"short_description\": \"Extracts the content of a webpage given its URL and optional headers.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"extractUrlContent\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"str\", \"short_description\": \"Extracts content from a given URL and returns it as a string.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"extractUrls\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"list\", \"short_description\": \"Extracts all URLs from the given HTML content.\"}"}
{"api_id": 198, "api_name": "re.search", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"extract_webpage_title\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"str\", \"short_description\": \"Extracts the title from a given webpage.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/34", "solution": "{\"name\": \"generate_word_cloud\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"WordCloud\", \"short_description\": \"Generates a word cloud from the provided text.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/34", "solution": "{\"name\": \"generate_word_cloud\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"WordCloud\", \"short_description\": \"Generates a word cloud from the given text.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/34", "solution": "{\"name\": \"generate_word_cloud\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"WordCloud\", \"short_description\": \"Generates a word cloud from the given text.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/34", "solution": "{\"name\": \"generateWordCloud\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"WordCloud\", \"short_description\": \"Generates a word cloud from the provided text.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/34", "solution": "{\"name\": \"generate_word_cloud\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"WordCloud\", \"short_description\": \"Generates a word cloud from the provided text.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/34", "solution": "{\"name\": \"generate_word_cloud\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"WordCloud\", \"short_description\": \"Generates a word cloud from the provided text.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/34", "solution": "{\"name\": \"generateWordCloud\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"WordCloud\", \"short_description\": \"Generates a word cloud from the provided text.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/34", "solution": "{\"name\": \"generateWordCloud\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"WordCloud\", \"short_description\": \"Generates a word cloud from the provided text.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/34", "solution": "{\"name\": \"generateWordCloud\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"WordCloud\", \"short_description\": \"Generates a word cloud from the provided text.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/34", "solution": "{\"name\": \"generate_word_cloud\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"WordCloud\", \"short_description\": \"Generates a word cloud from the given text.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/184", "solution": "{\n  \"name\": \"replace_digits_and_stopwords\",\n  \"type\": \"function\",\n  \"signature\": \"(string, digits_pattern='\\\\d+', stopwords_list=None)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Replaces digits and removes stopwords from the input string.\"\n}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/184", "solution": "{\"name\": \"normalizeText\", \"type\": \"function\", \"signature\": \"(text, stopwords)\", \"return_type\": \"str\", \"short_description\": \"Normalizes the given text by converting it to lowercase, removing digits, non-alphanumeric characters, and stopwords.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/184", "solution": "{\"name\": \"cleanText\", \"type\": \"function\", \"signature\": \"(text, stopwords=None)\", \"return_type\": \"str\", \"short_description\": \"Cleans and prepares a given text by removing digits, punctuation, and stopwords.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/184", "solution": "{\"name\": \"normalizeText\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"str\", \"short_description\": \"Normalizes the given text by converting it to lowercase, removing digits, and removing non-alphabetic characters, then filtering out stopwords.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/184", "solution": "{\"name\": \"cleanText\", \"type\": \"function\", \"signature\": \"(text, stopwords)\", \"return_type\": \"str\", \"short_description\": \"Cleans and processes a given text by removing digits, punctuation, and stopwords.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/184", "solution": "{\"name\": \"normalizeText\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"str\", \"short_description\": \"Normalizes the given text by converting it to lowercase, removing digits, non-alphanumeric characters, and stopwords.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/184", "solution": "{\"name\": \"normalizeText\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"str\", \"short_description\": \"Normalizes the given text by converting it to lowercase, removing digits, punctuation, and stopwords.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/184", "solution": "{\"name\": \"normalizeText\", \"type\": \"function\", \"signature\": \"(text, stopwords=[], pattern='\\\\d+|\\\\W+')\", \"return_type\": \"str\", \"short_description\": \"Normalizes the given text by converting it to lowercase, removing specified patterns, and filtering out stopwords.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/184", "solution": "{\"name\": \"cleanText\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"str\", \"short_description\": \"Cleans the input text by converting it to lowercase, removing digits, punctuation, and stopwords.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/184", "solution": "{\"name\": \"normalizeText\", \"type\": \"function\", \"signature\": \"(text, stopwords=None)\", \"return_type\": \"str\", \"short_description\": \"Normalizes the given text by converting it to lowercase, removing digits and punctuation, and filtering out stopwords. Returns the normalized text.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generate_synthetic_data\", \"type\": \"function\", \"signature\": \"(start_year=1980, end_year=2000, email_domain='example.com', latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'], other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], rng_seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a synthetic dataset containing personal information, including names, dates of birth, and email addresses.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generate_email_list\", \"type\": \"function\", \"signature\": \"(start_year, end_year, email_domain, latin_names, other_names, rng_seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame containing IDs, names, dates of birth, and email addresses based on the provided parameters.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generate_synthetic_data\", \"type\": \"function\", \"signature\": \"(start_year=1980, end_year=2000, email_domain='example.com', latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'], other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], rng_seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame containing synthetic personal data, including Latin and other names, dates of birth, and email addresses.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generate_synthetic_data\", \"type\": \"function\", \"signature\": \"(start_year=1980, end_year=2000, email_domain='example.com', latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'], other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], rng_seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame containing synthetic personal data, including names, dates of birth, and email addresses.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/760", "solution": "{\n  \"name\": \"generate_email_list\",\n  \"type\": \"function\",\n  \"signature\": \"(start_year, end_year, email_domain, latin_names, other_names, rng_seed=None)\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a DataFrame containing email addresses based on given parameters.\"\n}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"extractEmailDomain\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Extracts the email domain from the first email in the provided DataFrame.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generate_email_addresses\", \"type\": \"function\", \"signature\": \"(names, domain, start_year, end_year, email_domain, rng_seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame of email addresses based on provided names, birth years, and other parameters.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generate_user_data\", \"type\": \"function\", \"signature\": \"(start_year=1980, end_year=2000, email_domain='example.com', latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'], other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], rng_seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame containing user data including ID, Name, Date of Birth, and Email.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/760", "solution": "{\"name\": \"generateRandomData\", \"type\": \"function\", \"signature\": \"(start_year=1980, end_year=2000, email_domain='example.com', latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'], other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], rng_seed=None)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame with randomly populated data including names, dates of birth, and emails based on given parameters.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/760", "solution": "{\n  \"name\": \"extract_name_parts\",\n  \"type\": \"function\",\n  \"signature\": \"(name_string)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Extracts the first and last names from a full name string.\"\n}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"findAllMatches\", \"type\": \"method\", \"signature\": \"(pattern, string, flags=0)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of all non-overlapping matches of the pattern in the string.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"capitalizeWords\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"str\", \"short_description\": \"Capitalizes the first letter of each word in the input text.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"replaceAll\", \"type\": \"function\", \"signature\": \"(pattern, repl, string)\", \"return_type\": \"str\", \"short_description\": \"Replaces all occurrences of the pattern in the given string with the replacement.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"capitalizeWords\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"str\", \"short_description\": \"Capitalizes the first letter of each word in the given text.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"findAllMatches\", \"type\": \"method\", \"signature\": \"(pattern, string, flags=0)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of all non-overlapping matches of the pattern in the string, according to the given flags.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"capitalizeText\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"str\", \"short_description\": \"Capitalizes the first letter of each word in the provided text.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"highlightKeywords\", \"type\": \"function\", \"signature\": \"(keywords, text)\", \"return_type\": \"str\", \"short_description\": \"Highlights specified keywords in the given text by surrounding them with HTML <mark> tags.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"highlightWords\", \"type\": \"function\", \"signature\": \"(pattern, repl, string, count=0, flags=0)\", \"return_type\": \"str\", \"short_description\": \"Replaces all occurrences of the pattern in the string with the replacement, highlighting each occurrence.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"capitalizeWords\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"str\", \"short_description\": \"Capitalizes the first letter of each word in the given text.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/1085", "solution": "{\"name\": \"countWords\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"List[Tuple[str, int]]\", \"short_description\": \"Counts the frequency of each word in the given text.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/1085", "solution": "{\"name\": \"countWords\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"list\", \"short_description\": \"Counts the frequency of each word in the given text and returns a list of tuples sorted by frequency in descending order.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/1085", "solution": "{\"name\": \"findAllMatches\", \"type\": \"method\", \"signature\": \"(pattern, string, flags=0)\", \"return_type\": \"list\", \"short_description\": \"Searches the string for all non-overlapping matches of the pattern and returns a list of them.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/1085", "solution": "{\"name\": \"findMostCommonWords\", \"type\": \"function\", \"signature\": \"(text, count=10)\", \"return_type\": \"list\", \"short_description\": \"Finds the most common words in a given text and returns them as a list of tuples.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/1085", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"List[Tuple[str, int]]\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/1085", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/1085", "solution": "{\"name\": \"findReplace\", \"type\": \"callable\", \"signature\": \"(pattern, repl, string, count=0, flags=0)\", \"return_type\": \"str\", \"short_description\": \"Performs a find-and-replace operation on the input string using the specified pattern and replacement.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/1085", "solution": "{\"name\": \"countWordOccurrences\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"List[Tuple[str, int]]\", \"short_description\": \"Counts the occurrences of each word in the given text.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/1085", "solution": "{\"name\": \"find_longest_word\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"str\", \"short_description\": \"Finds and returns the longest word in the given text.\"}"}
{"api_id": 199, "api_name": "re.sub", "task_id": "BigCodeBench/1085", "solution": "{\"name\": \"findMostCommonWords\", \"type\": \"function\", \"signature\": \"(string, count=10)\", \"return_type\": \"List[Tuple[str, int]]\", \"short_description\": \"Finds the most common words in a given text and returns them as a list of tuples, each containing a word and its frequency.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"extract_keywords\", \"type\": \"function\", \"signature\": \"(text, num_keywords=5)\", \"return_type\": \"List[str]\", \"short_description\": \"Extracts the top 'num_keywords' from the given text using NLP techniques.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"generate_word_frequency\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"dict\", \"short_description\": \"Generates a word frequency dictionary from the provided text.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"get_word_frequency\", \"type\": \"function\", \"signature\": \"(text, stop_words=[]) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Extracts word frequencies from a given text, ignoring common stop words.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"generate_word_cloud\", \"type\": \"function\", \"signature\": \"(text, max_words=200, width=400, height=300)\", \"return_type\": \"Image\", \"short_description\": \"Generates a word cloud image from the provided text.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"generateWordCloud\", \"type\": \"function\", \"signature\": \"(text, max_words=200, width=400, height=300)\", \"return_type\": \"Image\", \"short_description\": \"Generates a word cloud image from the given text.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"generate_word_frequency\", \"type\": \"function\", \"signature\": \"(text_list, ignore_punctuation=True)\", \"return_type\": \"dict\", \"short_description\": \"Generates a word frequency dictionary from a list of texts, optionally ignoring punctuation.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"find_patterns\", \"type\": \"function\", \"signature\": \"(text, pattern, flags=0)\", \"return_type\": \"list\", \"short_description\": \"Searches for occurrences of the given pattern in the provided text and returns a list of matches.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"generate_word_frequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"dict\", \"short_description\": \"Generates a dictionary of word frequencies from a given text.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"generate_word_cloud\", \"type\": \"function\", \"signature\": \"(text, max_words=100, background_color='black')\", \"return_type\": \"Image\", \"short_description\": \"Generates a word cloud image from the given text.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"extract_keywords\", \"type\": \"function\", \"signature\": \"(text, num_keywords=5)\", \"return_type\": \"List[str]\", \"short_description\": \"Extracts the most significant keywords from a given text using NLP techniques.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"splitStringByPattern\", \"type\": \"function\", \"signature\": \"(input_string, pattern)\", \"return_type\": \"list\", \"short_description\": \"Splits the input string by the given pattern and returns a list of substrings.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"parseJson\", \"type\": \"function\", \"signature\": \"(json_str)\", \"return_type\": \"dict\", \"short_description\": \"Parses a JSON string into a Python dictionary.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"convertJsonToDataFrame\", \"type\": \"function\", \"signature\": \"(json_str)\", \"return_type\": \"DataFrame\", \"short_description\": \"Converts a JSON string into a pandas DataFrame, applying numeric transformations to appropriate fields.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"getUniqueValues\", \"type\": \"function\", \"signature\": \"(data, key)\", \"return_type\": \"list\", \"short_description\": \"Extracts unique values from a list of dictionaries based on a specified key.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"is_numeric_string\", \"type\": \"function\", \"signature\": \"(value)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the input string represents a numeric value.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"validateJson\", \"type\": \"function\", \"signature\": \"(json_str)\", \"return_type\": \"dict\", \"short_description\": \"Validates the JSON string and returns a dictionary. If the JSON is invalid, returns an empty dictionary.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"generateDataFrame\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a DataFrame from the provided data, automatically converting numeric strings and handling nested data structures.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"parseJsonData\", \"type\": \"function\", \"signature\": \"(json_str)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Parses a JSON string and returns a DataFrame with processed data.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"calculateAverage\", \"type\": \"function\", \"signature\": \"(numbers)\", \"return_type\": \"float\", \"short_description\": \"Calculates the average of a list of numbers.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/458", "solution": "{\"name\": \"generate_summary\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"dict\", \"short_description\": \"Generates a summary of the provided data, focusing on key metrics and insights.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"extractTopics\", \"type\": \"function\", \"signature\": \"(texts, numTopics)\", \"return_type\": \"List[List[str]]\", \"short_description\": \"Extracts the main topics from a list of texts using Non-negative Matrix Factorization (NMF).\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"extractTopicsFromTexts\", \"type\": \"function\", \"signature\": \"(texts: List[str], numTopics: int)\", \"return_type\": \"List[List[str]]\", \"short_description\": \"Extracts the main topics from a list of texts using Non-negative Matrix Factorization (NMF).\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/655", "solution": "{\n  \"name\": \"extractTopics\",\n  \"type\": \"function\",\n  \"signature\": \"(texts, num_topics)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Extracts topics from a list of texts using Non-negative Matrix Factorization (NMF).\"\n}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"generateTopics\", \"type\": \"function\", \"signature\": \"(texts, numTopics)\", \"return_type\": \"list\", \"short_description\": \"Generates topics from a list of texts using Non-negative Matrix Factorization (NMF).\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"generateTopics\", \"type\": \"function\", \"signature\": \"(texts, numTopics)\", \"return_type\": \"list\", \"short_description\": \"Extracts topics from a list of texts using Non-negative Matrix Factorization (NMF).\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"extractTopics\", \"type\": \"function\", \"signature\": \"(texts, numTopics)\", \"return_type\": \"List[List[str]]\", \"short_description\": \"Extracts the main topics from a list of texts using Non-negative Matrix Factorization (NMF).\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"generateTopics\", \"type\": \"function\", \"signature\": \"(texts, numTopics)\", \"return_type\": \"list\", \"short_description\": \"Extracts topics from a list of texts using Non-negative Matrix Factorization (NMF).\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"extractTopics\", \"type\": \"function\", \"signature\": \"(texts, num_topics)\", \"return_type\": \"list\", \"short_description\": \"Extracts the main topics from a list of texts using Non-negative Matrix Factorization (NMF).\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"extractTopics\", \"type\": \"function\", \"signature\": \"(texts, numTopics)\", \"return_type\": \"List[List[str]]\", \"short_description\": \"Extracts topics from a list of texts using Non-negative Matrix Factorization (NMF).\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"compilePattern\", \"type\": \"function\", \"signature\": \"(pattern, flags=0)\", \"return_type\": \"Pattern\", \"short_description\": \"Compiles a regular expression pattern and returns a Pattern object.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/657", "solution": "{\"name\": \"generateWordVectors\", \"type\": \"function\", \"signature\": \"(texts, stopwords=None)\", \"return_type\": \"Word2Vec\", \"short_description\": \"Generates word vectors for the given list of texts using the Word2Vec model.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/657", "solution": "{\n  \"name\": \"split_text_by_pattern\",\n  \"type\": \"function\",\n  \"signature\": \"(text, pattern)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Splits a given text into segments based on a specified pattern.\"\n}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/657", "solution": "{\"name\": \"extractKeywords\", \"type\": \"function\", \"signature\": \"(text, num_keywords=5)\", \"return_type\": \"list\", \"short_description\": \"Extracts the most relevant keywords from a given text using NLP techniques.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/657", "solution": "{\"name\": \"capitalizeTexts\", \"type\": \"function\", \"signature\": \"(texts)\", \"return_type\": \"list\", \"short_description\": \"Capitalizes the first letter of each word in a list of texts.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/657", "solution": "{\"name\": \"splitTextIntoWords\", \"type\": \"function\", \"signature\": \"(text, stopwords=None)\", \"return_type\": \"list\", \"short_description\": \"Splits a given text into words, optionally excluding stopwords.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/657", "solution": "{\"name\": \"generateWordVectors\", \"type\": \"function\", \"signature\": \"(texts, stopwords=None)\", \"return_type\": \"Word2Vec\", \"short_description\": \"Generates word vectors from a list of texts, optionally using a list of stopwords.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/657", "solution": "{\"name\": \"extractKeywords\", \"type\": \"function\", \"signature\": \"(text, num_keywords=10)\", \"return_type\": \"list\", \"short_description\": \"Extracts the most relevant keywords from the given text using NLP techniques.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/657", "solution": "{\"name\": \"parseText\", \"type\": \"function\", \"signature\": \"(text, pattern)\", \"return_type\": \"str\", \"short_description\": \"Parses a given text using a provided regular expression pattern and returns the parsed text.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/657", "solution": "{\"name\": \"parseText\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"dict\", \"short_description\": \"Parses a given text into a structured dictionary with word counts and sentence boundaries.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/657", "solution": "{\"name\": \"removeSpecialChars\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"str\", \"short_description\": \"Removes special characters from the given text.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"generate_csv_duplicates\", \"type\": \"function\", \"signature\": \"(original_directory, pattern)\", \"return_type\": \"list\", \"short_description\": \"Searches for CSV files in a directory matching a given pattern and generates duplicate copies of these files.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"parseCsvFiles\", \"type\": \"function\", \"signature\": \"(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\", \"return_type\": \"list\", \"short_description\": \"Parses CSV files in a directory based on a given pattern and renames them.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"parseCsvFiles\", \"type\": \"function\", \"signature\": \"(directory, pattern)\", \"return_type\": \"list\", \"short_description\": \"Parses CSV files in a directory based on a given pattern and renames them.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"parseFiles\", \"type\": \"function\", \"signature\": \"(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$') -> list\", \"return_type\": \"list\", \"short_description\": \"Parses files in a directory matching a given pattern and renames them.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"generate_summary_report\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"str\", \"short_description\": \"Generates a summary report from the provided data.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"generateUniqueIdentifier\", \"type\": \"function\", \"signature\": \"(length=10)\", \"return_type\": \"str\", \"short_description\": \"Generates a unique identifier string of the specified length.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"generate_summary_report\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a summary report in HTML format.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"findAndReplace\", \"type\": \"function\", \"signature\": \"(text, old_substring, new_substring)\", \"return_type\": \"str\", \"short_description\": \"Replace all occurrences of a specified substring within a given text with another substring.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"splitCsvFiles\", \"type\": \"function\", \"signature\": \"(directory, pattern='^([\\\\s\\\\S]*?)-\\\\d+\\\\.csv$')\", \"return_type\": \"list\", \"short_description\": \"Splits CSV files by a given pattern and renames them based on the matched prefix.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/771", "solution": "{\"name\": \"generate_csv_summary\", \"type\": \"function\", \"signature\": \"(directory: str, pattern: str = r'^(.*?)-\\\\d+\\\\.csv$')\", \"return_type\": \"dict\", \"short_description\": \"Generates a summary of CSV files in a directory based on a given pattern.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"generatePattern\", \"type\": \"function\", \"signature\": \"(pattern, flags=0)\", \"return_type\": \"Pattern\", \"short_description\": \"Compiles a regular expression pattern and returns a Pattern object.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"computeSimilarity\", \"type\": \"function\", \"signature\": \"(text1, text2)\", \"return_type\": \"(float, float)\", \"short_description\": \"Computes cosine similarity and Levenshtein ratio for two given texts.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"splitTextByWords\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"list[str]\", \"short_description\": \"Splits the input text into a list of words.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateTextMetrics\", \"type\": \"function\", \"signature\": \"(text1, text2)\", \"return_type\": \"tuple(float, float)\", \"short_description\": \"Calculates cosine similarity and Levenshtein ratio for two given texts.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"parseText\", \"type\": \"function\", \"signature\": \"(text: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Parses the input text and returns a dictionary with word counts and unique words.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"extractWords\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"list[str]\", \"short_description\": \"Extracts words from a given text, removing any non-alphanumeric characters.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"extractKeywords\", \"type\": \"function\", \"signature\": \"(text, num_keywords=5)\", \"return_type\": \"list\", \"short_description\": \"Extracts the top N keywords from the given text using TF-IDF vectorization.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateTextMetrics\", \"type\": \"function\", \"signature\": \"(text1, text2)\", \"return_type\": \"tuple[float, float]\", \"short_description\": \"Calculates cosine similarity and Levenshtein ratio for given texts.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"normalizeText\", \"type\": \"function\", \"signature\": \"(text, pattern)\", \"return_type\": \"str\", \"short_description\": \"Normalizes the given text by removing non-alphanumeric characters and converting it to lowercase.\"}"}
{"api_id": 200, "api_name": "re.compile", "task_id": "BigCodeBench/845", "solution": "{\"name\": \"calculateTextMetrics\", \"type\": \"function\", \"signature\": \"(text1, text2)\", \"return_type\": \"dict\", \"short_description\": \"Calculates and returns metrics such as cosine similarity and Levenshtein ratio for two given texts.\"}"}
{"api_id": 201, "api_name": "re.IGNORECASE", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"calculate_word_frequencies\", \"type\": \"function\", \"signature\": \"def calculate_word_frequencies(titles, contents)\", \"return_type\": \"dict\", \"short_description\": \"Calculates word frequencies from titles and contents, ignoring punctuation and case sensitivity.\"}"}
{"api_id": 201, "api_name": "re.IGNORECASE", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"get_word_frequencies\", \"type\": \"function\", \"signature\": \"def get_word_frequencies(articles)\", \"return_type\": \"dict\", \"short_description\": \"Extracts and returns the word frequencies from the content of articles.\"}"}
{"api_id": 201, "api_name": "re.IGNORECASE", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"generate_word_frequencies\", \"type\": \"function\", \"signature\": \"def generate_word_frequencies(texts: List[str], ignore_case: bool = False) -> Dict[str, int]:\", \"return_type\": \"Dict[str, int]\", \"short_description\": \"Generates word frequencies from a list of texts. Optionally ignores case.\"}"}
{"api_id": 201, "api_name": "re.IGNORECASE", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"calculate_word_frequencies\", \"type\": \"function\", \"signature\": \"def calculate_word_frequencies(articles: list[str]) -> dict[str, int]:\", \"return_type\": \"dict[str, int]\", \"short_description\": \"Calculates the frequency of each word across a list of article titles and contents.\"}"}
{"api_id": 201, "api_name": "re.IGNORECASE", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"calculate_word_frequencies\", \"type\": \"function\", \"signature\": \"def calculate_word_frequencies(articles: list[str], ignore_case: bool = False) -> dict[str, int]:\", \"return_type\": \"dict[str, int]\", \"short_description\": \"Calculates word frequencies from a list of article titles and contents.\"}"}
{"api_id": 201, "api_name": "re.IGNORECASE", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"calculate_word_frequency\", \"type\": \"function\", \"signature\": \"def calculate_word_frequency(text_list: list[str]) -> dict[str, int]\", \"return_type\": \"dict[str, int]\", \"short_description\": \"Calculates the frequency of each word in a list of texts.\"}"}
{"api_id": 201, "api_name": "re.IGNORECASE", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"get_word_frequencies\", \"type\": \"function\", \"signature\": \"def get_word_frequencies(articles: list[str]) -> dict[str, int]:\", \"return_type\": \"dict[str, int]\", \"short_description\": \"Calculates the frequency of each word in a list of article titles.\"}"}
{"api_id": 201, "api_name": "re.IGNORECASE", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"extract_word_frequencies\", \"type\": \"function\", \"signature\": \"extract_word_frequencies(dataframe)\", \"return_type\": \"dict\", \"short_description\": \"Extracts word frequencies from the titles and contents of articles in a DataFrame.\"}"}
{"api_id": 201, "api_name": "re.IGNORECASE", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"fetch_word_frequencies\", \"type\": \"function\", \"signature\": \"fetch_word_frequencies(text)\", \"return_type\": \"dict\", \"short_description\": \"Extracts and returns the word frequencies from a given text.\"}"}
{"api_id": 201, "api_name": "re.IGNORECASE", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"generate_word_frequencies\", \"type\": \"function\", \"signature\": \"generate_word_frequencies(articles)\", \"return_type\": \"dict\", \"short_description\": \"Generates word frequencies from a list of article titles and contents.\"}"}
{"api_id": 201, "api_name": "re.IGNORECASE", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"getWordFrequencies\", \"type\": \"function\", \"signature\": \"([str], str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Extracts word frequencies from a given text.\"}"}
{"api_id": 201, "api_name": "re.IGNORECASE", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"def calculateWordFrequencies(text: str) -> dict[str, int]:\", \"return_type\": \"dict[str, int]\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 201, "api_name": "re.IGNORECASE", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"getWordFrequencies\", \"type\": \"function\", \"signature\": \"getWordFrequencies(text: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 201, "api_name": "re.IGNORECASE", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"def calculateWordFrequencies(text: str) -> dict[str, int]:\", \"return_type\": \"dict[str, int]\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 201, "api_name": "re.IGNORECASE", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"highlightText\", \"type\": \"function\", \"signature\": \"def highlightText(text, words, color='yellow')\", \"return_type\": \"str\", \"short_description\": \"Highlights specific words in the given text with a specified color.\"}"}
{"api_id": 201, "api_name": "re.IGNORECASE", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"def calculateWordFrequencies(text: str) -> dict[str, int]:\", \"return_type\": \"dict[str, int]\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 201, "api_name": "re.IGNORECASE", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"def calculateWordFrequencies(text: str)\", \"return_type\": \"dict[str, int]\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 201, "api_name": "re.IGNORECASE", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"highlightText\", \"type\": \"function\", \"signature\": \"def highlightText(text, words)\", \"return_type\": \"str\", \"short_description\": \"Highlights specific words in the given text, replacing spaces with underscores and ignoring case.\"}"}
{"api_id": 201, "api_name": "re.IGNORECASE", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"def calculateWordFrequencies(text: str) -> dict[str, int]\", \"return_type\": \"dict[str, int]\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 201, "api_name": "re.IGNORECASE", "task_id": "BigCodeBench/955", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"calculateWordFrequencies(text: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/161", "solution": "{\"name\": \"extractLogData\", \"type\": \"function\", \"signature\": \"(pattern, string)\", \"return_type\": \"list\", \"short_description\": \"Extracts log data from a string using a given pattern and returns a list of matched groups.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/161", "solution": "{\"name\": \"extractLogData\", \"type\": \"function\", \"signature\": \"(log_file, pattern)\", \"return_type\": \"str\", \"short_description\": \"Extracts log data from a file based on a given pattern and returns the path to the CSV file containing the extracted data.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/161", "solution": "{\"name\": \"extract_log_entries\", \"type\": \"function\", \"signature\": \"(log_pattern, log_file)\", \"return_type\": \"list\", \"short_description\": \"Extracts log entries from a file based on a provided regex pattern and returns them as a list of dictionaries.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/161", "solution": "{\"name\": \"extractLogEntries\", \"type\": \"function\", \"signature\": \"(pattern, string)\", \"return_type\": \"list\", \"short_description\": \"Extracts log entries from a given string using a provided pattern.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/161", "solution": "{\"name\": \"extractLogData\", \"type\": \"function\", \"signature\": \"(log_file_path, log_pattern)\", \"return_type\": \"str\", \"short_description\": \"Extracts log data from a file based on a specified pattern and returns the path to the CSV file containing the parsed data.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/161", "solution": "{\"name\": \"extractLogEntries\", \"type\": \"function\", \"signature\": \"(pattern, string)\", \"return_type\": \"list\", \"short_description\": \"Extracts log entries from a given string using a provided regex pattern.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/161", "solution": "{\"name\": \"extractLogData\", \"type\": \"function\", \"signature\": \"(pattern, string)\", \"return_type\": \"list\", \"short_description\": \"Extracts log data from a given string using a provided pattern.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/161", "solution": "{\"name\": \"extractLogData\", \"type\": \"function\", \"signature\": \"(pattern, string)\", \"return_type\": \"list[dict]\", \"short_description\": \"Extracts log data from a string using a given pattern and returns it as a list of dictionaries.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/161", "solution": "{\"name\": \"extractLogEntries\", \"type\": \"function\", \"signature\": \"(pattern, string)\", \"return_type\": \"list\", \"short_description\": \"Extracts log entries from a string using a given pattern, returning a list of matched entries.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/161", "solution": "{\"name\": \"extractLogData\", \"type\": \"function\", \"signature\": \"(pattern, string)\", \"return_type\": \"list\", \"short_description\": \"Extracts log data from a string using a given pattern and returns a list of tuples containing log type, timestamp, and message.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"find_unique_filenames\", \"type\": \"function\", \"signature\": \"(directory)\", \"return_type\": \"List[str]\", \"short_description\": \"Scans the given directory and returns a list of unique filenames found.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"find_unique_files\", \"type\": \"function\", \"signature\": \"(directory, pattern)\", \"return_type\": \"list\", \"short_description\": \"Searches through the files in the specified directory for those matching the given pattern and returns a list of unique file paths.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"find_matching_files\", \"type\": \"function\", \"signature\": \"(directory, pattern)\", \"return_type\": \"list\", \"short_description\": \"Searches through the files in the specified directory and returns a list of files that match the given pattern.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"extract_zip_files\", \"type\": \"function\", \"signature\": \"(directory, pattern=r'^(.*?)-\\\\d+\\\\.zip$')\", \"return_type\": \"list\", \"short_description\": \"Extracts zip files from the specified directory, using the pattern to identify the files.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"find_unique_files\", \"type\": \"function\", \"signature\": \"(directory, pattern)\", \"return_type\": \"list\", \"short_description\": \"Scans a directory for files matching a specific pattern and returns a list of unique file paths.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"extract_zip_files\", \"type\": \"function\", \"signature\": \"(directory, pattern=r'^(.*?)-\\\\d+\\\\.zip$')\", \"return_type\": \"List[str]\", \"short_description\": \"Extracts zip files in a directory based on a given pattern, creating directories for each unique base name found.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"find_matching_files\", \"type\": \"function\", \"signature\": \"(directory, pattern)\", \"return_type\": \"list\", \"short_description\": \"Searches through the files in the given directory and returns a list of filenames that match the specified pattern.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/777", "solution": "{\n  \"name\": \"find_all_matches\",\n  \"type\": \"function\",\n  \"signature\": \"(pattern, string, flags=0)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Searches the string for all non-overlapping matches of the pattern and returns them as a list.\"\n}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"extract_zips\", \"type\": \"function\", \"signature\": \"(directory, pattern=r'^(.*?)-\\\\d+\\\\.zip$')\", \"return_type\": \"List[str]\", \"short_description\": \"Extracts ZIP files in a directory based on a given pattern, creating directories for each unique base name found.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"is_valid_zip_filename\", \"type\": \"function\", \"signature\": \"(filename, pattern)\", \"return_type\": \"bool\", \"short_description\": \"Checks if the filename matches the given pattern for ZIP files.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"find_matches\", \"type\": \"function\", \"signature\": \"(pattern, string, flags=0)\", \"return_type\": \"list\", \"short_description\": \"Searches the string for all occurrences that match the given pattern and returns a list of Match objects.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"find_files_by_pattern\", \"type\": \"function\", \"signature\": \"(directory, pattern)\", \"return_type\": \"list\", \"short_description\": \"Searches through the specified directory for files matching a given pattern and returns a list of their paths.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"regexMatch\", \"type\": \"callable\", \"signature\": \"(pattern, string, flags=0)\", \"return_type\": \"Match object or None\", \"short_description\": \"Applies the given pattern to the string and returns a match object if a match is found, otherwise returns None.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"find_and_move_files\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, file_pattern='\\\\b[A-Za-z0-9]+\\\\.(txt|doc|docx)\\\\b')\", \"return_type\": \"int\", \"short_description\": \"Searches for files matching the pattern in the source directory and moves them to the target directory.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"find_matching_files\", \"type\": \"function\", \"signature\": \"(directory, pattern)\", \"return_type\": \"list\", \"short_description\": \"Searches through the given directory for files matching the specified pattern and returns a list of their paths.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"extractFilePatterns\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Extracts a list of file patterns from the given directory.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"find_replace\", \"type\": \"function\", \"signature\": \"(text, pattern, replacement)\", \"return_type\": \"str\", \"short_description\": \"Performs a find-and-replace operation on the input text using the specified pattern and replacement.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"find_and_move_files\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, file_pattern=r'\\\\b[A-Za-z0-9]+\\\\.(txt|doc|docx)\\\\b')\", \"return_type\": \"int\", \"short_description\": \"Searches for files matching the pattern in the source directory and moves them to the target directory.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"find_replace_text\", \"type\": \"function\", \"signature\": \"(text, search_term, replacement)\", \"return_type\": \"str\", \"short_description\": \"Searches for a term in a given text and replaces it with a specified replacement.\"}"}
{"api_id": 202, "api_name": "re.match", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"find_and_move_files\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, file_pattern='\\\\\\\\b[A-Za-z0-9]+\\\\\\\\.(txt|doc|docx)\\\\\\\\b')\", \"return_type\": \"int\", \"short_description\": \"Searches for files matching the pattern in the source directory and moves them to the target directory.\"}"}
{"api_id": 203, "api_name": "re.split", "task_id": "BigCodeBench/162", "solution": "{\"name\": \"findAllWords\", \"type\": \"function\", \"signature\": \"(pattern, string)\", \"return_type\": \"list\", \"short_description\": \"Searches for all non-overlapping matches of the pattern in the given string and returns a list of all the matching substrings.\"}"}
{"api_id": 203, "api_name": "re.split", "task_id": "BigCodeBench/162", "solution": "{\"name\": \"countWordOccurrences\", \"type\": \"function\", \"signature\": \"(text, word)\", \"return_type\": \"int\", \"short_description\": \"Counts the number of times a specific word appears in a given text.\"}"}
{"api_id": 203, "api_name": "re.split", "task_id": "BigCodeBench/162", "solution": "{\"name\": \"countWordsByPattern\", \"type\": \"function\", \"signature\": \"(pattern, text)\", \"return_type\": \"list\", \"short_description\": \"Splits the input text by the given pattern and returns a list of the resulting substrings.\"}"}
{"api_id": 203, "api_name": "re.split", "task_id": "BigCodeBench/162", "solution": "{\"name\": \"splitTextByPattern\", \"type\": \"function\", \"signature\": \"(pattern, text)\", \"return_type\": \"list\", \"short_description\": \"Splits the input text by occurrences of the given pattern and returns a list of the resulting substrings.\"}"}
{"api_id": 203, "api_name": "re.split", "task_id": "BigCodeBench/162", "solution": "{\"name\": \"findAllWords\", \"type\": \"function\", \"signature\": \"(pattern, text)\", \"return_type\": \"list\", \"short_description\": \"Searches the input text for all occurrences of the given pattern and returns a list of all matched words.\"}"}
{"api_id": 203, "api_name": "re.split", "task_id": "BigCodeBench/162", "solution": "{\"name\": \"extractWords\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"list\", \"short_description\": \"Extracts words from a given text, ignoring punctuation and returning them as a list.\"}"}
{"api_id": 203, "api_name": "re.split", "task_id": "BigCodeBench/162", "solution": "{\"name\": \"findAllWords\", \"type\": \"function\", \"signature\": \"(text, pattern)\", \"return_type\": \"list\", \"short_description\": \"Finds all words in the given text that match the specified pattern.\"}"}
{"api_id": 203, "api_name": "re.split", "task_id": "BigCodeBench/162", "solution": "{\"name\": \"calculateWordFrequencies\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the frequency of each word in the given text.\"}"}
{"api_id": 203, "api_name": "re.split", "task_id": "BigCodeBench/162", "solution": "{\n  \"name\": \"extract_numbers\",\n  \"type\": \"function\",\n  \"signature\": \"(text)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Extracts all numeric sequences from the input text and returns them as a list.\"\n}"}
{"api_id": 203, "api_name": "re.split", "task_id": "BigCodeBench/162", "solution": "{\"name\": \"extractWords\", \"type\": \"function\", \"signature\": \"(text, pattern)\", \"return_type\": \"list\", \"short_description\": \"Extracts words from the input text based on the given pattern and returns them as a list.\"}"}
{"api_id": 204, "api_name": "re.findall", "task_id": "BigCodeBench/1004", "solution": "{\"name\": \"extractWords\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"list\", \"short_description\": \"Extracts all words from a given text.\"}"}
{"api_id": 204, "api_name": "re.findall", "task_id": "BigCodeBench/1004", "solution": "{\"name\": \"extractUrls\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"list\", \"short_description\": \"Extracts all URLs from the given text.\"}"}
{"api_id": 204, "api_name": "re.findall", "task_id": "BigCodeBench/1004", "solution": "{\"name\": \"extractWords\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"List[str]\", \"short_description\": \"Extracts words from the given text.\"}"}
{"api_id": 204, "api_name": "re.findall", "task_id": "BigCodeBench/1004", "solution": "{\"name\": \"extractWords\", \"type\": \"function\", \"signature\": \"(string)\", \"return_type\": \"list\", \"short_description\": \"Extracts words from a given string.\"}"}
{"api_id": 204, "api_name": "re.findall", "task_id": "BigCodeBench/1004", "solution": "{\"name\": \"extractWords\", \"type\": \"function\", \"signature\": \"(string)\", \"return_type\": \"list\", \"short_description\": \"Extracts words from a given string.\"}"}
{"api_id": 204, "api_name": "re.findall", "task_id": "BigCodeBench/1004", "solution": "{\"name\": \"extractWords\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"list\", \"short_description\": \"Extracts all words from the provided text.\"}"}
{"api_id": 204, "api_name": "re.findall", "task_id": "BigCodeBench/1004", "solution": "{\"name\": \"extractWords\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"list[str]\", \"short_description\": \"Extracts a list of words from the provided text.\"}"}
{"api_id": 204, "api_name": "re.findall", "task_id": "BigCodeBench/1004", "solution": "{\"name\": \"extractWords\", \"type\": \"function\", \"signature\": \"(string)\", \"return_type\": \"list\", \"short_description\": \"Extracts words from a given string.\"}"}
{"api_id": 204, "api_name": "re.findall", "task_id": "BigCodeBench/1004", "solution": "{\"name\": \"extractWords\", \"type\": \"function\", \"signature\": \"(string)\", \"return_type\": \"list\", \"short_description\": \"Extracts words from a given string and returns them as a list.\"}"}
{"api_id": 204, "api_name": "re.findall", "task_id": "BigCodeBench/1004", "solution": "{\"name\": \"extractWords\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"List[str]\", \"short_description\": \"Extracts words from a given text string.\"}"}
{"api_id": 204, "api_name": "re.findall", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"extractPhoneNumbers\", \"type\": \"function\", \"signature\": \"(text: str)\", \"return_type\": \"list\", \"short_description\": \"Extracts all phone numbers from the given text.\"}"}
{"api_id": 204, "api_name": "re.findall", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"extractPhoneNumbers\", \"type\": \"function\", \"signature\": \"(text: str)\", \"return_type\": \"list\", \"short_description\": \"Extracts all phone numbers from the provided text.\"}"}
{"api_id": 204, "api_name": "re.findall", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"extractPhoneNumbers\", \"type\": \"function\", \"signature\": \"(text: str) -> list\", \"return_type\": \"list\", \"short_description\": \"Extracts all phone numbers from the given text.\"}"}
{"api_id": 204, "api_name": "re.findall", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"extractPhoneNumbers\", \"type\": \"function\", \"signature\": \"(text: str)\", \"return_type\": \"list\", \"short_description\": \"Extracts all phone numbers from the given text.\"}"}
{"api_id": 204, "api_name": "re.findall", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"extractEmails\", \"type\": \"function\", \"signature\": \"(text: str)\", \"return_type\": \"list\", \"short_description\": \"Extracts all email addresses from the given text.\"}"}
{"api_id": 204, "api_name": "re.findall", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"extractPhoneNumbers\", \"type\": \"function\", \"signature\": \"(text: str)\", \"return_type\": \"list\", \"short_description\": \"Extracts all phone numbers from the given text.\"}"}
{"api_id": 204, "api_name": "re.findall", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"extractPhoneNumbers\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"list\", \"short_description\": \"Extracts all phone numbers from the given text.\"}"}
{"api_id": 204, "api_name": "re.findall", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"extractPhoneNumbers\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"list\", \"short_description\": \"Extracts all phone numbers from the provided text.\"}"}
{"api_id": 204, "api_name": "re.findall", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"extractPhoneNumbers\", \"type\": \"function\", \"signature\": \"(text: str) -> list\", \"return_type\": \"List[str]\", \"short_description\": \"Extracts all phone numbers from the given text.\"}"}
{"api_id": 204, "api_name": "re.findall", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"extractPhoneNumbers\", \"type\": \"function\", \"signature\": \"(text: str)\", \"return_type\": \"list\", \"short_description\": \"Extracts all phone numbers from the provided text.\"}"}
{"api_id": 205, "api_name": "regex.sub", "task_id": "BigCodeBench/374", "solution": "{\n  \"name\": \"replace_quotation_marks\",\n  \"type\": \"function\",\n  \"signature\": \"(pattern, repl, string, count=0, flags=0)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Replaces all occurrences of the specified pattern with the replacement string in the given string.\"\n}"}
{"api_id": 205, "api_name": "regex.sub", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"replaceQuotes\", \"type\": \"function\", \"signature\": \"(pattern, repl, string, count=0, flags=0)\", \"return_type\": \"str\", \"short_description\": \"Replaces all occurrences of a specific pattern with a specified replacement in a given string.\"}"}
{"api_id": 205, "api_name": "regex.sub", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"sanitizeExcelCells\", \"type\": \"function\", \"signature\": \"(workbook, pattern, replacement)\", \"return_type\": \"None\", \"short_description\": \"This function sanitizes all string values in an Excel workbook by replacing a specific pattern with a given replacement.\"}"}
{"api_id": 205, "api_name": "regex.sub", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"replaceQuotes\", \"type\": \"function\", \"signature\": \"(pattern, repl, string, count=0, flags=0, pos=None, endpos=None)\", \"return_type\": \"str\", \"short_description\": \"Replaces all occurrences of a specific pattern with a replacement string in a given input string.\"}"}
{"api_id": 205, "api_name": "regex.sub", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"replace_quotes\", \"type\": \"function\", \"signature\": \"(pattern, repl, string, count=0, flags=0)\", \"return_type\": \"str\", \"short_description\": \"Replaces all occurrences of the specified pattern in the given string with the replacement text.\"}"}
{"api_id": 205, "api_name": "regex.sub", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"replaceSpecialQuotes\", \"type\": \"function\", \"signature\": \"(pattern, repl, string, count=0, flags=0, pos=None, endpos=None, **kwargs)\", \"return_type\": \"str\", \"short_description\": \"Replaces special quotes in a given string.\"}"}
{"api_id": 205, "api_name": "regex.sub", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"processExcelFiles\", \"type\": \"function\", \"signature\": \"(directory_path='./xlsx_files/')\", \"return_type\": \"int\", \"short_description\": \"Processes all Excel files in the specified directory, replacing double quotes with escaped double quotes in cell values.\"}"}
{"api_id": 205, "api_name": "regex.sub", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"replaceAllQuotes\", \"type\": \"callable\", \"signature\": \"(pattern, replacement, text)\", \"return_type\": \"str\", \"short_description\": \"Replaces all occurrences of quotes in a given text with double quotes.\"}"}
{"api_id": 205, "api_name": "regex.sub", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"replaceQuotesInCells\", \"type\": \"function\", \"signature\": \"(workbook, pattern, repl)\", \"return_type\": \"None\", \"short_description\": \"Replaces occurrences of the pattern with the replacement in all cells of the given workbook.\"}"}
{"api_id": 205, "api_name": "regex.sub", "task_id": "BigCodeBench/374", "solution": "{\"name\": \"replaceAllQuotes\", \"type\": \"callable\", \"signature\": \"(string, pattern, replacement)\", \"return_type\": \"str\", \"short_description\": \"Replaces all occurrences of a specific pattern with a specified replacement within a given string.\"}"}
{"api_id": 206, "api_name": "requests.exceptions.HTTPError", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"fetch_table_data\", \"type\": \"function\", \"signature\": \"(url, table_id)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches and parses an HTML table from a given URL and returns it as a pandas DataFrame.\"}"}
{"api_id": 206, "api_name": "requests.exceptions.HTTPError", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"fetchTableData\", \"type\": \"function\", \"signature\": \"(url, table_id)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches and parses an HTML table from a given URL based on the specified table ID.\"}"}
{"api_id": 206, "api_name": "requests.exceptions.HTTPError", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"fetch_table_data\", \"type\": \"function\", \"signature\": \"(url, table_id)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches and parses an HTML table from a given URL based on its ID.\"}"}
{"api_id": 206, "api_name": "requests.exceptions.HTTPError", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"fetch_table_data\", \"type\": \"function\", \"signature\": \"(url, table_id)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Retrieves a table from a given URL and returns it as a pandas DataFrame.\"}"}
{"api_id": 206, "api_name": "requests.exceptions.HTTPError", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"fetch_table_data\", \"type\": \"function\", \"signature\": \"(url, table_id)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches and processes HTML data to extract a table by its ID and returns it as a pandas DataFrame.\"}"}
{"api_id": 206, "api_name": "requests.exceptions.HTTPError", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"fetch_table_data\", \"type\": \"function\", \"signature\": \"(url, table_id)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Retrieves a table from a webpage and returns it as a pandas DataFrame.\"}"}
{"api_id": 206, "api_name": "requests.exceptions.HTTPError", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"fetch_table_data\", \"type\": \"function\", \"signature\": \"(url, table_id)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches and processes an HTML table from a given URL based on its ID.\"}"}
{"api_id": 206, "api_name": "requests.exceptions.HTTPError", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"fetch_table_data\", \"type\": \"function\", \"signature\": \"(url, table_id)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches and parses an HTML table from a given URL using its ID.\"}"}
{"api_id": 206, "api_name": "requests.exceptions.HTTPError", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"fetch_table_data\", \"type\": \"function\", \"signature\": \"(url, table_id)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches and parses an HTML table from a given URL based on its ID.\"}"}
{"api_id": 206, "api_name": "requests.exceptions.HTTPError", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"fetchTableData\", \"type\": \"function\", \"signature\": \"(url, tableId)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches and parses an HTML table from a given URL based on the specified table ID.\"}"}
{"api_id": 207, "api_name": "requests.HTTPError", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchTableData\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches and parses a table from a given webpage and returns it as a pandas DataFrame.\"}"}
{"api_id": 207, "api_name": "requests.HTTPError", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchWebpageData\", \"type\": \"function\", \"signature\": \"(url='http://example.com')\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches data from a webpage and returns it as a pandas DataFrame. Assumes the first table on the page is relevant.\"}"}
{"api_id": 207, "api_name": "requests.HTTPError", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchHtmlTable\", \"type\": \"function\", \"signature\": \"(url: str)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches an HTML table from the given URL and returns it as a pandas DataFrame.\"}"}
{"api_id": 207, "api_name": "requests.HTTPError", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchWebPageData\", \"type\": \"function\", \"signature\": \"(url='http://example.com')\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches data from a web page and returns it as a pandas DataFrame.\"}"}
{"api_id": 207, "api_name": "requests.HTTPError", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchPageData\", \"type\": \"function\", \"signature\": \"(url='http://example.com')\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches data from a given URL and parses it into a pandas DataFrame.\"}"}
{"api_id": 207, "api_name": "requests.HTTPError", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchPageData\", \"type\": \"function\", \"signature\": \"(url='http://example.com')\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches data from a webpage and returns it as a Pandas DataFrame.\"}"}
{"api_id": 207, "api_name": "requests.HTTPError", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchWebpageData\", \"type\": \"function\", \"signature\": \"(url='http://example.com')\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches data from a webpage and returns it as a pandas DataFrame.\"}"}
{"api_id": 207, "api_name": "requests.HTTPError", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchTableData\", \"type\": \"function\", \"signature\": \"(url='http://example.com')\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches and parses a table from a given webpage and returns it as a pandas DataFrame.\"}"}
{"api_id": 207, "api_name": "requests.HTTPError", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchWebData\", \"type\": \"function\", \"signature\": \"(url='http://example.com')\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches web data from a given URL and returns it as a pandas DataFrame.\"}"}
{"api_id": 207, "api_name": "requests.HTTPError", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchHtmlTable\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Fetches and parses an HTML table from a given URL and returns it as a pandas DataFrame.\"}"}
{"api_id": 208, "api_name": "requests.exceptions.RequestException", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"downloadAndExtract\", \"type\": \"function\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple\", \"short_description\": \"Downloads a file from a given URL and extracts its contents into a specified directory.\"}"}
{"api_id": 208, "api_name": "requests.exceptions.RequestException", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"fetchAndExtract\", \"type\": \"function\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple[str, list[str]]\", \"short_description\": \"Downloads a file from a given URL and extracts its contents to a specified directory.\"}"}
{"api_id": 208, "api_name": "requests.exceptions.RequestException", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"downloadAndUnzipFile\", \"type\": \"function\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple[str, list[str]]\", \"short_description\": \"Downloads a file from a given URL and extracts its contents into a specified directory.\"}"}
{"api_id": 208, "api_name": "requests.exceptions.RequestException", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"fetchAndUnzip\", \"type\": \"function\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple[str, list[str]]\", \"short_description\": \"Downloads a file from a given URL and extracts its contents to a specified directory.\"}"}
{"api_id": 208, "api_name": "requests.exceptions.RequestException", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"downloadAndExtract\", \"type\": \"function\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple\", \"short_description\": \"Downloads a file from a given URL and extracts its contents into a specified directory.\"}"}
{"api_id": 208, "api_name": "requests.exceptions.RequestException", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"fetchAndUnzip\", \"type\": \"function\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple[str, list[str]]\", \"short_description\": \"Downloads a file from the given URL and extracts it, returning a status message and a list of extracted file names.\"}"}
{"api_id": 208, "api_name": "requests.exceptions.RequestException", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"downloadAndExtract\", \"type\": \"function\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple[str, list[str]]\", \"short_description\": \"Downloads a file from a given URL and extracts its contents into a specified directory.\"}"}
{"api_id": 208, "api_name": "requests.exceptions.RequestException", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"downloadAndExtract\", \"type\": \"function\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple(str, list(str))\", \"short_description\": \"Downloads a file from the given URL and extracts its contents into a specified directory.\"}"}
{"api_id": 208, "api_name": "requests.exceptions.RequestException", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"downloadAndExtract\", \"type\": \"function\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple[str, list[str]]\", \"short_description\": \"Downloads a file from the given URL and extracts its contents to a specified directory.\"}"}
{"api_id": 208, "api_name": "requests.exceptions.RequestException", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"fetchAndExtract\", \"type\": \"function\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple[str, list[str]]\", \"short_description\": \"Downloads a file from a given URL and extracts its contents into a specified directory.\"}"}
{"api_id": 209, "api_name": "requests.ConnectionError", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchWebPageData\", \"type\": \"function\", \"signature\": \"(url='http://example.com')\", \"return_type\": \"DataFrame\", \"short_description\": \"Fetches data from a web page and returns it as a pandas DataFrame.\"}"}
{"api_id": 209, "api_name": "requests.ConnectionError", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchWebData\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches and parses web data from a given URL, returning it as a pandas DataFrame.\"}"}
{"api_id": 209, "api_name": "requests.ConnectionError", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchWebPageData\", \"type\": \"function\", \"signature\": \"(url='http://example.com')\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches and parses a webpage to extract data from the first table found.\"}"}
{"api_id": 209, "api_name": "requests.ConnectionError", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchWebPageData\", \"type\": \"function\", \"signature\": \"(url='http://example.com')\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches and parses data from a web page, focusing on the first table found.\"}"}
{"api_id": 209, "api_name": "requests.ConnectionError", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchWebPageData\", \"type\": \"function\", \"signature\": \"(url='http://example.com')\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches data from a web page and returns it as a pandas DataFrame.\"}"}
{"api_id": 209, "api_name": "requests.ConnectionError", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchWebPageData\", \"type\": \"function\", \"signature\": \"(url='http://example.com')\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches and processes a web page, extracting data from its first table into a pandas DataFrame.\"}"}
{"api_id": 209, "api_name": "requests.ConnectionError", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchWebData\", \"type\": \"function\", \"signature\": \"(url='http://example.com')\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches data from a given URL and returns it as a pandas DataFrame.\"}"}
{"api_id": 209, "api_name": "requests.ConnectionError", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchWebPageData\", \"type\": \"function\", \"signature\": \"(url='http://example.com')\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches and processes data from a web page, extracting the first table into a pandas DataFrame.\"}"}
{"api_id": 209, "api_name": "requests.ConnectionError", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchTableData\", \"type\": \"function\", \"signature\": \"(url='http://example.com')\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches and parses a table from a given webpage and returns it as a pandas DataFrame.\"}"}
{"api_id": 209, "api_name": "requests.ConnectionError", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchWebPageData\", \"type\": \"function\", \"signature\": \"(url='http://example.com')\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches data from a web page and returns it as a pandas DataFrame.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchWebData\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"pandas.core.frame.DataFrame\", \"short_description\": \"Fetches data from a given web page and parses it into a DataFrame.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchWebPageData\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Fetches data from a web page and returns it as a pandas DataFrame.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchPageData\", \"type\": \"function\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Fetches data from a given URL and parses it into a DataFrame.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchHtmlTable\", \"type\": \"function\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Fetches and parses an HTML table from a given URL into a pandas DataFrame.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/129", "solution": "{\n  \"name\": \"fetch_web_data\",\n  \"type\": \"function\",\n  \"signature\": \"(url, params=None, **kwargs)\",\n  \"return_type\": \"pandas.core.frame.DataFrame\",\n  \"short_description\": \"Fetches data from a given URL and parses it into a DataFrame.\"\n}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchPageData\", \"type\": \"function\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"pandas.core.frame.DataFrame\", \"short_description\": \"Fetches and parses data from a webpage, focusing on the first table found. Returns the data as a DataFrame.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchPageData\", \"type\": \"function\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches data from a given URL and parses it into a pandas DataFrame.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchData\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches data from the provided URL and returns it as a pandas DataFrame.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchHtmlTable\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Fetches an HTML table from the specified URL and returns it as a pandas DataFrame.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/129", "solution": "{\"name\": \"fetchData\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"pandas.DataFrame\", \"short_description\": \"Fetches data from a given URL and returns it as a pandas DataFrame.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"fetchAndExtractZip\", \"type\": \"function\", \"signature\": \"(url, destinationDirectory, headers=None)\", \"return_type\": \"list\", \"short_description\": \"Fetches a file from the given URL and extracts its contents to the specified destination directory. Returns a list of extracted file names.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/211", "solution": "{\n  \"name\": \"fetch_content\",\n  \"type\": \"callable\",\n  \"signature\": \"(url, params=None, **kwargs)\",\n  \"return_type\": \"requests.Response\",\n  \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"\n}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"fetchAndUnzip\", \"type\": \"function\", \"signature\": \"(url, destinationDirectory, headers=None)\", \"return_type\": \"list\", \"short_description\": \"Fetches a resource from the given URL and extracts it to the specified destination directory. Returns a list of files extracted.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"downloadAndUnzip\", \"type\": \"function\", \"signature\": \"(url, destinationDirectory, headers=None)\", \"return_type\": \"list\", \"short_description\": \"Downloads a file from the given URL and extracts its contents to the specified directory. Returns a list of files extracted.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"fetchAndUnzip\", \"type\": \"function\", \"signature\": \"(url, destinationDirectory, headers=None)\", \"return_type\": \"List[str]\", \"short_description\": \"Fetches a resource from the given URL and extracts it to the specified destination directory. Returns a list of files extracted.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"fetchData\", \"type\": \"function\", \"signature\": \"(url, headers=None)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"downloadAndExtract\", \"type\": \"function\", \"signature\": \"(url, destination_directory, headers=None)\", \"return_type\": \"list\", \"short_description\": \"Downloads a file from the given URL and extracts it to the specified destination directory.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"downloadAndExtract\", \"type\": \"callable\", \"signature\": \"(url, destinationDirectory, headers=None)\", \"return_type\": \"list\", \"short_description\": \"Downloads a file from the given URL and extracts its contents to the specified directory. Returns a list of files extracted.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"downloadAndExtract\", \"type\": \"function\", \"signature\": \"(url, destinationDirectory, headers=None)\", \"return_type\": \"List[str]\", \"short_description\": \"Downloads a file from the given URL and extracts it to the specified directory. Returns a list of files extracted.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"downloadAndExtract\", \"type\": \"function\", \"signature\": \"(url, destinationDirectory, headers=None)\", \"return_type\": \"List[str]\", \"short_description\": \"Downloads a file from the given URL and extracts it to the specified destination directory. Returns a list of file names extracted.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"fetchZipContent\", \"type\": \"function\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"dict\", \"short_description\": \"Fetches the content from a ZIP file available at the given URL and returns it as a dictionary with details about the ZIP file contents.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"fetchAndExtractZip\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"str\", \"short_description\": \"Fetches a ZIP file from the given URL and extracts its contents to a temporary directory, returning the path to the extracted directory.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"fetch_and_verify_zip\", \"type\": \"function\", \"signature\": \"(url, download_path='mnt/data/downloads/')\", \"return_type\": \"str or None\", \"short_description\": \"Downloads a file from the given URL and verifies if it is a ZIP file. Extracts the contents if it is a valid ZIP file.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"downloadAndExtractZip\", \"type\": \"function\", \"signature\": \"(url, download_path='mnt/data/downloads/')\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from the given URL and extracts it to a specified directory.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"download_and_extract_zip\", \"type\": \"function\", \"signature\": \"(url, download_path='mnt/data/downloads/')\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from the given URL and extracts it to a specified directory.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"download_and_extract\", \"type\": \"function\", \"signature\": \"(url, download_path='mnt/data/downloads/')\", \"return_type\": \"str\", \"short_description\": \"Downloads a file from the given URL and extracts it to a specified directory.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"download_and_extract_zip\", \"type\": \"function\", \"signature\": \"(url, download_path='mnt/data/downloads/')\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from the given URL and extracts it to the specified directory.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"download_and_extract_zip\", \"type\": \"function\", \"signature\": \"(url, download_path='mnt/data/downloads/')\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from the given URL and extracts it to the specified directory.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"download_and_extract_zip\", \"type\": \"function\", \"signature\": \"(url, download_path='mnt/data/downloads/')\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from the given URL and extracts it to the specified directory.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"fetch_zip\", \"type\": \"callable\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"str\", \"short_description\": \"Fetches a ZIP file from the given URL and extracts it to a specified directory.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"fetchData\", \"type\": \"callable\", \"signature\": \"(url, table_id)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches and processes a table from a given URL, identified by its ID.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"fetchData\", \"type\": \"callable\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"fetchData\", \"type\": \"callable\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"fetchData\", \"type\": \"callable\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"fetchHtmlTable\", \"type\": \"function\", \"signature\": \"(url, table_id)\", \"return_type\": \"pandas.core.frame.DataFrame\", \"short_description\": \"Fetches and parses an HTML table from a given URL based on its ID.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"fetchWebData\", \"type\": \"callable\", \"signature\": \"(url, table_id)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches and processes web data from a given URL, extracting the specified table into a pandas DataFrame.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"fetchData\", \"type\": \"callable\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"fetchHtmlTable\", \"type\": \"function\", \"signature\": \"(url, tableId)\", \"return_type\": \"pandas.core.frame.DataFrame\", \"short_description\": \"Fetches and parses an HTML table from a given URL based on the provided table ID.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"fetchTableData\", \"type\": \"callable\", \"signature\": \"(url, table_id)\", \"return_type\": \"pandas.core.frame.DataFrame\", \"short_description\": \"Fetches and parses an HTML table from a given URL into a DataFrame using the specified table ID.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1008", "solution": "{\"name\": \"fetchHtmlTable\", \"type\": \"function\", \"signature\": \"(url, tableId)\", \"return_type\": \"DataFrame\", \"short_description\": \"Fetches and processes an HTML table from a given URL based on its ID.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"fetchFile\", \"type\": \"function\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"downloadFile\", \"type\": \"function\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple\", \"short_description\": \"Downloads a file from the given URL and saves it with the specified filename.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"downloadFile\", \"type\": \"function\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple\", \"short_description\": \"Downloads a file from the given URL and saves it with the specified filename.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"fetchAndExtract\", \"type\": \"function\", \"signature\": \"(url, downloadDir, extractDir)\", \"return_type\": \"tuple[str, list[str]]\", \"short_description\": \"Downloads a file from the given URL and extracts its contents to the specified directory.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"downloadFile\", \"type\": \"callable\", \"signature\": \"(url, filename, timeout=5)\", \"return_type\": \"tuple\", \"short_description\": \"Downloads a file from the given URL and saves it with the specified filename. The function also supports a timeout parameter to control the request duration.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1012", "solution": "{\n  \"name\": \"fetch_and_unzip\",\n  \"type\": \"function\",\n  \"signature\": \"(url, download_dir, zip_dir)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Downloads a file from the given URL and extracts its contents to the specified directory.\"\n}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"downloadFile\", \"type\": \"callable\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple[str, list[str]]\", \"short_description\": \"Downloads a file from the given URL and saves it with the specified filename. Also unzips the downloaded file and returns a tuple containing a success message and a list of files extracted from the zip.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"downloadFile\", \"type\": \"function\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple\", \"short_description\": \"Downloads a file from a given URL and saves it with the specified filename.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"downloadFile\", \"type\": \"function\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple\", \"short_description\": \"Downloads a file from a given URL and saves it with the specified filename.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"downloadFile\", \"type\": \"callable\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple(str, list(str))\", \"short_description\": \"Downloads a file from the given URL and saves it with the specified filename in the downloads directory. Then, it extracts the file to the unzipped_files directory and returns a tuple containing a success message and a list of extracted file names.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"fetchData\", \"type\": \"function\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"fetchHtmlContent\", \"type\": \"callable\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1013", "solution": "{\n  \"name\": \"fetchHtmlContent\",\n  \"type\": \"function\",\n  \"signature\": \"(url, params=None, **kwargs)\",\n  \"return_type\": \"requests.Response\",\n  \"short_description\": \"Sends a GET request and returns the response object.\"\n}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1013", "solution": "{\n  \"name\": \"fetchHtmlContent\",\n  \"type\": \"callable\",\n  \"signature\": \"(url, params=None, **kwargs)\",\n  \"return_type\": \"requests.Response\",\n  \"short_description\": \"Sends a GET request to fetch HTML content from a given URL.\"\n}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"fetchHtmlContent\", \"type\": \"callable\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"fetchData\", \"type\": \"callable\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"fetchPageData\", \"type\": \"callable\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1013", "solution": "{\n  \"name\": \"fetchPageData\",\n  \"type\": \"callable\",\n  \"signature\": \"(url, params=None, **kwargs)\",\n  \"return_type\": \"requests.Response\",\n  \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"\n}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"fetchPageContent\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"str\", \"short_description\": \"Fetches the content of a webpage given its URL.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1013", "solution": "{\n  \"name\": \"fetchWebData\",\n  \"type\": \"function\",\n  \"signature\": \"(url, baseUrl=None, csvFileName=None)\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Fetches data from a given web page and saves all found links to a CSV file.\"\n}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"function\", \"signature\": \"(url, timeout=5)\", \"return_type\": \"bytes\", \"short_description\": \"Fetches the content of a webpage given its URL.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchHtmlContent\", \"type\": \"callable\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"str\", \"short_description\": \"Sends a GET request to the specified URL and returns the HTML content as a string.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchContent\", \"type\": \"function\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"function\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"Response\", \"short_description\": \"Fetches the content of a webpage by sending a GET request.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchWebContent\", \"type\": \"function\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"callable\", \"signature\": \"(url, timeout=5)\", \"return_type\": \"dict\", \"short_description\": \"Fetches the content of a webpage given its URL. Includes error handling for network issues.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchHtmlContent\", \"type\": \"function\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"lxml.html.Element\", \"short_description\": \"Fetches the HTML content from the given URL and returns the root element of the parsed HTML tree.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"callable\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"function\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"function\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"fetchData\", \"type\": \"callable\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"dict\", \"short_description\": \"Sends a GET request to the specified URL and returns the data in JSON format.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"fetchData\", \"type\": \"function\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"dict\", \"short_description\": \"Sends a GET request to the specified URL and returns the parsed JSON response.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1020", "solution": "{\n  \"name\": \"fetchData\",\n  \"type\": \"callable\",\n  \"signature\": \"(url, params=None, headers=None, **kwargs)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Sends a GET request to the specified URL and returns the data in JSON format.\"\n}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"fetchData\", \"type\": \"callable\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"dict\", \"short_description\": \"Sends a GET request to the specified URL and returns the JSON data from the response.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1020", "solution": "{\n  \"name\": \"fetchData\",\n  \"type\": \"function\",\n  \"signature\": \"(url, headers=None, params=None, timeout=5)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Sends a GET request to the specified URL and returns the JSON data from the response.\"\n}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1020", "solution": "{\n  \"name\": \"fetch_data\",\n  \"type\": \"function\",\n  \"signature\": \"(url, params=None, **kwargs)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Sends a GET request and returns the response data as a dictionary.\"\n}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"fetchData\", \"type\": \"function\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"dict\", \"short_description\": \"Fetches data from the given URL using a GET request.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"fetchData\", \"type\": \"function\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"dict\", \"short_description\": \"Sends a GET request and returns the JSON data from the response.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"fetchData\", \"type\": \"callable\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"dict\", \"short_description\": \"Sends a GET request to the specified URL and returns the parsed JSON response.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1020", "solution": "{\"name\": \"fetchData\", \"type\": \"function\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"dict\", \"short_description\": \"Sends a GET request and returns the data in JSON format.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"function\", \"signature\": \"(url, headers=None)\", \"return_type\": \"requests.Response\", \"short_description\": \"Fetches the content of a webpage given its URL and optional headers.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"function\", \"signature\": \"(url, headers=None)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"function\", \"signature\": \"(url, headers=None)\", \"return_type\": \"requests.Response\", \"short_description\": \"Fetches the content of a webpage given its URL and optional headers.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"function\", \"signature\": \"(url, headers=None)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"function\", \"signature\": \"(url, headers=None)\", \"return_type\": \"Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"function\", \"signature\": \"(url, headers=None)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"callable\", \"signature\": \"(url, headers=None)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1124", "solution": "{\n  \"name\": \"fetchWebpageContent\",\n  \"type\": \"function\",\n  \"signature\": \"(url, headers=None)\",\n  \"return_type\": \"requests.Response\",\n  \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"\n}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"callable\", \"signature\": \"(url, headers=None)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"function\", \"signature\": \"(url, headers=None)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"fetchData\", \"type\": \"callable\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"fetchData\", \"type\": \"callable\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"fetchData\", \"type\": \"callable\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"fetchResource\", \"type\": \"function\", \"signature\": \"(url, headers=None, params=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL with optional headers, parameters, and other keyword arguments.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"fetchContent\", \"type\": \"function\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1129", "solution": "{\n  \"name\": \"fetch_and_save_file\",\n  \"type\": \"function\",\n  \"signature\": \"(url, save_path, params=None, **kwargs)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Fetches the content from the given URL and saves it to the specified path.\"\n}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"fetchContent\", \"type\": \"function\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"fetchContent\", \"type\": \"function\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1129", "solution": "{\n  \"name\": \"fetch_data\",\n  \"type\": \"callable\",\n  \"signature\": \"(url, headers=None, timeout=None)\",\n  \"return_type\": \"requests.Response\",\n  \"short_description\": \"Sends a GET request to the specified URL with optional headers and timeout.\"\n}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1129", "solution": "{\"name\": \"fetchContent\", \"type\": \"function\", \"signature\": \"(url, params=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL and returns the response object.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"fetchData\", \"type\": \"function\", \"signature\": \"(url, headers=None)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request with optional headers.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"fetchPhoneNumbers\", \"type\": \"function\", \"signature\": \"(url, output_path)\", \"return_type\": \"list\", \"short_description\": \"Fetches phone numbers from a given URL and saves them to a JSON file.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"fetchData\", \"type\": \"function\", \"signature\": \"(url, headers=None, parser=None)\", \"return_type\": \"dict\", \"short_description\": \"Fetches data from the given URL and optionally parses it using the provided parser.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"fetchData\", \"type\": \"function\", \"signature\": \"(url, headers=None)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL with optional headers.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"fetchPageContent\", \"type\": \"function\", \"signature\": \"(url, headers=None)\", \"return_type\": \"str\", \"short_description\": \"Fetches the content of a webpage given its URL.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"fetchData\", \"type\": \"function\", \"signature\": \"(url, headers=None)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL with optional headers.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"fetchData\", \"type\": \"callable\", \"signature\": \"(url, headers=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request with optional headers and additional keyword arguments.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"fetchData\", \"type\": \"function\", \"signature\": \"(url, headers=None, params=None, **kwargs)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request with optional headers, params, and additional kwargs.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"fetchPageContent\", \"type\": \"function\", \"signature\": \"(url, headers=None)\", \"return_type\": \"str\", \"short_description\": \"Fetches the content of a webpage given its URL.\"}"}
{"api_id": 210, "api_name": "requests.get", "task_id": "BigCodeBench/1137", "solution": "{\"name\": \"fetchData\", \"type\": \"function\", \"signature\": \"(url, headers=None)\", \"return_type\": \"requests.Response\", \"short_description\": \"Sends a GET request to the specified URL with optional headers.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"downloadAndExtractZip\", \"type\": \"function\", \"signature\": \"(url, downloadPath)\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from a given URL and extracts its contents to a specified directory.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"downloadAndExtractZip\", \"type\": \"function\", \"signature\": \"(url, download_path='mnt/data/downloads/')\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from the given URL and extracts its contents to a specified directory.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"downloadAndExtractZip\", \"type\": \"function\", \"signature\": \"(url, download_path='mnt/data/downloads/')\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from a given URL and extracts its contents to a specified directory.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"downloadAndExtractZip\", \"type\": \"function\", \"signature\": \"(url, download_path='mnt/data/downloads/')\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from a given URL and extracts its contents to a specified directory. Returns the path to the extracted directory on success, or an error message on failure.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"fetchAndVerifyZip\", \"type\": \"function\", \"signature\": \"(url, downloadPath='mnt/data/downloads/')\", \"return_type\": \"str or None\", \"short_description\": \"Downloads a file from a given URL and verifies if it is a ZIP file before extracting its contents.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"downloadAndExtractZip\", \"type\": \"function\", \"signature\": \"(url, download_path='mnt/data/downloads/')\", \"return_type\": \"str or None\", \"short_description\": \"Downloads a ZIP file from a given URL and extracts it to a specified directory.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"downloadAndExtractZip\", \"type\": \"function\", \"signature\": \"(url, downloadPath)\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from a given URL and extracts it to a specified directory.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"downloadAndVerifyZip\", \"type\": \"function\", \"signature\": \"(url, download_path='mnt/data/downloads/')\", \"return_type\": \"str\", \"short_description\": \"Downloads a file from a given URL and verifies if it is a ZIP file before extracting its contents.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"downloadAndExtractZip\", \"type\": \"function\", \"signature\": \"(url, downloadPath='mnt/data/downloads/')\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from the given URL and extracts it to a specified directory.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"downloadAndExtractZip\", \"type\": \"function\", \"signature\": \"(url, download_path='mnt/data/downloads/')\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from a given URL and extracts its contents to a specified directory.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"function\", \"signature\": \"(url: str, timeout: int = 5)\", \"return_type\": \"str\", \"short_description\": \"Fetches the content of a webpage given its URL, with an optional timeout parameter.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchHtmlContent\", \"type\": \"function\", \"signature\": \"(url: str)\", \"return_type\": \"str\", \"short_description\": \"Fetches the HTML content from the given URL.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"function\", \"signature\": \"(url: str)\", \"return_type\": \"str\", \"short_description\": \"Fetches the content of a webpage given its URL.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchAndParseWebpage\", \"type\": \"function\", \"signature\": \"(url: str, timeout: int = 5)\", \"return_type\": \"dict\", \"short_description\": \"Fetches and parses the content of a webpage, returning a dictionary representation of the HTML structure.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"function\", \"signature\": \"(url: str, timeout: int = 5)\", \"return_type\": \"dict\", \"short_description\": \"Fetches the content of a webpage given its URL and optional timeout for the request.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"function\", \"signature\": \"(url: str)\", \"return_type\": \"str\", \"short_description\": \"Fetches the content of a webpage given its URL.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchHtmlContent\", \"type\": \"function\", \"signature\": \"(url: str)\", \"return_type\": \"str\", \"short_description\": \"Fetches the HTML content of a webpage given its URL.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchWebpageData\", \"type\": \"function\", \"signature\": \"(url: str, timeout: int = 5)\", \"return_type\": \"dict\", \"short_description\": \"Fetches the content of a webpage given its URL, with an optional timeout for the request.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchWebpageData\", \"type\": \"function\", \"signature\": \"(url: str, databaseName: str = 'my_database.db') -> int\", \"return_type\": \"int\", \"short_description\": \"Fetches data from a webpage and stores it in a SQLite database. Returns the number of rows added.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchWebpageData\", \"type\": \"function\", \"signature\": \"(webpage_url: str, database_name: str = 'my_database.db') -> int\", \"return_type\": \"int\", \"short_description\": \"Fetches data from a webpage and stores it in a SQLite database.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"fetchWebContent\", \"type\": \"function\", \"signature\": \"(url, headers)\", \"return_type\": \"dict\", \"short_description\": \"Fetches the content of a webpage and returns it as a dictionary with status code and page content.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"function\", \"signature\": \"(url, headers)\", \"return_type\": \"dict\", \"short_description\": \"Fetches the content of a webpage and returns it as a dictionary with keys 'status_code', 'text', and 'headers'.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"function\", \"signature\": \"(url, headers)\", \"return_type\": \"dict\", \"short_description\": \"Fetches the content of a webpage and returns it as a dictionary with status code and page content.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"function\", \"signature\": \"(url, headers)\", \"return_type\": \"dict\", \"short_description\": \"Fetches the content of a webpage given its URL and headers.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"function\", \"signature\": \"(url, headers)\", \"return_type\": \"dict\", \"short_description\": \"Fetches the content of a webpage and returns it as a dictionary with status code and text.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"function\", \"signature\": \"(url, headers)\", \"return_type\": \"dict\", \"short_description\": \"Fetches the content of a webpage given its URL and optional headers.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"function\", \"signature\": \"(url, headers)\", \"return_type\": \"dict\", \"short_description\": \"Fetches the content of a webpage and returns it as a dictionary with status code and text.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"function\", \"signature\": \"(url, headers)\", \"return_type\": \"dict\", \"short_description\": \"Fetches the content of a webpage and returns it as a dictionary with status code and page content.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"function\", \"signature\": \"(url, headers)\", \"return_type\": \"dict\", \"short_description\": \"Fetches the content of a webpage given its URL and headers.\"}"}
{"api_id": 211, "api_name": "requests.RequestException", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"fetchWebpageContent\", \"type\": \"function\", \"signature\": \"(url, headers)\", \"return_type\": \"dict\", \"short_description\": \"Fetches the content of a webpage and returns it as a dictionary with headers and status code.\"}"}
{"api_id": 212, "api_name": "rsa.newkeys", "task_id": "BigCodeBench/583", "solution": "{\"name\": \"generateRsaKeys\", \"type\": \"function\", \"signature\": \"(nbits: int, accurate: bool = True, poolsize: int = 1, exponent: int = 65537) -> Tuple[rsa.key.PublicKey, rsa.key.PrivateKey]\", \"return_type\": \"Tuple[rsa.key.PublicKey, rsa.key.PrivateKey]\", \"short_description\": \"Generates new RSA public and private keys with the specified number of bits and optional parameters.\"}"}
{"api_id": 212, "api_name": "rsa.newkeys", "task_id": "BigCodeBench/583", "solution": "{\n  \"name\": \"generateKeys\",\n  \"type\": \"function\",\n  \"signature\": \"() -> Tuple[rsa.PublicKey, rsa.PrivateKey]\",\n  \"return_type\": \"Tuple[rsa.PublicKey, rsa.PrivateKey]\",\n  \"short_description\": \"Generates a pair of RSA public and private keys.\"\n}"}
{"api_id": 212, "api_name": "rsa.newkeys", "task_id": "BigCodeBench/583", "solution": "{\n  \"name\": \"generateKeys\",\n  \"type\": \"function\",\n  \"signature\": \"(nbits: int, accurate: bool = True, poolsize: int = 1, exponent: int = 65537) -> Tuple[rsa.key.PublicKey, rsa.key.PrivateKey]\",\n  \"return_type\": \"Tuple[rsa.key.PublicKey, rsa.key.PrivateKey]\",\n  \"short_description\": \"Generates and returns RSA public and private keys.\"\n}"}
{"api_id": 212, "api_name": "rsa.newkeys", "task_id": "BigCodeBench/583", "solution": "{\n  \"name\": \"generateRsaKeys\",\n  \"type\": \"function\",\n  \"signature\": \"(nbits: int, accurate: bool = True, poolsize: int = 1, exponent: int = 65537) -> Tuple[rsa.key.PublicKey, rsa.key.PrivateKey]\",\n  \"return_type\": \"Tuple[rsa.key.PublicKey, rsa.key.PrivateKey]\",\n  \"short_description\": \"Generates new RSA public and private keys with the specified number of bits and optional parameters.\"\n}"}
{"api_id": 212, "api_name": "rsa.newkeys", "task_id": "BigCodeBench/583", "solution": "{\n  \"name\": \"generateKeys\",\n  \"type\": \"function\",\n  \"signature\": \"(keySize: int, numBits: int, exponent: int = 65537) -> Tuple[rsa.PublicKey, rsa.PrivateKey]\",\n  \"return_type\": \"Tuple[rsa.PublicKey, rsa.PrivateKey]\",\n  \"short_description\": \"Generates RSA public and private keys with the specified key size and exponent.\"\n}"}
{"api_id": 212, "api_name": "rsa.newkeys", "task_id": "BigCodeBench/583", "solution": "{\n  \"name\": \"generate_key_pair\",\n  \"type\": \"callable\",\n  \"signature\": \"(key_size: int) -> Tuple[rsa.PublicKey, rsa.PrivateKey]\",\n  \"return_type\": \"Tuple[rsa.PublicKey, rsa.PrivateKey]\",\n  \"short_description\": \"Generates a new public and private key pair of specified size.\"\n}"}
{"api_id": 212, "api_name": "rsa.newkeys", "task_id": "BigCodeBench/583", "solution": "{\n  \"name\": \"generate_rsa_keys\",\n  \"type\": \"callable\",\n  \"signature\": \"(nbits: int, accurate: bool = True, poolsize: int = 1, exponent: int = 65537) -> Tuple[rsa.PublicKey, rsa.PrivateKey]\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates RSA public and private keys with specified parameters.\"\n}"}
{"api_id": 212, "api_name": "rsa.newkeys", "task_id": "BigCodeBench/583", "solution": "{\n  \"name\": \"generateRsaKeys\",\n  \"type\": \"callable\",\n  \"signature\": \"(nbits: int, accurate: bool = True, poolsize: int = 1, exponent: int = 65537) -> Tuple[rsa.key.PublicKey, rsa.key.PrivateKey]\",\n  \"return_type\": \"Tuple[rsa.key.PublicKey, rsa.key.PrivateKey]\",\n  \"short_description\": \"Generates public and private keys with specified parameters.\"\n}"}
{"api_id": 212, "api_name": "rsa.newkeys", "task_id": "BigCodeBench/583", "solution": "{\n  \"name\": \"generateRsaKeys\",\n  \"type\": \"function\",\n  \"signature\": \"(nbits: int, accurate: bool = True, poolsize: int = 1, exponent: int = 65537) -> Tuple[rsa.PublicKey, rsa.PrivateKey]\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates public and private RSA keys and returns them.\"\n}"}
{"api_id": 212, "api_name": "rsa.newkeys", "task_id": "BigCodeBench/583", "solution": "{\n  \"name\": \"generate_keypair\",\n  \"type\": \"function\",\n  \"signature\": \"(bits: int, accuracy: bool = True) -> Tuple[rsa.PublicKey, rsa.PrivateKey]\",\n  \"return_type\": \"Tuple[rsa.PublicKey, rsa.PrivateKey]\",\n  \"short_description\": \"Generates a new RSA public and private key pair.\"\n}"}
{"api_id": 212, "api_name": "rsa.newkeys", "task_id": "BigCodeBench/587", "solution": "{\n  \"name\": \"generate_rsa_keys\",\n  \"type\": \"callable\",\n  \"signature\": \"(nbits: int, accurate: bool = True, poolsize: int = 1, exponent: int = 65537) -> Tuple[rsa.PublicKey, rsa.PrivateKey]\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates RSA public and private keys and returns them.\"\n}"}
{"api_id": 212, "api_name": "rsa.newkeys", "task_id": "BigCodeBench/587", "solution": "{\n  \"name\": \"generateRsaKeys\",\n  \"type\": \"function\",\n  \"signature\": \"(nbits: int, accurate: bool = True, poolsize: int = 1, exponent: int = 65537) -> Tuple[rsa.PublicKey, rsa.PrivateKey]\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates RSA public and private keys, returning them as a tuple (pub, priv).\"\n}"}
{"api_id": 212, "api_name": "rsa.newkeys", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generateRsaKeys\", \"type\": \"function\", \"signature\": \"(nbits: int, accurate: bool = True, poolsize: int = 1, exponent: int = 65537) -> Tuple[rsa.key.PublicKey, rsa.key.PrivateKey]\", \"return_type\": \"tuple\", \"short_description\": \"Generates a pair of RSA public and private keys with the specified number of bits.\"}"}
{"api_id": 212, "api_name": "rsa.newkeys", "task_id": "BigCodeBench/587", "solution": "{\n  \"name\": \"generateRsaKeys\",\n  \"type\": \"function\",\n  \"signature\": \"(nbits: int, accurate: bool = True, poolsize: int = 1, exponent: int = 65537) -> Tuple[rsa.key.PublicKey, rsa.key.PrivateKey]\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates RSA public and private keys using the specified parameters.\"\n}"}
{"api_id": 212, "api_name": "rsa.newkeys", "task_id": "BigCodeBench/587", "solution": "{\n  \"name\": \"generateEncryptionKeys\",\n  \"type\": \"function\",\n  \"signature\": \"(nbits: int) -> Tuple[rsa.PublicKey, rsa.PrivateKey]\",\n  \"return_type\": \"Tuple[rsa.PublicKey, rsa.PrivateKey]\",\n  \"short_description\": \"Generates a pair of public and private encryption keys using RSA.\"\n}"}
{"api_id": 212, "api_name": "rsa.newkeys", "task_id": "BigCodeBench/587", "solution": "{\n  \"name\": \"generateKeys\",\n  \"type\": \"function\",\n  \"signature\": \"(nbits: int, accurate: bool = True, poolsize: int = 1, exponent: int = 65537) -> Tuple[rsa.key.PublicKey, rsa.key.PrivateKey]\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates public and private keys, and returns them as (pub, priv).\"\n}"}
{"api_id": 212, "api_name": "rsa.newkeys", "task_id": "BigCodeBench/587", "solution": "{\n  \"name\": \"generateRSAKeys\",\n  \"type\": \"callable\",\n  \"signature\": \"(nbits: int, accurate: bool = True, poolsize: int = 1, exponent: int = 65537) -> Tuple[rsa.key.PublicKey, rsa.key.PrivateKey]\",\n  \"return_type\": \"Tuple[rsa.key.PublicKey, rsa.key.PrivateKey]\",\n  \"short_description\": \"Generates a pair of RSA public and private keys with the specified number of bits and optional parameters.\"\n}"}
{"api_id": 212, "api_name": "rsa.newkeys", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generateAsymmetricKeys\", \"type\": \"callable\", \"signature\": \"(nbits: int, accurate: bool = True, poolsize: int = 1, exponent: int = 65537) -> Tuple[rsa.PublicKey, rsa.PrivateKey]\", \"return_type\": \"tuple\", \"short_description\": \"Generates public and private keys for asymmetric encryption.\"}"}
{"api_id": 212, "api_name": "rsa.newkeys", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generateRsaKeys\", \"type\": \"function\", \"signature\": \"(nbits: int, accurate: bool = True, poolsize: int = 1, exponent: int = 65537) -> Tuple[rsa.key.PublicKey, rsa.key.PrivateKey]\", \"return_type\": \"tuple\", \"short_description\": \"Generates RSA public and private keys with specified parameters.\"}"}
{"api_id": 212, "api_name": "rsa.newkeys", "task_id": "BigCodeBench/587", "solution": "{\n  \"name\": \"generate_secure_keys\",\n  \"type\": \"callable\",\n  \"signature\": \"(nbits: int, accurate: bool = True, poolsize: int = 1, exponent: int = 65537) -> Tuple[rsa.key.PublicKey, rsa.key.PrivateKey]\",\n  \"return_type\": \"Tuple[rsa.key.PublicKey, rsa.key.PrivateKey]\",\n  \"short_description\": \"Generates secure public and private keys using RSA encryption and returns them as a tuple (pub, priv).\"\n}"}
{"api_id": 213, "api_name": "rsa.encrypt", "task_id": "BigCodeBench/587", "solution": "{\n  \"name\": \"generate_rsa_key_pair\",\n  \"type\": \"function\",\n  \"signature\": \"() -> tuple(rsa.key.PublicKey, rsa.key.PrivateKey)\",\n  \"return_type\": \"tuple(rsa.key.PublicKey, rsa.key.PrivateKey)\",\n  \"short_description\": \"Generates a new RSA key pair consisting of a public and private key.\"\n}"}
{"api_id": 213, "api_name": "rsa.encrypt", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generateRsaKeyPair\", \"type\": \"function\", \"signature\": \"() -> tuple(rsa.PublicKey, rsa.PrivateKey)\", \"return_type\": \"tuple(rsa.PublicKey, rsa.PrivateKey)\", \"short_description\": \"Generates a new RSA public and private key pair.\"}"}
{"api_id": 213, "api_name": "rsa.encrypt", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generateAesKey\", \"type\": \"function\", \"signature\": \"(key_size: int) -> bytes\", \"return_type\": \"bytes\", \"short_description\": \"Generates a random AES key of the specified size.\"}"}
{"api_id": 213, "api_name": "rsa.encrypt", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generateRSAKeys\", \"type\": \"class method\", \"signature\": \"(key_size: int) -> tuple\", \"return_type\": \"tuple\", \"short_description\": \"Generates a pair of RSA public and private keys.\"}"}
{"api_id": 213, "api_name": "rsa.encrypt", "task_id": "BigCodeBench/587", "solution": "{\n  \"name\": \"generate_aes_key\",\n  \"type\": \"function\",\n  \"signature\": \"(key_size: int) -> bytes\",\n  \"return_type\": \"bytes\",\n  \"short_description\": \"Generates a random AES key of the specified size.\"\n}"}
{"api_id": 213, "api_name": "rsa.encrypt", "task_id": "BigCodeBench/587", "solution": "{\n  \"name\": \"generate_aes_key\",\n  \"type\": \"function\",\n  \"signature\": \"(key_size: int) -> bytes\",\n  \"return_type\": \"bytes\",\n  \"short_description\": \"Generates a random AES key of the specified size.\"\n}"}
{"api_id": 213, "api_name": "rsa.encrypt", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"encryptMessage\", \"type\": \"callable\", \"signature\": \"(message: bytes, key: bytes) -> bytes\", \"return_type\": \"bytes\", \"short_description\": \"Encrypts a given message using a provided symmetric key.\"}"}
{"api_id": 213, "api_name": "rsa.encrypt", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generateRSAKeys\", \"type\": \"function\", \"signature\": \"(key_size: int) -> Tuple[rsa.PublicKey, rsa.PrivateKey]\", \"return_type\": \"Tuple[rsa.PublicKey, rsa.PrivateKey]\", \"short_description\": \"Generates a pair of RSA public and private keys of the specified size.\"}"}
{"api_id": 213, "api_name": "rsa.encrypt", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generateKeyPair\", \"type\": \"class method\", \"signature\": \"() -> tuple\", \"return_type\": \"tuple\", \"short_description\": \"Generates a new RSA key pair (public and private keys).\"}"}
{"api_id": 213, "api_name": "rsa.encrypt", "task_id": "BigCodeBench/587", "solution": "{\"name\": \"generate_aes_key\", \"type\": \"function\", \"signature\": \"(key_size: int) -> bytes\", \"return_type\": \"bytes\", \"short_description\": \"Generates a random AES key of the specified size.\"}"}
{"api_id": 214, "api_name": "scipy.spatial.Voronoi", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"computeVoronoiDiagram\", \"type\": \"function\", \"signature\": \"(points, seed=0)\", \"return_type\": \"tuple(Voronoi, Axes)\", \"short_description\": \"Computes and plots a Voronoi diagram for a given set of 2D points.\"}"}
{"api_id": 214, "api_name": "scipy.spatial.Voronoi", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"calculateVoronoi\", \"type\": \"function\", \"signature\": \"(points, seed=0)\", \"return_type\": \"tuple(Voronoi, plt.Axes)\", \"short_description\": \"Calculates and visualizes a Voronoi diagram for a given set of 2D points using SciPy.\"}"}
{"api_id": 214, "api_name": "scipy.spatial.Voronoi", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"calculateVoronoi\", \"type\": \"function\", \"signature\": \"(points, seed=0)\", \"return_type\": \"tuple(Voronoi, Axes)\", \"short_description\": \"Calculates and plots a Voronoi diagram for a given set of 2D points.\"}"}
{"api_id": 214, "api_name": "scipy.spatial.Voronoi", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"calculateVoronoi\", \"type\": \"function\", \"signature\": \"(points, seed=0)\", \"return_type\": \"tuple(Voronoi, plt.Axes)\", \"short_description\": \"Calculates and visualizes a Voronoi diagram for a set of 2D points. Returns the Voronoi object and the matplotlib Axes object for plotting.\"}"}
{"api_id": 214, "api_name": "scipy.spatial.Voronoi", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"calculateVoronoi\", \"type\": \"function\", \"signature\": \"(points, seed=0)\", \"return_type\": \"tuple\", \"short_description\": \"Calculates and plots a Voronoi diagram for a given set of 2D points. Returns a tuple containing the Voronoi object and the matplotlib Axes object.\"}"}
{"api_id": 214, "api_name": "scipy.spatial.Voronoi", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"calculateVoronoi\", \"type\": \"function\", \"signature\": \"(points, seed=0)\", \"return_type\": \"tuple(Voronoi, matplotlib.axes._axes.Axes)\", \"short_description\": \"Calculates the Voronoi diagram for a set of 2D points and plots it using matplotlib.\"}"}
{"api_id": 214, "api_name": "scipy.spatial.Voronoi", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"calculateVoronoi\", \"type\": \"function\", \"signature\": \"(points, seed=0)\", \"return_type\": \"tuple(Voronoi, Axes)\", \"short_description\": \"Calculates the Voronoi diagram for a set of points and plots it, returning the Voronoi object and the matplotlib Axes object.\"}"}
{"api_id": 214, "api_name": "scipy.spatial.Voronoi", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"calculateVoronoi\", \"type\": \"function\", \"signature\": \"(points)\", \"return_type\": \"tuple(Voronoi, plt.Axes)\", \"short_description\": \"Calculates and plots a Voronoi diagram for given 2D points.\"}"}
{"api_id": 214, "api_name": "scipy.spatial.Voronoi", "task_id": "BigCodeBench/445", "solution": "{\n  \"name\": \"computeVoronoiDiagram\",\n  \"type\": \"function\",\n  \"signature\": \"(points, furthestSite=False, incremental=False, qhullOptions=None)\",\n  \"return_type\": \"Object\",\n  \"short_description\": \"Computes a Voronoi diagram for a set of points.\"\n}"}
{"api_id": 214, "api_name": "scipy.spatial.Voronoi", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"computeVoronoi\", \"type\": \"function\", \"signature\": \"(points, seed=0)\", \"return_type\": \"tuple(Voronoi, plt.Axes)\", \"short_description\": \"Computes and visualizes a Voronoi diagram for a set of 2D points using scipy.spatial. The function returns the Voronoi object and the matplotlib Axes instance used for plotting.\"}"}
{"api_id": 215, "api_name": "scipy.stats.chi2_contingency", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"calculateChiSquare\", \"type\": \"callable\", \"signature\": \"(observed, correction=True, lambda_=None)\", \"return_type\": \"tuple(float, float, int, ndarray)\", \"short_description\": \"Performs a chi-square test of independence on the provided contingency table. This function computes the chi-square statistic and p-value for the hypothesis test of independence of the observed frequencies in the contingency table. It also returns the degrees of freedom and the expected frequencies.\"}"}
{"api_id": 215, "api_name": "scipy.stats.chi2_contingency", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"calculateChiSquare\", \"type\": \"callable\", \"signature\": \"(contingencyTable, correction=True)\", \"return_type\": \"{'chi2': float, 'p': float, 'dof': int, 'expected': ndarray}\", \"short_description\": \"Performs a chi-square test of independence on a contingency table.\"}"}
{"api_id": 215, "api_name": "scipy.stats.chi2_contingency", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"computeChiSquareIndependence\", \"type\": \"function\", \"signature\": \"(table)\", \"return_type\": \"dict\", \"short_description\": \"Performs a chi-square test of independence on a contingency table.\"}"}
{"api_id": 215, "api_name": "scipy.stats.chi2_contingency", "task_id": "BigCodeBench/879", "solution": "{\n  \"name\": \"calculateChiSquarePValue\",\n  \"type\": \"function\",\n  \"signature\": \"(data, col1, col2)\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Performs a chi-square test of independence for two categorical columns in a DataFrame and returns the p-value.\"\n}"}
{"api_id": 215, "api_name": "scipy.stats.chi2_contingency", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"performChiSquareTest\", \"type\": \"function\", \"signature\": \"(data, col1, col2)\", \"return_type\": \"float\", \"short_description\": \"Performs a chi-square test of independence on the given columns of a DataFrame.\"}"}
{"api_id": 215, "api_name": "scipy.stats.chi2_contingency", "task_id": "BigCodeBench/879", "solution": "{\n  \"name\": \"calculateChiSquareIndependence\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, col1, col2)\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Performs a chi-square test for independence on the provided DataFrame and two columns.\"\n}"}
{"api_id": 215, "api_name": "scipy.stats.chi2_contingency", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"calculateChiSquare\", \"type\": \"function\", \"signature\": \"(table)\", \"return_type\": \"tuple(float, float, int, ndarray)\", \"short_description\": \"Performs a chi-square test of independence on a contingency table. This function computes the chi-square statistic and p-value for the hypothesis test of independence of the observed frequencies in the table.\"}"}
{"api_id": 215, "api_name": "scipy.stats.chi2_contingency", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"calculateChiSquare\", \"type\": \"function\", \"signature\": \"(observed)\", \"return_type\": \"tuple\", \"short_description\": \"Performs a chi-square test of independence on the provided contingency table.\"}"}
{"api_id": 215, "api_name": "scipy.stats.chi2_contingency", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"calculateChiSquareIndependence\", \"type\": \"function\", \"signature\": \"(data, col1, col2)\", \"return_type\": \"float\", \"short_description\": \"Performs a chi-square test of independence on two categorical columns in a DataFrame.\"}"}
{"api_id": 215, "api_name": "scipy.stats.chi2_contingency", "task_id": "BigCodeBench/879", "solution": "{\"name\": \"calculateChiSquarePValue\", \"type\": \"function\", \"signature\": \"(observedTable)\", \"return_type\": \"float\", \"short_description\": \"Calculates the p-value for the chi-square test of independence for a given contingency table.\"}"}
{"api_id": 216, "api_name": "scipy.spatial.voronoi_plot_2d", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"plotVoronoi\", \"type\": \"function\", \"signature\": \"(points, ax=None, show_points=True, show_vertices=True, line_colors=None, line_width=None, line_alpha=None, point_size=None)\", \"return_type\": \"matplotlib.figure.Figure\", \"short_description\": \"Plots the Voronoi diagram for a given set of 2D points.\"}"}
{"api_id": 216, "api_name": "scipy.spatial.voronoi_plot_2d", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"plotVoronoi\", \"type\": \"function\", \"signature\": \"(points, ax=None)\", \"return_type\": \"matplotlib.figure.Figure\", \"short_description\": \"Plot a Voronoi diagram for a given set of 2D points using Matplotlib.\"}"}
{"api_id": 216, "api_name": "scipy.spatial.voronoi_plot_2d", "task_id": "BigCodeBench/445", "solution": "{\n  \"name\": \"plot_voronoi\",\n  \"type\": \"callable\",\n  \"signature\": \"(points, ax=None, show_points=True, show_vertices=True, line_colors='black', line_width=1.0, line_alpha=0.7, point_size=5)\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Plots the Voronoi diagram for a given set of 2D points with customizable options.\"\n}"}
{"api_id": 216, "api_name": "scipy.spatial.voronoi_plot_2d", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"plotVoronoi\", \"type\": \"callable\", \"signature\": \"(points, ax=None, show_vertices=True, show_points=True, line_colors='black', line_width=1, line_alpha=1, point_size=5)\", \"return_type\": \"tuple(matplotlib.figure.Figure, matplotlib.axes.Axes)\", \"short_description\": \"Plots the Voronoi diagram for a given set of 2D points with customizable options for visualization.\"}"}
{"api_id": 216, "api_name": "scipy.spatial.voronoi_plot_2d", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"plotVoronoi\", \"type\": \"function\", \"signature\": \"(voronoi, ax=None, showPoints=True, showVertices=True, lineColor='black', lineWidth=1.0, lineAlpha=1.0, pointSize=5.0)\", \"return_type\": \"matplotlib.figure.Figure\", \"short_description\": \"Plots the given Voronoi diagram with customizable options for points, vertices, lines, and points.\"}"}
{"api_id": 216, "api_name": "scipy.spatial.voronoi_plot_2d", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"plotVoronoi\", \"type\": \"function\", \"signature\": \"(points, ax=None, showPoints=True, showVertices=True, lineColors='black', lineWidth=1.0, lineAlpha=1.0, pointSize=5)\", \"return_type\": \"matplotlib.figure.Figure\", \"short_description\": \"Plots the Voronoi diagram for a given set of 2D points with customizable features.\"}"}
{"api_id": 216, "api_name": "scipy.spatial.voronoi_plot_2d", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"plotVoronoi\", \"type\": \"callable\", \"signature\": \"(vor, ax=None, show_points=True, show_vertices=True, line_colors='black', line_width=1.0, line_alpha=1.0, point_size=5.0)\", \"return_type\": \"matplotlib.figure.Figure\", \"short_description\": \"Plots the given Voronoi diagram with customizable options for visualization.\"}"}
{"api_id": 216, "api_name": "scipy.spatial.voronoi_plot_2d", "task_id": "BigCodeBench/445", "solution": "{\n  \"name\": \"plotVoronoi\",\n  \"type\": \"function\",\n  \"signature\": \"(points, ax=None, show_points=True, show_vertices=True, line_colors='black', line_width=1.0, line_alpha=0.7, point_size=5)\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Plots the Voronoi diagram for a given set of 2D points.\"\n}"}
{"api_id": 216, "api_name": "scipy.spatial.voronoi_plot_2d", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"plotVoronoi\", \"type\": \"function\", \"signature\": \"(points, seed=0)\", \"return_type\": \"tuple(scipy.spatial.Voronoi, matplotlib.axes.Axes)\", \"short_description\": \"Plots the Voronoi diagram for a given set of 2D points using Matplotlib.\"}"}
{"api_id": 216, "api_name": "scipy.spatial.voronoi_plot_2d", "task_id": "BigCodeBench/445", "solution": "{\"name\": \"plotVoronoi\", \"type\": \"callable\", \"signature\": \"(points, seed=0)\", \"return_type\": \"tuple(Voronoi, matplotlib.axes.Axes)\", \"short_description\": \"Plots a Voronoi diagram for a given set of 2D points using Matplotlib.\"}"}
{"api_id": 217, "api_name": "scipy.optimize.curve_fit", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"curveFit\", \"type\": \"function\", \"signature\": \"(func, xdata, ydata, p0=None, bounds=None)\", \"return_type\": \"tuple(array, 2-D array)\", \"short_description\": \"Fits a function to data using non-linear least squares. The function must take the independent variable as the first argument and the parameters to fit as separate remaining arguments.\"}"}
{"api_id": 217, "api_name": "scipy.optimize.curve_fit", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"curveFit\", \"type\": \"function\", \"signature\": \"(function, xdata, ydata, p0=None, sigma=None, absolute_sigma=False, check_finite=True, bounds=None, method=None, jac=None, **kwargs)\", \"return_type\": \"tuple(array, 2-D array)\", \"short_description\": \"Fits a function to data using non-linear least squares. Assumes ydata = function(xdata, *params) + eps. Uses Levenberg-Marquardt algorithm by default for unconstrained problems or trust-region reflective algorithm for constrained problems.\"}"}
{"api_id": 217, "api_name": "scipy.optimize.curve_fit", "task_id": "BigCodeBench/574", "solution": "{\n  \"name\": \"curveFit\",\n  \"type\": \"function\",\n  \"signature\": \"(function, xdata, ydata, p0=None, sigma=None, absolute_sigma=False, check_finite=True, bounds=(-inf, inf), method=None, jac=None, **kwargs)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Fits a function to data using non-linear least squares. This function is very different from the hierarchical API call provided and does not follow the same structure.\"\n}"}
{"api_id": 217, "api_name": "scipy.optimize.curve_fit", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"fitNonLinearCurve\", \"type\": \"callable\", \"signature\": \"(f, xdata, ydata, initial_guess=None, bounds=None)\", \"return_type\": \"tuple(popt, pcov)\", \"short_description\": \"Performs non-linear least squares fitting of a function to data using the specified method.\"}"}
{"api_id": 217, "api_name": "scipy.optimize.curve_fit", "task_id": "BigCodeBench/574", "solution": "{\n  \"name\": \"curveFit\",\n  \"type\": \"function\",\n  \"signature\": \"(func, xdata, ydata, p0=None, bounds=None)\",\n  \"return_type\": \"tuple[array, array]\",\n  \"short_description\": \"Performs non-linear least squares fitting for a given model function using the curve_fit method from scipy.optimize.\"\n}"}
{"api_id": 217, "api_name": "scipy.optimize.curve_fit", "task_id": "BigCodeBench/574", "solution": "{\n  \"name\": \"fitNonLinearCurve\",\n  \"type\": \"function\",\n  \"signature\": \"(modelFunction, xdata, ydata, initialParameters=None, bounds=None, method=None, jac=None, **kwargs)\",\n  \"return_type\": \"tuple(popt, pcov)\",\n  \"short_description\": \"Fits a non-linear curve to the given data using a specified model function and optimization method.\"\n}"}
{"api_id": 217, "api_name": "scipy.optimize.curve_fit", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"curveFit\", \"type\": \"function\", \"signature\": \"(func, xdata, ydata, p0=None, sigma=None, absolute_sigma=False, check_finite=True, bounds=None, method=None, jac=None, **kwargs)\", \"return_type\": \"tuple(popt, pcov)\", \"short_description\": \"Fits a function to data using non-linear least squares. Parameters are optimized to minimize the sum of the squared residuals of f(xdata, *popt) - ydata. Supports bounds, method selection, and optional Jacobian for numerical derivative.\"}"}
{"api_id": 217, "api_name": "scipy.optimize.curve_fit", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"curveFit\", \"type\": \"function\", \"signature\": \"(func, xdata, ydata, p0=None, sigma=None, absolute_sigma=False, check_finite=True, bounds=None, method=None, jac=None, **kwargs)\", \"return_type\": \"Tuple[np.ndarray, np.ndarray]\", \"short_description\": \"Perform non-linear least squares fitting using the curve_fit function from scipy.optimize.\"}"}
{"api_id": 217, "api_name": "scipy.optimize.curve_fit", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"curveFit\", \"type\": \"function\", \"signature\": \"(func, xdata, ydata, p0=None, bounds=None)\", \"return_type\": \"tuple(array, 2-D array)\", \"short_description\": \"Fit a function to data using non-linear least squares. This function does not support constrained optimization or uncertainty in ydata.\"}"}
{"api_id": 217, "api_name": "scipy.optimize.curve_fit", "task_id": "BigCodeBench/574", "solution": "{\"name\": \"curveFit\", \"type\": \"function\", \"signature\": \"(func, xdata, ydata, p0=None, bounds=None)\", \"return_type\": \"tuple\", \"short_description\": \"Uses non-linear least squares to fit a function to data.\"}"}
{"api_id": 217, "api_name": "scipy.optimize.curve_fit", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"calculate_curve_fit\",\n  \"type\": \"function\",\n  \"signature\": \"(func, xdata, ydata, p0=None, sigma=None, absolute_sigma=False, check_finite=True, bounds=(-inf, inf), method=None, jac=None, **kwargs)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Perform non-linear least squares fitting of a function to data using the curve_fit method from scipy.optimize.\"\n}"}
{"api_id": 217, "api_name": "scipy.optimize.curve_fit", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"fit_curve\",\n  \"type\": \"function\",\n  \"signature\": \"(func, xdata, ydata, p0=None, sigma=None, absolute_sigma=False, check_finite=True, bounds=(-inf, inf), method=None, jac=None, maxfev=None, **kwargs)\",\n  \"return_type\": \"tuple(popt, pcov)\",\n  \"short_description\": \"Fit a given function to provided data using non-linear least squares. This function is designed to handle unconstrained optimization problems and supports various optimization methods and Jacobian options.\"\n}"}
{"api_id": 217, "api_name": "scipy.optimize.curve_fit", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"calculate_exponential_fit\",\n  \"type\": \"function\",\n  \"signature\": \"(func, xdata, ydata, p0=None, bounds=None)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Perform non-linear least squares fitting of an exponential function.\"\n}"}
{"api_id": 217, "api_name": "scipy.optimize.curve_fit", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"curveFit\", \"type\": \"function\", \"signature\": \"(function, xdata, ydata, p0=None, sigma=None, absolute_sigma=False, check_finite=True, bounds=None, method=None, jac=None, maxfev=None)\", \"return_type\": \"tuple(popt, pcov)\", \"short_description\": \"Perform non-linear least squares fitting of a function to data using the Levenberg-Marquardt algorithm.\"}"}
{"api_id": 217, "api_name": "scipy.optimize.curve_fit", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"calculate_curve_fit\",\n  \"type\": \"function\",\n  \"signature\": \"(func, xdata, ydata, p0=None, sigma=None, absolute_sigma=False, check_finite=True, bounds=None, method=None, jac=None, maxfev=None, **kwargs)\",\n  \"return_type\": \"tuple(popt, pcov)\",\n  \"short_description\": \"This function performs non-linear least squares fitting of a user-defined function to data using the Levenberg-Marquardt algorithm. It allows for specifying initial parameter guesses, standard deviations, and bounds on the parameters.\"\n}"}
{"api_id": 217, "api_name": "scipy.optimize.curve_fit", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"curveFit\", \"type\": \"function\", \"signature\": \"(func, xdata, ydata, p0=None, bounds=None, method=None, jac=None)\", \"return_type\": \"tuple(array, array)\", \"short_description\": \"Performs non-linear least squares fitting of a function to data using the specified method.\"}"}
{"api_id": 217, "api_name": "scipy.optimize.curve_fit", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"curveFit\", \"type\": \"function\", \"signature\": \"(func, xdata, ydata, p0=None, sigma=None, absolute_sigma=False, check_finite=True, bounds=None, method=None, jac=None)\", \"return_type\": \"tuple(popt: array, pcov: array)\", \"short_description\": \"Perform non-linear least squares fitting of a function to data using the curve fitting algorithm.\"}"}
{"api_id": 217, "api_name": "scipy.optimize.curve_fit", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"curveFit\", \"type\": \"function\", \"signature\": \"(func, xdata, ydata, p0=None, bounds=None)\", \"return_type\": \"tuple(array, 2-D array)\", \"short_description\": \"Performs non-linear least squares fitting of a function to data using the Levenberg-Marquardt algorithm. This function is designed to fit a function of the form f(x, *params) to data with optional parameter bounds.\"}"}
{"api_id": 217, "api_name": "scipy.optimize.curve_fit", "task_id": "BigCodeBench/654", "solution": "{\"name\": \"fitNonLinearCurve\", \"type\": \"callable\", \"signature\": \"(func, xdata, ydata, p0=None, bounds=None)\", \"return_type\": \"tuple(array, array)\", \"short_description\": \"Fits a non-linear curve to the provided data using the specified function and initial parameters. Optionally, bounds can be provided to constrain the fitting process.\"}"}
{"api_id": 217, "api_name": "scipy.optimize.curve_fit", "task_id": "BigCodeBench/654", "solution": "{\n  \"name\": \"calculate_exponential_fit\",\n  \"type\": \"function\",\n  \"signature\": \"(func, xdata, ydata, p0=None, bounds=None, method=None, jac=None, **kwargs)\",\n  \"return_type\": \"tuple(popt, pcov)\",\n  \"short_description\": \"Performs non-linear least squares fitting using an exponential model. The function fits a given model function to the provided data points using the specified method and parameters.\"\n}"}
{"api_id": 218, "api_name": "scipy.fftpack.fft", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateFourierTransform\", \"type\": \"callable\", \"signature\": \"(signal, sample_rate=8000)\", \"return_type\": \"tuple\", \"short_description\": \"Performs a Fast Fourier Transform (FFT) on the given signal and returns the FFT result along with a plot of the FFT.\"}"}
{"api_id": 218, "api_name": "scipy.fftpack.fft", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateFft\", \"type\": \"callable\", \"signature\": \"(signal, sampleRate=8000)\", \"return_type\": \"tuple(ndarray, plt.Axes)\", \"short_description\": \"Performs a Fast Fourier Transform (FFT) on the provided signal and plots the result. Returns the FFT data and the plot axes.\"}"}
{"api_id": 218, "api_name": "scipy.fftpack.fft", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateFFT\", \"type\": \"callable\", \"signature\": \"(signal, sample_rate=8000)\", \"return_type\": \"tuple(complex_array, plt.Axes)\", \"short_description\": \"Performs a Fast Fourier Transform (FFT) on the provided signal and plots the result. This function takes into account the sample rate to generate the time array for the signal.\"}"}
{"api_id": 218, "api_name": "scipy.fftpack.fft", "task_id": "BigCodeBench/267", "solution": "{\n  \"name\": \"calculateFFT\",\n  \"type\": \"function\",\n  \"signature\": \"(signal, sample_rate=8000)\",\n  \"return_type\": \"tuple(ndarray, Axes)\",\n  \"short_description\": \"Calculate the Fast Fourier Transform (FFT) of a given signal and plot the result.\"\n}"}
{"api_id": 218, "api_name": "scipy.fftpack.fft", "task_id": "BigCodeBench/267", "solution": "{\n  \"name\": \"calculateFFT\",\n  \"type\": \"function\",\n  \"signature\": \"(signal, sample_rate=8000)\",\n  \"return_type\": \"tuple(numpy.ndarray, matplotlib.axes._axes.Axes)\",\n  \"short_description\": \"Performs a Fast Fourier Transform (FFT) on the given signal and plots the result.\"\n}"}
{"api_id": 218, "api_name": "scipy.fftpack.fft", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateFFT\", \"type\": \"callable\", \"signature\": \"(signal, sampleRate=8000)\", \"return_type\": \"tuple\", \"short_description\": \"Performs a Fast Fourier Transform (FFT) on the provided signal and returns the FFT result along with the plot of the FFT.\"}"}
{"api_id": 218, "api_name": "scipy.fftpack.fft", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateFFT\", \"type\": \"callable\", \"signature\": \"(signal, sampleRate=8000)\", \"return_type\": \"tuple(fftArray, plotAxes)\", \"short_description\": \"Perform a Fast Fourier Transform (FFT) on the provided signal and return the FFT result along with a plot of the FFT.\"}"}
{"api_id": 218, "api_name": "scipy.fftpack.fft", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateFFT\", \"type\": \"callable\", \"signature\": \"(signal, sample_rate=8000)\", \"return_type\": \"tuple(np.ndarray, plt.Axes)\", \"short_description\": \"Perform a Fast Fourier Transform (FFT) on the given signal and plot the result. This function also returns the FFT result and the plot axes for further analysis or visualization.\"}"}
{"api_id": 218, "api_name": "scipy.fftpack.fft", "task_id": "BigCodeBench/267", "solution": "{\n  \"name\": \"calculate_fft\",\n  \"type\": \"callable\",\n  \"signature\": \"(signal, sample_rate=8000)\",\n  \"return_type\": \"tuple[np.ndarray, plt.Axes]\",\n  \"short_description\": \"Performs a Fast Fourier Transform (FFT) on the provided signal and plots the result, returning the FFT data and the plot axes.\"\n}"}
{"api_id": 218, "api_name": "scipy.fftpack.fft", "task_id": "BigCodeBench/267", "solution": "{\"name\": \"calculateFft\", \"type\": \"function\", \"signature\": \"(signal, sampleRate=8000)\", \"return_type\": \"tuple(np.ndarray, plt.Axes)\", \"short_description\": \"Performs a Fast Fourier Transform (FFT) on the provided signal and plots the result.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculate_pdf\", \"type\": \"callable\", \"signature\": \"(data, mean, std)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the probability density function (PDF) of given data using a normal distribution with specified mean and standard deviation.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateProbabilityDensity\", \"type\": \"callable\", \"signature\": \"(data, mean, std)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the probability density function (PDF) for given data using a normal distribution with specified mean and standard deviation.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculate_pdf\", \"type\": \"function\", \"signature\": \"(data, mean, std)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the probability density function (PDF) for given data using a normal distribution with specified mean and standard deviation.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateDistributionStats\", \"type\": \"function\", \"signature\": \"(data, distribution)\", \"return_type\": \"dict\", \"short_description\": \"Calculates statistical measures and plots a histogram along with the PDF of the given data using a specified distribution.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateDistributionStats\", \"type\": \"function\", \"signature\": \"(data, distribution)\", \"return_type\": \"dict\", \"short_description\": \"Calculates descriptive statistics for the given data along with fitting a specified distribution.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculatePdf\", \"type\": \"function\", \"signature\": \"(data, mean, std)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the probability density function (PDF) for a given set of data using a normal distribution with specified mean and standard deviation.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateProbabilityDensity\", \"type\": \"function\", \"signature\": \"(data, mean, std)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the probability density function (PDF) for given data using a normal distribution with specified mean and standard deviation.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateProbabilityDensity\", \"type\": \"function\", \"signature\": \"(data, mean, std)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the probability density function (PDF) for a given set of data using a normal distribution with specified mean and standard deviation.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateDistributionStats\", \"type\": \"callable\", \"signature\": \"(data, distribution)\", \"return_type\": \"dict\", \"short_description\": \"Calculates statistical metrics and plots a histogram with the PDF of the given data using a specified distribution.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/239", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data, loc=0, scale=1)\", \"return_type\": \"dict\", \"short_description\": \"Calculates basic statistical measures including mean, standard deviation, minimum, and maximum from the given data. Optionally, the location and scale parameters can be provided for statistical distribution.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculate_pdf\", \"type\": \"callable\", \"signature\": \"(values, mu, sigma)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the probability density function (PDF) of a normal distribution at given values with specified mean and standard deviation.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculate_pdf\", \"type\": \"function\", \"signature\": \"(values, mu, std)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the probability density function (PDF) of a normal distribution at given values.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculate_pdf\", \"type\": \"function\", \"signature\": \"(values, mu, std)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the probability density function (PDF) for given values using specified mean (mu) and standard deviation (std).\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculate_distribution\", \"type\": \"function\", \"signature\": \"(data, bins=4)\", \"return_type\": \"tuple(Counter, Axes)\", \"short_description\": \"Analyzes the distribution of values in a DataFrame and plots the histogram with a fitted normal distribution curve.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculate_pdf\", \"type\": \"callable\", \"signature\": \"(values, mu, sigma)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the probability density function (PDF) of a normal distribution at given values with specified mean and standard deviation.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculate_pdf\", \"type\": \"callable\", \"signature\": \"(values, mu, std)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the probability density function (PDF) of a given set of values using a normal distribution with specified mean (mu) and standard deviation (std).\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculate_pdf\", \"type\": \"callable\", \"signature\": \"(values, mu, sigma)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the probability density function (PDF) of a given set of values using a normal distribution with specified mean (mu) and standard deviation (sigma).\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculate_pdf\", \"type\": \"function\", \"signature\": \"(values, mu, std)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the probability density function (PDF) for given values using the normal distribution parameters.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculate_pdf\", \"type\": \"callable\", \"signature\": \"(data, mu, std)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the probability density function (PDF) of a given dataset using specified mean (mu) and standard deviation (std).\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculate_pdf\", \"type\": \"callable\", \"signature\": \"(data, mu, std, bins)\", \"return_type\": \"tuple\", \"short_description\": \"Calculate and plot the probability density function (PDF) of the given data using a normal distribution.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculate_pdf\", \"type\": \"callable\", \"signature\": \"(data, mu, std)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the probability density function (PDF) for a given set of data using the normal distribution parameters.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculate_normal_pdf\", \"type\": \"function\", \"signature\": \"(x, loc=0, scale=1)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the probability density function for a normal distribution at given points x.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculate_normal_pdf\", \"type\": \"function\", \"signature\": \"(x, loc=0, scale=1)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the probability density function (PDF) of a normal distribution at given points x.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculate_norm_pdf\", \"type\": \"callable\", \"signature\": \"(x, loc=0, scale=1)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the probability density function of the normal distribution at x.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculate_pdf\", \"type\": \"function\", \"signature\": \"(data, mu, std)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the probability density function (PDF) for given data with specified mean and standard deviation.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculate_normal_pdf\", \"type\": \"callable\", \"signature\": \"(x, loc=0, scale=1)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the probability density function for a given set of quantiles x from a normal distribution with specified location and scale parameters.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculate_pdf\", \"type\": \"function\", \"signature\": \"(data, mu, std)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the probability density function (PDF) of a given normal distribution.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculate_pdf\", \"type\": \"function\", \"signature\": \"(data, mu, std)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the probability density function (PDF) of a normal distribution given data, mean, and standard deviation.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculate_normal_pdf\", \"type\": \"callable\", \"signature\": \"(x, mean, std_dev)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the probability density function of a normal distribution at x given the mean and standard deviation.\"}"}
{"api_id": 219, "api_name": "scipy.stats.norm.pdf", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculate_pdf\", \"type\": \"function\", \"signature\": \"(data, mu, std)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculates the probability density function (PDF) for a given set of data using the normal distribution parameters.\"}"}
{"api_id": 220, "api_name": "scipy.stats.norm.fit", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculate_distribution_stats\", \"type\": \"function\", \"signature\": \"(data, bins=4)\", \"return_type\": \"tuple(Counter, Axes)\", \"short_description\": \"Calculates the distribution statistics and plots the histogram with the fitted normal distribution.\"}"}
{"api_id": 220, "api_name": "scipy.stats.norm.fit", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculateNormalFit\", \"type\": \"function\", \"signature\": \"(*args, **kwargs)\", \"return_type\": \"tuple\", \"short_description\": \"Calculates the parameters of a normal distribution fit to the given data.\"}"}
{"api_id": 220, "api_name": "scipy.stats.norm.fit", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculateDistributionParameters\", \"type\": \"callable\", \"signature\": \"(*args, **kwds)\", \"return_type\": \"tuple(float, float)\", \"short_description\": \"Calculates the mean and standard deviation of the given data, assuming a normal distribution.\"}"}
{"api_id": 220, "api_name": "scipy.stats.norm.fit", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculateDistributionStats\", \"type\": \"function\", \"signature\": \"(data, distribution)\", \"return_type\": \"dict\", \"short_description\": \"Calculates statistical properties of a given dataset for a specified distribution.\"}"}
{"api_id": 220, "api_name": "scipy.stats.norm.fit", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculateNormalDistributionParameters\", \"type\": \"callable\", \"signature\": \"(*args, **kwds)\", \"return_type\": \"tuple[float, float]\", \"short_description\": \"Calculates the mean (\u03bc) and standard deviation (\u03c3) of the normal distribution fitted to the given data.\"}"}
{"api_id": 220, "api_name": "scipy.stats.norm.fit", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculate_distribution_parameters\", \"type\": \"callable\", \"signature\": \"(*args, **kwds)\", \"return_type\": \"tuple(float, float)\", \"short_description\": \"Calculates the mean and standard deviation of the given data, assuming a normal distribution.\"}"}
{"api_id": 220, "api_name": "scipy.stats.norm.fit", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculateDistributionParameters\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"{'mu': float, 'std': float}\", \"short_description\": \"Calculates the mean (mu) and standard deviation (std) of the given data using a normal distribution fit.\"}"}
{"api_id": 220, "api_name": "scipy.stats.norm.fit", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculateNormalDistributionParams\", \"type\": \"callable\", \"signature\": \"(*args, **kwds)\", \"return_type\": \"tuple\", \"short_description\": \"Calculates the parameters (mean and standard deviation) of a normal distribution fitted to the given data.\"}"}
{"api_id": 220, "api_name": "scipy.stats.norm.fit", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculate_normal_distribution_parameters\", \"type\": \"callable\", \"signature\": \"(*args, **kwds)\", \"return_type\": \"tuple[float, float]\", \"short_description\": \"Calculates the mean and standard deviation of a given dataset assuming a normal distribution.\"}"}
{"api_id": 220, "api_name": "scipy.stats.norm.fit", "task_id": "BigCodeBench/532", "solution": "{\"name\": \"calculateDistributionParameters\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"{'mu': float, 'std': float}\", \"short_description\": \"Calculates the mean (mu) and standard deviation (std) of the given data assuming a normal distribution.\"}"}
{"api_id": 220, "api_name": "scipy.stats.norm.fit", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculate_histogram\", \"type\": \"function\", \"signature\": \"(data, bins='auto')\", \"return_type\": \"tuple\", \"short_description\": \"Calculates the histogram of the given data with specified number of bins.\"}"}
{"api_id": 220, "api_name": "scipy.stats.norm.fit", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculate_norm_fit\", \"type\": \"callable\", \"signature\": \"(*args, **kwds)\", \"return_type\": \"tuple[float, float]\", \"short_description\": \"Fit a normal distribution to the given data and return the mean and standard deviation.\"}"}
{"api_id": 220, "api_name": "scipy.stats.norm.fit", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculate_norm_fit\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"tuple[float, float]\", \"short_description\": \"Calculates the mean and standard deviation of a normal distribution that fits the given data.\"}"}
{"api_id": 220, "api_name": "scipy.stats.norm.fit", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculate_norm_fit\", \"type\": \"callable\", \"signature\": \"(*args, **kwds)\", \"return_type\": \"tuple[float, float]\", \"short_description\": \"Fits a normal distribution to the provided data and returns the mean and standard deviation.\"}"}
{"api_id": 220, "api_name": "scipy.stats.norm.fit", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculate_norm_fit\", \"type\": \"function\", \"signature\": \"(*args, **kwargs)\", \"return_type\": \"tuple[float, float]\", \"short_description\": \"Calculates the parameters (mean and standard deviation) of a normal distribution that fit the given data.\"}"}
{"api_id": 220, "api_name": "scipy.stats.norm.fit", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculate_norm_fit\", \"type\": \"function\", \"signature\": \"(*args, **kwargs)\", \"return_type\": \"tuple[float, float]\", \"short_description\": \"Calculates the parameters of a normal distribution fit to the given data.\"}"}
{"api_id": 220, "api_name": "scipy.stats.norm.fit", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculate_norm_fit\", \"type\": \"callable\", \"signature\": \"(*data)\", \"return_type\": \"tuple[float, float]\", \"short_description\": \"Calculates the mean and standard deviation of a dataset assuming a normal distribution.\"}"}
{"api_id": 220, "api_name": "scipy.stats.norm.fit", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculate_norm_fit\", \"type\": \"callable\", \"signature\": \"(*args, **kwds)\", \"return_type\": \"tuple\", \"short_description\": \"Calculates the parameters of a normal distribution fitted to the provided data.\"}"}
{"api_id": 220, "api_name": "scipy.stats.norm.fit", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculate_norm_fit\", \"type\": \"callable\", \"signature\": \"(*args, **kwds)\", \"return_type\": \"tuple[float, float]\", \"short_description\": \"Calculates the parameters of a normal distribution that fit the given data.\"}"}
{"api_id": 220, "api_name": "scipy.stats.norm.fit", "task_id": "BigCodeBench/582", "solution": "{\"name\": \"calculate_norm_fit\", \"type\": \"function\", \"signature\": \"(*data)\", \"return_type\": \"tuple[float, float]\", \"short_description\": \"Calculates the mean (mu) and standard deviation (std) of a normal distribution fitted to the provided data.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculateZScore\", \"type\": \"function\", \"signature\": \"(data, axis=0, ddof=0, nan_policy='propagate')\", \"return_type\": \"array\", \"short_description\": \"Computes the z-score of each value in the sample, relative to the sample mean and standard deviation.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"(data, axis=0, ddof=0, nan_policy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Compute the z-scores of the input data along a specified axis.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"(data, axis=0, ddof=0, nan_policy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Computes the z-scores of each value in the sample relative to the sample mean and standard deviation.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculateZScore\", \"type\": \"function\", \"signature\": \"(data, axis=0, ddof=0, nan_policy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Calculates the z-scores of the data along a specified axis, with optional handling of NaN values.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"(data, axis=0, ddof=0, nan_policy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Calculate the z-scores of the data along a specified axis. This function handles the input data, computes the z-scores, and allows for handling of NaN values.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculateZScore\", \"type\": \"function\", \"signature\": \"(data, axis=0, ddof=0, nan_policy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Computes the z-scores of the data along a specified axis, with optional handling of NaN values.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"(data, axis=0, ddof=0, nan_policy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Computes the z-scores of the data along a specified axis, with options for degrees of freedom and handling of NaN values.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculateZScore\", \"type\": \"function\", \"signature\": \"(data, axis=0, ddof=0, nan_policy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Computes the z score of each value in the sample, relative to the sample mean and standard deviation.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculateZScore\", \"type\": \"function\", \"signature\": \"(data, axis=0, ddof=0, nan_policy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Computes the z-score of each value in the sample, relative to the sample mean and standard deviation.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"(data, axis=0, ddof=0, nan_policy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Compute the z-scores of the input data along a specified axis, with optional handling of NaN values.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"calculateZScore\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"array\", \"short_description\": \"Computes the z-score for each value in the input data along a specified axis, with optional degrees of freedom correction and handling of NaN values.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"calculateZScores\", \"type\": \"callable\", \"signature\": \"(data, axis=0, ddof=0, nan_policy='propagate')\", \"return_type\": \"dict\", \"short_description\": \"Computes z-scores for the given data along the specified axis, with options for degrees of freedom and handling of NaN values.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"computeZScore\", \"type\": \"function\", \"signature\": \"(array, axis=0, ddof=0, nan_policy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Computes the z-score of each value in the sample, relative to the sample mean and standard deviation.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"(dataArray, axis=0, ddof=0, nanPolicy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Calculates the z-scores for each value in the input array.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"(data, axis=0, ddof=0, nan_policy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Calculates the z-scores for the given data along a specified axis, with options for degrees of freedom and handling of NaN values.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"computeZScore\", \"type\": \"function\", \"signature\": \"(dataArray, axis=0, ddof=0, nanPolicy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Computes the z-score for each element in the input array. The z-score is computed relative to the mean and standard deviation of the input array, optionally along a specified axis.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"calculateZScore\", \"type\": \"function\", \"signature\": \"(array, axis=0, ddof=0, nan_policy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Calculates the z-score for each element in the input array.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"computeZScore\", \"type\": \"function\", \"signature\": \"(array, axis=0, ddof=0, nan_policy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Computes the z-score of each value in the sample, standardized by mean and standard deviation.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"(dataArray, axis=0, ddof=0, nanPolicy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Computes the z-scores for each value in the input data array.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"(dataArray, axis=0, ddof=0, nanPolicy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Computes the z-scores of each value in the sample, relative to the sample mean and standard deviation, for a given array-like data.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/915", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"(data, axis=0, ddof=0, nanPolicy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Computes the z-scores of the input data along a specified axis. It handles NaN values according to the specified policy.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/915", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"(data, axis=0, ddof=0, nanPolicy='propagate')\", \"return_type\": \"array\", \"short_description\": \"Computes the z-scores of the input data array, standardized by mean and standard deviation. Optionally handles NaN values according to the specified policy.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/915", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"(dataArray, axis=0, ddof=0, nanPolicy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Computes the z-scores of the values in the input array, standardized by the mean and standard deviation of the input array.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/915", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"(dataArray, axis=0, ddof=0, nanPolicy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Calculates the z scores of each value in the sample, relative to the sample mean and standard deviation. This function handles ndarray subclasses, matrices, and masked arrays, using 'asanyarray' for parameters to preserve their subclasses.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/915", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"(dataArray, axis=0, ddof=0, nanPolicy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Computes the z-scores for the given data array, standardizing by mean and standard deviation. Supports handling of NaN values with specified policies.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/915", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"(data, axis=0, ddof=0, nanPolicy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Computes the z-scores of the input data along a specified axis, with optional handling of NaN values.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/915", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"(data, axis=0, ddof=0, nanPolicy='propagate')\", \"return_type\": \"dict\", \"short_description\": \"Calculates the z-scores for each value in the provided data array. This function supports optional parameters for axis, degrees of freedom correction, and handling of NaN values.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/915", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"(data, axis=0, ddof=0, nan_policy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Computes the z-scores for each value in the input data array.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/915", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"(dataArray, axis=0, ddof=0, nanPolicy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Computes the z-scores for the values in the input array, standardized by the mean and standard deviation.\"}"}
{"api_id": 221, "api_name": "scipy.stats.zscore", "task_id": "BigCodeBench/915", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"(dataArray, axis=0, ddof=0, nanPolicy='propagate')\", \"return_type\": \"array_like\", \"short_description\": \"Computes the z-scores for each value in the sample, standardized by the sample mean and standard deviation.\"}"}
{"api_id": 222, "api_name": "seaborn.heatmap", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"plotHeatmap\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, vmin=None, vmax=None, cmap=None, center=None, robust=False, annot=None, fmt='.2g', annot_kws=None, linewidths=0, linecolor='white', cbar=True, cbar_kws=None, cbar_ax=None, square=False, xticklabels='auto', yticklabels='auto', mask=None, ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Plots a heatmap for the given data using seaborn, with customizable options for annotations, color mapping, and more.\"\n}"}
{"api_id": 222, "api_name": "seaborn.heatmap", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"plotHeatmap\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, vmin=None, vmax=None, cmap=None, center=None, annot=None, fmt='.2g', annot_kws=None, linewidths=0, linecolor='white', cbar=True, cbar_kws=None, cbar_ax=None, square=False, xticklabels='auto', yticklabels='auto', mask=None, ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib Axes\",\n  \"short_description\": \"Plots a heatmap for the given data using the specified parameters.\"\n}"}
{"api_id": 222, "api_name": "seaborn.heatmap", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"plotHeatmap\", \"type\": \"callable\", \"signature\": \"(data, ax=None, vmin=None, vmax=None, cmap=None, center=None, robust=False, annot=None, fmt='.2g', annot_kws=None, linewidths=0, linecolor='white', cbar=True, cbar_kws=None, cbar_ax=None, square=False, xticklabels='auto', yticklabels='auto', mask=None, **kwargs)\", \"return_type\": \"matplotlib Axes\", \"short_description\": \"Plots a heatmap for the given data. This function allows for customization of various parameters including annotations, color map, and axes.\"}"}
{"api_id": 222, "api_name": "seaborn.heatmap", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"plotHeatmap\",\n  \"type\": \"function\",\n  \"signature\": \"(data, vmin=None, vmax=None, cmap=None, center=None, robust=False, annot=None, fmt='.2g', annot_kws=None, linewidths=0, linecolor='white', cbar=True, cbar_kws=None, cbar_ax=None, square=False, xticklabels='auto', yticklabels='auto', mask=None, ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib Axes\",\n  \"short_description\": \"Plots a heatmap of the provided data, with options to customize the color mapping, annotations, and more.\"\n}"}
{"api_id": 222, "api_name": "seaborn.heatmap", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"drawHeatmap\", \"type\": \"function\", \"signature\": \"(data, ax=None, vmin=None, vmax=None, cmap=None, center=None, robust=False, annot=None, fmt='.2g', annot_kws=None, linewidths=0, linecolor='white', cbar=True, cbar_kws=None, cbar_ax=None, square=False, xticklabels='auto', yticklabels='auto', mask=None, **kwargs)\", \"return_type\": \"matplotlib.axes.Axes\", \"short_description\": \"Draws a heatmap using the provided data. The heatmap is drawn into the specified Axes or the current Axes if none is provided.\"}"}
{"api_id": 222, "api_name": "seaborn.heatmap", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"plotHeatmap\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, vmin=None, vmax=None, cmap=None, center=None, annot=None, fmt='.2g', annot_kws=None, linewidths=0, linecolor='white', cbar=True, cbar_kws=None, cbar_ax=None, square=False, xticklabels='auto', yticklabels='auto', mask=None, ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib Axes\",\n  \"short_description\": \"Plots a heatmap for the given data with optional annotations and color scaling.\"\n}"}
{"api_id": 222, "api_name": "seaborn.heatmap", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"plotCorrelationHeatmap\",\n  \"type\": \"function\",\n  \"signature\": \"(data, *, annot=True, fmt='.2g', annot_kws=None, cmap='viridis', center=None, cbar=True, cbar_kws=None, ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Plots a heatmap of the correlation matrix for the given data.\"\n}"}
{"api_id": 222, "api_name": "seaborn.heatmap", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"plotHeatmap\", \"type\": \"callable\", \"signature\": \"(data, ax=None, vmin=None, vmax=None, cmap=None, center=None, robust=False, annot=None, fmt='.2g', annot_kws=None, linewidths=0, linecolor='white', cbar=True, cbar_kws=None, cbar_ax=None, square=False, xticklabels='auto', yticklabels='auto', mask=None, **kwargs)\", \"return_type\": \"matplotlib Axes\", \"short_description\": \"Plot rectangular data as a color-encoded matrix. This function is an Axes-level function and will draw the heatmap into the current Axes if none is provided.\"}"}
{"api_id": 222, "api_name": "seaborn.heatmap", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"drawHeatmap\",\n  \"type\": \"function\",\n  \"signature\": \"(data, ax=None, annot=False, cmap='viridis', vmin=None, vmax=None, center=None, robust=False, fmt='.2g', annot_kws=None, linewidths=0, linecolor='white', cbar=True, cbar_kws=None, cbar_ax=None, square=False, xticklabels='auto', yticklabels='auto', mask=None, **kwargs)\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Plots a heatmap of the given data. The heatmap can include annotations, colorbar, and more.\"\n}"}
{"api_id": 222, "api_name": "seaborn.heatmap", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"plotHeatmap\",\n  \"type\": \"function\",\n  \"signature\": \"(data, ax=None, vmin=None, vmax=None, cmap=None, center=None, robust=False, annot=None, fmt='.2g', annot_kws=None, linewidths=0, linecolor='white', cbar=True, cbar_kws=None, cbar_ax=None, square=False, xticklabels='auto', yticklabels='auto', mask=None, **kwargs)\",\n  \"return_type\": \"matplotlib Axes\",\n  \"short_description\": \"Plot rectangular data as a color-encoded matrix with annotations and a color bar.\"\n}"}
{"api_id": 222, "api_name": "seaborn.heatmap", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"plotHeatmap\",\n  \"type\": \"function\",\n  \"signature\": \"(data, vmin=None, vmax=None, cmap=None, center=None, annot=False, fmt='.2g', annot_kws=None, linewidths=0, linecolor='white', cbar=True, cbar_kws=None, cbar_ax=None, square=False, xticklabels='auto', yticklabels='auto', mask=None, ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Plots a heatmap for the given data.\"\n}"}
{"api_id": 222, "api_name": "seaborn.heatmap", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"plotCorrelationHeatmap\",\n  \"type\": \"function\",\n  \"signature\": \"(data, *, annot=True, cmap='coolwarm', center=None, robust=False, square=False, cbar=True, cbar_kws=None, cbar_ax=None, xticklabels='auto', yticklabels='auto', ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib Axes\",\n  \"short_description\": \"Plots a correlation heatmap with annotations and color bar.\"\n}"}
{"api_id": 222, "api_name": "seaborn.heatmap", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"plotHeatmap\",\n  \"type\": \"function\",\n  \"signature\": \"(data, title='', annot=False, cmap='viridis', center=None, vmin=None, vmax=None, cbar=True, cbar_kws=None, square=False, xticklabels='auto', yticklabels='auto', mask=None, ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Plots a heatmap of the given data with optional annotations and color mapping.\"\n}"}
{"api_id": 222, "api_name": "seaborn.heatmap", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"generateHeatmap\",\n  \"type\": \"function\",\n  \"signature\": \"(data, options)\",\n  \"return_type\": \"object\",\n  \"short_description\": \"Generates a heatmap from the provided data with customizable options.\"\n}"}
{"api_id": 222, "api_name": "seaborn.heatmap", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"plotHeatmap\",\n  \"type\": \"function\",\n  \"signature\": \"(data, vmin=None, vmax=None, cmap=None, center=None, annot=False, fmt='.2g', annot_kws=None, linewidths=0, linecolor='white', cbar=True, cbar_kws=None, cbar_ax=None, square=False, xticklabels='auto', yticklabels='auto', mask=None, ax=None, **kwargs)\",\n  \"return_type\": \"ax\",\n  \"short_description\": \"Plot rectangular data as a color-encoded matrix.\"\n}"}
{"api_id": 222, "api_name": "seaborn.heatmap", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"plotCorrelationHeatmap\",\n  \"type\": \"function\",\n  \"signature\": \"(data, *, annot=True, cmap='coolwarm', center=None, fmt='.2g', annot_kws=None, linewidths=0, linecolor='white', cbar=True, cbar_kws=None, cbar_ax=None, square=False, xticklabels='auto', yticklabels='auto', ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib Axes\",\n  \"short_description\": \"Plots a correlation heatmap for the given dataset, with annotations and a colorbar.\"\n}"}
{"api_id": 222, "api_name": "seaborn.heatmap", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"plotHeatmap\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, title, annot, cmap, vmin, vmax)\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Creates a heatmap from the provided data with optional annotations and title.\"\n}"}
{"api_id": 222, "api_name": "seaborn.heatmap", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"plotHeatmap\",\n  \"type\": \"function\",\n  \"signature\": \"(data, vmin=None, vmax=None, cmap=None, center=None, annot=False, fmt='.2g', annot_kws=None, linewidths=0, linecolor='white', cbar=True, cbar_kws=None, cbar_ax=None, square=False, xticklabels='auto', yticklabels='auto', mask=None, ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Plots a heatmap for the given data.\"\n}"}
{"api_id": 222, "api_name": "seaborn.heatmap", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"plotCorrelationHeatmap\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, *, annot=True, cmap='coolwarm', center=None, vmin=None, vmax=None, robust=False, cbar=True, cbar_kws=None, cbar_ax=None, square=False, xticklabels='auto', yticklabels='auto', mask=None, ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Plots a correlation heatmap for the given dataset.\"\n}"}
{"api_id": 222, "api_name": "seaborn.heatmap", "task_id": "BigCodeBench/302", "solution": "{\n  \"name\": \"plotCorrelationHeatmap\",\n  \"type\": \"function\",\n  \"signature\": \"(data, *, annot=True, cmap='coolwarm', title='Correlation Heatmap', ax=None)\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Plots a heatmap of the correlation matrix for the provided data.\"\n}"}
{"api_id": 223, "api_name": "seaborn.countplot", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"generateCategoricalPlot\", \"type\": \"callable\", \"signature\": \"(data=None, *, x=None, y=None, hue=None, order=None, hue_order=None, orient=None, color=None, palette=None, saturation=0.75, fill=True, hue_norm=None, stat='count', width=0.8, dodge='auto', gap=0, log_scale=None, native_scale=False, formatter=None, legend='auto', ax=None, **kwargs)\", \"return_type\": \"matplotlib Axes\", \"short_description\": \"Generate a plot for categorical data using Seaborn, supporting various options for customization.\"}"}
{"api_id": 223, "api_name": "seaborn.countplot", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"plotCategoricalData\", \"type\": \"function\", \"signature\": \"(data=None, *, x=None, y=None, hue=None, kind='count', order=None, hue_order=None, orient=None, color=None, palette=None, saturation=0.75, fill=True, hue_norm=None, width=0.8, dodge='auto', gap=0, log_scale=None, native_scale=False, formatter=None, legend='auto', ax=None, **kwargs)\", \"return_type\": \"matplotlib.axes.Axes\", \"short_description\": \"Creates a plot for categorical data, supporting various types of plots like count, bar, or box plots.\"}"}
{"api_id": 223, "api_name": "seaborn.countplot", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"plotCategoricalData\",\n  \"type\": \"callable\",\n  \"signature\": \"(data=None, *, x=None, y=None, hue=None, order=None, hue_order=None, orient=None, color=None, palette=None, saturation=0.75, fill=True, hue_norm=None, stat='count', width=0.8, dodge='auto', gap=0, log_scale=None, native_scale=False, formatter=None, legend='auto', ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib Axes\",\n  \"short_description\": \"Visualize the distribution of categorical data using bar plots or histograms.\"\n}"}
{"api_id": 223, "api_name": "seaborn.countplot", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"plotCategoricalData\", \"type\": \"function\", \"signature\": \"(data=None, x=None, y=None, kind='count', ax=None, **kwargs)\", \"return_type\": \"matplotlib.axes.Axes\", \"short_description\": \"Plots categorical data using various types of plots such as count plot, bar plot, etc.\"}"}
{"api_id": 223, "api_name": "seaborn.countplot", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"plotCategoricalData\", \"type\": \"function\", \"signature\": \"(data=None, x=None, y=None, kind='countplot', ax=None, **kwargs)\", \"return_type\": \"matplotlib.axes._subplots.AxesSubplot\", \"short_description\": \"Creates a plot for categorical data, supporting count plots and optionally allowing different types of plots.\"}"}
{"api_id": 223, "api_name": "seaborn.countplot", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"plotCategoricalData\", \"type\": \"callable\", \"signature\": \"(data=None, *, x=None, y=None, hue=None, order=None, hue_order=None, orient=None, color=None, palette=None, saturation=0.75, fill=True, hue_norm=None, stat='count', width=0.8, dodge='auto', gap=0, log_scale=None, native_scale=False, formatter=None, legend='auto', ax=None, **kwargs)\", \"return_type\": \"ax : matplotlib Axes\", \"short_description\": \"Plot categorical data using bar or count plots with additional options.\"}"}
{"api_id": 223, "api_name": "seaborn.countplot", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"plot_categorical_and_numerical_data\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, *, x=None, y=None, hue=None, kind='auto', order=None, hue_order=None, orient=None, color=None, palette=None, saturation=0.75, fill=True, hue_norm=None, stat='count', width=0.8, dodge='auto', gap=0, log_scale=None, native_scale=False, formatter=None, legend='auto', ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib Axes\",\n  \"short_description\": \"Create a plot that combines categorical and numerical data representations.\"\n}"}
{"api_id": 223, "api_name": "seaborn.countplot", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"plot_categorical_data\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, *, x=None, y=None, hue=None, order=None, hue_order=None, orient=None, color=None, palette=None, saturation=0.75, fill=True, hue_norm=None, legend='auto', ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib Axes\",\n  \"short_description\": \"Create a plot to visualize categorical data using either count plot or bar plot.\"\n}"}
{"api_id": 223, "api_name": "seaborn.countplot", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"plot_categorical_and_numerical_data\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, *, x=None, y=None, hue=None, kind='auto', order=None, hue_order=None, orient=None, color=None, palette=None, saturation=0.75, fill=True, hue_norm=None, stat='count', width=0.8, dodge='auto', gap=0, log_scale=None, native_scale=False, formatter=None, legend='auto', ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Create plots for both categorical and numerical data in a single function call. The type of plot is determined automatically based on the data type, or can be specified manually.\"\n}"}
{"api_id": 223, "api_name": "seaborn.countplot", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"plot_categorical_data\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, *, x=None, y=None, hue=None, kind='count', order=None, hue_order=None, orient=None, color=None, palette=None, saturation=0.75, fill=True, hue_norm=None, legend='auto', ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Create a plot to visualize categorical data, supporting various types of plots including count, bar, and more.\"\n}"}
{"api_id": 224, "api_name": "seaborn.set_theme", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"setCustomTheme\", \"type\": \"callable\", \"signature\": \"(context='notebook', style='darkgrid', palette='deep', font='sans-serif', fontScale=1, colorCodes=True, rc=None)\", \"return_type\": \"None\", \"short_description\": \"Customizes the visual theme for all matplotlib and seaborn plots with specified parameters.\"}"}
{"api_id": 224, "api_name": "seaborn.set_theme", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"setTheme\",\n  \"type\": \"function\",\n  \"signature\": \"(context='notebook', style='darkgrid', palette='deep', font='sans-serif', font_scale=1, color_codes=True, rc=None)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Set the visual theme for all plots, using matplotlib and seaborn defaults.\"\n}"}
{"api_id": 224, "api_name": "seaborn.set_theme", "task_id": "BigCodeBench/101", "solution": "{\n  \"name\": \"setTheme\",\n  \"type\": \"callable\",\n  \"signature\": \"(context='notebook', style='darkgrid', palette='deep', font='sans-serif', font_scale=1, color_codes=True, rc=None)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Set global visual theme for matplotlib and seaborn plots, including color palette, font, and style.\"\n}"}
{"api_id": 224, "api_name": "seaborn.set_theme", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"setTheme\", \"type\": \"callable\", \"signature\": \"(context='notebook', style='darkgrid', palette='deep', font='sans-serif', fontScale=1, colorCodes=True, rc=None)\", \"return_type\": \"None\", \"short_description\": \"Customizes the visual theme for all plots in Matplotlib and Seaborn, including global defaults for fonts, styles, and color palettes.\"}"}
{"api_id": 224, "api_name": "seaborn.set_theme", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"setCustomTheme\", \"type\": \"callable\", \"signature\": \"(context='notebook', style='darkgrid', palette='deep', font='sans-serif', fontScale=1, colorCodes=True, rc=None)\", \"return_type\": \"None\", \"short_description\": \"Customizes the visual theme for all matplotlib and seaborn plots with user-defined parameters.\"}"}
{"api_id": 224, "api_name": "seaborn.set_theme", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"setTheme\", \"type\": \"function\", \"signature\": \"(context='notebook', style='darkgrid', palette='deep', font='sans-serif', fontScale=1, colorCodes=True, rc=None)\", \"return_type\": \"None\", \"short_description\": \"Customizes the visual theme for all plots using matplotlib and seaborn, altering the global defaults via rcParams.\"}"}
{"api_id": 224, "api_name": "seaborn.set_theme", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"setTheme\", \"type\": \"callable\", \"signature\": \"(context='notebook', style='darkgrid', palette='deep', font='sans-serif', fontScale=1, colorCodes=True, rc=None)\", \"return_type\": \"None\", \"short_description\": \"Customizes the visual theme for all matplotlib and seaborn plots, overriding global defaults using the matplotlib rcParams system.\"}"}
{"api_id": 224, "api_name": "seaborn.set_theme", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"setTheme\", \"type\": \"callable\", \"signature\": \"(context='notebook', style='darkgrid', palette='deep', font='sans-serif', fontScale=1, colorCodes=True, rc=None)\", \"return_type\": \"None\", \"short_description\": \"Customizes the visual theme for all matplotlib and seaborn plots globally.\"}"}
{"api_id": 224, "api_name": "seaborn.set_theme", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"setCustomTheme\", \"type\": \"callable\", \"signature\": \"(context='notebook', style='darkgrid', palette='deep', font='sans-serif', fontScale=1, colorCodes=True, rc=None)\", \"return_type\": \"None\", \"short_description\": \"Customizes the visual theme for all matplotlib and seaborn plots with user-defined settings.\"}"}
{"api_id": 224, "api_name": "seaborn.set_theme", "task_id": "BigCodeBench/101", "solution": "{\"name\": \"setTheme\", \"type\": \"callable\", \"signature\": \"(context='notebook', style='darkgrid', palette='deep', font='sans-serif', fontScale=1, colorCodes=True, rc=None)\", \"return_type\": \"None\", \"short_description\": \"Customizes the visual theme for all Matplotlib and Seaborn plots, altering global defaults via rcParams.\"}"}
{"api_id": 225, "api_name": "seaborn.boxplot", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"plotCategoricalDistribution\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, x=None, y=None, kind='box', orient='v', ax=None)\",\n  \"return_type\": \"matplotlib.axes._axes.Axes\",\n  \"short_description\": \"Plots a distribution of categorical or numerical data, choosing between box plots, histograms, or count plots based on the data type.\"\n}"}
{"api_id": 225, "api_name": "seaborn.boxplot", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"plotDistributionAnalysis\",\n  \"type\": \"function\",\n  \"signature\": \"(data, col, plot_type='box', chart_type='horizontal', palette='viridis', saturation=0.75, legend='auto', ax=None)\",\n  \"return_type\": \"Axes\",\n  \"short_description\": \"Generates a comprehensive distribution analysis plot for a specified column in a DataFrame. Supports both vertical and horizontal orientations, with customizable legend display and color palette.\"\n}"}
{"api_id": 225, "api_name": "seaborn.boxplot", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"generateVisualization\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, plot_type='auto')\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Generates a visualization for the given DataFrame and column. Supports histogram, count plot, box plot, and strip plot based on the data type.\"\n}"}
{"api_id": 225, "api_name": "seaborn.boxplot", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"plotDistributionAnalysis\",\n  \"type\": \"callable\",\n  \"signature\": \"(data=None, *, x=None, y=None, hue=None, kind='box', order=None, hue_order=None, orient=None, color=None, palette=None, saturation=0.75, fill=True, dodge='auto', width=0.8, gap=0, whis=1.5, linecolor='auto', linewidth=None, fliersize=None, hue_norm=None, native_scale=False, log_scale=None, formatter=None, legend='auto', ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib Axes\",\n  \"short_description\": \"Draws a distribution plot to visualize the distribution of data, either as box plots or other types based on the kind parameter.\"\n}"}
{"api_id": 225, "api_name": "seaborn.boxplot", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"createVisualization\",\n  \"type\": \"callable\",\n  \"signature\": \"(data=None, *, plotType='auto', columns=None, figsize=(10, 6), palette='viridis', style='whitegrid', context='notebook', **kwargs)\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Creates a comprehensive data visualization based on the provided parameters.\"\n}"}
{"api_id": 225, "api_name": "seaborn.boxplot", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"plotCategoricalDistribution\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, x=None, y=None, hue=None, kind='box', order=None, hue_order=None, orient=None, color=None, palette=None, saturation=0.75, fill=True, dodge='auto', width=0.8, gap=0, whis=1.5, linecolor='auto', linewidth=None, fliersize=None, hue_norm=None, native_scale=False, log_scale=None, formatter=None, legend='auto', ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib Axes\",\n  \"short_description\": \"Draws a distribution plot for categorical or numerical data, supporting box plots, violin plots, and more.\"\n}"}
{"api_id": 225, "api_name": "seaborn.boxplot", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"generateVisualization\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, x=None, y=None, kind='auto', hue=None, row=None, col=None, palette=None, legend='auto', ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib Axes\",\n  \"short_description\": \"Generate a visual representation of the data using various plot types.\"\n}"}
{"api_id": 225, "api_name": "seaborn.boxplot", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"generateVisualizations\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, *, plotType=None, col=None, figsize=(10, 8))\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Generates visualizations for a given dataset based on the specified plot type and column.\"\n}"}
{"api_id": 225, "api_name": "seaborn.boxplot", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"generateVisualizations\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, col=None)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Generates visualizations for a given DataFrame and column, including histograms, count plots, box plots, and strip plots based on the data type.\"\n}"}
{"api_id": 225, "api_name": "seaborn.boxplot", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"generateVisualization\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, col=None, *, plotType=None, style='default', palette=None, size=(10, 6))\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Generates a visualization for the given DataFrame and column based on the specified plot type.\"\n}"}
{"api_id": 225, "api_name": "seaborn.boxplot", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"generateBoxAndHistogram\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, ax=None)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a box plot and a histogram from the provided data, optionally on specified axes.\"\n}"}
{"api_id": 225, "api_name": "seaborn.boxplot", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"plotBoxAndHistograms\",\n  \"type\": \"function\",\n  \"signature\": \"(data, ax=None)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Plots a box plot and a histogram for numerical data, comparing categories if provided.\"\n}"}
{"api_id": 225, "api_name": "seaborn.boxplot", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"plotBoxAndHistogram\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, x=None, y=None, hue=None, orient=None, color=None, palette=None, saturation=None, fill=None, dodge=None, width=None, gap=None, whis=None, linecolor=None, linewidth=None, fliersize=None, hue_norm=None, log_scale=None, native_scale=None, formatter=None, legend=None, ax=None, **kwargs)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a box plot and a histogram for the provided data, with an option to include a hue variable for categorical data.\"\n}"}
{"api_id": 225, "api_name": "seaborn.boxplot", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"generateBoxAndHistogram\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, ax=None)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a box plot and a histogram from the provided data, optionally on a specified axis.\"\n}"}
{"api_id": 225, "api_name": "seaborn.boxplot", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"plotBoxAndHistogram\",\n  \"type\": \"function\",\n  \"signature\": \"(data, x=None, y=None, hue=None, order=None, hue_order=None, orient=None, color=None, palette=None, saturation=0.75, fill=True, dodge='auto', width=0.8, gap=0, whis=1.5, linecolor='auto', linewidth=None, fliersize=None, hue_norm=None, native_scale=False, log_scale=None, formatter=None, legend='auto', ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Plots a box plot and a histogram for the given data, providing a side-by-side comparison.\"\n}"}
{"api_id": 225, "api_name": "seaborn.boxplot", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"plotBoxAndHistogram\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, *, x=None, y=None, hue=None, order=None, hue_order=None, orient=None, color=None, palette=None, saturation=0.75, fill=True, dodge='auto', width=0.8, gap=0, whis=1.5, linecolor='auto', linewidth=None, fliersize=None, hue_norm=None, native_scale=False, log_scale=None, formatter=None, legend='auto', ax=None, **kwargs)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a box plot and a histogram side by side for visualizing the distribution of quantitative data.\"\n}"}
{"api_id": 225, "api_name": "seaborn.boxplot", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"drawBoxAndViolinPlot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data=None, x=None, y=None, hue=None, palette=None, ax=None)\",\n  \"return_type\": \"matplotlib Axes\",\n  \"short_description\": \"Draws a box plot and a violin plot side by side to show distributions with respect to categories.\"\n}"}
{"api_id": 225, "api_name": "seaborn.boxplot", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"plotBoxAndHist\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, x=None, y=None, hue=None, orient=None, ax=None, **kwargs)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a box plot and a histogram for the given dataset, facilitating comparisons across categories.\"\n}"}
{"api_id": 225, "api_name": "seaborn.boxplot", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"createBoxAndHistograms\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, ax=None)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Creates a box plot and a histogram for the given dataset, plotting them side by side.\"\n}"}
{"api_id": 225, "api_name": "seaborn.boxplot", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"plotBoxAndHistogram\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, x=None, ax=None)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Plots a box plot and a histogram for the given data, side by side.\"\n}"}
{"api_id": 226, "api_name": "seaborn.stripplot", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"plot_categorical_data\",\n  \"type\": \"callable\",\n  \"signature\": \"(data=None, *, x=None, y=None, hue=None, order=None, hue_order=None, plot_type='strip', jitter=True, dodge=False, orient=None, color=None, palette=None, size=5, edgecolor=None, linewidth=0, hue_norm=None, log_scale=None, native_scale=False, formatter=None, legend='auto', ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib Axes\",\n  \"short_description\": \"Plots categorical data either as a strip plot or a bar plot, with options for jitter and dodge.\"\n}"}
{"api_id": 226, "api_name": "seaborn.stripplot", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"createPlot\", \"type\": \"callable\", \"signature\": \"(data=None, *, plotType=None, col=None, **kwargs)\", \"return_type\": \"matplotlib.figure.Figure\", \"short_description\": \"Creates a plot based on the type specified, either histogram or strip plot, based on the data and column provided.\"}"}
{"api_id": 226, "api_name": "seaborn.stripplot", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"plotCategoricalData\", \"type\": \"function\", \"signature\": \"(data, x, y, kind='strip', order=None, hue_order=None, jitter=True, dodge=False, orient=None, color=None, palette=None, size=5, edgecolor=None, linewidth=0, hue_norm=None, log_scale=None, native_scale=False, formatter=None, legend='auto', ax=None, **kwargs)\", \"return_type\": \"matplotlib Axes\", \"short_description\": \"Create a categorical scatter plot or strip plot using jitter to reduce overplotting. This function supports various types of plots like strip, swarm, box, and violin plots.\"}"}
{"api_id": 226, "api_name": "seaborn.stripplot", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"plotCategoricalData\",\n  \"type\": \"callable\",\n  \"signature\": \"(data=None, *, x=None, y=None, hue=None, kind='strip', order=None, hue_order=None, jitter=True, dodge=False, orient=None, color=None, palette=None, size=5, edgecolor=None, linewidth=0, hue_norm=None, log_scale=None, native_scale=False, formatter=None, legend='auto', ax=None, **kwargs)\",\n  \"return_type\": \"ax : matplotlib Axes\",\n  \"short_description\": \"Draws a categorical scatterplot or strip plot using jitter to reduce overplotting. Supports different kinds of plots like strip, swarm, or box plots.\"\n}"}
{"api_id": 226, "api_name": "seaborn.stripplot", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"plotCategoricalData\", \"type\": \"callable\", \"signature\": \"(data=None, *, x=None, y=None, hue=None, order=None, hue_order=None, jitter=True, dodge=False, orient=None, color=None, palette=None, size=5, edgecolor=<default>, linewidth=0, hue_norm=None, log_scale=None, native_scale=False, formatter=None, legend='auto', ax=None, **kwargs)\", \"return_type\": \"ax : matplotlib Axes\", \"short_description\": \"Draw a categorical scatterplot using jitter to reduce overplotting. This function is designed to complement box or violin plots by showing all observations along with a representation of the underlying distribution.\"}"}
{"api_id": 226, "api_name": "seaborn.stripplot", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"plotCategoricalData\", \"type\": \"function\", \"signature\": \"(data=None, *, x=None, y=None, hue=None, order=None, hue_order=None, jitter=True, dodge=False, orient=None, color=None, palette=None, size=5, edgecolor=None, linewidth=0, hue_norm=None, log_scale=None, native_scale=False, formatter=None, legend='auto', ax=None, **kwargs)\", \"return_type\": \"matplotlib Axes\", \"short_description\": \"Draw a categorical scatterplot using jitter to reduce overplotting. This function is designed to handle both categorical and numerical data, providing a versatile way to visualize data across different types.\"}"}
{"api_id": 226, "api_name": "seaborn.stripplot", "task_id": "BigCodeBench/341", "solution": "{\n  \"name\": \"plotCategoricalData\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, x=None, y=None, hue=None, kind='strip', order=None, hue_order=None, jitter=True, dodge=False, orient=None, color=None, palette=None, size=5, edgecolor='black', linewidth=0, hue_norm=None, log_scale=None, native_scale=False, formatter=None, legend='auto', ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib Axes\",\n  \"short_description\": \"Draws a categorical scatterplot using jitter to reduce overplotting or a count plot for categorical data.\"\n}"}
{"api_id": 226, "api_name": "seaborn.stripplot", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"plotCategoricalData\", \"type\": \"callable\", \"signature\": \"(data=None, *, x=None, y=None, hue=None, kind='strip', order=None, hue_order=None, jitter=True, dodge=False, orient=None, color=None, palette=None, size=5, edgecolor=None, linewidth=0, hue_norm=None, log_scale=None, native_scale=False, formatter=None, legend='auto', ax=None, **kwargs)\", \"return_type\": \"ax: matplotlib Axes\", \"short_description\": \"Create a plot for categorical data, either as a strip plot or a bar plot, with options for jitter and hue differentiation.\"}"}
{"api_id": 226, "api_name": "seaborn.stripplot", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"createCategoricalPlot\", \"type\": \"callable\", \"signature\": \"(data=None, *, x=None, y=None, hue=None, order=None, hue_order=None, kind='strip', orient=None, color=None, palette=None, size=5, edgecolor='black', linewidth=0, hue_norm=None, log_scale=None, native_scale=False, formatter=None, legend='auto', ax=None, **kwargs)\", \"return_type\": \"matplotlib Axes\", \"short_description\": \"Create a categorical plot for data visualization, supporting strip plots and optionally other types like count plots.\"}"}
{"api_id": 226, "api_name": "seaborn.stripplot", "task_id": "BigCodeBench/341", "solution": "{\"name\": \"plotCategoricalData\", \"type\": \"function\", \"signature\": \"(data=None, x=None, y=None, hue=None, kind='strip', order=None, hue_order=None, jitter=True, dodge=False, orient=None, color=None, palette=None, size=5, edgecolor=None, linewidth=0, hue_norm=None, log_scale=None, native_scale=False, formatter=None, legend='auto', ax=None, **kwargs)\", \"return_type\": \"ax : matplotlib Axes\", \"short_description\": \"Create a plot for categorical data, either as a strip plot or a bar plot, to visualize distributions and relationships between variables.\"}"}
{"api_id": 227, "api_name": "seaborn.histplot", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotAgeDistribution\", \"type\": \"callable\", \"signature\": \"(data=None, *, x=None, y=None, hue=None, weights=None, bins='auto', binwidth=None, binrange=None, discrete=None, cumulative=False, common_bins=True, common_norm=True, palette=None, hue_order=None, hue_norm=None, color=None, log_scale=None, legend=True, ax=None, **kwargs)\", \"return_type\": \":class:`matplotlib.axes.Axes`\", \"short_description\": \"Plots the distribution of ages from a dataset, either univariate or bivariate, using histograms and optionally KDE plots.\"}"}
{"api_id": 227, "api_name": "seaborn.histplot", "task_id": "BigCodeBench/530", "solution": "{\n  \"name\": \"plotAgeDistribution\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, *, x=None, hue=None, weights=None, stat='count', bins='auto', binwidth=None, binrange=None, discrete=None, cumulative=False, common_bins=True, common_norm=True, multiple='layer', element='bars', fill=True, shrink=1, kde=False, kde_kws=None, line_kws=None, thresh=0, pthresh=None, pmax=None, cbar=False, cbar_ax=None, cbar_kws=None, palette=None, hue_order=None, hue_norm=None, color=None, log_scale=None, legend=True, ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Plot the distribution of ages for a given dataset, optionally grouped by another variable.\"\n}"}
{"api_id": 227, "api_name": "seaborn.histplot", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"generateAgeDistributionPlot\", \"type\": \"callable\", \"signature\": \"(data=None, *, ages=None, bins=None, ax=None)\", \"return_type\": \":class:`matplotlib.axes.Axes`\", \"short_description\": \"Generates a histogram plot to show the distribution of ages.\"}"}
{"api_id": 227, "api_name": "seaborn.histplot", "task_id": "BigCodeBench/530", "solution": "{\"name\": \"plotAgeDistribution\", \"type\": \"callable\", \"signature\": \"(data=None, *, bins=None, kde=False, title=None, xlabel=None, ylabel=None, ax=None)\", \"return_type\": \":class:`matplotlib.axes.Axes`\", \"short_description\": \"Plots a histogram to show the distribution of ages, optionally with a KDE curve.\"}"}
{"api_id": 227, "api_name": "seaborn.histplot", "task_id": "BigCodeBench/530", "solution": "{\n  \"name\": \"plotAgeDistribution\",\n  \"type\": \"callable\",\n  \"signature\": \"(data=None, *, x=None, hue=None, weights=None, bins='auto', kde=False, kde_kws=None, palette=None, color=None, log_scale=None, legend=True, ax=None)\",\n  \"return_type\": \":class:`matplotlib.axes.Axes`\",\n  \"short_description\": \"Plot the distribution of ages for a given dataset, highlighting any duplicates in the names.\"\n}"}
{"api_id": 227, "api_name": "seaborn.histplot", "task_id": "BigCodeBench/530", "solution": "{\n  \"name\": \"plotDuplicateAges\",\n  \"type\": \"function\",\n  \"signature\": \"(df, duplicate_names)\",\n  \"return_type\": \":class:`matplotlib.axes.Axes`\",\n  \"short_description\": \"Plots a histogram of ages for names that appear more than once in the dataset.\"\n}"}
{"api_id": 227, "api_name": "seaborn.histplot", "task_id": "BigCodeBench/530", "solution": "{\n  \"name\": \"plotAgeDistribution\",\n  \"type\": \"callable\",\n  \"signature\": \"(data=None, *, x=None, hue=None, bins='auto', ax=None)\",\n  \"return_type\": \":class:`matplotlib.axes.Axes`\",\n  \"short_description\": \"Plot the distribution of ages for a given dataset, highlighting any duplicates.\"\n}"}
{"api_id": 227, "api_name": "seaborn.histplot", "task_id": "BigCodeBench/530", "solution": "{\n  \"name\": \"plotAgeDistribution\",\n  \"type\": \"callable\",\n  \"signature\": \"(data=None, *, x=None, hue=None, weights=None, stat='count', bins='auto', binwidth=None, binrange=None, discrete=None, cumulative=False, common_bins=True, common_norm=True, multiple='layer', element='bars', fill=True, shrink=1, kde=False, kde_kws=None, line_kws=None, thresh=0, pthresh=None, pmax=None, cbar=False, cbar_ax=None, cbar_kws=None, palette=None, hue_order=None, hue_norm=None, color=None, log_scale=None, legend=True, ax=None, **kwargs)\",\n  \"return_type\": \":class:`matplotlib.axes.Axes`\",\n  \"short_description\": \"Plot the distribution of ages from a dataset, highlighting any duplicates.\"\n}"}
{"api_id": 227, "api_name": "seaborn.histplot", "task_id": "BigCodeBench/530", "solution": "{\n  \"name\": \"plotAgeDistribution\",\n  \"type\": \"callable\",\n  \"signature\": \"(data=None, *, x=None, bins='auto', ax=None, **kwargs)\",\n  \"return_type\": \":class:`matplotlib.axes.Axes`\",\n  \"short_description\": \"Plot the distribution of ages from a dataset, highlighting any duplicates.\"\n}"}
{"api_id": 227, "api_name": "seaborn.histplot", "task_id": "BigCodeBench/530", "solution": "{\n  \"name\": \"plotDuplicateAges\",\n  \"type\": \"function\",\n  \"signature\": \"(df=None)\",\n  \"return_type\": \"tuple(Counter, plt.Axes)\",\n  \"short_description\": \"Plots a histogram of ages for names that appear more than once in the dataset.\"\n}"}
{"api_id": 227, "api_name": "seaborn.histplot", "task_id": "BigCodeBench/916", "solution": "{\"name\": \"plotDistributions\", \"type\": \"callable\", \"signature\": \"(data=None, *, x=None, y=None, hue=None, weights=None, stat='count', bins='auto', binwidth=None, binrange=None, discrete=None, cumulative=False, common_bins=True, common_norm=True, multiple='layer', element='bars', fill=True, shrink=1, kde=False, kde_kws=None, line_kws=None, thresh=0, pthresh=None, pmax=None, cbar=False, cbar_ax=None, cbar_kws=None, palette=None, hue_order=None, hue_norm=None, color=None, log_scale=None, legend=True, ax=None, **kwargs)\", \"return_type\": \":class:`matplotlib.axes.Axes`\", \"short_description\": \"Plot univariate or bivariate histograms and density plots to show distributions of datasets. This function provides a comprehensive approach to visualizing the distribution of one or more variables, offering flexibility in binning, normalization, and representation.\"}"}
{"api_id": 227, "api_name": "seaborn.histplot", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"plotDistribution\",\n  \"type\": \"callable\",\n  \"signature\": \"(data=None, *, x=None, y=None, hue=None, weights=None, stat='count', bins='auto', binwidth=None, binrange=None, discrete=None, cumulative=False, common_bins=True, common_norm=True, multiple='layer', element='bars', fill=True, shrink=1, kde=False, kde_kws=None, line_kws=None, thresh=0, pthresh=None, pmax=None, cbar=False, cbar_ax=None, cbar_kws=None, palette=None, hue_order=None, hue_norm=None, color=None, log_scale=None, legend=True, ax=None, **kwargs)\",\n  \"return_type\": \":class:`matplotlib.axes.Axes`\",\n  \"short_description\": \"Plot univariate or bivariate histograms to show distributions of datasets, including KDE plots.\"\n}"}
{"api_id": 227, "api_name": "seaborn.histplot", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"plotHistogram\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, *, x=None, y=None, hue=None, weights=None, stat='count', bins='auto', binwidth=None, binrange=None, discrete=None, cumulative=False, common_bins=True, common_norm=True, multiple='layer', element='bars', fill=True, shrink=1, kde=False, kde_kws=None, line_kws=None, thresh=0, pthresh=None, pmax=None, cbar=False, cbar_ax=None, cbar_kws=None, palette=None, hue_order=None, hue_norm=None, color=None, log_scale=None, legend=True, ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Plot univariate or bivariate histograms to show distributions of datasets, with options for KDE and color mapping.\"\n}"}
{"api_id": 227, "api_name": "seaborn.histplot", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"plotHistograms\",\n  \"type\": \"callable\",\n  \"signature\": \"(data=None, *, x=None, y=None, hue=None, weights=None, stat='count', bins='auto', binwidth=None, binrange=None, discrete=None, cumulative=False, common_bins=True, common_norm=True, multiple='layer', element='bars', fill=True, shrink=1, kde=False, kde_kws=None, line_kws=None, thresh=0, pthresh=None, pmax=None, cbar=False, cbar_ax=None, cbar_kws=None, palette=None, hue_order=None, hue_norm=None, color=None, log_scale=None, legend=True, ax=None, **kwargs)\",\n  \"return_type\": \":class:`matplotlib.axes.Axes`\",\n  \"short_description\": \"Plot histograms and optionally add kernel density estimates to show distributions of datasets.\"\n}"}
{"api_id": 227, "api_name": "seaborn.histplot", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"plotDistributions\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, *, x=None, y=None, hue=None, weights=None, stat='count', bins='auto', binwidth=None, binrange=None, discrete=None, cumulative=False, common_bins=True, common_norm=True, multiple='layer', element='bars', fill=True, shrink=1, kde=False, kde_kws=None, line_kws=None, thresh=0, pthresh=None, pmax=None, cbar=False, cbar_ax=None, cbar_kws=None, palette=None, hue_order=None, hue_norm=None, color=None, log_scale=None, legend=True, ax=None, **kwargs)\",\n  \"return_type\": \":class:`matplotlib.axes.Axes`\",\n  \"short_description\": \"Plot distributions of datasets using histograms and kernel density estimation.\"\n}"}
{"api_id": 227, "api_name": "seaborn.histplot", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"plotHistogram\",\n  \"type\": \"callable\",\n  \"signature\": \"(data=None, *, x=None, y=None, hue=None, weights=None, stat='count', bins='auto', binwidth=None, binrange=None, discrete=None, cumulative=False, common_bins=True, common_norm=True, multiple='layer', element='bars', fill=True, shrink=1, kde=False, kde_kws=None, line_kws=None, thresh=0, pthresh=None, pmax=None, cbar=False, cbar_ax=None, cbar_kws=None, palette=None, hue_order=None, hue_norm=None, color=None, log_scale=None, legend=True, ax=None, **kwargs)\",\n  \"return_type\": \":class:`matplotlib.axes.Axes`\",\n  \"short_description\": \"Plot univariate or bivariate histograms to show distributions of datasets, similar to seaborn.histplot.\"\n}"}
{"api_id": 227, "api_name": "seaborn.histplot", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"plotHistAndBox\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, x=None, y=None, hue=None, weights=None, stat='count', bins='auto', binwidth=None, binrange=None, discrete=None, cumulative=False, common_bins=True, common_norm=True, multiple='layer', element='bars', fill=True, shrink=1, kde=False, kde_kws=None, line_kws=None, thresh=0, pthresh=None, pmax=None, cbar=False, cbar_ax=None, cbar_kws=None, palette=None, hue_order=None, hue_norm=None, color=None, log_scale=None, legend=True, ax=None, **kwargs)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Plots a histogram and a box plot for univariate or bivariate data.\"\n}"}
{"api_id": 227, "api_name": "seaborn.histplot", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"plotDistribution\",\n  \"type\": \"callable\",\n  \"signature\": \"(data=None, *, x=None, y=None, hue=None, weights=None, stat='count', bins='auto', binwidth=None, binrange=None, discrete=None, cumulative=False, common_bins=True, common_norm=True, multiple='layer', element='bars', fill=True, shrink=1, kde=False, kde_kws=None, line_kws=None, thresh=0, pthresh=None, pmax=None, cbar=False, cbar_ax=None, cbar_kws=None, palette=None, hue_order=None, hue_norm=None, color=None, log_scale=None, legend=True, ax=None, **kwargs)\",\n  \"return_type\": \":class:`matplotlib.axes.Axes`\",\n  \"short_description\": \"Plot univariate or bivariate histograms to show distributions of datasets, including kernel density estimation if desired.\"\n}"}
{"api_id": 227, "api_name": "seaborn.histplot", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"plotDistribution\",\n  \"type\": \"callable\",\n  \"signature\": \"(data=None, *, x=None, y=None, hue=None, weights=None, stat='count', bins='auto', binwidth=None, binrange=None, discrete=None, cumulative=False, common_bins=True, common_norm=True, multiple='layer', element='bars', fill=True, shrink=1, kde=False, kde_kws=None, line_kws=None, thresh=0, pthresh=None, pmax=None, cbar=False, cbar_ax=None, cbar_kws=None, palette=None, hue_order=None, hue_norm=None, color=None, log_scale=None, legend=True, ax=None, **kwargs)\",\n  \"return_type\": \":class:`matplotlib.axes.Axes`\",\n  \"short_description\": \"Plot univariate or bivariate histograms to show distributions of datasets, including kernel density estimation for smooth curves.\"\n}"}
{"api_id": 227, "api_name": "seaborn.histplot", "task_id": "BigCodeBench/916", "solution": "{\n  \"name\": \"plotHistogram\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, *, x=None, y=None, hue=None, weights=None, stat='count', bins='auto', binwidth=None, binrange=None, discrete=None, cumulative=False, common_bins=True, common_norm=True, multiple='layer', element='bars', fill=True, shrink=1, kde=False, kde_kws=None, line_kws=None, thresh=0, pthresh=None, pmax=None, cbar=False, cbar_ax=None, cbar_kws=None, palette=None, hue_order=None, hue_norm=None, color=None, log_scale=None, legend=True, ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Plot univariate or bivariate histograms to show distributions of datasets, including options for KDE and color mapping.\"\n}"}
{"api_id": 228, "api_name": "seaborn.barplot", "task_id": "BigCodeBench/37", "solution": "{\n  \"name\": \"plotFeatureImportance\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, target=None)\",\n  \"return_type\": \"matplotlib.Axes\",\n  \"short_description\": \"Plots the feature importance of a machine learning model based on the RandomForestClassifier.\"\n}"}
{"api_id": 228, "api_name": "seaborn.barplot", "task_id": "BigCodeBench/37", "solution": "{\n  \"name\": \"plotFeatureImportance\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, target=None, *, estimator=None, sort='descending', n_features=10, plot_title=None, figsize=(10, 5), ax=None)\",\n  \"return_type\": \"matplotlib.axes._subplots.AxesSubplot\",\n  \"short_description\": \"Plots the feature importance scores of a machine learning model.\"\n}"}
{"api_id": 228, "api_name": "seaborn.barplot", "task_id": "BigCodeBench/37", "solution": "{\"name\": \"plotFeatureImportance\", \"type\": \"callable\", \"signature\": \"(feature_importance_series, title='Feature Importance', xlabel='Feature Importance Score', ylabel='Features', figsize=(10, 5))\", \"return_type\": \"ax : matplotlib Axes\", \"short_description\": \"Plots a bar plot of feature importance scores with customizable labels and size.\"}"}
{"api_id": 228, "api_name": "seaborn.barplot", "task_id": "BigCodeBench/37", "solution": "{\n  \"name\": \"plotFeatureImportance\",\n  \"type\": \"callable\",\n  \"signature\": \"(feature_importance_series, *, title=None, xlabel=None, ylabel=None, figsize=(10, 5))\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Plots a bar chart to visualize the feature importance scores.\"\n}"}
{"api_id": 228, "api_name": "seaborn.barplot", "task_id": "BigCodeBench/37", "solution": "{\"name\": \"plotFeatureImportanceBar\", \"type\": \"callable\", \"signature\": \"(feature_importances, ax=None)\", \"return_type\": \"matplotlib.axes._subplots.AxesSubplot\", \"short_description\": \"Plots a bar chart to visualize feature importance scores.\"}"}
{"api_id": 228, "api_name": "seaborn.barplot", "task_id": "BigCodeBench/37", "solution": "{\n  \"name\": \"plotFeatureImportance\",\n  \"type\": \"function\",\n  \"signature\": \"(data, target_column)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Plots a bar plot to visualize the feature importance scores of a Random Forest model.\"\n}"}
{"api_id": 228, "api_name": "seaborn.barplot", "task_id": "BigCodeBench/37", "solution": "{\n  \"name\": \"plotFeatureImportanceBar\",\n  \"type\": \"callable\",\n  \"signature\": \"(feature_importance=None, *, labels=None, title=None, xlabel=None, ylabel=None, figsize=(10, 5))\",\n  \"return_type\": \"matplotlib.axes._subplots.AxesSubplot\",\n  \"short_description\": \"Plots a bar chart to visualize feature importance scores.\"\n}"}
{"api_id": 228, "api_name": "seaborn.barplot", "task_id": "BigCodeBench/37", "solution": "{\n  \"name\": \"plotFeatureImportanceBar\",\n  \"type\": \"function\",\n  \"signature\": \"(feature_importance_series, *, ax=None)\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Plots a bar chart to visualize the feature importance scores.\"\n}"}
{"api_id": 228, "api_name": "seaborn.barplot", "task_id": "BigCodeBench/37", "solution": "{\n  \"name\": \"plotFeatureImportance\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, *, target_column=None, estimator=None, sort='descending', n_features=None, ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib.Axes\",\n  \"short_description\": \"Plots the feature importance of a machine learning model using a bar plot.\"\n}"}
{"api_id": 228, "api_name": "seaborn.barplot", "task_id": "BigCodeBench/37", "solution": "{\n  \"name\": \"plotFeatureImportance\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, *, targetColumn=None, estimator=None, sort=True, ax=None)\",\n  \"return_type\": \"matplotlib Axes\",\n  \"short_description\": \"Plots the feature importance of a machine learning model.\"\n}"}
{"api_id": 228, "api_name": "seaborn.barplot", "task_id": "BigCodeBench/618", "solution": "{\n  \"name\": \"plotCategoricalData\",\n  \"type\": \"callable\",\n  \"signature\": \"(data=None, *, x=None, y=None, hue=None, order=None, hue_order=None, estimator='mean', errorbar=('ci', 95), n_boot=1000, seed=None, units=None, weights=None, orient=None, color=None, palette=None, saturation=0.75, fill=True, hue_norm=None, width=0.8, dodge='auto', gap=0, log_scale=None, native_scale=False, formatter=None, legend='auto', capsize=0, err_kws=None, ci=<deprecated>, errcolor=<deprecated>, errwidth=<deprecated>, ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib Axes\",\n  \"short_description\": \"Create bar plots to visualize categorical data with error bars.\"\n}"}
{"api_id": 228, "api_name": "seaborn.barplot", "task_id": "BigCodeBench/618", "solution": "{\n  \"name\": \"generate_team_performance_charts\",\n  \"type\": \"callable\",\n  \"signature\": \"(results_df, team_column, metrics, palette='viridis')\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Generates bar plots for multiple metrics of team performance from a DataFrame and returns the list of plots.\"\n}"}
{"api_id": 228, "api_name": "seaborn.barplot", "task_id": "BigCodeBench/618", "solution": "{\n  \"name\": \"plot_team_performance\",\n  \"type\": \"callable\",\n  \"signature\": \"(results_df, plot_type, team_data, palette='viridis')\",\n  \"return_type\": \"matplotlib Axes\",\n  \"short_description\": \"Creates bar plots for team performance metrics such as goals and penalty costs.\"\n}"}
{"api_id": 228, "api_name": "seaborn.barplot", "task_id": "BigCodeBench/618", "solution": "{\n  \"name\": \"plotPerformanceMetrics\",\n  \"type\": \"callable\",\n  \"signature\": \"(data=None, *, x=None, y=None, hue=None, errorbar=None, n_boot=1000, seed=None, orient=None, color=None, palette=None, saturation=0.75, fill=True, hue_norm=None, width=0.8, dodge='auto', gap=0, log_scale=None, native_scale=False, formatter=None, legend='auto', capsize=0, err_kws=None, ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib Axes\",\n  \"short_description\": \"Generates bar plots for performance metrics, showing point estimates and errors.\"\n}"}
{"api_id": 228, "api_name": "seaborn.barplot", "task_id": "BigCodeBench/618", "solution": "{\n  \"name\": \"generateMatchResults\",\n  \"type\": \"function\",\n  \"signature\": \"(teams=None, goals=None, penalties=None, penaltyCost=None)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a DataFrame of match results including goals and penalty costs for each team, and returns the DataFrame along with a list of bar plots for goals and penalty costs.\"\n}"}
{"api_id": 228, "api_name": "seaborn.barplot", "task_id": "BigCodeBench/618", "solution": "{\n  \"name\": \"plot_match_results\",\n  \"type\": \"callable\",\n  \"signature\": \"(results_df, plot_types=['Goals', 'Penalty Cost'], palette='viridis')\",\n  \"return_type\": \"tuple[pd.DataFrame, list[plt.Axes]]\",\n  \"short_description\": \"Plots match results for teams in a bar chart, including goals and penalty costs.\"\n}"}
{"api_id": 228, "api_name": "seaborn.barplot", "task_id": "BigCodeBench/618", "solution": "{\n  \"name\": \"drawTeamPerformanceGraphs\",\n  \"type\": \"function\",\n  \"signature\": \"(results_df, palette='viridis')\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Draws bar plots for goals and penalty costs for each team, using the specified color palette.\"\n}"}
{"api_id": 228, "api_name": "seaborn.barplot", "task_id": "BigCodeBench/618", "solution": "{\n  \"name\": \"generate_team_performance\",\n  \"type\": \"callable\",\n  \"signature\": \"(goals, penalties, *, teams=None, penalty_cost=1000)\",\n  \"return_type\": \"tuple[pd.DataFrame, list[plt.Axes]]\",\n  \"short_description\": \"Generates a bar plot showing the number of goals and penalty costs for each team.\"\n}"}
{"api_id": 228, "api_name": "seaborn.barplot", "task_id": "BigCodeBench/618", "solution": "{\n  \"name\": \"generateMatchResults\",\n  \"type\": \"function\",\n  \"signature\": \"(teams=None, goals=0, penalties=0, penalty_cost=1000)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a DataFrame of match results including goals and penalty costs, and returns two bar plots for goals and penalty costs.\"\n}"}
{"api_id": 228, "api_name": "seaborn.barplot", "task_id": "BigCodeBench/618", "solution": "{\n  \"name\": \"plot_match_results\",\n  \"type\": \"callable\",\n  \"signature\": \"(results_df, plot_type, team_order=None, palette=None, errorbar=None, log_scale=None, native_scale=False, ax=None)\",\n  \"return_type\": \"matplotlib Axes\",\n  \"short_description\": \"Creates bar plots for goals and penalty costs for each team in the given DataFrame. Supports customizing plot type, team order, color palette, error bars, logarithmic scaling, and native axis scaling.\"\n}"}
{"api_id": 229, "api_name": "seaborn.lineplot", "task_id": "BigCodeBench/502", "solution": "{\n  \"name\": \"plotActivityTrends\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, x=None, y=None, hue=None, ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Plots a line chart showing trends in activity durations based on different activities.\"\n}"}
{"api_id": 229, "api_name": "seaborn.lineplot", "task_id": "BigCodeBench/502", "solution": "{\n  \"name\": \"plotActivityTrends\",\n  \"type\": \"callable\",\n  \"signature\": \"(data=None, x=None, y=None, hue=None, estimator='mean', errorbar='ci', n_boot=1000, seed=None, orient='x', sort=True, err_style='band', ax=None, **kwargs)\",\n  \"return_type\": \":class:`matplotlib.axes.Axes`\",\n  \"short_description\": \"Plots trends of activity durations over time, grouped by activity type, showing central tendency and confidence intervals.\"\n}"}
{"api_id": 229, "api_name": "seaborn.lineplot", "task_id": "BigCodeBench/502", "solution": "{\n  \"name\": \"plotActivityTrends\",\n  \"type\": \"callable\",\n  \"signature\": \"(data=None, x=None, y=None, hue=None, ax=None, **kwargs)\",\n  \"return_type\": \":class:`matplotlib.axes.Axes`\",\n  \"short_description\": \"Generates a line plot to visualize trends in activity durations based on different activities.\"\n}"}
{"api_id": 229, "api_name": "seaborn.lineplot", "task_id": "BigCodeBench/502", "solution": "{\n  \"name\": \"plotActivityTrends\",\n  \"type\": \"callable\",\n  \"signature\": \"(data=None, x=None, y=None, hue=None, palette=None, ax=None)\",\n  \"return_type\": \":class:`matplotlib.axes.Axes`\",\n  \"short_description\": \"Generates a line plot to visualize trends in activity durations based on different activities.\"\n}"}
{"api_id": 229, "api_name": "seaborn.lineplot", "task_id": "BigCodeBench/502", "solution": "{\n  \"name\": \"generateActivityData\",\n  \"type\": \"function\",\n  \"signature\": \"(days_in_past=7, random_seed=0)\",\n  \"return_type\": \"tuple(matplotlib.axes.Axes, pandas.DataFrame)\",\n  \"short_description\": \"Generates a DataFrame of random activity data and plots a line plot using seaborn.\"\n}"}
{"api_id": 229, "api_name": "seaborn.lineplot", "task_id": "BigCodeBench/502", "solution": "{\n  \"name\": \"plotActivityTrends\",\n  \"type\": \"callable\",\n  \"signature\": \"(data=None, x=None, y=None, hue=None, palette=None, estimator='mean', errorbar=('ci', 95), n_boot=1000, sort=True, err_style='band', ax=None, **kwargs)\",\n  \"return_type\": \":class:`matplotlib.axes.Axes`\",\n  \"short_description\": \"Plots trends in activity durations categorized by activity type.\"\n}"}
{"api_id": 229, "api_name": "seaborn.lineplot", "task_id": "BigCodeBench/502", "solution": "{\n  \"name\": \"generate_activity_trends\",\n  \"type\": \"function\",\n  \"signature\": \"(days_in_past=7, random_seed=0)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a line plot showing trends in physical activities over a specified number of days, with optional random seed for reproducibility.\"\n}"}
{"api_id": 229, "api_name": "seaborn.lineplot", "task_id": "BigCodeBench/502", "solution": "{\n  \"name\": \"plotActivityTrends\",\n  \"type\": \"callable\",\n  \"signature\": \"(data=None, x=None, y=None, hue=None, estimator='mean', errorbar=('ci', 95), ax=None, **kwargs)\",\n  \"return_type\": \":class:`matplotlib.axes.Axes`\",\n  \"short_description\": \"Plots a line plot showing trends in activity durations based on the given data and parameters.\"\n}"}
{"api_id": 229, "api_name": "seaborn.lineplot", "task_id": "BigCodeBench/502", "solution": "{\n  \"name\": \"plotActivityTrends\",\n  \"type\": \"callable\",\n  \"signature\": \"(data=None, x=None, y=None, hue=None, estimator='mean', errorbar=None, n_boot=1000, seed=None, orient='x', sort=True, err_style='band', err_kws=None, legend='auto', ax=None, **kwargs)\",\n  \"return_type\": \":class:`matplotlib.axes.Axes`\",\n  \"short_description\": \"Plots trends of activity durations grouped by type, showing central tendency with optional error bars.\"\n}"}
{"api_id": 229, "api_name": "seaborn.lineplot", "task_id": "BigCodeBench/502", "solution": "{\n  \"name\": \"plotActivityTrends\",\n  \"type\": \"function\",\n  \"signature\": \"(data=None, x=None, y=None, hue=None, ax=None, **kwargs)\",\n  \"return_type\": \"matplotlib.axes.Axes\",\n  \"short_description\": \"Plots trends of activities over time, grouped by activity type.\"\n}"}
{"api_id": 230, "api_name": "seaborn.pairplot", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"createPairPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, hue=None, vars=None, kind='scatter', height=2.5, aspect=1)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Creates a pair plot for visualizing pairwise relationships in a dataset.\"\n}"}
{"api_id": 230, "api_name": "seaborn.pairplot", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"plotPairwise\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, *, hue=None, palette=None, kind='scatter', height=2.5, aspect=1, dropna=False, plot_kws=None)\",\n  \"return_type\": \"figure\",\n  \"short_description\": \"Plots pairwise relationships in a dataset with an optional hue to map plot aspects to different colors. The function returns the figure object for further customization.\"\n}"}
{"api_id": 230, "api_name": "seaborn.pairplot", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"createPairPlot\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, *, hue=None, hue_order=None, palette=None, vars=None, x_vars=None, y_vars=None, kind='scatter', diag_kind='auto', markers=None, height=2.5, aspect=1, corner=False, dropna=False, plot_kws=None, diag_kws=None, grid_kws=None, size=None)\",\n  \"return_type\": \"PairPlotGrid\",\n  \"short_description\": \"Creates a grid of plots to visualize pairwise relationships in a dataset, including univariate distributions on the diagonal.\"\n}"}
{"api_id": 230, "api_name": "seaborn.pairplot", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"plotSeabornPairwise\",\n  \"type\": \"function\",\n  \"signature\": \"(data, hue=None, kind='scatter', height=2.5, aspect=1)\",\n  \"return_type\": \"figure\",\n  \"short_description\": \"Plots pairwise relationships in a dataset with customizable options for plot type and size.\"\n}"}
{"api_id": 230, "api_name": "seaborn.pairplot", "task_id": "BigCodeBench/99", "solution": "{\"name\": \"generatePairPlot\", \"type\": \"function\", \"signature\": \"(dataframe, hue=None, kind='scatter', diag_kind='auto')\", \"return_type\": \"figure\", \"short_description\": \"Generates a pair plot for visualizing pairwise relationships in a dataset. The plot includes scatter plots for non-diagonal elements and univariate distribution plots for diagonal elements.\"}"}
{"api_id": 230, "api_name": "seaborn.pairplot", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"generateSeabornPairplot\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe, hue=None, kind='scatter', height=2.5, aspect=1, dropna=False)\",\n  \"return_type\": \"matplotlib.figure.Figure\",\n  \"short_description\": \"Generates a pair plot for visualizing pairwise relationships in a dataset using Seaborn.\"\n}"}
{"api_id": 230, "api_name": "seaborn.pairplot", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"generatePairPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, hue=None, vars=None, kind='scatter', height=2.5, aspect=1, dropna=False)\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Generates a pair plot for visualizing pairwise relationships in a dataset.\"\n}"}
{"api_id": 230, "api_name": "seaborn.pairplot", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"generatePairPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, hue=None, kind='scatter', diag_kind='auto')\",\n  \"return_type\": \"Figure\",\n  \"short_description\": \"Generates a pair plot for visualizing pairwise relationships in a dataset.\"\n}"}
{"api_id": 230, "api_name": "seaborn.pairplot", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"generate_pairplot\",\n  \"type\": \"function\",\n  \"signature\": \"(data, hue=None, hue_order=None, palette=None, kind='scatter', diag_kind='auto', markers=None, height=2.5, aspect=1, corner=False, dropna=False, plot_kws=None, diag_kws=None, grid_kws=None)\",\n  \"return_type\": \"PairPlotGrid\",\n  \"short_description\": \"Generates a pair plot grid for visualizing pairwise relationships in a dataset.\"\n}"}
{"api_id": 230, "api_name": "seaborn.pairplot", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"plotIrisPair\",\n  \"type\": \"function\",\n  \"signature\": \"(data, hue=None, vars=None, kind='scatter', diag_kind='auto', height=2.5, aspect=1, corner=False, dropna=False, plot_kws=None, diag_kws=None, grid_kws=None, size=None)\",\n  \"return_type\": \"figure\",\n  \"short_description\": \"Generates a pair plot for the Iris dataset, colored by species.\"\n}"}
{"api_id": 231, "api_name": "select.select", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"waitUntilReady\", \"type\": \"callable\", \"signature\": \"(rlist, wlist, xlist, timeout=None)\", \"return_type\": \"tuple\", \"short_description\": \"Waits until one or more file descriptors are ready for some kind of I/O. Returns a tuple of ready file descriptors.\"}"}
{"api_id": 231, "api_name": "select.select", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"waitForReadiness\", \"type\": \"callable\", \"signature\": \"(read_fds, write_fds, exception_fds, timeout=None)\", \"return_type\": \"tuple[list[int], list[int], list[int]]\", \"short_description\": \"Waits until one or more file descriptors are ready for reading, writing, or exceptional conditions. Returns lists of ready file descriptors.\"}"}
{"api_id": 231, "api_name": "select.select", "task_id": "BigCodeBench/1040", "solution": "{\n  \"name\": \"waitUntilReady\",\n  \"type\": \"function\",\n  \"signature\": \"(readable, writable, exceptional, timeout=None)\",\n  \"return_type\": \"tuple[list, list, list]\",\n  \"short_description\": \"Wait until one or more file descriptors are ready for some kind of I/O. Similar to select.select but with a different name and functionality.\"\n}"}
{"api_id": 231, "api_name": "select.select", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"waitForIO\", \"type\": \"callable\", \"signature\": \"(read_fds, write_fds, error_fds, timeout=None)\", \"return_type\": \"tuple[list[socket], list[socket], list[socket]]\", \"short_description\": \"Waits until one or more file descriptors are ready for I/O operations. Supports reading, writing, and exceptional conditions.\"}"}
{"api_id": 231, "api_name": "select.select", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"waitForIO\", \"type\": \"callable\", \"signature\": \"(read_fds, write_fds, except_fds, timeout=None)\", \"return_type\": \"tuple[list[socket], list[socket], list[socket]]\", \"short_description\": \"Waits until one or more file descriptors are ready for I/O operations. Supports reading, writing, and exceptional conditions on Unix systems.\"}"}
{"api_id": 231, "api_name": "select.select", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"pollIos\", \"type\": \"callable\", \"signature\": \"(rlist, wlist, xlist, timeout=None)\", \"return_type\": \"tuple\", \"short_description\": \"Perform I/O multiplexing using the poll() system call. This is a more recent approach compared to select() and can be more efficient for a large number of file descriptors.\"}"}
{"api_id": 231, "api_name": "select.select", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"poll\", \"type\": \"callable\", \"signature\": \"(items, timeout=None)\", \"return_type\": \"dict\", \"short_description\": \"Polls a list of file descriptors to check for readiness. Returns a dictionary indicating which file descriptors are ready.\"}"}
{"api_id": 231, "api_name": "select.select", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"waitForIO\", \"type\": \"callable\", \"signature\": \"(read_fds, write_fds, except_fds, timeout=None)\", \"return_type\": \"tuple[list, list, list]\", \"short_description\": \"Waits until one or more file descriptors are ready for I/O operations. Supports reading, writing, and exceptional conditions.\"}"}
{"api_id": 231, "api_name": "select.select", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"pollIos\", \"type\": \"callable\", \"signature\": \"(rlist, wlist, xlist, timeout=None)\", \"return_type\": \"tuple[list[int], list[int], list[int]]\", \"short_description\": \"Perform a polling operation to check the readiness of file descriptors for I/O operations.\"}"}
{"api_id": 231, "api_name": "select.select", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"waitForIO\", \"type\": \"callable\", \"signature\": \"(readable, writable, exceptional, timeout=None)\", \"return_type\": \"tuple[list[any], list[any], list[any]]\", \"short_description\": \"Waits until one or more file descriptors are ready for some kind of I/O. Returns a tuple of lists corresponding to the provided file descriptors that are ready for reading, writing, and exceptional conditions.\"}"}
{"api_id": 232, "api_name": "shapely.geometry.Point", "task_id": "BigCodeBench/187", "solution": "{\"name\": \"createGeodataframe\", \"type\": \"function\", \"signature\": \"(dic, cities)\", \"return_type\": \"GeoDataFrame\", \"short_description\": \"Creates a GeoDataFrame containing city names and their corresponding coordinates as Point objects.\"}"}
{"api_id": 232, "api_name": "shapely.geometry.Point", "task_id": "BigCodeBench/187", "solution": "{\"name\": \"createGeodataFrame\", \"type\": \"function\", \"signature\": \"(*args, **kwargs)\", \"return_type\": \"geopandas.GeoDataFrame\", \"short_description\": \"Creates a GeoDataFrame containing city names and their corresponding coordinates as Shapely Point objects.\"}"}
{"api_id": 232, "api_name": "shapely.geometry.Point", "task_id": "BigCodeBench/187", "solution": "{\"name\": \"createGeoDataFrame\", \"type\": \"function\", \"signature\": \"(cities, lon_range, lat_range)\", \"return_type\": \"GeoDataFrame\", \"short_description\": \"Creates a GeoDataFrame containing city names and their corresponding coordinates as Shapely Point objects.\"}"}
{"api_id": 232, "api_name": "shapely.geometry.Point", "task_id": "BigCodeBench/187", "solution": "{\"name\": \"createGeodataframe\", \"type\": \"function\", \"signature\": \"(cityData, cityLocations)\", \"return_type\": \"GeoDataFrame\", \"short_description\": \"Creates a GeoDataFrame containing city names and their corresponding coordinates using Shapely Point objects.\"}"}
{"api_id": 232, "api_name": "shapely.geometry.Point", "task_id": "BigCodeBench/187", "solution": "{\"name\": \"createGeoDataFrame\", \"type\": \"function\", \"signature\": \"(citiesList, lonRange, latRange)\", \"return_type\": \"GeoDataFrame\", \"short_description\": \"Creates a GeoDataFrame containing city names and their corresponding coordinates as Shapely Points.\"}"}
{"api_id": 232, "api_name": "shapely.geometry.Point", "task_id": "BigCodeBench/187", "solution": "{\"name\": \"generateGeoDataFrame\", \"type\": \"function\", \"signature\": \"(*args, **kwargs)\", \"return_type\": \"GeoDataFrame\", \"short_description\": \"Generates a GeoDataFrame containing city names and their corresponding coordinates as Point objects.\"}"}
{"api_id": 232, "api_name": "shapely.geometry.Point", "task_id": "BigCodeBench/187", "solution": "{\"name\": \"createGeodataframe\", \"type\": \"function\", \"signature\": \"(cityDict, cityList)\", \"return_type\": \"GeoDataFrame\", \"short_description\": \"Creates a GeoDataFrame containing city names and their corresponding coordinates as Shapely Point objects.\"}"}
{"api_id": 232, "api_name": "shapely.geometry.Point", "task_id": "BigCodeBench/187", "solution": "{\"name\": \"createGeospatialData\", \"type\": \"function\", \"signature\": \"(cityData, cityList)\", \"return_type\": \"GeoDataFrame\", \"short_description\": \"Creates a GeoDataFrame containing city names and their corresponding coordinates as Shapely Point objects.\"}"}
{"api_id": 232, "api_name": "shapely.geometry.Point", "task_id": "BigCodeBench/187", "solution": "{\"name\": \"generateGeoDataFrame\", \"type\": \"function\", \"signature\": \"(dic, cities)\", \"return_type\": \"geopandas.GeoDataFrame\", \"short_description\": \"Generates a GeoDataFrame containing city names and their corresponding coordinates as Shapely Point objects.\"}"}
{"api_id": 232, "api_name": "shapely.geometry.Point", "task_id": "BigCodeBench/187", "solution": "{\"name\": \"createPoint\", \"type\": \"function\", \"signature\": \"(lon, lat)\", \"return_type\": \"shapely.geometry.Point\", \"short_description\": \"Creates a Point object from longitude and latitude coordinates.\"}"}
{"api_id": 233, "api_name": "shutil.copyfile", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"copyFiles\", \"type\": \"function\", \"signature\": \"(sourceList, destinationDir)\", \"return_type\": \"List[str]\", \"short_description\": \"Copies multiple files from a list of sources to a specified destination directory.\"}"}
{"api_id": 233, "api_name": "shutil.copyfile", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"rename_file\", \"type\": \"callable\", \"signature\": \"(src, dst)\", \"return_type\": \"None\", \"short_description\": \"Renames a file from src to dst.\"}"}
{"api_id": 233, "api_name": "shutil.copyfile", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"copyFiles\", \"type\": \"function\", \"signature\": \"(filePaths, destinationDir)\", \"return_type\": \"list\", \"short_description\": \"Copies a list of files to a specified destination directory.\"}"}
{"api_id": 233, "api_name": "shutil.copyfile", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"generate_thumbnail\", \"type\": \"function\", \"signature\": \"(image_path, thumbnail_size=(128, 128))\", \"return_type\": \"str\", \"short_description\": \"Generates a thumbnail image from the given image file path with the specified size.\"}"}
{"api_id": 233, "api_name": "shutil.copyfile", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"create_directory_if_not_exists\", \"type\": \"function\", \"signature\": \"(directory_path)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory at the specified path if it does not already exist.\"}"}
{"api_id": 233, "api_name": "shutil.copyfile", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"copyFiles\", \"type\": \"function\", \"signature\": \"(files, destination)\", \"return_type\": \"list\", \"short_description\": \"Copies a list of files to a specified destination directory.\"}"}
{"api_id": 233, "api_name": "shutil.copyfile", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"copy_contents\", \"type\": \"function\", \"signature\": \"(source_dir, destination_dir)\", \"return_type\": \"None\", \"short_description\": \"Copies all contents from the source directory to the destination directory efficiently.\"}"}
{"api_id": 233, "api_name": "shutil.copyfile", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"copyFiles\", \"type\": \"function\", \"signature\": \"(sourceList, destination)\", \"return_type\": \"list\", \"short_description\": \"Copies a list of files from their current location to a specified destination directory.\"}"}
{"api_id": 233, "api_name": "shutil.copyfile", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"copyFiles\", \"type\": \"function\", \"signature\": \"(filePaths, destinationDir)\", \"return_type\": \"list\", \"short_description\": \"Copies a list of files to a specified destination directory. Returns a list of the paths to the copied files.\"}"}
{"api_id": 233, "api_name": "shutil.copyfile", "task_id": "BigCodeBench/765", "solution": "{\"name\": \"copyFiles\", \"type\": \"function\", \"signature\": \"(filePaths, targetDir)\", \"return_type\": \"list\", \"short_description\": \"Copies a list of files to a specified target directory.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/313", "solution": "{\n  \"name\": \"create_backup\",\n  \"type\": \"function\",\n  \"signature\": \"(source_dir, backup_dir)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Creates a backup of the specified directory and returns the path to the backup location.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/313", "solution": "{\n  \"name\": \"create_backup\",\n  \"type\": \"function\",\n  \"signature\": \"()\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Creates a backup of the current directory and returns the path to the backup.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/313", "solution": "{\n  \"name\": \"generate_backup\",\n  \"type\": \"function\",\n  \"signature\": \"(source_directory, backup_directory, timestamp_format='%Y%m%d%H%M%S')\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Recursively create a backup of the files in the source directory, renaming them with a timestamp, and store them in the backup directory.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"createBackup\", \"type\": \"function\", \"signature\": \"(sourceDir, backupDir)\", \"return_type\": \"str\", \"short_description\": \"Creates a compressed backup of the specified directory and returns the path to the backup file.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/313", "solution": "{\n  \"name\": \"create_backup\",\n  \"type\": \"function\",\n  \"signature\": \"()\",\n  \"return_type\": \"bool\",\n  \"short_description\": \"Creates a backup of the current working directory by archiving it into a ZIP file.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"moveFileOrDir\", \"type\": \"function\", \"signature\": \"(src, dst)\", \"return_type\": \"str\", \"short_description\": \"Moves a file or directory from the source to the destination. Returns the destination path.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"moveFiles\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir)\", \"return_type\": \"dict\", \"short_description\": \"Moves files from a source directory to a target directory, organizing them into subdirectories based on their parent directory names. Returns a dictionary with subdirectory names as keys and lists of moved file names as values.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/313", "solution": "{\n  \"name\": \"create_backup\",\n  \"type\": \"function\",\n  \"signature\": \"(source_dir, backup_dir, include_patterns=[], exclude_patterns=[])\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Creates a backup of the specified source directory to the backup directory, optionally including or excluding specific files or directories based on patterns.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"create_backup\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"dict\", \"short_description\": \"Creates a backup of the current working directory and its contents, returning a dictionary with directory paths as keys and lists of file names as values.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/313", "solution": "{\"name\": \"moveFileOrDir\", \"type\": \"callable\", \"signature\": \"(src, dst)\", \"return_type\": \"str\", \"short_description\": \"Recursively moves a file or directory to another location. This function is similar to the Unix 'mv' command. It returns the destination path of the file or directory.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"moveFile\", \"type\": \"function\", \"signature\": \"(src, dst)\", \"return_type\": \"str\", \"short_description\": \"Moves a file from the source to the destination and returns the name of the moved file.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"moveFile\", \"type\": \"function\", \"signature\": \"(src, dst)\", \"return_type\": \"str\", \"short_description\": \"Moves a file from the source to the destination and returns the name of the moved file.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/368", "solution": "{\n  \"name\": \"rename_file\",\n  \"type\": \"callable\",\n  \"signature\": \"(src, dest)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Recursively renames a file or directory to another location. This is similar to the Unix 'mv' command. Returns the file or directory's new name.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/368", "solution": "{\n  \"name\": \"rename_directory\",\n  \"type\": \"callable\",\n  \"signature\": \"(src, dst)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Recursively rename a directory to another location. This function is similar to the Unix 'mv' command but specifically for directories. It returns the new name of the directory.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"moveFile\", \"type\": \"function\", \"signature\": \"(src, dst)\", \"return_type\": \"str\", \"short_description\": \"Moves a file from the source to the destination and returns the name of the moved file.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/368", "solution": "{\n  \"name\": \"rename_file\",\n  \"type\": \"callable\",\n  \"signature\": \"(old_path, new_path)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Renames a file or directory from the old path to the new path. This function is similar to the Unix 'mv' command.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"moveFile\", \"type\": \"function\", \"signature\": \"(src, dst)\", \"return_type\": \"str\", \"short_description\": \"Moves a file from the source to the destination and returns the name of the moved file.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"moveFile\", \"type\": \"function\", \"signature\": \"(src, dst)\", \"return_type\": \"str\", \"short_description\": \"Moves a file from the source to the destination and returns the name of the moved file.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"renameFileOrDirectory\", \"type\": \"callable\", \"signature\": \"(old_path, new_path)\", \"return_type\": \"str\", \"short_description\": \"Renames a file or directory from the old path to the new path. This function attempts to move the file or directory atomically, if possible, and returns the new path.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/368", "solution": "{\"name\": \"moveFile\", \"type\": \"function\", \"signature\": \"(src, dst)\", \"return_type\": \"str\", \"short_description\": \"Moves a file from the source to the destination and returns the name of the moved file.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/454", "solution": "{\n  \"name\": \"move_files\",\n  \"type\": \"function\",\n  \"signature\": \"(src_dir, dest_dir, ext)\",\n  \"return_type\": \"List[str]\",\n  \"short_description\": \"Recursively move files with a specific extension from a source directory to a destination directory.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"moveFiles\", \"type\": \"function\", \"signature\": \"(source_dir, destination_dir, extension)\", \"return_type\": \"list\", \"short_description\": \"Moves all files with a specific extension from a source directory to a destination directory.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/454", "solution": "{\n  \"name\": \"move_files\",\n  \"type\": \"callable\",\n  \"signature\": \"(source_dir, destination_dir, extension)\",\n  \"return_type\": \"List[str]\",\n  \"short_description\": \"Recursively moves all files with a specific extension from a source directory to a destination directory.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/454", "solution": "{\n  \"name\": \"move_files\",\n  \"type\": \"function\",\n  \"signature\": \"(source_dir, destination_dir, extension)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Recursively moves files with a specific extension from a source directory to a destination directory.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"moveFiles\", \"type\": \"function\", \"signature\": \"(src_dir, dest_dir, ext)\", \"return_type\": \"list\", \"short_description\": \"Recursively move files with a specific extension from a source directory to a destination directory.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/454", "solution": "{\n  \"name\": \"move_files\",\n  \"type\": \"function\",\n  \"signature\": \"(source_directory, destination_directory, extension)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Recursively moves all files with a specific extension from the source directory to the destination directory.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/454", "solution": "{\n  \"name\": \"move_files\",\n  \"type\": \"callable\",\n  \"signature\": \"(source_dir, destination_dir, file_extension)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Moves all files with a specific extension from a source directory to a destination directory. Returns a list of paths to the moved files.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/454", "solution": "{\"name\": \"move_files\", \"type\": \"function\", \"signature\": \"(src_dir, dest_dir, ext)\", \"return_type\": \"List[str]\", \"short_description\": \"Recursively moves files with a specific extension from a source directory to a destination directory.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/454", "solution": "{\n  \"name\": \"move_files\",\n  \"type\": \"function\",\n  \"signature\": \"(source_dir, destination_dir, extension)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Recursively moves files with a specific extension from a source directory to a destination directory.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/454", "solution": "{\n  \"name\": \"move_files\",\n  \"type\": \"callable\",\n  \"signature\": \"(source_dir, destination_dir, extension)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Recursively moves files with a specific extension from a source directory to a destination directory.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"generate_summary_report\", \"type\": \"function\", \"signature\": \"(data_list, output_path)\", \"return_type\": \"str\", \"short_description\": \"Generates a summary report from a list of data dictionaries and saves it to a specified output path. The report includes counts and basic statistics for each key in the data.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"generate_summary\", \"type\": \"function\", \"signature\": \"(data_list, target_directory)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Generates a summary DataFrame from a list of JSON data dictionaries, saving each JSON file to a specified target directory.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/678", "solution": "{\n  \"name\": \"generate_summary\",\n  \"type\": \"function\",\n  \"signature\": \"(data_list, output_path)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Generates a summary report from a list of JSON data and saves it to a specified output path.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"generate_summary_report\", \"type\": \"function\", \"signature\": \"(data_frame, path)\", \"return_type\": \"str\", \"short_description\": \"Generates a summary report in JSON format for the given DataFrame and saves it to the specified path.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"generate_report\", \"type\": \"function\", \"signature\": \"(data, path)\", \"return_type\": \"str\", \"short_description\": \"Generates a comprehensive report from the provided data and saves it to the specified path. The report is saved in a structured format suitable for further analysis.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"create_directory_if_not_exists\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"None\", \"short_description\": \"Creates a directory at the specified path if it does not already exist.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/678", "solution": "{\n  \"name\": \"generate_report\",\n  \"type\": \"function\",\n  \"signature\": \"() -> str\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Generates a comprehensive report summarizing the processed data from a given directory.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"process_files\", \"type\": \"function\", \"signature\": \"(path)\", \"return_type\": \"DataFrame\", \"short_description\": \"Processes JSON files in a directory, moving them to a 'processed' subdirectory and returning a DataFrame with the processed data.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/678", "solution": "{\"name\": \"generate_summary\", \"type\": \"function\", \"signature\": \"(data_list, target_directory)\", \"return_type\": \"DataFrame\", \"short_description\": \"Generates a summary DataFrame from a list of JSON data dictionaries and moves the original JSON files to a specified target directory.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/678", "solution": "{\n  \"name\": \"create_directory_tree\",\n  \"type\": \"callable\",\n  \"signature\": \"(base_path, directory_structure)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Creates a directory tree as specified in the directory_structure dictionary, where each key is a directory name and each value is another dictionary representing nested directories and files.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"moveFiles\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, pattern=r'\\\\b[A-Za-z0-9]+\\\\.(txt|doc|docx)\\\\b')\", \"return_type\": \"int\", \"short_description\": \"Recursively moves files matching a pattern from a source directory to a target directory. This function is designed to mimic the functionality of the 'shutil.move' function but with a more specific focus on file movement.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"renameFileOrDirectory\", \"type\": \"callable\", \"signature\": \"(src, dst)\", \"return_type\": \"str\", \"short_description\": \"Recursively rename a file or directory to another location. This function is similar to the Unix 'mv' command. It returns the destination path.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"create_archive\", \"type\": \"function\", \"signature\": \"(source_dir, target_file)\", \"return_type\": \"str\", \"short_description\": \"Creates a compressed archive of the contents of the specified directory and returns the path to the archive file.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/826", "solution": "{\n  \"name\": \"copy_and_rename\",\n  \"type\": \"function\",\n  \"signature\": \"(source, destination, overwrite=False)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Copies a file or directory to a new location and optionally renames it, overwriting the destination if specified.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/826", "solution": "{\n  \"name\": \"rename_file\",\n  \"type\": \"function\",\n  \"signature\": \"(src, dst)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Recursively rename a file or directory to another location. This is similar to the Unix 'mv' command. Return the file or directory's new name.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"move_files\", \"type\": \"callable\", \"signature\": \"(source_dir, target_dir, pattern='\\\\b[A-Za-z0-9]+\\\\.(txt|doc|docx)\\\\b')\", \"return_type\": \"int\", \"short_description\": \"Recursively move files from a source directory to a target directory based on a given pattern. This function will move all files that match the pattern from the source directory to the target directory. It returns the count of files moved.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"create_archive\", \"type\": \"callable\", \"signature\": \"(source_dir, target_file, format='zip')\", \"return_type\": \"str\", \"short_description\": \"Creates an archive of the specified format (default is zip) from the contents of a directory. The archive is saved with the specified target file name.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"file_rename\", \"type\": \"callable\", \"signature\": \"(src, dst)\", \"return_type\": \"str\", \"short_description\": \"Renames a file or directory from the source path to the destination path. This function attempts to use the native OS rename operation for efficiency. If the rename operation fails due to cross-filesystem move, the file is copied to the destination and the source is removed.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"copy_and_rename\", \"type\": \"function\", \"signature\": \"(source_path, destination_path, overwrite=False)\", \"return_type\": \"str\", \"short_description\": \"Copies a file or directory to a new location and optionally renames it, overwriting the destination if specified.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/826", "solution": "{\"name\": \"renameFileOrDirectory\", \"type\": \"callable\", \"signature\": \"(src, dst)\", \"return_type\": \"str\", \"short_description\": \"Recursively renames a file or directory to another location. This is similar to the Unix 'mv' command. Returns the file or directory's new destination.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/857", "solution": "{\n  \"name\": \"copy_with_progress\",\n  \"type\": \"function\",\n  \"signature\": \"(src, dst, show_progress=False)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Copies a file from the source to the destination and optionally displays a progress bar during the copy.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"copy_with_progress\", \"type\": \"function\", \"signature\": \"(src, dst, progress_callback)\", \"return_type\": \"None\", \"short_description\": \"Copies a file or directory to a destination while providing progress updates through a callback function.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"copy_with_progress\", \"type\": \"function\", \"signature\": \"(src, dst, progress_callback=None)\", \"return_type\": \"str\", \"short_description\": \"Copies a file from the source to the destination and optionally reports progress using a callback function.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/857", "solution": "{\n  \"name\": \"copy_and_remove\",\n  \"type\": \"function\",\n  \"signature\": \"(src, dst, copy_function=None)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Copies a file or directory to a new location and then removes the original. This function is similar to the Unix 'cp' and 'rm' commands combined.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"file_transfer\", \"type\": \"function\", \"signature\": \"(source_dir, destination_dir, extensions)\", \"return_type\": \"list\", \"short_description\": \"Recursively moves files with specified extensions from a source directory to a destination directory. Returns a list of transferred file names.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/857", "solution": "{\n  \"name\": \"move_files\",\n  \"type\": \"function\",\n  \"signature\": \"(source_dir, destination_dir, extensions)\",\n  \"return_type\": \"List[str]\",\n  \"short_description\": \"Recursively move files with specified extensions from a source directory to a destination directory. Return a list of the names of the transferred files.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"copy_tree_with_progress\", \"type\": \"callable\", \"signature\": \"(src, dst, progress_callback=None)\", \"return_type\": \"None\", \"short_description\": \"Recursively copy a directory tree, providing progress updates via a callback function.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"transfer_files\", \"type\": \"function\", \"signature\": \"(source_dir, dest_dir, extensions)\", \"return_type\": \"List[str]\", \"short_description\": \"Transfers files with specified extensions from a source directory to a destination directory.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"file_transfer\", \"type\": \"function\", \"signature\": \"(src_dir, dst_dir, file_extensions)\", \"return_type\": \"list\", \"short_description\": \"Recursively transfer files with specified extensions from a source directory to a destination directory.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"rename_or_copy\", \"type\": \"callable\", \"signature\": \"(src, dst, is_copy=False)\", \"return_type\": \"str\", \"short_description\": \"Recursively moves a file or directory to another location if possible, otherwise copies it. Returns the destination path.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/906", "solution": "{\n  \"name\": \"generate_archive\",\n  \"type\": \"function\",\n  \"signature\": \"(source_dir, target_dir, archive_name='archive.zip')\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Creates a zip archive from files in a source directory and moves processed files to a target directory.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"createArchive\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, archiveName='archive.zip')\", \"return_type\": \"str\", \"short_description\": \"Creates a ZIP archive from files in a source directory and moves processed files to a target directory.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"create_archive\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, archive_name='archive.zip')\", \"return_type\": \"str\", \"short_description\": \"Creates a ZIP archive from files in a source directory and moves processed files to a target directory.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"create_archive\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, archive_name='archive.zip')\", \"return_type\": \"str\", \"short_description\": \"Create a zip archive from files in a source directory and move processed files to a target directory.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(sourceDir: str, targetDir: str, archiveName: str = 'archive.zip') -> str\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive from files in a source directory and moves processed files to a target directory.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/906", "solution": "{\n  \"name\": \"create_archive\",\n  \"type\": \"function\",\n  \"signature\": \"(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Creates a zip archive from files in a source directory and moves processed files to a target directory.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"create_archive\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, archive_name='archive.zip')\", \"return_type\": \"str\", \"short_description\": \"Creates a ZIP archive from files in the source directory and moves processed files to the target directory.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"create_directory_structure\", \"type\": \"function\", \"signature\": \"(path: str, name: str)\", \"return_type\": \"None\", \"short_description\": \"Creates a new directory structure at the specified path with the given name.\"}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/906", "solution": "{\n  \"name\": \"zip_and_move_files\",\n  \"type\": \"function\",\n  \"signature\": \"(source_dir: str, target_dir: str, archive_name: str = 'archive.zip')\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Archives and moves files from a source directory to a target directory.\"\n}"}
{"api_id": 234, "api_name": "shutil.move", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"create_archive_and_move_files\", \"type\": \"function\", \"signature\": \"(source_dir, target_dir, archive_name='archive.zip')\", \"return_type\": \"str\", \"short_description\": \"Create a zip archive from files in a source directory and move processed files to a target directory.\"}"}
{"api_id": 235, "api_name": "shutil.copy", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with weather data for a given number of hours and returns the path to the generated file. Optionally, you can specify an output directory.\"}"}
{"api_id": 235, "api_name": "shutil.copy", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for a given number of hours and saves it to a CSV file, also creates a backup of the file in a backup directory.\"}"}
{"api_id": 235, "api_name": "shutil.copy", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generate_weather_data\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with weather data for a given number of hours and creates a backup of the file in the specified output directory.\"}"}
{"api_id": 235, "api_name": "shutil.copy", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with weather data for a given number of hours and returns the path to the generated file. Optionally, the output directory can be specified.\"}"}
{"api_id": 235, "api_name": "shutil.copy", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generate_weather_data\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with weather data for a given number of hours and creates a backup of the file in the specified output directory.\"}"}
{"api_id": 235, "api_name": "shutil.copy", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates weather data for a given number of hours and saves it to a CSV file, also creates a backup of the file in a backup directory.\"}"}
{"api_id": 235, "api_name": "shutil.copy", "task_id": "BigCodeBench/594", "solution": "{\n  \"name\": \"generate_weather_report\",\n  \"type\": \"function\",\n  \"signature\": \"(hours, output_dir='./output')\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Generates a weather report for a given number of hours and saves it to a CSV file. It also creates a backup of the generated file in a specified directory.\"\n}"}
{"api_id": 235, "api_name": "shutil.copy", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherReport\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a weather report for a given number of hours and saves it in a CSV file, also creates a backup of the file in a specified directory.\"}"}
{"api_id": 235, "api_name": "shutil.copy", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generateWeatherData\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with simulated weather data and creates a backup of the file in the specified output directory.\"}"}
{"api_id": 235, "api_name": "shutil.copy", "task_id": "BigCodeBench/594", "solution": "{\"name\": \"generate_weather_data\", \"type\": \"function\", \"signature\": \"(hours, output_dir='./output')\", \"return_type\": \"str\", \"short_description\": \"Generates a CSV file with weather data for a given number of hours and creates a backup of the file in the specified output directory.\"}"}
{"api_id": 236, "api_name": "sklearn.ensemble.RandomForestClassifier", "task_id": "BigCodeBench/37", "solution": "{\n  \"name\": \"generateRandomForestModel\",\n  \"type\": \"function\",\n  \"signature\": \"(df, targetColumn)\",\n  \"return_type\": \"tuple(model, ax)\",\n  \"short_description\": \"Generates a random forest model and visualizes feature importances using a bar plot.\"\n}"}
{"api_id": 236, "api_name": "sklearn.ensemble.RandomForestClassifier", "task_id": "BigCodeBench/37", "solution": "{\"name\": \"trainRandomForest\", \"type\": \"function\", \"signature\": \"(dataFrame, targetColumn)\", \"return_type\": \"tuple(model, plot)\", \"short_description\": \"Trains a Random Forest Classifier on the given DataFrame and visualizes the feature importances using a bar plot.\"}"}
{"api_id": 236, "api_name": "sklearn.ensemble.RandomForestClassifier", "task_id": "BigCodeBench/37", "solution": "{\n  \"name\": \"generateRandomForestReport\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe, targetColumn)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates a report on the importance of features in a dataset using a Random Forest Classifier.\"\n}"}
{"api_id": 236, "api_name": "sklearn.ensemble.RandomForestClassifier", "task_id": "BigCodeBench/37", "solution": "{\n  \"name\": \"trainRandomForestClassifier\",\n  \"type\": \"function\",\n  \"signature\": \"(model=None, X, y, n_estimators=100, criterion='gini', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features='sqrt', max_leaf_nodes=None, min_impurity_decrease=0.0, bootstrap=True, oob_score=False, n_jobs=None, random_state=None, verbose=0, warm_start=False, class_weight=None, ccp_alpha=0.0, max_samples=None)\",\n  \"return_type\": \"Tuple[RandomForestClassifier, pd.Series]\",\n  \"short_description\": \"Trains a RandomForestClassifier and visualizes feature importances using a bar plot.\"\n}"}
{"api_id": 236, "api_name": "sklearn.ensemble.RandomForestClassifier", "task_id": "BigCodeBench/37", "solution": "{\n  \"name\": \"generateRandomForestVisualization\",\n  \"type\": \"function\",\n  \"signature\": \"(df, targetColumn)\",\n  \"return_type\": \"Tuple[RandomForestClassifier, plt.Axes]\",\n  \"short_description\": \"Generates a visualization of feature importances for a random forest classifier applied to a given DataFrame.\"\n}"}
{"api_id": 236, "api_name": "sklearn.ensemble.RandomForestClassifier", "task_id": "BigCodeBench/37", "solution": "{\n  \"name\": \"trainRandomForest\",\n  \"type\": \"function\",\n  \"signature\": \"(model, data, target, options={})\",\n  \"return_type\": \"Tuple[RandomForestClassifier, pd.DataFrame]\",\n  \"short_description\": \"Trains a RandomForestClassifier on the provided data and target, and returns the trained model and feature importances.\"\n}"}
{"api_id": 236, "api_name": "sklearn.ensemble.RandomForestClassifier", "task_id": "BigCodeBench/37", "solution": "{\"name\": \"trainRandomForest\", \"type\": \"function\", \"signature\": \"(X, y, {n_estimators=100, *, criterion='gini', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features='sqrt', max_leaf_nodes=None, min_impurity_decrease=0.0, bootstrap=True, oob_score=False, n_jobs=None, random_state=None, verbose=0, warm_start=False, class_weight=None, ccp_alpha=0.0, max_samples=None})\", \"return_type\": \"model\", \"short_description\": \"Trains a Random Forest classifier on the given data and returns the trained model.\"}"}
{"api_id": 236, "api_name": "sklearn.ensemble.RandomForestClassifier", "task_id": "BigCodeBench/37", "solution": "{\"name\": \"generateRandomForestReport\", \"type\": \"function\", \"signature\": \"(dataframe, targetColumn)\", \"return_type\": \"Tuple[RandomForestClassifier, plt.Axes]\", \"short_description\": \"Generates a report on the importance of features in a dataset using a RandomForestClassifier and visualizes it.\"}"}
{"api_id": 236, "api_name": "sklearn.ensemble.RandomForestClassifier", "task_id": "BigCodeBench/37", "solution": "{\"name\": \"trainRandomForestClassifier\", \"type\": \"function\", \"signature\": \"(modelParameters)\", \"return_type\": \"RandomForestClassifier\", \"short_description\": \"Trains a Random Forest Classifier with the given parameters and returns the trained model.\"}"}
{"api_id": 236, "api_name": "sklearn.ensemble.RandomForestClassifier", "task_id": "BigCodeBench/37", "solution": "{\"name\": \"generateFeatureImportancePlot\", \"type\": \"function\", \"signature\": \"(model, featureImportanceSeries)\", \"return_type\": \"ax\", \"short_description\": \"Generates a bar plot to visualize the feature importance scores of a trained RandomForestClassifier model.\"}"}
{"api_id": 237, "api_name": "sklearn.metrics.auc", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"compute_auc\", \"type\": \"function\", \"signature\": \"(predictions, labels)\", \"return_type\": \"float\", \"short_description\": \"Calculates the Area Under the Curve (AUC) for binary classification using the predicted scores and true labels.\"}"}
{"api_id": 237, "api_name": "sklearn.metrics.auc", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"compute_auc\", \"type\": \"function\", \"signature\": \"(predictions, labels, pos_label=None)\", \"return_type\": \"float\", \"short_description\": \"Calculates the Area Under the Curve (AUC) from prediction scores and true labels.\"}"}
{"api_id": 237, "api_name": "sklearn.metrics.auc", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"compute_auc\", \"type\": \"function\", \"signature\": \"(predictions, labels)\", \"return_type\": \"float\", \"short_description\": \"Compute the Area Under the Curve (AUC) using the trapezoidal rule given model predictions and true labels.\"}"}
{"api_id": 237, "api_name": "sklearn.metrics.auc", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"compute_auc\", \"type\": \"function\", \"signature\": \"(predictions, labels)\", \"return_type\": \"float\", \"short_description\": \"Compute the Area Under the Curve (AUC) from predicted scores and true labels.\"}"}
{"api_id": 237, "api_name": "sklearn.metrics.auc", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"computeAUC\", \"type\": \"callable\", \"signature\": \"(predictions, labels)\", \"return_type\": \"float\", \"short_description\": \"Calculates the Area Under the Curve (AUC) using the trapezoidal rule for binary classification. This function is useful for evaluating the performance of a binary classification model by plotting the ROC curve.\"}"}
{"api_id": 237, "api_name": "sklearn.metrics.auc", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"computeAUC\", \"type\": \"callable\", \"signature\": \"(predictions, labels)\", \"return_type\": \"float\", \"short_description\": \"Computes the Area Under the Curve (AUC) using the trapezoidal rule for binary classification predictions and their corresponding true labels.\"}"}
{"api_id": 237, "api_name": "sklearn.metrics.auc", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"compute_auc\", \"type\": \"function\", \"signature\": \"(predictions, labels)\", \"return_type\": \"float\", \"short_description\": \"Computes the Area Under the Curve (AUC) using the trapezoidal rule for binary classification tasks. This function is a general implementation and can be used for any binary classification model's prediction results and their corresponding true labels. It does not require fitting a model, making it versatile for different datasets and models.\"}"}
{"api_id": 237, "api_name": "sklearn.metrics.auc", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"computeAuc\", \"type\": \"function\", \"signature\": \"(predictions, labels)\", \"return_type\": \"float\", \"short_description\": \"Computes the Area Under the Curve (AUC) using the trapezoidal rule. This function is applicable for binary classification tasks and provides a straightforward way to evaluate the model's performance by plotting the ROC curve and calculating the AUC score.\"}"}
{"api_id": 237, "api_name": "sklearn.metrics.auc", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"compute_auc\", \"type\": \"function\", \"signature\": \"(predictions, labels)\", \"return_type\": \"float\", \"short_description\": \"Calculates the Area Under the Curve (AUC) using the trapezoidal rule from prediction scores.\"}"}
{"api_id": 237, "api_name": "sklearn.metrics.auc", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"compute_auc\", \"type\": \"function\", \"signature\": \"(predictions, labels)\", \"return_type\": \"float\", \"short_description\": \"Calculates the Area Under the Curve (AUC) using the trapezoidal rule from prediction scores.\"}"}
{"api_id": 238, "api_name": "sklearn.preprocessing.StandardScaler", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"(data, column, outlierZScore)\", \"return_type\": \"tuple\", \"short_description\": \"Calculates Z-scores for a specific column in the data to identify outliers and returns the original and filtered data along with outlier indices.\"}"}
{"api_id": 238, "api_name": "sklearn.preprocessing.StandardScaler", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"normalizeData\", \"type\": \"function\", \"signature\": \"(data, column, outlierZScore)\", \"return_type\": \"tuple\", \"short_description\": \"Standardizes the specified column of data and identifies outliers based on Z-scores, returning the original and cleaned data along with outlier indices.\"}"}
{"api_id": 238, "api_name": "sklearn.preprocessing.StandardScaler", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"standardizeData\", \"type\": \"function\", \"signature\": \"(data, column, outlierZScore)\", \"return_type\": \"Tuple[np.ndarray, np.ndarray, np.ndarray]\", \"short_description\": \"Standardizes the specified column of data and removes outliers based on Z-scores.\"}"}
{"api_id": 238, "api_name": "sklearn.preprocessing.StandardScaler", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"(data, zScoreThreshold)\", \"return_type\": \"list\", \"short_description\": \"Calculates the Z-scores for given data and identifies outliers based on a specified Z-score threshold.\"}"}
{"api_id": 238, "api_name": "sklearn.preprocessing.StandardScaler", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"standardizeData\", \"type\": \"function\", \"signature\": \"(*, data, column, outlierZScore)\", \"return_type\": \"Tuple[np.ndarray, np.ndarray, np.ndarray]\", \"short_description\": \"Standardizes the specified column of data to have a mean of 0 and a standard deviation of 1, identifies and removes outliers based on Z-scores, and plots the original and cleaned data for visualization.\"}"}
{"api_id": 238, "api_name": "sklearn.preprocessing.StandardScaler", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"standardizeData\", \"type\": \"function\", \"signature\": \"(*, data, column, outlierZScore)\", \"return_type\": \"Tuple[np.ndarray, np.ndarray, np.ndarray]\", \"short_description\": \"Standardizes the specified column of the data and removes outliers based on Z-scores.\"}"}
{"api_id": 238, "api_name": "sklearn.preprocessing.StandardScaler", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"standardizeData\", \"type\": \"function\", \"signature\": \"(*, data, column, outlierZScore)\", \"return_type\": \"tuple\", \"short_description\": \"Standardizes the specified column of data to have a mean of 0 and a standard deviation of 1, identifies and removes outliers based on Z-scores, and plots the data before and after outlier removal.\"}"}
{"api_id": 238, "api_name": "sklearn.preprocessing.StandardScaler", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"standardizeData\",\n  \"type\": \"function\",\n  \"signature\": \"(data, column, outlierZScore)\",\n  \"return_type\": \"Tuple[np.ndarray, np.ndarray, np.ndarray]\",\n  \"short_description\": \"Standardizes the specified column of data and removes outliers based on Z-scores.\"\n}"}
{"api_id": 238, "api_name": "sklearn.preprocessing.StandardScaler", "task_id": "BigCodeBench/89", "solution": "{\"name\": \"calculateZScores\", \"type\": \"function\", \"signature\": \"(data, column, outlierZScore)\", \"return_type\": \"dict\", \"short_description\": \"Calculates Z-scores for a specified column in the data and identifies outliers based on a given Z-score threshold.\"}"}
{"api_id": 238, "api_name": "sklearn.preprocessing.StandardScaler", "task_id": "BigCodeBench/89", "solution": "{\n  \"name\": \"calculateZScores\",\n  \"type\": \"function\",\n  \"signature\": \"(*, data, column, outlierZScore)\",\n  \"return_type\": \"tuple(np.ndarray, np.ndarray, np.ndarray)\",\n  \"short_description\": \"Calculates Z-scores for a specified column in the data, identifies and removes outliers based on a given Z-score threshold, and plots the data before and after outlier removal.\"\n}"}
{"api_id": 239, "api_name": "sklearn.feature_extraction.text.CountVectorizer", "task_id": "BigCodeBench/184", "solution": "{\n  \"name\": \"generate_word_frequency_matrix\",\n  \"type\": \"function\",\n  \"signature\": \"(*, text_data, stop_words=None)\",\n  \"return_type\": \"pandas.DataFrame\",\n  \"short_description\": \"Generates a word frequency matrix from a list of text documents, optionally excluding stop words.\"\n}"}
{"api_id": 239, "api_name": "sklearn.feature_extraction.text.CountVectorizer", "task_id": "BigCodeBench/184", "solution": "{\"name\": \"preprocessAndVectorizeText\", \"type\": \"function\", \"signature\": \"(*, dataframe: pd.DataFrame, text_column: str)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Preprocesses text data and vectorizes it using CountVectorizer from scikit-learn.\"}"}
{"api_id": 239, "api_name": "sklearn.feature_extraction.text.CountVectorizer", "task_id": "BigCodeBench/184", "solution": "{\n  \"name\": \"generateWordFrequencyMatrix\",\n  \"type\": \"function\",\n  \"signature\": \"(*, data, textColumn)\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a word frequency matrix for the given text column in a DataFrame.\"\n}"}
{"api_id": 239, "api_name": "sklearn.feature_extraction.text.CountVectorizer", "task_id": "BigCodeBench/184", "solution": "{\n  \"name\": \"generate_word_frequency_matrix\",\n  \"type\": \"function\",\n  \"signature\": \"(*, text_data, stop_words=None, min_df=1, max_df=1.0, max_features=None)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Generates a word frequency matrix from a list of text documents, with options to specify stop words, document frequency thresholds, and maximum number of features.\"\n}"}
{"api_id": 239, "api_name": "sklearn.feature_extraction.text.CountVectorizer", "task_id": "BigCodeBench/184", "solution": "{\"name\": \"preprocessTextData\", \"type\": \"function\", \"signature\": \"(*, text, stop_words=None)\", \"return_type\": \"str\", \"short_description\": \"Preprocesses a given text by converting it to lowercase, removing digits and punctuation, and removing stop words.\"}"}
{"api_id": 239, "api_name": "sklearn.feature_extraction.text.CountVectorizer", "task_id": "BigCodeBench/184", "solution": "{\"name\": \"tokenizeAndCountWords\", \"type\": \"function\", \"signature\": \"(*, input_texts, max_df=1.0, min_df=1, max_features=None, stop_words=None, lowercase=True, token_pattern='(?u)\\\\b\\\\w\\\\w+\\\\b', ngram_range=(1, 1), analyzer='word', binary=False, dtype=None)\", \"return_type\": \"scipy.sparse.csr_matrix\", \"short_description\": \"Tokenizes and counts the frequency of words in a list of text documents, with options for filtering stop words, specifying n-gram range, and more.\"}"}
{"api_id": 239, "api_name": "sklearn.feature_extraction.text.CountVectorizer", "task_id": "BigCodeBench/184", "solution": "{\n  \"name\": \"generate_word_frequency_matrix\",\n  \"type\": \"function\",\n  \"signature\": \"(*, text_data, stop_words=None)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Generates a frequency matrix of words from a list of text documents, with optional removal of stop words.\"\n}"}
{"api_id": 239, "api_name": "sklearn.feature_extraction.text.CountVectorizer", "task_id": "BigCodeBench/184", "solution": "{\n  \"name\": \"generate_word_frequency_matrix\",\n  \"type\": \"function\",\n  \"signature\": \"(*, dataframe, text_column)\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a frequency matrix of words from a specified text column in a DataFrame.\"\n}"}
{"api_id": 239, "api_name": "sklearn.feature_extraction.text.CountVectorizer", "task_id": "BigCodeBench/184", "solution": "{\n  \"name\": \"generate_word_frequency_matrix\",\n  \"type\": \"function\",\n  \"signature\": \"(*, data, text_column)\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a frequency matrix for words in a given text column of a DataFrame.\"\n}"}
{"api_id": 239, "api_name": "sklearn.feature_extraction.text.CountVectorizer", "task_id": "BigCodeBench/184", "solution": "{\n  \"name\": \"generate_word_frequency_matrix\",\n  \"type\": \"function\",\n  \"signature\": \"(*, dataframe, text_column)\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Generates a frequency matrix of words from a given text column in a DataFrame.\"\n}"}
{"api_id": 239, "api_name": "sklearn.feature_extraction.text.CountVectorizer", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"generateWordFrequencyChart\", \"type\": \"function\", \"signature\": \"(*, textData, stopWords=None)\", \"return_type\": \"None or matplotlib.axes._subplots.AxesSubplot\", \"short_description\": \"Generates a bar chart displaying the frequency of the top 10 words in a given text dataset, using optional stop words for filtering.\"}"}
{"api_id": 239, "api_name": "sklearn.feature_extraction.text.CountVectorizer", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"generateWordFrequencyPlot\", \"type\": \"function\", \"signature\": \"(*, textData, stopWords=None, savePath=None)\", \"return_type\": \"None or matplotlib.axes._subplots.AxesSubplot\", \"short_description\": \"Generates a frequency plot of the top 10 words from a provided list of text data, optionally saving the plot to a specified path.\"}"}
{"api_id": 239, "api_name": "sklearn.feature_extraction.text.CountVectorizer", "task_id": "BigCodeBench/1053", "solution": "{\n  \"name\": \"generateWordFrequencyChart\",\n  \"type\": \"function\",\n  \"signature\": \"(*, file_path, stop_words=None, save_path=None)\",\n  \"return_type\": \"None or matplotlib.axes._subplots.AxesSubplot\",\n  \"short_description\": \"Generates a word frequency chart from a CSV file and optionally saves it to a specified path.\"\n}"}
{"api_id": 239, "api_name": "sklearn.feature_extraction.text.CountVectorizer", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"generateWordFrequencyChart\", \"type\": \"function\", \"signature\": \"(*, textData, stopWords=None)\", \"return_type\": \"None or matplotlib.axes._subplots.AxesSubplot\", \"short_description\": \"Generates a word frequency chart from the provided text data, optionally excluding stop words.\"}"}
{"api_id": 239, "api_name": "sklearn.feature_extraction.text.CountVectorizer", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"createWordFrequencyChart\", \"type\": \"function\", \"signature\": \"(*, textData, stopWords=None)\", \"return_type\": \"None or plt.Figure\", \"short_description\": \"Creates a bar chart showing the frequency of the top 10 words in the provided text data, excluding the specified stop words.\"}"}
{"api_id": 239, "api_name": "sklearn.feature_extraction.text.CountVectorizer", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"generateWordFrequencyPlot\", \"type\": \"function\", \"signature\": \"(*, textData, stopWords=None)\", \"return_type\": \"None or matplotlib.axes._subplots.AxesSubplot\", \"short_description\": \"Generates a bar plot of the top 10 most frequent words from the provided text data, with an option to specify stop words.\"}"}
{"api_id": 239, "api_name": "sklearn.feature_extraction.text.CountVectorizer", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"generateWordFrequencyPlot\", \"type\": \"function\", \"signature\": \"(*, textData, stopWords=None)\", \"return_type\": \"None or plt object\", \"short_description\": \"Generates a bar plot of the top 10 most frequent words from the provided text data, excluding stop words.\"}"}
{"api_id": 239, "api_name": "sklearn.feature_extraction.text.CountVectorizer", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"tokenizeText\", \"type\": \"function\", \"signature\": \"(*, text, stopWords=None)\", \"return_type\": \"list[str]\", \"short_description\": \"Tokenizes the input text using CountVectorizer, optionally excluding stop words.\"}"}
{"api_id": 239, "api_name": "sklearn.feature_extraction.text.CountVectorizer", "task_id": "BigCodeBench/1053", "solution": "{\"name\": \"generateWordFrequencyPlot\", \"type\": \"function\", \"signature\": \"(*, textData, stopWords=None, savePath=None)\", \"return_type\": \"None or matplotlib.axes._subplots.AxesSubplot\", \"short_description\": \"Generates a word frequency plot from a list of text data, optionally saving it to a specified path.\"}"}
{"api_id": 239, "api_name": "sklearn.feature_extraction.text.CountVectorizer", "task_id": "BigCodeBench/1053", "solution": "{\n  \"name\": \"generateWordFrequencyPlot\",\n  \"type\": \"function\",\n  \"signature\": \"(*, file_path, save_path=None)\",\n  \"return_type\": \"None or plt.Axes\",\n  \"short_description\": \"Generates a bar plot of the top 10 most frequent words from a CSV file, using a CountVectorizer to extract word frequencies.\"\n}"}
{"api_id": 240, "api_name": "sklearn.preprocessing.normalize", "task_id": "BigCodeBench/241", "solution": "{\n  \"name\": \"normalizeData\",\n  \"type\": \"callable\",\n  \"signature\": \"(X, norm='l2', axis=1, copy=True, return_norm=False)\",\n  \"return_type\": \"{ndarray, sparse matrix} of shape (n_samples, n_features) or (n_features,), depending on axis\",\n  \"short_description\": \"Scales input vectors individually to unit norm (vector length) along the specified axis.\"\n}"}
{"api_id": 240, "api_name": "sklearn.preprocessing.normalize", "task_id": "BigCodeBench/241", "solution": "{\n  \"name\": \"normalizeData\",\n  \"type\": \"callable\",\n  \"signature\": \"(X, norm='l2', axis=1, copy=True, return_norm=False)\",\n  \"return_type\": \"{ndarray, sparse matrix} of shape (n_samples, n_features) or ndarray of shape (n_samples, ) if axis=1 else (n_features, )\",\n  \"short_description\": \"Scales input vectors individually to unit norm (vector length) along the specified axis.\"\n}"}
{"api_id": 240, "api_name": "sklearn.preprocessing.normalize", "task_id": "BigCodeBench/241", "solution": "{\n  \"name\": \"normalizeData\",\n  \"type\": \"callable\",\n  \"signature\": \"(X, norm='l2', axis=1, copy=True, return_norm=False)\",\n  \"return_type\": \"{ndarray, sparse matrix} of shape (n_samples, n_features) or ndarray of shape (n_samples, ) or (n_features, )\",\n  \"short_description\": \"Scales input vectors individually to unit norm (vector length) along the specified axis.\"\n}"}
{"api_id": 240, "api_name": "sklearn.preprocessing.normalize", "task_id": "BigCodeBench/241", "solution": "{\n  \"name\": \"normalizeData\",\n  \"type\": \"callable\",\n  \"signature\": \"(X, norm='l2', axis=1, copy=True, return_norm=False)\",\n  \"return_type\": \"{ndarray, sparse matrix} of shape (n_samples, n_features) if return_norm=False else {ndarray, sparse matrix} of shape (n_samples, n_features) and ndarray of shape (n_samples, ) if axis=1\",\n  \"short_description\": \"Scales input vectors individually to unit norm (vector length). This function is suitable for normalizing data for machine learning applications.\"\n}"}
{"api_id": 240, "api_name": "sklearn.preprocessing.normalize", "task_id": "BigCodeBench/241", "solution": "{\"name\": \"normalizeData\", \"type\": \"callable\", \"signature\": \"(X, norm='l2', axis=1, copy=True, returnNorm=False)\", \"return_type\": \"X_normalized, norms\", \"short_description\": \"Scales input vectors individually to unit norm (vector length).\"}"}
{"api_id": 240, "api_name": "sklearn.preprocessing.normalize", "task_id": "BigCodeBench/241", "solution": "{\"name\": \"normalizeData\", \"type\": \"callable\", \"signature\": \"(X, norm='l2', axis=1, copy=True, returnNorm=False)\", \"return_type\": \"{ndarray, sparse matrix} of shape (n_samples, n_features) or (n_features, )\", \"short_description\": \"Scales input vectors individually to unit norm (vector length) along the specified axis.\"}"}
{"api_id": 240, "api_name": "sklearn.preprocessing.normalize", "task_id": "BigCodeBench/241", "solution": "{\"name\": \"sklearnNormalize\", \"type\": \"function\", \"signature\": \"(X, norm='l2', axis=1, copy=True, returnNorm=False)\", \"return_type\": \"{ndarray, sparse matrix} of shape (n_samples, n_features) or (n_features,)\", \"short_description\": \"Scales input vectors individually to unit norm (vector length) along the specified axis. Returns the normalized data and optionally the computed norms.\"}"}
{"api_id": 240, "api_name": "sklearn.preprocessing.normalize", "task_id": "BigCodeBench/241", "solution": "{\n  \"name\": \"normalizeData\",\n  \"type\": \"callable\",\n  \"signature\": \"(X, norm='l2', axis=1, copy=True, return_norm=False)\",\n  \"return_type\": \"{ndarray, sparse matrix} of shape (n_samples, n_features)\",\n  \"short_description\": \"Scales input vectors individually to unit norm (vector length) along the specified axis.\"\n}"}
{"api_id": 240, "api_name": "sklearn.preprocessing.normalize", "task_id": "BigCodeBench/241", "solution": "{\n  \"name\": \"computeNormalizedData\",\n  \"type\": \"function\",\n  \"signature\": \"(data, norm='l2', axis=1, copy=True, returnNorm=False)\",\n  \"return_type\": \"{ndarray, sparse matrix} of shape (n_samples, n_features) or (n_features, )\",\n  \"short_description\": \"Normalizes the input data to unit norm along the specified axis.\"\n}"}
{"api_id": 240, "api_name": "sklearn.preprocessing.normalize", "task_id": "BigCodeBench/241", "solution": "{\n  \"name\": \"normalizeData\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, norm='l2', axis=1, copy=True, return_norm=False)\",\n  \"return_type\": \"{ndarray, sparse matrix} of shape (n_samples, n_features) or (n_features, )\",\n  \"short_description\": \"Scales input data to unit norm along the specified axis.\"\n}"}
{"api_id": 241, "api_name": "sklearn.datasets.load_iris", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"loadIrisData\",\n  \"type\": \"callable\",\n  \"signature\": \"(*, return_X_y=False, as_frame=False)\",\n  \"return_type\": \":class:`~sklearn.utils.Bunch`\",\n  \"short_description\": \"Load and return the iris dataset (classification) with an emphasis on detailed metadata and structured return types.\"\n}"}
{"api_id": 241, "api_name": "sklearn.datasets.load_iris", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"loadIrisData\",\n  \"type\": \"function\",\n  \"signature\": \"(*, as_frame=False)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Loads and returns the iris dataset, providing detailed information about the dataset's features and classes.\"\n}"}
{"api_id": 241, "api_name": "sklearn.datasets.load_iris", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"loadIrisDataset\",\n  \"type\": \"function\",\n  \"signature\": \"()\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Loads and returns the iris dataset, providing detailed information about the dataset including features, targets, and descriptions.\"\n}"}
{"api_id": 241, "api_name": "sklearn.datasets.load_iris", "task_id": "BigCodeBench/99", "solution": "{\"name\": \"loadIrisData\", \"type\": \"function\", \"signature\": \"(*, returnXy=False, asFrame=False)\", \"return_type\": \"Bunch\", \"short_description\": \"Load and return the iris dataset, optionally returning the data and target as separate arrays.\"}"}
{"api_id": 241, "api_name": "sklearn.datasets.load_iris", "task_id": "BigCodeBench/99", "solution": "{\"name\": \"loadIrisData\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \":class:`~sklearn.utils.Bunch`\", \"short_description\": \"Load and return the iris dataset for machine learning tasks.\"}"}
{"api_id": 241, "api_name": "sklearn.datasets.load_iris", "task_id": "BigCodeBench/99", "solution": "{\"name\": \"loadIrisData\", \"type\": \"callable\", \"signature\": \"(*, return_X_y=False, as_frame=False)\", \"return_type\": \":class:`~sklearn.utils.Bunch`\", \"short_description\": \"Load and return the iris dataset for analysis.\"}"}
{"api_id": 241, "api_name": "sklearn.datasets.load_iris", "task_id": "BigCodeBench/99", "solution": "{\"name\": \"loadIrisData\", \"type\": \"function\", \"signature\": \"(*, return_X_y=False, as_frame=False)\", \"return_type\": \"dict\", \"short_description\": \"Loads and returns the iris dataset, which is a classic multi-class classification dataset.\"}"}
{"api_id": 241, "api_name": "sklearn.datasets.load_iris", "task_id": "BigCodeBench/99", "solution": "{\"name\": \"loadIrisDataset\", \"type\": \"callable\", \"signature\": \"(*, return_X_y=False, as_frame=False)\", \"return_type\": \":class:`~sklearn.utils.Bunch`\", \"short_description\": \"Load and return the iris dataset (classification) with detailed information.\"}"}
{"api_id": 241, "api_name": "sklearn.datasets.load_iris", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"loadIrisDataset\",\n  \"type\": \"function\",\n  \"signature\": \"(*, return_X_y=False, as_frame=False)\",\n  \"return_type\": \"Bunch\",\n  \"short_description\": \"Load and return the iris dataset for machine learning tasks.\"\n}"}
{"api_id": 241, "api_name": "sklearn.datasets.load_iris", "task_id": "BigCodeBench/99", "solution": "{\n  \"name\": \"loadIrisDataset\",\n  \"type\": \"function\",\n  \"signature\": \"()\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Loads and returns the iris dataset, providing detailed information about the dataset.\"\n}"}
{"api_id": 242, "api_name": "sklearn.decomposition.PCA", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"performPCA\", \"type\": \"function\", \"signature\": \"(data, n_components=2)\", \"return_type\": \"tuple\", \"short_description\": \"Performs Principal Component Analysis (PCA) on the input data and returns the transformed data along with a plot of the first two principal components.\"}"}
{"api_id": 242, "api_name": "sklearn.decomposition.PCA", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"calculatePrincipalComponents\", \"type\": \"function\", \"signature\": \"(data, n_components=2)\", \"return_type\": \"Tuple[pd.DataFrame, plt.Figure]\", \"short_description\": \"Performs Principal Component Analysis (PCA) on the input data and returns the transformed data as a DataFrame along with a matplotlib scatter plot of the first two principal components.\"}"}
{"api_id": 242, "api_name": "sklearn.decomposition.PCA", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"performPCA\", \"type\": \"function\", \"signature\": \"(data, n_components=2)\", \"return_type\": \"tuple\", \"short_description\": \"Performs Principal Component Analysis (PCA) on the input data and returns the transformed data along with a scatter plot of the first two principal components.\"}"}
{"api_id": 242, "api_name": "sklearn.decomposition.PCA", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"performPCA\", \"type\": \"function\", \"signature\": \"(data, n_components=2)\", \"return_type\": \"object\", \"short_description\": \"Performs Principal Component Analysis (PCA) on the input data and returns the transformed data along with visualization.\"}"}
{"api_id": 242, "api_name": "sklearn.decomposition.PCA", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"performPCA\", \"type\": \"function\", \"signature\": \"(data, n_components=2)\", \"return_type\": \"object\", \"short_description\": \"Performs Principal Component Analysis (PCA) on the input data and returns the transformed data along with a plot of the first two principal components.\"}"}
{"api_id": 242, "api_name": "sklearn.decomposition.PCA", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"performPca\", \"type\": \"function\", \"signature\": \"(data, n_components=2)\", \"return_type\": \"Tuple[pd.DataFrame, plt.Figure]\", \"short_description\": \"Performs Principal Component Analysis (PCA) on the given data and returns the transformed data and a plot of the first two principal components.\"}"}
{"api_id": 242, "api_name": "sklearn.decomposition.PCA", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"performPrincipalComponentAnalysis\", \"type\": \"function\", \"signature\": \"(data, n_components=2)\", \"return_type\": \"tuple\", \"short_description\": \"Performs Principal Component Analysis on the input data and returns the transformed data along with plotting a scatter plot of the first two principal components.\"}"}
{"api_id": 242, "api_name": "sklearn.decomposition.PCA", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"calculatePrincipalComponents\", \"type\": \"function\", \"signature\": \"(data, n_components=2)\", \"return_type\": \"Tuple[pd.DataFrame, plt.Axes]\", \"short_description\": \"Calculates and visualizes the principal components of the given data.\"}"}
{"api_id": 242, "api_name": "sklearn.decomposition.PCA", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"performPCA\", \"type\": \"function\", \"signature\": \"(data, n_components=2)\", \"return_type\": \"object\", \"short_description\": \"Performs Principal Component Analysis on the input data and returns the transformed data along with the explained variance ratio.\"}"}
{"api_id": 242, "api_name": "sklearn.decomposition.PCA", "task_id": "BigCodeBench/93", "solution": "{\"name\": \"performPrincipalComponentAnalysis\", \"type\": \"function\", \"signature\": \"(data, n_components=2)\", \"return_type\": \"object\", \"short_description\": \"Performs Principal Component Analysis on the input data and returns the transformed data along with a plot of the first two principal components.\"}"}
{"api_id": 243, "api_name": "sklearn.feature_extraction.text.TfidfVectorizer", "task_id": "BigCodeBench/655", "solution": "{\n  \"name\": \"extractTopicsFromTexts\",\n  \"type\": \"function\",\n  \"signature\": \"(*, texts, numTopics, maxDf=1.0, minDf=1, stopWords='english')\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Extracts dominant topics from a list of texts using Non-negative Matrix Factorization (NMF) and TF-IDF vectorization.\"\n}"}
{"api_id": 243, "api_name": "sklearn.feature_extraction.text.TfidfVectorizer", "task_id": "BigCodeBench/655", "solution": "{\n  \"name\": \"generateTopicsFromText\",\n  \"type\": \"function\",\n  \"signature\": \"(*, texts, numTopics)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Generates topics from a list of text documents using Non-negative Matrix Factorization (NMF) with TF-IDF vectorization.\"\n}"}
{"api_id": 243, "api_name": "sklearn.feature_extraction.text.TfidfVectorizer", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"generateTopicModel\", \"type\": \"function\", \"signature\": \"(*, texts, numTopics)\", \"return_type\": \"list\", \"short_description\": \"Generates a topic model from a list of texts using Non-Negative Matrix Factorization (NMF) and TF-IDF vectorization.\"}"}
{"api_id": 243, "api_name": "sklearn.feature_extraction.text.TfidfVectorizer", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"extractTopics\", \"type\": \"function\", \"signature\": \"(*, texts, numTopics)\", \"return_type\": \"List[List[str]]\", \"short_description\": \"Extracts topics from a list of texts using Non-Negative Matrix Factorization (NMF).\"}"}
{"api_id": 243, "api_name": "sklearn.feature_extraction.text.TfidfVectorizer", "task_id": "BigCodeBench/655", "solution": "{\n  \"name\": \"extractTopics\",\n  \"type\": \"function\",\n  \"signature\": \"(texts, num_topics)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Extracts topics from a list of texts using Non-negative Matrix Factorization (NMF) and TF-IDF vectorization.\"\n}"}
{"api_id": 243, "api_name": "sklearn.feature_extraction.text.TfidfVectorizer", "task_id": "BigCodeBench/655", "solution": "{\n  \"name\": \"generateTopics\",\n  \"type\": \"function\",\n  \"signature\": \"(*, texts, num_topics)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Extracts topics from a list of texts using Non-negative Matrix Factorization (NMF) with TF-IDF vectorization.\"\n}"}
{"api_id": 243, "api_name": "sklearn.feature_extraction.text.TfidfVectorizer", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"extractTopics\", \"type\": \"function\", \"signature\": \"(*, texts, numTopics)\", \"return_type\": \"List[List[str]]\", \"short_description\": \"Extracts the most relevant topics from a list of texts using Non-negative Matrix Factorization (NMF).\"}"}
{"api_id": 243, "api_name": "sklearn.feature_extraction.text.TfidfVectorizer", "task_id": "BigCodeBench/655", "solution": "{\n  \"name\": \"extractTopics\",\n  \"type\": \"function\",\n  \"signature\": \"(*, texts, num_topics, max_df=1.0, min_df=1, stop_words='english')\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Extracts topics from a list of texts using Non-negative Matrix Factorization (NMF) with TF-IDF vectorization.\"\n}"}
{"api_id": 243, "api_name": "sklearn.feature_extraction.text.TfidfVectorizer", "task_id": "BigCodeBench/655", "solution": "{\n  \"name\": \"generateTopics\",\n  \"type\": \"function\",\n  \"signature\": \"(*, texts, numTopics)\",\n  \"return_type\": \"List[List[str]]\",\n  \"short_description\": \"Generates topics from a list of texts using Non-Negative Matrix Factorization (NMF) with TF-IDF vectorization.\"\n}"}
{"api_id": 243, "api_name": "sklearn.feature_extraction.text.TfidfVectorizer", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"extractTopics\", \"type\": \"function\", \"signature\": \"(*, texts, numTopics)\", \"return_type\": \"list\", \"short_description\": \"Extracts the main topics from a list of text documents using Non-negative Matrix Factorization (NMF).\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"calculateModelScore\", \"type\": \"function\", \"signature\": \"(model, X_test, y_test)\", \"return_type\": \"float\", \"short_description\": \"Calculates the R-squared score of a trained model on a test set.\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"calculateLinearRegressionScore\", \"type\": \"function\", \"signature\": \"(data: pd.DataFrame, targetColumn: str, testSize: float = 0.2, randomState: int = 0) -> float\", \"return_type\": \"float\", \"short_description\": \"Calculates the R-squared score of a Linear Regression model trained on the provided data.\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"calculateLinearRegressionScore\", \"type\": \"function\", \"signature\": \"(data, targetColumn, testSize=0.2, randomState=0) -> float\", \"return_type\": \"float\", \"short_description\": \"Calculates the R-squared score of a Linear Regression model using train-test split on the provided data.\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"calculateLinearRegressionScore\", \"type\": \"function\", \"signature\": \"(X: ArrayLike, y: ArrayLike, testSize: float, randomState: int) -> float\", \"return_type\": \"float\", \"short_description\": \"Calculates the R-squared score of a linear regression model trained on the given data.\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"calculateModelScore\", \"type\": \"function\", \"signature\": \"(model, X_test, y_test)\", \"return_type\": \"float\", \"short_description\": \"Calculates the R-squared score of a trained machine learning model on test data.\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"calculateModelScore\", \"type\": \"function\", \"signature\": \"(model, X_test, y_test)\", \"return_type\": \"float\", \"short_description\": \"Calculates the score of a trained model on a test set.\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/752", "solution": "{\n  \"name\": \"calculateLinearRegressionScore\",\n  \"type\": \"function\",\n  \"signature\": \"(data, targetColumn, testSize=0.2, randomState=0) -> float\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculates the R-squared score of a Linear Regression model trained on the provided dataset.\"\n}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"calculateLinearRegressionScore\", \"type\": \"function\", \"signature\": \"(X: pd.DataFrame, y: pd.Series, testSize: float = 0.2, randomState: int = 0) -> float\", \"return_type\": \"float\", \"short_description\": \"Calculates the R-squared score of a Linear Regression model using training and testing data.\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/752", "solution": "{\n  \"name\": \"calculateR2Score\",\n  \"type\": \"function\",\n  \"signature\": \"(model, X_test, y_test)\",\n  \"return_type\": \"float\",\n  \"short_description\": \"Calculates the R-squared score for a given model using test data.\"\n}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"calculateRegressionScore\", \"type\": \"function\", \"signature\": \"(data, targetColumn, testSize=0.2, randomState=0)\", \"return_type\": \"float\", \"short_description\": \"Calculates the R-squared score of a Linear Regression model using train-test split.\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"calculateLinearRegression\", \"type\": \"function\", \"signature\": \"(X, y, fitIntercept=True, copyX=True, nJobs=None, positive=False)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the coefficients of a linear regression model given input features X and target variable y. Optionally, it can fit an intercept, copy the input features, and specify the number of jobs to use for parallel computation. It also supports positive coefficients.\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"predictFuturePrices\", \"type\": \"function\", \"signature\": \"(X, model)\", \"return_type\": \"List[float]\", \"short_description\": \"Predicts future prices based on historical data using a linear regression model.\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"calculateLinearRegression\", \"type\": \"function\", \"signature\": \"(*, X, y)\", \"return_type\": \"dict\", \"short_description\": \"Calculates linear regression coefficients and intercept for given input data.\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"calculateLinearRegression\", \"type\": \"function\", \"signature\": \"(X, y, fitIntercept=True, copyX=True, nJobs=None, positive=False)\", \"return_type\": \"dict\", \"short_description\": \"Performs linear regression on the provided data and returns a dictionary containing the model's coefficients, intercept, and other relevant statistics.\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"calculateLinearRegression\", \"type\": \"function\", \"signature\": \"(X, y, fitIntercept=True, copyX=True, nJobs=None, positive=False)\", \"return_type\": \"dict\", \"short_description\": \"Performs linear regression on the provided data and returns the model coefficients, intercept, and other relevant statistics.\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"calculateLinearRegression\", \"type\": \"function\", \"signature\": \"(X, y, fitIntercept=True)\", \"return_type\": \"dict\", \"short_description\": \"Calculates linear regression coefficients and intercept for given input data.\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"calculateLinearRegression\", \"type\": \"function\", \"signature\": \"(*, X, y)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the coefficients and intercept of a linear regression model for given input features (X) and target values (y).\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"calculateLinearRegression\", \"type\": \"function\", \"signature\": \"(X, y, fitIntercept=True, copyX=True, nJobs=None, positive=False)\", \"return_type\": \"dict\", \"short_description\": \"Performs linear regression on the given input data and returns the model's coefficients, intercept, and other relevant statistics.\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"calculateLinearRegression\", \"type\": \"function\", \"signature\": \"(*, X, y)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the coefficients and intercept of a linear regression model.\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/914", "solution": "{\"name\": \"calculateLinearRegression\", \"type\": \"function\", \"signature\": \"(X: array, y: array, fitIntercept: bool = True, copyX: bool = True, nJobs: int = None, positive: bool = False)\", \"return_type\": \"dict\", \"short_description\": \"Performs linear regression on the given input data and returns a dictionary with coefficients, intercept, and other relevant statistics.\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"generateForecast\", \"type\": \"function\", \"signature\": \"(*, salesData=None, startDate='2016-01-01', periods=13, freq='WOM-2FRI')\", \"return_type\": \"list\", \"short_description\": \"Generates a sales forecast based on historical data using linear regression.\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"calculateLinearRegression\", \"type\": \"function\", \"signature\": \"(X, y)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the coefficients and intercept of a linear regression model.\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"calculateLinearRegression\", \"type\": \"function\", \"signature\": \"(X: np.ndarray, y: np.ndarray, fitIntercept: bool = True, copyX: bool = True, nJobs: int = None, positive: bool = False) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Performs linear regression on given data and returns coefficients and intercept.\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"calculateLinearRegression\", \"type\": \"function\", \"signature\": \"(X, y, fitIntercept=True, copyX=True, nJobs=None, positive=False)\", \"return_type\": \"LinearRegressionModel\", \"short_description\": \"This function performs linear regression using Ordinary Least Squares (OLS) method. It takes features (X) and target (y) as inputs, and returns a model with estimated coefficients.\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"calculateLinearRegression\", \"type\": \"function\", \"signature\": \"(X, y)\", \"return_type\": \"model\", \"short_description\": \"Calculates the linear regression model using ordinary least squares.\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/945", "solution": "{\n  \"name\": \"generateFutureSales\",\n  \"type\": \"function\",\n  \"signature\": \"(startDate='2016-01-01', periods=13, freq='WOM-2FRI', salesData=None)\",\n  \"return_type\": \"array\",\n  \"short_description\": \"Generates future sales predictions based on historical sales data.\"\n}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"calculateSalesForecast\", \"type\": \"function\", \"signature\": \"(salesDataArray, periods, freq)\", \"return_type\": \"list\", \"short_description\": \"Calculates a sales forecast based on historical data using linear regression.\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/945", "solution": "{\n  \"name\": \"calculateLinearRegression\",\n  \"type\": \"function\",\n  \"signature\": \"(X, y, fit_intercept=True, copy_X=True, n_jobs=None, positive=False)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Performs linear regression on given data and returns a dictionary containing the model's coefficients, intercept, and other relevant information.\"\n}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"calculateLinearRegression\", \"type\": \"function\", \"signature\": \"(X: ndarray, y: ndarray, fitIntercept: bool = True, copyX: bool = True, nJobs: int = None, positive: bool = False) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Performs linear regression on the provided data and returns the model coefficients and intercept.\"}"}
{"api_id": 244, "api_name": "sklearn.linear_model.LinearRegression", "task_id": "BigCodeBench/945", "solution": "{\"name\": \"calculateLinearRegression\", \"type\": \"function\", \"signature\": \"(X, y, fitIntercept=True, copyX=True, nJobs=None, positive=False)\", \"return_type\": \"array\", \"short_description\": \"Calculates the coefficients of a linear regression model based on input features (X) and target values (y).\"}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/417", "solution": "{\n  \"name\": \"splitData\",\n  \"type\": \"function\",\n  \"signature\": \"(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"\n}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"trainTestSplit\", \"type\": \"callable\", \"signature\": \"(*arrays, testSize=None, trainSize=None, randomState=None, shuffle=True, stratify=None)\", \"return_type\": \"list\", \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"splitTrainTest\", \"type\": \"function\", \"signature\": \"(*arrays, testSize=None, trainSize=None, randomState=None, shuffle=True, stratify=None)\", \"return_type\": \"List[List[array-like]]\", \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"splitTrainTest\", \"type\": \"function\", \"signature\": \"(*arrays, testSize=None, trainSize=None, randomState=None, shuffle=True, stratify=None)\", \"return_type\": \"list\", \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"trainTestSplit\", \"type\": \"function\", \"signature\": \"(*arrays, testSize=None, trainSize=None, randomState=None, shuffle=True, stratify=None)\", \"return_type\": \"list\", \"short_description\": \"Splits arrays or matrices into random train and test subsets. This function is a direct utility for splitting data into training and testing subsets, offering flexibility in specifying the split proportions and controlling the randomness through a random state.\"}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"splitData\", \"type\": \"function\", \"signature\": \"(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None)\", \"return_type\": \"list\", \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/417", "solution": "{\n  \"name\": \"splitTrainTest\",\n  \"type\": \"function\",\n  \"signature\": \"(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"\n}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"splitData\", \"type\": \"function\", \"signature\": \"(*arrays, testSize=None, trainSize=None, randomState=None, shuffle=True, stratify=None)\", \"return_type\": \"list\", \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/417", "solution": "{\n  \"name\": \"splitData\",\n  \"type\": \"function\",\n  \"signature\": \"(*arrays, testSize=None, trainSize=None, randomState=None, shuffle=True, stratify=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"\n}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/417", "solution": "{\"name\": \"splitTrainTest\", \"type\": \"function\", \"signature\": \"(*arrays, testSize=None, trainSize=None, randomState=None, shuffle=True, stratify=None)\", \"return_type\": \"List[List[array-like]]\", \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"split_data\",\n  \"type\": \"function\",\n  \"signature\": \"(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"\n}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"split_data\",\n  \"type\": \"function\",\n  \"signature\": \"(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"\n}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"split_data\",\n  \"type\": \"function\",\n  \"signature\": \"(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"\n}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"split_data\",\n  \"type\": \"function\",\n  \"signature\": \"(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"\n}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"split_data\",\n  \"type\": \"function\",\n  \"signature\": \"(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"\n}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"split_data\",\n  \"type\": \"function\",\n  \"signature\": \"(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"\n}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"split_data\",\n  \"type\": \"function\",\n  \"signature\": \"(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"\n}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"split_data\",\n  \"type\": \"function\",\n  \"signature\": \"(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"\n}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"splitData\", \"type\": \"function\", \"signature\": \"(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None)\", \"return_type\": \"list\", \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"split_data\",\n  \"type\": \"function\",\n  \"signature\": \"(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"\n}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/752", "solution": "{\n  \"name\": \"splitData\",\n  \"type\": \"function\",\n  \"signature\": \"(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"\n}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/752", "solution": "{\n  \"name\": \"splitData\",\n  \"type\": \"function\",\n  \"signature\": \"(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"\n}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/752", "solution": "{\n  \"name\": \"splitData\",\n  \"type\": \"function\",\n  \"signature\": \"(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"\n}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"splitData\", \"type\": \"function\", \"signature\": \"(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None)\", \"return_type\": \"list\", \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/752", "solution": "{\n  \"name\": \"splitData\",\n  \"type\": \"function\",\n  \"signature\": \"(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"\n}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/752", "solution": "{\n  \"name\": \"splitData\",\n  \"type\": \"function\",\n  \"signature\": \"(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"\n}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/752", "solution": "{\n  \"name\": \"splitData\",\n  \"type\": \"function\",\n  \"signature\": \"(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"\n}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/752", "solution": "{\n  \"name\": \"splitDataTrainTest\",\n  \"type\": \"function\",\n  \"signature\": \"(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"\n}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/752", "solution": "{\"name\": \"splitData\", \"type\": \"function\", \"signature\": \"(*arrays, testSize=None, trainSize=None, randomState=None, shuffle=True, stratify=None)\", \"return_type\": \"list\", \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"}"}
{"api_id": 245, "api_name": "sklearn.model_selection.train_test_split", "task_id": "BigCodeBench/752", "solution": "{\n  \"name\": \"splitData\",\n  \"type\": \"function\",\n  \"signature\": \"(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Splits arrays or matrices into random train and test subsets.\"\n}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/92", "solution": "{\"name\": \"performKMeansClustering\", \"type\": \"function\", \"signature\": \"(data, nClusters=3)\", \"return_type\": \"Tuple[np.ndarray, PathCollection]\", \"short_description\": \"Performs K-Means clustering on a given dataset and visualizes the results using matplotlib.\"}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/92", "solution": "{\n  \"name\": \"performKMeansClustering\",\n  \"type\": \"function\",\n  \"signature\": \"(data, nClusters=3)\",\n  \"return_type\": \"tuple(labels, ax)\",\n  \"short_description\": \"Performs K-Means clustering on the given data and visualizes the result using matplotlib.\"\n}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/92", "solution": "{\n  \"name\": \"calculateKMeans\",\n  \"type\": \"function\",\n  \"signature\": \"(data, nClusters=3)\",\n  \"return_type\": \"tuple(labels, centroids)\",\n  \"short_description\": \"Performs K-Means clustering on the given data and returns the labels and centroids.\"\n}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/92", "solution": "{\n  \"name\": \"kMeansClustering\",\n  \"type\": \"function\",\n  \"signature\": \"(data, nClusters=3)\",\n  \"return_type\": \"tuple(labels, ax)\",\n  \"short_description\": \"Performs K-Means clustering on the given data and visualizes the results using matplotlib.\"\n}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/92", "solution": "{\"name\": \"performKMeansClustering\", \"type\": \"function\", \"signature\": \"(data, nClusters=3)\", \"return_type\": \"tuple(labels, centroids, visualization)\", \"short_description\": \"Performs K-Means clustering on a given dataset and returns labels, centroids, and a visualization of the clustering result.\"}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/92", "solution": "{\n  \"name\": \"kMeansClustering\",\n  \"type\": \"function\",\n  \"signature\": \"(data, nClusters=3)\",\n  \"return_type\": \"tuple(labels, ax)\",\n  \"short_description\": \"Performs K-Means clustering on a given dataset and visualizes the results using matplotlib.\"\n}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/92", "solution": "{\n  \"name\": \"performKMeansClustering\",\n  \"type\": \"function\",\n  \"signature\": \"(data, nClusters=3)\",\n  \"return_type\": \"tuple(labels, ax)\",\n  \"short_description\": \"Performs K-Means clustering on the given data and plots the results using matplotlib.\"\n}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/92", "solution": "{\n  \"name\": \"performKMeansClustering\",\n  \"type\": \"function\",\n  \"signature\": \"(data, nClusters=3)\",\n  \"return_type\": \"tuple(labels, ax)\",\n  \"short_description\": \"Performs K-Means clustering on the given data and visualizes the results using matplotlib.\"\n}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/92", "solution": "{\n  \"name\": \"kMeansClustering\",\n  \"type\": \"function\",\n  \"signature\": \"(data, nClusters=3)\",\n  \"return_type\": \"tuple(labels, ax)\",\n  \"short_description\": \"Performs K-Means clustering on a given dataset and visualizes the results.\"\n}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/92", "solution": "{\n  \"name\": \"performKMeansClustering\",\n  \"type\": \"function\",\n  \"signature\": \"(data, nClusters=3)\",\n  \"return_type\": \"tuple(labels, ax)\",\n  \"short_description\": \"Performs K-Means clustering on a given DataFrame and visualizes the results using matplotlib.\"\n}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"generateClusterImages\", \"type\": \"function\", \"signature\": \"(imagePath='image.jpg', nClusters=3, randomSeed=42)\", \"return_type\": \"tuple[np.ndarray, list[np.ndarray]]\", \"short_description\": \"Generates cluster images from a given image using KMeans clustering and saves each cluster as a separate image.\"}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"generateImageSegmentation\", \"type\": \"function\", \"signature\": \"(imagePath='image.jpg', nClusters=3, randomSeed=42)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a segmented image from the given image using KMeans clustering.\"}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"segmentImage\", \"type\": \"function\", \"signature\": \"(imagePath, numClusters, randomSeed)\", \"return_type\": \"tuple(numpy.ndarray, numpy.ndarray)\", \"short_description\": \"Segments an image into a specified number of clusters and returns the original and segmented images.\"}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/424", "solution": "{\n  \"name\": \"generateSegmentedImages\",\n  \"type\": \"function\",\n  \"signature\": \"(imagePath='image.jpg', nClusters=3, randomSeed=42)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Generates segmented images from a given image using K-Means clustering.\"\n}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"calculateImageClusters\", \"type\": \"function\", \"signature\": \"(imagePath, nClusters, randomSeed)\", \"return_type\": \"{'originalImage': ndarray, 'segmentedImage': ndarray, 'clusters': List[ndarray]}\", \"short_description\": \"Calculates the dominant colors in an image using K-Means clustering and optionally saves each cluster as a separate image.\"}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"generateColorPalette\", \"type\": \"function\", \"signature\": \"(imagePath, numberOfClusters, randomSeed)\", \"return_type\": \"object\", \"short_description\": \"Generates a color palette from an image using K-Means clustering.\"}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"segmentImage\", \"type\": \"function\", \"signature\": \"(imagePath, nClusters, randomSeed)\", \"return_type\": \"Tuple[np.ndarray, np.ndarray]\", \"short_description\": \"Segments an image into a specified number of clusters using the K-Means algorithm. Returns the original and segmented images.\"}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"segmentImage\", \"type\": \"function\", \"signature\": \"(imagePath='image.jpg', nClusters=3, randomSeed=42)\", \"return_type\": \"tuple(numpy.ndarray, numpy.ndarray)\", \"short_description\": \"Segment an image into a specified number of clusters using K-Means clustering.\"}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/424", "solution": "{\"name\": \"generateSegmentedImages\", \"type\": \"function\", \"signature\": \"(imagePath, nClusters, randomSeed)\", \"return_type\": \"tuple[np.ndarray, np.ndarray]\", \"short_description\": \"Generates segmented images based on KMeans clustering from a provided image file.\"}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/424", "solution": "{\n  \"name\": \"generateImageClusters\",\n  \"type\": \"function\",\n  \"signature\": \"(imagePath, nClusters, randomSeed)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"This function takes an image path, the number of clusters, and a random seed as input. It uses the KMeans algorithm to segment the image into the specified number of clusters and returns the original and segmented images.\"\n}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"performKMeansClustering\",\n  \"type\": \"function\",\n  \"signature\": \"(data, nClusters, randomState, nInit)\",\n  \"return_type\": \"tuple(labels, plt.Axes)\",\n  \"short_description\": \"Performs KMeans clustering on the provided data and returns the cluster labels along with a plot of the clustering visualization.\"\n}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"performKMeansClustering\",\n  \"type\": \"function\",\n  \"signature\": \"(data, nClusters, initMethod='k-means++', nInit=10, maxIter=300, tol=0.0001, verbose=0, randomState=None)\",\n  \"return_type\": \"tuple(np.ndarray, plt.Axes)\",\n  \"short_description\": \"Performs KMeans clustering on the provided data and returns the cluster labels along with a plot of the clustering visualization.\"\n}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"performKMeansClustering\",\n  \"type\": \"function\",\n  \"signature\": \"(data, nClusters, randomState, nInit)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Performs K-Means clustering on the provided data.\"\n}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/443", "solution": "{\"name\": \"performKMeansClustering\", \"type\": \"function\", \"signature\": \"(data, numClusters, initMethod='k-means++', maxIter=300, tol=1e-4, verbose=0, randomState=None, copyX=True, algorithm='lloyd')\", \"return_type\": \"tuple(labels, clusterCenters)\", \"short_description\": \"Performs K-Means clustering on the provided data and returns the cluster labels and the centers.\"}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"performKMeansClustering\",\n  \"type\": \"function\",\n  \"signature\": \"(data, nClusters, randomSeed, initRuns)\",\n  \"return_type\": \"object\",\n  \"short_description\": \"Performs K-Means clustering on the provided data. This function is designed to cluster numerical data points into a specified number of clusters.\"\n}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"runKMeansClustering\",\n  \"type\": \"function\",\n  \"signature\": \"(data, numClusters, randomSeed, initializationCount)\",\n  \"return_type\": \"object\",\n  \"short_description\": \"Performs KMeans clustering on a given dataset and returns clustering results along with plot.\"\n}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"runKMeansClustering\",\n  \"type\": \"function\",\n  \"signature\": \"(data, numClusters, randomSeed, numInit)\",\n  \"return_type\": \"tuple(labels, plt.Axes)\",\n  \"short_description\": \"Performs K-Means clustering on the provided data and returns the cluster labels along with a plot of the clustering result.\"\n}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"performKMeansClustering\",\n  \"type\": \"function\",\n  \"signature\": \"(data, n_clusters, *, randomState=None, nInit=10)\",\n  \"return_type\": \"tuple(labels, plt.Axes)\",\n  \"short_description\": \"Performs KMeans clustering on the provided data and returns the cluster labels along with a visualization plot.\"\n}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"performKMeansClustering\",\n  \"type\": \"function\",\n  \"signature\": \"(data, nClusters, randomSeed, initializationType, numberOfRuns)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Performs KMeans clustering on the provided data.\"\n}"}
{"api_id": 246, "api_name": "sklearn.cluster.KMeans", "task_id": "BigCodeBench/443", "solution": "{\n  \"name\": \"performKMeansClustering\",\n  \"type\": \"function\",\n  \"signature\": \"(data, nClusters, initMethod='k-means++', nInit='auto', maxIter=300, tol=0.0001, randomState=None)\",\n  \"return_type\": \"tuple(labels, clusterCenters)\",\n  \"short_description\": \"Performs K-Means clustering on the given data and returns the cluster labels and the final cluster centers.\"\n}"}
{"api_id": 247, "api_name": "sklearn.decomposition.NMF", "task_id": "BigCodeBench/655", "solution": "{\n  \"name\": \"extractTopics\",\n  \"type\": \"function\",\n  \"signature\": \"(texts, numTopics)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Extracts topics from a list of text documents using Non-Negative Matrix Factorization (NMF).\"\n}"}
{"api_id": 247, "api_name": "sklearn.decomposition.NMF", "task_id": "BigCodeBench/655", "solution": "{\n  \"name\": \"extractTopics\",\n  \"type\": \"function\",\n  \"signature\": \"(texts, numTopics)\",\n  \"return_type\": \"List[List[str]]\",\n  \"short_description\": \"Extracts topics from a list of texts using Non-Negative Matrix Factorization (NMF).\"\n}"}
{"api_id": 247, "api_name": "sklearn.decomposition.NMF", "task_id": "BigCodeBench/655", "solution": "{\n  \"name\": \"extractTopicsFromTexts\",\n  \"type\": \"function\",\n  \"signature\": \"(texts, numTopics)\",\n  \"return_type\": \"Array<Array<string>>\",\n  \"short_description\": \"Extracts topics from a list of texts using Non-Negative Matrix Factorization (NMF).\"\n}"}
{"api_id": 247, "api_name": "sklearn.decomposition.NMF", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"performNMF\", \"type\": \"function\", \"signature\": \"(data, numTopics)\", \"return_type\": \"List[List[str]]\", \"short_description\": \"Performs Non-Negative Matrix Factorization (NMF) on the provided data to extract topics.\"}"}
{"api_id": 247, "api_name": "sklearn.decomposition.NMF", "task_id": "BigCodeBench/655", "solution": "{\n  \"name\": \"extractTopics\",\n  \"type\": \"function\",\n  \"signature\": \"(texts, numTopics)\",\n  \"return_type\": \"List[List[str]]\",\n  \"short_description\": \"Extracts topics from a list of texts using Non-Negative Matrix Factorization (NMF).\"\n}"}
{"api_id": 247, "api_name": "sklearn.decomposition.NMF", "task_id": "BigCodeBench/655", "solution": "{\n  \"name\": \"performNMF\",\n  \"type\": \"function\",\n  \"signature\": \"(data, numComponents, init='random', solver='cd', betaLoss='frobenius', tol=0.0001, maxIter=200, randomState=None, alphaW=0.0, alphaH='same', l1Ratio=0.0, verbose=0, shuffle=False)\",\n  \"return_type\": \"List[List[str]]\",\n  \"short_description\": \"Performs Non-Negative Matrix Factorization (NMF) on the provided data to extract topics.\"\n}"}
{"api_id": 247, "api_name": "sklearn.decomposition.NMF", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"extractTopics\", \"type\": \"function\", \"signature\": \"(texts, numTopics)\", \"return_type\": \"List[List[str]]\", \"short_description\": \"Extracts topics from a list of texts using Non-Negative Matrix Factorization (NMF).\"}"}
{"api_id": 247, "api_name": "sklearn.decomposition.NMF", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"calculateNMF\", \"type\": \"function\", \"signature\": \"(data, numTopics)\", \"return_type\": \"List[List[str]]\", \"short_description\": \"Calculates Non-Negative Matrix Factorization (NMF) topics from given text data.\"}"}
{"api_id": 247, "api_name": "sklearn.decomposition.NMF", "task_id": "BigCodeBench/655", "solution": "{\n  \"name\": \"calculateNmf\",\n  \"type\": \"function\",\n  \"signature\": \"(texts, numTopics)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Calculates Non-Negative Matrix Factorization (NMF) topics from a list of texts.\"\n}"}
{"api_id": 247, "api_name": "sklearn.decomposition.NMF", "task_id": "BigCodeBench/655", "solution": "{\"name\": \"calculateTopics\", \"type\": \"function\", \"signature\": \"(texts, numTopics)\", \"return_type\": \"Array\", \"short_description\": \"Calculates topics from a list of texts using Non-Negative Matrix Factorization (NMF).\"}"}
{"api_id": 248, "api_name": "sklearn.preprocessing.MinMaxScaler", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"transformMinMax\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"ndarray\", \"short_description\": \"Transforms the input data using MinMax scaling.\"}"}
{"api_id": 248, "api_name": "sklearn.preprocessing.MinMaxScaler", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"normalizeData\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Normalizes the data in the input list by applying z-score normalization to counts and MinMax scaling to weights, then returns a DataFrame with the normalized data.\"}"}
{"api_id": 248, "api_name": "sklearn.preprocessing.MinMaxScaler", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"calculateNormalizedData\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"DataFrame\", \"short_description\": \"Calculates and returns a DataFrame with normalized counts and weights using z-score normalization for counts and MinMax scaling for weights.\"}"}
{"api_id": 248, "api_name": "sklearn.preprocessing.MinMaxScaler", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"transformDataRange\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"List[List[float]]\", \"short_description\": \"Transforms the given data using a range transformation, scaling each feature to a given range.\"}"}
{"api_id": 248, "api_name": "sklearn.preprocessing.MinMaxScaler", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"scaleData\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"DataFrame\", \"short_description\": \"Scales and transforms the input data using a MinMaxScaler.\"}"}
{"api_id": 248, "api_name": "sklearn.preprocessing.MinMaxScaler", "task_id": "BigCodeBench/865", "solution": "{\n  \"name\": \"transformMinMax\",\n  \"type\": \"function\",\n  \"signature\": \"(data, feature_range=(0, 1))\",\n  \"return_type\": \"ndarray\",\n  \"short_description\": \"Transforms the input data using MinMax scaling.\"\n}"}
{"api_id": 248, "api_name": "sklearn.preprocessing.MinMaxScaler", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"transformDataRange\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Transforms the given data using a MinMaxScaler and returns a DataFrame with the transformed data.\"}"}
{"api_id": 248, "api_name": "sklearn.preprocessing.MinMaxScaler", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"normalizeData\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"DataFrame\", \"short_description\": \"Normalizes the input data using a combination of z-score normalization for counts and MinMax scaling for weights.\"}"}
{"api_id": 248, "api_name": "sklearn.preprocessing.MinMaxScaler", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"normalizeData\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Normalizes the data in the input list using the Z-score and Min-Max scaling methods and returns a DataFrame with the normalized data.\"}"}
{"api_id": 248, "api_name": "sklearn.preprocessing.MinMaxScaler", "task_id": "BigCodeBench/865", "solution": "{\"name\": \"normalizeData\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"DataFrame\", \"short_description\": \"Normalizes the data using z-score for counts and MinMaxScaler for weights.\"}"}
{"api_id": 248, "api_name": "sklearn.preprocessing.MinMaxScaler", "task_id": "BigCodeBench/969", "solution": "{\"name\": \"calculateNormalizedCumsum\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Transforms a DataFrame by scaling each numeric feature to a given range, including the cumulative sum of the DataFrame.\"}"}
{"api_id": 248, "api_name": "sklearn.preprocessing.MinMaxScaler", "task_id": "BigCodeBench/969", "solution": "{\n  \"name\": \"calculateCumulativeSum\",\n  \"type\": \"function\",\n  \"signature\": \"(dataframe)\",\n  \"return_type\": \"DataFrame\",\n  \"short_description\": \"Calculates the cumulative sum of each numeric column in the input DataFrame.\"\n}"}
{"api_id": 248, "api_name": "sklearn.preprocessing.MinMaxScaler", "task_id": "BigCodeBench/969", "solution": "{\n  \"name\": \"calculate_cumsum_and_normalize\",\n  \"type\": \"function\",\n  \"signature\": \"(df: pd.DataFrame) -> pd.DataFrame\",\n  \"return_type\": \"pd.DataFrame\",\n  \"short_description\": \"Calculates the cumulative sum of each numeric column in the DataFrame and then normalizes the cumulative sums using MinMaxScaler.\"\n}"}
{"api_id": 248, "api_name": "sklearn.preprocessing.MinMaxScaler", "task_id": "BigCodeBench/969", "solution": "{\"name\": \"scaleFeatureRange\", \"type\": \"function\", \"signature\": \"(data, feature_range=(0, 1))\", \"return_type\": \"ndarray\", \"short_description\": \"Scales the features of a given dataset to a specified range.\"}"}
{"api_id": 248, "api_name": "sklearn.preprocessing.MinMaxScaler", "task_id": "BigCodeBench/969", "solution": "{\"name\": \"transformFeatureRange\", \"type\": \"function\", \"signature\": \"(data, feature_range=(0, 1))\", \"return_type\": \"ndarray\", \"short_description\": \"Transforms the input data to a specified feature range using MinMax scaling.\"}"}
{"api_id": 248, "api_name": "sklearn.preprocessing.MinMaxScaler", "task_id": "BigCodeBench/969", "solution": "{\"name\": \"calculateMinMaxScaledCumsum\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame) -> pd.DataFrame\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Transforms the cumulative sum of each numeric column in the DataFrame using MinMaxScaler, returning a DataFrame with the scaled values.\"}"}
{"api_id": 248, "api_name": "sklearn.preprocessing.MinMaxScaler", "task_id": "BigCodeBench/969", "solution": "{\"name\": \"calculateFeatureRange\", \"type\": \"function\", \"signature\": \"(feature_range=(0, 1), data_array)\", \"return_type\": \"ndarray\", \"short_description\": \"Calculate the range for each feature in a given dataset.\"}"}
{"api_id": 248, "api_name": "sklearn.preprocessing.MinMaxScaler", "task_id": "BigCodeBench/969", "solution": "{\"name\": \"transformFeatureRange\", \"type\": \"method\", \"signature\": \"(data, feature_range=(0, 1))\", \"return_type\": \"ndarray\", \"short_description\": \"Transforms the input data to a specified feature range using MinMax scaling.\"}"}
{"api_id": 248, "api_name": "sklearn.preprocessing.MinMaxScaler", "task_id": "BigCodeBench/969", "solution": "{\n  \"name\": \"computeMinMaxScaledData\",\n  \"type\": \"function\",\n  \"signature\": \"(data)\",\n  \"return_type\": \"numpy.ndarray\",\n  \"short_description\": \"Transforms the input data to a specified range using the MinMaxScaler.\"\n}"}
{"api_id": 248, "api_name": "sklearn.preprocessing.MinMaxScaler", "task_id": "BigCodeBench/969", "solution": "{\"name\": \"calculateFeatureRange\", \"type\": \"function\", \"signature\": \"(df, feature_range)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the feature range for each feature in the input DataFrame.\"}"}
{"api_id": 249, "api_name": "sklearn.metrics.roc_curve", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"calculate_roc_curve\",\n  \"type\": \"callable\",\n  \"signature\": \"(y_true, y_score, *, pos_label=None, sample_weight=None)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Computes the Receiver Operating Characteristic (ROC) curve for binary classification tasks.\"\n}"}
{"api_id": 249, "api_name": "sklearn.metrics.roc_curve", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"compute_roc_curve\", \"type\": \"callable\", \"signature\": \"(y_true, y_score, pos_label=None, sample_weight=None, drop_intermediate=True)\", \"return_type\": \"dict\", \"short_description\": \"Computes the Receiver Operating Characteristic (ROC) curve for binary classification tasks. Returns a dictionary containing false positive rates, true positive rates, and thresholds.\"}"}
{"api_id": 249, "api_name": "sklearn.metrics.roc_curve", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"compute_roc_curve\", \"type\": \"callable\", \"signature\": \"(y_true, y_score, pos_label=None, sample_weight=None, drop_intermediate=True)\", \"return_type\": \"dict\", \"short_description\": \"Computes the Receiver Operating Characteristic (ROC) curve for binary classification tasks. Returns a dictionary containing false positive rates, true positive rates, and thresholds.\"}"}
{"api_id": 249, "api_name": "sklearn.metrics.roc_curve", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"calculate_roc_curve\", \"type\": \"callable\", \"signature\": \"(y_true, y_score, pos_label=None, sample_weight=None, drop_intermediate=True)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the Receiver Operating Characteristic (ROC) curve for binary classification tasks. Returns a dictionary containing the false positive rate (fpr), true positive rate (tpr), and thresholds.\"}"}
{"api_id": 249, "api_name": "sklearn.metrics.roc_curve", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"calculate_roc_curve\",\n  \"type\": \"callable\",\n  \"signature\": \"(y_true, y_score, pos_label=None, sample_weight=None, drop_intermediate=True)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Computes the Receiver Operating Characteristic (ROC) curve for binary classification tasks.\"\n}"}
{"api_id": 249, "api_name": "sklearn.metrics.roc_curve", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"calculate_roc_curve\", \"type\": \"callable\", \"signature\": \"(y_true, y_score, pos_label=None, sample_weight=None, drop_intermediate=True)\", \"return_type\": \"dict\", \"short_description\": \"Calculate the Receiver Operating Characteristic (ROC) curve for binary classification tasks.\"}"}
{"api_id": 249, "api_name": "sklearn.metrics.roc_curve", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"calculate_roc_curve\",\n  \"type\": \"callable\",\n  \"signature\": \"(y_true, y_score, pos_label=None, sample_weight=None, drop_intermediate=True)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Computes the Receiver Operating Characteristic (ROC) curve for binary classification tasks.\"\n}"}
{"api_id": 249, "api_name": "sklearn.metrics.roc_curve", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"compute_roc_curve\",\n  \"type\": \"callable\",\n  \"signature\": \"(y_true, y_score, *, pos_label=None, sample_weight=None, drop_intermediate=True)\",\n  \"return_type\": \"tuple(ndarray, ndarray, ndarray)\",\n  \"short_description\": \"Computes the Receiver Operating Characteristic (ROC) curve for binary classification tasks.\"\n}"}
{"api_id": 249, "api_name": "sklearn.metrics.roc_curve", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"calculate_roc_curve\", \"type\": \"callable\", \"signature\": \"(y_true, y_score, pos_label=None, sample_weight=None, drop_intermediate=True)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the Receiver Operating Characteristic (ROC) curve.\"}"}
{"api_id": 249, "api_name": "sklearn.metrics.roc_curve", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"calculate_roc_curve\", \"type\": \"callable\", \"signature\": \"(y_true, y_score, pos_label=None, sample_weight=None, drop_intermediate=True)\", \"return_type\": \"{'fpr': ndarray, 'tpr': ndarray, 'thresholds': ndarray}\", \"short_description\": \"Calculate the Receiver Operating Characteristic (ROC) curve for binary classification tasks.\"}"}
{"api_id": 250, "api_name": "smtplib.SMTPAuthenticationError", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(server, port, username, password, recipient, subject, message)\", \"return_type\": \"None\", \"short_description\": \"Sends an email using the provided SMTP server details and message content.\"}"}
{"api_id": 250, "api_name": "smtplib.SMTPAuthenticationError", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(server, port, username, password, recipient, subject, message)\", \"return_type\": \"None\", \"short_description\": \"Sends an email via the specified SMTP server.\"}"}
{"api_id": 250, "api_name": "smtplib.SMTPAuthenticationError", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(server, port, username, password, recipient, subject, message)\", \"return_type\": \"None\", \"short_description\": \"Sends an email using the provided SMTP server credentials and message details.\"}"}
{"api_id": 250, "api_name": "smtplib.SMTPAuthenticationError", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(server, port, username, password, recipient, subject, message)\", \"return_type\": \"None\", \"short_description\": \"Sends an email through an SMTP server.\"}"}
{"api_id": 250, "api_name": "smtplib.SMTPAuthenticationError", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(server, port, username, password, recipient, subject, message)\", \"return_type\": \"None\", \"short_description\": \"Sends an email using the provided SMTP server details and message content.\"}"}
{"api_id": 250, "api_name": "smtplib.SMTPAuthenticationError", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(server, port, username, password, recipient, subject, message)\", \"return_type\": \"None\", \"short_description\": \"Sends an email through the specified SMTP server.\"}"}
{"api_id": 250, "api_name": "smtplib.SMTPAuthenticationError", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(server, port, username, password, recipient, subject, message)\", \"return_type\": \"None\", \"short_description\": \"Sends an email through an SMTP server.\"}"}
{"api_id": 250, "api_name": "smtplib.SMTPAuthenticationError", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(server, port, username, password, recipient, subject, message)\", \"return_type\": \"None\", \"short_description\": \"Sends an email through a specified SMTP server.\"}"}
{"api_id": 250, "api_name": "smtplib.SMTPAuthenticationError", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(server, port, username, password, recipient, subject, message)\", \"return_type\": \"None\", \"short_description\": \"Sends an email through a specified SMTP server.\"}"}
{"api_id": 250, "api_name": "smtplib.SMTPAuthenticationError", "task_id": "BigCodeBench/274", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(server, port, username, password, recipient, subject, message)\", \"return_type\": \"None\", \"short_description\": \"Sends an email through an SMTP server.\"}"}
{"api_id": 251, "api_name": "smtplib.SMTP", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(fromEmail, toEmail, subject, message, smtpServer, smtpPort)\", \"return_type\": \"None\", \"short_description\": \"Sends an email from a specified sender to a recipient using an SMTP server.\"}"}
{"api_id": 251, "api_name": "smtplib.SMTP", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(from, to, subject, content, smtpServer, smtpPort)\", \"return_type\": \"None\", \"short_description\": \"Sends an email from the specified sender to the specified recipient using the provided SMTP server and port.\"}"}
{"api_id": 251, "api_name": "smtplib.SMTP", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(sender, recipient, subject, message, smtpServer, smtpPort)\", \"return_type\": \"None\", \"short_description\": \"Sends an email from a sender to a recipient using an SMTP server.\"}"}
{"api_id": 251, "api_name": "smtplib.SMTP", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(from_email, to_email, subject, message, smtp_server='smtp.gmail.com', smtp_port=587)\", \"return_type\": \"None\", \"short_description\": \"Sends an email from one user to another using an SMTP server.\"}"}
{"api_id": 251, "api_name": "smtplib.SMTP", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(from, to, subject, content, smtpServer, smtpPort)\", \"return_type\": \"None\", \"short_description\": \"Sends an email from a specified sender to a recipient using an SMTP server.\"}"}
{"api_id": 251, "api_name": "smtplib.SMTP", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(from, to, subject, content, smtpServer, smtpPort)\", \"return_type\": \"None\", \"short_description\": \"Sends an email from the specified sender to the specified recipient using the provided SMTP server and port.\"}"}
{"api_id": 251, "api_name": "smtplib.SMTP", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(from_email, to_email, subject, message, smtp_server, smtp_port)\", \"return_type\": \"None\", \"short_description\": \"Sends an email from one user to another using an SMTP server.\"}"}
{"api_id": 251, "api_name": "smtplib.SMTP", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(fromEmail, toEmail, subject, message, smtpServer, smtpPort)\", \"return_type\": \"None\", \"short_description\": \"Sends an email from one user to another using an SMTP server.\"}"}
{"api_id": 251, "api_name": "smtplib.SMTP", "task_id": "BigCodeBench/1042", "solution": "{\"name\": \"sendEmail\", \"type\": \"function\", \"signature\": \"(from_email, to_email, subject, content, smtp_server='smtp.gmail.com', smtp_port=587)\", \"return_type\": \"None\", \"short_description\": \"Sends an email from a specified sender to a recipient using an SMTP server.\"}"}
{"api_id": 251, "api_name": "smtplib.SMTP", "task_id": "BigCodeBench/1042", "solution": "{\n  \"name\": \"sendEmail\",\n  \"type\": \"function\",\n  \"signature\": \"(senderEmail, recipientEmail, subject, messageContent, smtpServer='localhost', smtpPort=25)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sends an email from a specified sender to a recipient using an SMTP server.\"\n}"}
{"api_id": 252, "api_name": "socket.AF_INET", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"getOpenPorts\", \"type\": \"function\", \"signature\": \"getOpenPorts(ipRange: str, port: int) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Scans a given IP range and returns a dictionary indicating whether each IP address has an open port at the specified port number.\"}"}
{"api_id": 252, "api_name": "socket.AF_INET", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"getOpenPorts\", \"type\": \"function\", \"signature\": \"def getOpenPorts(ipRange: str, port: int) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Scans a given IP range and returns a dictionary indicating which ports are open.\"}"}
{"api_id": 252, "api_name": "socket.AF_INET", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"getNetworkDetails\", \"type\": \"function\", \"signature\": \"getNetworkDetails(ipRange: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed information about a network range, including open ports and status.\"}"}
{"api_id": 252, "api_name": "socket.AF_INET", "task_id": "BigCodeBench/147", "solution": "{\n  \"name\": \"scan_ports\",\n  \"type\": \"function\",\n  \"signature\": \"scan_ports(ip_range: str, port: int) -> dict\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Scans the specified IP range for open ports at the given port number.\"\n}"}
{"api_id": 252, "api_name": "socket.AF_INET", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"fetchNetworkPorts\", \"type\": \"function\", \"signature\": \"def fetchNetworkPorts(ipRange: str, port: int) -> dict[str, bool]:\", \"return_type\": \"dict[str, bool]\", \"short_description\": \"Scans a network range for open ports on a specified port.\"}"}
{"api_id": 252, "api_name": "socket.AF_INET", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"getNetworkDeviceStatus\", \"type\": \"function\", \"signature\": \"getNetworkDeviceStatus(ipRange: str, port: int) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the status of network devices within a specified IP range and port.\"}"}
{"api_id": 252, "api_name": "socket.AF_INET", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"fetchNetworkDevices\", \"type\": \"function\", \"signature\": \"def fetchNetworkDevices(ipRange: str, port: int) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Discovers devices within a given network range by scanning open ports.\"}"}
{"api_id": 252, "api_name": "socket.AF_INET", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"getNetworkPorts\", \"type\": \"function\", \"signature\": \"getNetworkPorts(ipRange: str, port: int) -> Dict[str, bool]\", \"return_type\": \"Dict[str, bool]\", \"short_description\": \"Scans a network range to find open ports.\"}"}
{"api_id": 252, "api_name": "socket.AF_INET", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"fetchNetworkPorts\", \"type\": \"function\", \"signature\": \"def fetchNetworkPorts(ipRange: str, port: int) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Scans a given network range for open ports on a specified port number.\"}"}
{"api_id": 252, "api_name": "socket.AF_INET", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"enumerateIPAddresses\", \"type\": \"function\", \"signature\": \"def enumerateIPAddresses(ipRange: str) -> list\", \"return_type\": \"list\", \"short_description\": \"Returns a list of IP addresses within the specified range.\"}"}
{"api_id": 252, "api_name": "socket.AF_INET", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createTCPServer\", \"type\": \"function\", \"signature\": \"createTCPServer(address, port, bufferSize, duration)\", \"return_type\": \"str\", \"short_description\": \"Creates a TCP server that listens for connections, receives messages, and sends responses for a specified duration.\"}"}
{"api_id": 252, "api_name": "socket.AF_INET", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createNetworkServer\", \"type\": \"function\", \"signature\": \"createNetworkServer(addressFamily, socketType)\", \"return_type\": \"socket\", \"short_description\": \"Creates a network server socket with the specified address family and socket type.\"}"}
{"api_id": 252, "api_name": "socket.AF_INET", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createNetworkServer\", \"type\": \"function\", \"signature\": \"createNetworkServer(addressFamily, socketType, bufferSize, duration)\", \"return_type\": \"str\", \"short_description\": \"Creates a network server socket and listens for incoming connections within a specified duration.\"}"}
{"api_id": 252, "api_name": "socket.AF_INET", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createServerConnection\", \"type\": \"function\", \"signature\": \"(server_address, server_port)\", \"return_type\": \"tuple\", \"short_description\": \"Creates a server connection with the given address and port.\"}"}
{"api_id": 252, "api_name": "socket.AF_INET", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createTCPServer\", \"type\": \"function\", \"signature\": \"(server_address, server_port, buffer_size, run_duration)\", \"return_type\": \"str\", \"short_description\": \"Creates and starts a TCP server that listens for connections and handles incoming data for a specified duration.\"}"}
{"api_id": 252, "api_name": "socket.AF_INET", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createTCPServer\", \"type\": \"function\", \"signature\": \"(server_address: str, server_port: int, buffer_size: int, run_duration: int) -> str\", \"return_type\": \"str\", \"short_description\": \"Creates and runs a TCP server for a specified duration.\"}"}
{"api_id": 252, "api_name": "socket.AF_INET", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createTCPServer\", \"type\": \"function\", \"signature\": \"createTCPServer(address, port, bufferSize, duration)\", \"return_type\": \"str\", \"short_description\": \"Creates and starts a TCP server listening on the specified address and port for the given duration.\"}"}
{"api_id": 252, "api_name": "socket.AF_INET", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createNetworkServer\", \"type\": \"function\", \"signature\": \"create_network_server(address, port, buffer_size, duration)\", \"return_type\": \"str\", \"short_description\": \"Creates and starts a network server on the specified address and port for the given duration.\"}"}
{"api_id": 252, "api_name": "socket.AF_INET", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createTCPServer\", \"type\": \"function\", \"signature\": \"server_address, server_port, buffer_size, run_duration\", \"return_type\": \"str\", \"short_description\": \"Creates and starts a TCP server that listens for connections and handles incoming data for a specified duration.\"}"}
{"api_id": 252, "api_name": "socket.AF_INET", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createNetworkServer\", \"type\": \"function\", \"signature\": \"server_address, server_port, buffer_size, run_duration\", \"return_type\": \"str\", \"short_description\": \"Creates and starts a network server listening on the specified address and port, with the ability to run for a specified duration.\"}"}
{"api_id": 253, "api_name": "socket.error", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"fetchPortStatus\", \"type\": \"function\", \"signature\": \"fetchPortStatus(ipRange: str, port: int) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Scans a given IP range and checks if a specific port is open on each IP address.\"}"}
{"api_id": 253, "api_name": "socket.error", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"scanPorts\", \"type\": \"function\", \"signature\": \"scan_ports(ip_range, port)\", \"return_type\": \"dict\", \"short_description\": \"Scans a range of IP addresses for open ports.\"}"}
{"api_id": 253, "api_name": "socket.error", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"fetchNetworkStatus\", \"type\": \"function\", \"signature\": \"fetchNetworkStatus(ipRange: str, port: int) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Scans a network range and checks for open ports.\"}"}
{"api_id": 253, "api_name": "socket.error", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"getOpenPorts\", \"type\": \"function\", \"signature\": \"def getOpenPorts(ipRange: str, port: int) -> dict[str, bool]:\", \"return_type\": \"dict[str, bool]\", \"short_description\": \"Scans a given IP range and returns a dictionary indicating whether each IP has an open port at the specified port number.\"}"}
{"api_id": 253, "api_name": "socket.error", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"getOpenPorts\", \"type\": \"function\", \"signature\": \"def getOpenPorts(ipRange: str, port: int) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Scans a given IP range for open ports and returns a dictionary indicating which ports are open on which IPs.\"}"}
{"api_id": 253, "api_name": "socket.error", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"getNetworkDevices\", \"type\": \"function\", \"signature\": \"def getNetworkDevices(ipRange: str, port: int) -> dict[str, bool]:\", \"return_type\": \"dict[str, bool]\", \"short_description\": \"Scans a network range to identify devices that are open on a specified port.\"}"}
{"api_id": 253, "api_name": "socket.error", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"scan_network\", \"type\": \"function\", \"signature\": \"def scan_network(ip_range: str, port: int) -> dict[str, bool]:\", \"return_type\": \"dict[str, bool]\", \"short_description\": \"Scans a network range for open ports.\"}"}
{"api_id": 253, "api_name": "socket.error", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"getOpenPorts\", \"type\": \"function\", \"signature\": \"def getOpenPorts(ipRange: str, port: int) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Scans a given IP range and returns a dictionary indicating which ports are open.\"}"}
{"api_id": 253, "api_name": "socket.error", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"fetchNetworkPorts\", \"type\": \"function\", \"signature\": \"fetchNetworkPorts(ipRange: str, port: int) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Scans a given network range to check which IP addresses are open on a specified port.\"}"}
{"api_id": 253, "api_name": "socket.error", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"checkNetworkPorts\", \"type\": \"function\", \"signature\": \"check_network_ports(ip_range, port)\", \"return_type\": \"dict\", \"short_description\": \"Checks which IP addresses in a given network range are open for a specific port.\"}"}
{"api_id": 254, "api_name": "socket.SOCK_STREAM", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"scan_ports\", \"type\": \"function\", \"signature\": \"def scan_ports(ip_range, port)\", \"return_type\": \"dict\", \"short_description\": \"Scans a given IP range for open ports.\"}"}
{"api_id": 254, "api_name": "socket.SOCK_STREAM", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"getOpenPorts\", \"type\": \"function\", \"signature\": \"def getOpenPorts(ipRange: str, port: int) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Scans the specified IP range for open ports and returns a dictionary indicating whether each port is open or closed.\"}"}
{"api_id": 254, "api_name": "socket.SOCK_STREAM", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"scanNetworkPorts\", \"type\": \"function\", \"signature\": \"scanNetworkPorts(ipRange: str, port: int) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Scans a network range to find open ports.\"}"}
{"api_id": 254, "api_name": "socket.SOCK_STREAM", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"scanNetworkPorts\", \"type\": \"function\", \"signature\": \"def scanNetworkPorts(ip_range: str, port: int) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Scans a network range for open ports on a specified port number.\"}"}
{"api_id": 254, "api_name": "socket.SOCK_STREAM", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"scanOpenPorts\", \"type\": \"function\", \"signature\": \"def scanOpenPorts(ip_range, port)\", \"return_type\": \"dict\", \"short_description\": \"Scans a range of IP addresses for open ports on a specified port.\"}"}
{"api_id": 254, "api_name": "socket.SOCK_STREAM", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"checkNetworkPorts\", \"type\": \"function\", \"signature\": \"def checkNetworkPorts(ipRange: str, port: int) -> dict[str, bool]:\", \"return_type\": \"dict[str, bool]\", \"short_description\": \"Checks the availability of specified ports within a given IP range.\"}"}
{"api_id": 254, "api_name": "socket.SOCK_STREAM", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"scanPorts\", \"type\": \"function\", \"signature\": \"def scan_ports(ip_range, port):\", \"return_type\": \"dict\", \"short_description\": \"Scans a range of IP addresses for open ports.\"}"}
{"api_id": 254, "api_name": "socket.SOCK_STREAM", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"getOpenPorts\", \"type\": \"function\", \"signature\": \"(ipRange: str, port: int) => Dict[str, bool]\", \"return_type\": \"Dict[str, bool]\", \"short_description\": \"Returns a dictionary indicating which ports are open for a given IP range.\"}"}
{"api_id": 254, "api_name": "socket.SOCK_STREAM", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"scanNetworkPorts\", \"type\": \"function\", \"signature\": \"scanNetworkPorts(ipRange: str, port: int) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Scans a network range to find open ports.\"}"}
{"api_id": 254, "api_name": "socket.SOCK_STREAM", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"generateNetworkReport\", \"type\": \"function\", \"signature\": \"generateNetworkReport(ipRange: str, port: int) -> Dict[str, bool]\", \"return_type\": \"Dict[str, bool]\", \"short_description\": \"Generates a report on the open ports within a given network range.\"}"}
{"api_id": 254, "api_name": "socket.SOCK_STREAM", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"generateServerLog\", \"type\": \"function\", \"signature\": \"generateServerLog(serverAddress, serverPort, bufferSize, runDuration)\", \"return_type\": \"str\", \"short_description\": \"Starts a server and generates a log of its operations.\"}"}
{"api_id": 254, "api_name": "socket.SOCK_STREAM", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createNetworkServer\", \"type\": \"function\", \"signature\": \"createNetworkServer(address, port, bufferSize, duration)\", \"return_type\": \"str\", \"short_description\": \"Creates a network server that listens for connections and handles data exchange for a specified duration.\"}"}
{"api_id": 254, "api_name": "socket.SOCK_STREAM", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createNetworkServer\", \"type\": \"function\", \"signature\": \"createNetworkServer(address, port, bufferSize, duration)\", \"return_type\": \"str\", \"short_description\": \"Creates a network server that listens for connections and handles incoming data for a specified duration.\"}"}
{"api_id": 254, "api_name": "socket.SOCK_STREAM", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createNetworkServer\", \"type\": \"function\", \"signature\": \"createNetworkServer(address, port, bufferSize, duration)\", \"return_type\": \"str\", \"short_description\": \"Creates and starts a network server that listens for incoming TCP connections and handles them for a specified duration.\"}"}
{"api_id": 254, "api_name": "socket.SOCK_STREAM", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createNetworkServer\", \"type\": \"function\", \"signature\": \"createNetworkServer(address, port, bufferSize, duration)\", \"return_type\": \"str\", \"short_description\": \"Creates a network server that listens for incoming TCP connections and handles them for a specified duration.\"}"}
{"api_id": 254, "api_name": "socket.SOCK_STREAM", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"generateTimestamp\", \"type\": \"function\", \"signature\": \"() => string\", \"return_type\": \"string\", \"short_description\": \"Generates a timestamp string in the format 'YYYY-MM-DD HH:MM:SS'.\"}"}
{"api_id": 254, "api_name": "socket.SOCK_STREAM", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createSocket\", \"type\": \"function\", \"signature\": \"(address, port, bufferSize, duration)\", \"return_type\": \"str\", \"short_description\": \"Creates and manages a TCP socket server for a specified duration.\"}"}
{"api_id": 254, "api_name": "socket.SOCK_STREAM", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"generateServerReport\", \"type\": \"function\", \"signature\": \"generateServerReport(serverAddress, serverPort, bufferSize, runDuration)\", \"return_type\": \"str\", \"short_description\": \"Generates a report for a server based on its address, port, buffer size, and run duration.\"}"}
{"api_id": 254, "api_name": "socket.SOCK_STREAM", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"getNetworkInterfaces\", \"type\": \"function\", \"signature\": \"() => Array<string>\", \"return_type\": \"Array<string>\", \"short_description\": \"Retrieves a list of network interfaces available on the system.\"}"}
{"api_id": 254, "api_name": "socket.SOCK_STREAM", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"fetchServerStatus\", \"type\": \"function\", \"signature\": \"fetchServerStatus(serverAddress, serverPort)\", \"return_type\": \"str\", \"short_description\": \"Fetches the current status of a server.\"}"}
{"api_id": 255, "api_name": "socket.socket", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"createNetworkScanner\", \"type\": \"function\", \"signature\": \"(ipRange, port)\", \"return_type\": \"dict\", \"short_description\": \"Scans a network range for open ports and returns a dictionary indicating whether each IP address has an open port at the specified port number.\"}"}
{"api_id": 255, "api_name": "socket.socket", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"createNetworkScan\", \"type\": \"function\", \"signature\": \"(ipRange, port)\", \"return_type\": \"dict\", \"short_description\": \"Initiates a network scan on the specified IP range to check for open ports.\"}"}
{"api_id": 255, "api_name": "socket.socket", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"createNetworkScanner\", \"type\": \"function\", \"signature\": \"(ipRange, port)\", \"return_type\": \"dict\", \"short_description\": \"Scans a network range for open ports on a specified port.\"}"}
{"api_id": 255, "api_name": "socket.socket", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"createNetworkScanner\", \"type\": \"function\", \"signature\": \"(ipRange, port)\", \"return_type\": \"dict\", \"short_description\": \"Scans a network range for open ports.\"}"}
{"api_id": 255, "api_name": "socket.socket", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"generateNetworkScan\", \"type\": \"function\", \"signature\": \"(network_range, port)\", \"return_type\": \"dict\", \"short_description\": \"Initiates a network scan on the specified IP range to check for open ports.\"}"}
{"api_id": 255, "api_name": "socket.socket", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"createNetworkScanner\", \"type\": \"function\", \"signature\": \"(ipRange, port)\", \"return_type\": \"dict\", \"short_description\": \"Scans a network range for open ports on a specified port.\"}"}
{"api_id": 255, "api_name": "socket.socket", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"createNetworkScanner\", \"type\": \"function\", \"signature\": \"(ipRange, port)\", \"return_type\": \"dict\", \"short_description\": \"Scans a given IP range for open ports on a specified port.\"}"}
{"api_id": 255, "api_name": "socket.socket", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"createSocket\", \"type\": \"function\", \"signature\": \"(family=-1, type=-1, proto=-1)\", \"return_type\": \"socket object\", \"short_description\": \"Creates a new socket object with the specified family, type, and protocol.\"}"}
{"api_id": 255, "api_name": "socket.socket", "task_id": "BigCodeBench/147", "solution": "{\n  \"name\": \"create_udp_socket\",\n  \"type\": \"function\",\n  \"signature\": \"(family=-1, type=socket.SOCK_DGRAM, proto=-1)\",\n  \"return_type\": \"socket.socket\",\n  \"short_description\": \"Creates a UDP socket object for sending and receiving datagram packets.\"\n}"}
{"api_id": 255, "api_name": "socket.socket", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"generateNetworkScan\", \"type\": \"function\", \"signature\": \"(ip_range, port)\", \"return_type\": \"dict\", \"short_description\": \"Initiates a network scan on the specified IP range for open ports.\"}"}
{"api_id": 255, "api_name": "socket.socket", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"(length=10)\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of a specified length.\"}"}
{"api_id": 255, "api_name": "socket.socket", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createTCPServer\", \"type\": \"function\", \"signature\": \"(address='localhost', port=12345, bufferSize=1024, duration=5)\", \"return_type\": \"str\", \"short_description\": \"Creates a TCP server that listens for connections, handles incoming data, and runs for a specified duration.\"}"}
{"api_id": 255, "api_name": "socket.socket", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createNetworkSocket\", \"type\": \"function\", \"signature\": \"(family=-1, type=-1, proto=-1)\", \"return_type\": \"socket\", \"short_description\": \"Creates a new network socket with the specified family, type, and protocol.\"}"}
{"api_id": 255, "api_name": "socket.socket", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createServer\", \"type\": \"function\", \"signature\": \"(address='localhost', port=12345, bufferSize=1024, duration=5)\", \"return_type\": \"str\", \"short_description\": \"Creates and starts a TCP server that listens on the specified address and port, and runs for the specified duration. Returns a confirmation message.\"}"}
{"api_id": 255, "api_name": "socket.socket", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"generate_response\", \"type\": \"function\", \"signature\": \"(data, delay)\", \"return_type\": \"str\", \"short_description\": \"Generates a response string after a specified delay.\"}"}
{"api_id": 255, "api_name": "socket.socket", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createCustomSocket\", \"type\": \"function\", \"signature\": \"(family=-1, type=-1, proto=-1)\", \"return_type\": \"socket\", \"short_description\": \"Creates a custom socket with specified parameters.\"}"}
{"api_id": 255, "api_name": "socket.socket", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createNetworkServer\", \"type\": \"function\", \"signature\": \"(address='localhost', port=12345, bufferSize=1024, duration=5)\", \"return_type\": \"str\", \"short_description\": \"Creates a network server that listens for connections and handles incoming data for a specified duration.\"}"}
{"api_id": 255, "api_name": "socket.socket", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createTCPServer\", \"type\": \"function\", \"signature\": \"(address='localhost', port=12345, bufferSize=1024, duration=5)\", \"return_type\": \"str\", \"short_description\": \"Creates and starts a TCP server that listens for connections and handles data exchange for a specified duration.\"}"}
{"api_id": 255, "api_name": "socket.socket", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"(data={}, reportType='summary')\", \"return_type\": \"str\", \"short_description\": \"Generates a report based on the provided data and report type.\"}"}
{"api_id": 255, "api_name": "socket.socket", "task_id": "BigCodeBench/1040", "solution": "{\"name\": \"createNetworkServer\", \"type\": \"function\", \"signature\": \"(address='localhost', port=12345, bufferSize=1024, duration=5)\", \"return_type\": \"str\", \"short_description\": \"Creates a network server that listens for connections and sends received messages to clients. The server runs for a specified duration.\"}"}
{"api_id": 256, "api_name": "soundfile.read", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"read_audio_file\",\n  \"type\": \"callable\",\n  \"signature\": \"(file_path, frames=-1, start=0, stop=None, dtype='float64', always_2d=False, fill_value=None, out=None, samplerate=None, channels=None, format=None, subtype=None, endian=None, closefd=True)\",\n  \"return_type\": \"tuple[numpy.ndarray, int]\",\n  \"short_description\": \"Reads audio data from a file and returns it as a NumPy array along with the sample rate.\"\n}"}
{"api_id": 256, "api_name": "soundfile.read", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"read_audio_file\",\n  \"type\": \"callable\",\n  \"signature\": \"(file_path, frames=-1, start=0, stop=None, dtype='float64', always_2d=False, fill_value=None, out=None, samplerate=None, channels=None, format=None, subtype=None, endian=None, closefd=True)\",\n  \"return_type\": \"tuple(numpy.ndarray, int)\",\n  \"short_description\": \"Reads audio data from a sound file and returns it as a NumPy array along with the sample rate.\"\n}"}
{"api_id": 256, "api_name": "soundfile.read", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"readSoundFile\",\n  \"type\": \"callable\",\n  \"signature\": \"(file, dtype='float64', always_2d=False, samplerate=None, fill_value=None, out=None)\",\n  \"return_type\": \"tuple[numpy.ndarray, int]\",\n  \"short_description\": \"Reads audio data from a sound file and returns it as a NumPy array along with the samplerate.\"\n}"}
{"api_id": 256, "api_name": "soundfile.read", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"readAudioFile\", \"type\": \"callable\", \"signature\": \"(file_path, dtype='float64', always_2d=False)\", \"return_type\": \"tuple[numpy.ndarray, int]\", \"short_description\": \"Reads an audio file and returns the audio data and its sample rate.\"}"}
{"api_id": 256, "api_name": "soundfile.read", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"readSoundFile\", \"type\": \"function\", \"signature\": \"(filePath, frames=-1, start=0, stop=None, dtype='float64', always_2d=False, fill_value=None, out=None, samplerate=None, channels=None, format=None, subtype=None, endian=None, closefd=True)\", \"return_type\": \"tuple\", \"short_description\": \"Reads audio data from a sound file and returns it as a NumPy array along with the samplerate.\"}"}
{"api_id": 256, "api_name": "soundfile.read", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"read_audio_file\",\n  \"type\": \"callable\",\n  \"signature\": \"(file_path, frames=-1, start=0, stop=None, dtype='float64', always_2d=False, fill_value=None, out=None, samplerate=None, channels=None, format=None, subtype=None, endian=None, closefd=True)\",\n  \"return_type\": \"tuple[numpy.ndarray, int]\",\n  \"short_description\": \"Reads audio data from a file and returns it as a NumPy array along with the sample rate.\"\n}"}
{"api_id": 256, "api_name": "soundfile.read", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculateSoundPressureLevel\", \"type\": \"function\", \"signature\": \"(data, samplerate)\", \"return_type\": \"float\", \"short_description\": \"Calculate the Sound Pressure Level (SPL) of the audio data.\"}"}
{"api_id": 256, "api_name": "soundfile.read", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"read_audio_file\",\n  \"type\": \"callable\",\n  \"signature\": \"(file_path, frames=-1, start=0, stop=None, dtype='float64', always_2d=False, fill_value=None, out=None, samplerate=None, channels=None, format=None, subtype=None, endian=None, closefd=True)\",\n  \"return_type\": \"tuple(numpy.ndarray, int)\",\n  \"short_description\": \"Provides audio data from a sound file as NumPy array with metadata.\"\n}"}
{"api_id": 256, "api_name": "soundfile.read", "task_id": "BigCodeBench/227", "solution": "{\"name\": \"calculateSoundPressureLevel\", \"type\": \"function\", \"signature\": \"(audioData, samplerate)\", \"return_type\": \"tuple(float, np.ndarray)\", \"short_description\": \"Calculate the sound pressure level (SPL) from audio data.\"}"}
{"api_id": 256, "api_name": "soundfile.read", "task_id": "BigCodeBench/227", "solution": "{\n  \"name\": \"readAudioFile\",\n  \"type\": \"callable\",\n  \"signature\": \"(file, dtype='float64', always_2d=False, samplerate=None)\",\n  \"return_type\": \"tuple[numpy.ndarray, int]\",\n  \"short_description\": \"Reads an audio file and returns its data and sample rate.\"\n}"}
{"api_id": 257, "api_name": "sqlite3.DatabaseError", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetch_webpage_data\", \"type\": \"function\", \"signature\": \"fetch_webpage_data(url: str, database_name: str = 'my_database.db') -> dict\", \"return_type\": \"dict\", \"short_description\": \"Fetches data from a webpage and stores it in a SQLite database.\"}"}
{"api_id": 257, "api_name": "sqlite3.DatabaseError", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchAndStoreData\", \"type\": \"function\", \"signature\": \"(webpage_url: str, database_name: str = 'my_database.db') -> int\", \"return_type\": \"int\", \"short_description\": \"Fetches data from a webpage and stores it in a SQLite database.\"}"}
{"api_id": 257, "api_name": "sqlite3.DatabaseError", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchAndStoreData\", \"type\": \"function\", \"signature\": \"fetchAndStoreData(webpageUrl: str, databaseName: str = 'my_database.db') -> int\", \"return_type\": \"int\", \"short_description\": \"Fetches data from a webpage and stores it in a SQLite database.\"}"}
{"api_id": 257, "api_name": "sqlite3.DatabaseError", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchAndStoreData\", \"type\": \"function\", \"signature\": \"fetchAndStoreData(webpage_url: str, database_name: str = 'my_database.db') -> int\", \"return_type\": \"int\", \"short_description\": \"Fetches data from a webpage and stores it in a SQLite database.\"}"}
{"api_id": 257, "api_name": "sqlite3.DatabaseError", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"generate_word_cloud\", \"type\": \"function\", \"signature\": \"generate_word_cloud(text: str, font_path: str = 'sans-serif', width: int = 800, height: int = 400, background_color: str = 'white') -> None\", \"return_type\": \"None\", \"short_description\": \"Generates a word cloud from the provided text. This function uses the WordCloud library to create visual representations of word frequencies.\"}"}
{"api_id": 257, "api_name": "sqlite3.DatabaseError", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchHtmlData\", \"type\": \"function\", \"signature\": \"(webpage_url: str, database_name: str = 'my_database.db') -> int\", \"return_type\": \"int\", \"short_description\": \"Fetches data from a webpage and stores it in a SQLite database.\"}"}
{"api_id": 257, "api_name": "sqlite3.DatabaseError", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchAndStoreData\", \"type\": \"function\", \"signature\": \"fetchAndStoreData(webpage_url: str, database_name: str = 'my_database.db') -> int\", \"return_type\": \"int\", \"short_description\": \"Fetches data from a webpage and stores it in a SQLite database.\"}"}
{"api_id": 257, "api_name": "sqlite3.DatabaseError", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchWebpageData\", \"type\": \"function\", \"signature\": \"fetchWebpageData(url: str, databaseName: str = \\\"default.db\\\") -> int\", \"return_type\": \"int\", \"short_description\": \"Fetches data from a webpage and stores it in a SQLite database.\"}"}
{"api_id": 257, "api_name": "sqlite3.DatabaseError", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchHtmlData\", \"type\": \"function\", \"signature\": \"fetchHtmlData(url: str, databaseName: str = 'my_database.db') -> int\", \"return_type\": \"int\", \"short_description\": \"Fetches data from a webpage and stores it in a SQLite database.\"}"}
{"api_id": 257, "api_name": "sqlite3.DatabaseError", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetch_webpage_data\", \"type\": \"function\", \"signature\": \"fetch_webpage_data(url: str, database_name: str = 'my_database.db') -> int\", \"return_type\": \"int\", \"short_description\": \"Fetches data from a webpage and stores it in a SQLite database.\"}"}
{"api_id": 258, "api_name": "sqlite3.connect", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetch_webpage_data\", \"type\": \"function\", \"signature\": \"fetch_webpage_data(url: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Fetches the content of a webpage and returns it as a dictionary with page title and body.\"}"}
{"api_id": 258, "api_name": "sqlite3.connect", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchAndStoreData\", \"type\": \"function\", \"signature\": \"fetchAndStoreData(webpage_url: str, database_name: str = \\\"my_database.db\\\") -> int\", \"return_type\": \"int\", \"short_description\": \"Fetches data from a webpage and stores it in an SQLite database.\"}"}
{"api_id": 258, "api_name": "sqlite3.connect", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchHtmlContent\", \"type\": \"function\", \"signature\": \"fetchHtmlContent(url: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Fetches the HTML content of a webpage given its URL.\"}"}
{"api_id": 258, "api_name": "sqlite3.connect", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetch_webpage_data\", \"type\": \"function\", \"signature\": \"fetch_webpage_data(url: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Fetches the content of a webpage and returns it as a dictionary of parsed HTML data.\"}"}
{"api_id": 258, "api_name": "sqlite3.connect", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetch_webpage_data\", \"type\": \"function\", \"signature\": \"fetch_webpage_data(url: str, database_name: str = 'my_database.db') -> int\", \"return_type\": \"int\", \"short_description\": \"Fetches data from a webpage and stores it in an SQLite database. Returns the number of rows stored.\"}"}
{"api_id": 258, "api_name": "sqlite3.connect", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchAndStoreData\", \"type\": \"function\", \"signature\": \"fetchAndStoreData(webpage_url: str, database_name: str = 'my_database.db') -> int\", \"return_type\": \"int\", \"short_description\": \"Fetches data from a webpage and stores it in an SQLite database.\"}"}
{"api_id": 258, "api_name": "sqlite3.connect", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchHtmlData\", \"type\": \"function\", \"signature\": \"fetchHtmlData(url: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Fetches HTML content from a given URL and returns it as a dictionary.\"}"}
{"api_id": 258, "api_name": "sqlite3.connect", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchHtmlContent\", \"type\": \"function\", \"signature\": \"fetchHtmlContent(url: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Fetches the HTML content of a webpage given its URL.\"}"}
{"api_id": 258, "api_name": "sqlite3.connect", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchAndStoreData\", \"type\": \"function\", \"signature\": \"fetchAndStoreData(webpage_url: str, database_name: str = 'my_database.db') -> int\", \"return_type\": \"int\", \"short_description\": \"Fetches data from a webpage and stores it in a SQLite database.\"}"}
{"api_id": 258, "api_name": "sqlite3.connect", "task_id": "BigCodeBench/1015", "solution": "{\"name\": \"fetchAndStoreData\", \"type\": \"function\", \"signature\": \"fetchAndStoreData(webpage_url: str, database_name: str = 'my_database.db') -> int\", \"return_type\": \"int\", \"short_description\": \"Fetches data from a webpage and stores it in a SQLite database.\"}"}
{"api_id": 259, "api_name": "ssl.SSLContext", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generate_ssl_context\", \"type\": \"function\", \"signature\": \"(protocol=None, *args, **kwargs)\", \"return_type\": \"ssl.SSLContext\", \"short_description\": \"Creates an SSLContext object with the specified protocol and optional arguments.\"}"}
{"api_id": 259, "api_name": "ssl.SSLContext", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"createSslContext\", \"type\": \"function\", \"signature\": \"(protocol=None, *args, **kwargs)\", \"return_type\": \"ssl.SSLContext\", \"short_description\": \"Creates an SSLContext object with specified protocol and options.\"}"}
{"api_id": 259, "api_name": "ssl.SSLContext", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generateCertificates\", \"type\": \"function\", \"signature\": \"(certFile, keyFile)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a certificate chain and private key from the given files.\"}"}
{"api_id": 259, "api_name": "ssl.SSLContext", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generateSslContext\", \"type\": \"function\", \"signature\": \"(protocol=None, *args, **kwargs)\", \"return_type\": \"ssl.SSLContext\", \"short_description\": \"Creates an SSLContext object with the specified protocol and loads a certificate chain and private key from given file paths.\"}"}
{"api_id": 259, "api_name": "ssl.SSLContext", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generateCertificateHash\", \"type\": \"function\", \"signature\": \"(certificatePath, keyPath)\", \"return_type\": \"str\", \"short_description\": \"Generates a SHA-256 hash of the certificate file provided.\"}"}
{"api_id": 259, "api_name": "ssl.SSLContext", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generateSslContext\", \"type\": \"function\", \"signature\": \"(protocol=None, *args, **kwargs)\", \"return_type\": \"ssl.SSLContext\", \"short_description\": \"Creates an SSLContext object with the specified protocol and optional arguments.\"}"}
{"api_id": 259, "api_name": "ssl.SSLContext", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generateSslContext\", \"type\": \"function\", \"signature\": \"(protocol=None, *args, **kwargs)\", \"return_type\": \"ssl.SSLContext\", \"short_description\": \"Creates and returns an SSLContext object configured for server-side SSL/TLS operations.\"}"}
{"api_id": 259, "api_name": "ssl.SSLContext", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generate_ssl_context\", \"type\": \"function\", \"signature\": \"(protocol=None, *args, **kwargs)\", \"return_type\": \"ssl.SSLContext\", \"short_description\": \"Creates an SSLContext object for SSL/TLS communication.\"}"}
{"api_id": 259, "api_name": "ssl.SSLContext", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generateSslContext\", \"type\": \"function\", \"signature\": \"(protocol=None, *args, **kwargs)\", \"return_type\": \"SSLContext\", \"short_description\": \"Creates an SSLContext object with specified protocol and loads a certificate chain and key.\"}"}
{"api_id": 259, "api_name": "ssl.SSLContext", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generateSslContext\", \"type\": \"function\", \"signature\": \"(protocol=None, *args, **kwargs)\", \"return_type\": \"ssl.SSLContext\", \"short_description\": \"Creates and returns an SSLContext object for server-side SSL/TLS connections.\"}"}
{"api_id": 260, "api_name": "ssl.PROTOCOL_TLS_SERVER", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generate_file_hash\", \"type\": \"function\", \"signature\": \"generate_file_hash(file_path: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates the SHA-256 hash of the given file.\"}"}
{"api_id": 260, "api_name": "ssl.PROTOCOL_TLS_SERVER", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generate_sha256_hash\", \"type\": \"function\", \"signature\": \"generate_sha256_hash(file_path: str) -> str\", \"return_type\": \"The SHA-256 hash of the file as a hexadecimal string.\", \"short_description\": \"Generates the SHA-256 hash of a given file.\"}"}
{"api_id": 260, "api_name": "ssl.PROTOCOL_TLS_SERVER", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generate_file_hash\", \"type\": \"function\", \"signature\": \"generate_file_hash(file_path: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a SHA-256 hash for the given file.\"}"}
{"api_id": 260, "api_name": "ssl.PROTOCOL_TLS_SERVER", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generate_tls_server_certificate\", \"type\": \"function\", \"signature\": \"generate_tls_server_certificate(cert_file: str, key_file: str) -> SSLContext\", \"return_type\": \"SSLContext\", \"short_description\": \"Creates an SSLContext configured for TLS server use with the given certificate and key files.\"}"}
{"api_id": 260, "api_name": "ssl.PROTOCOL_TLS_SERVER", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"fetchFileContent\", \"type\": \"function\", \"signature\": \"fetchFileContent(filePath: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Retrieves the content of a file specified by the given file path.\"}"}
{"api_id": 260, "api_name": "ssl.PROTOCOL_TLS_SERVER", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generate_ssl_context\", \"type\": \"function\", \"signature\": \"SSLContext(protocol)\", \"return_type\": \"SSLContext\", \"short_description\": \"Creates an SSLContext object for SSL/TLS server operations.\"}"}
{"api_id": 260, "api_name": "ssl.PROTOCOL_TLS_SERVER", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generateSha256Hash\", \"type\": \"function\", \"signature\": \"generateSha256Hash(filePath: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a SHA-256 hash for the given file path.\"}"}
{"api_id": 260, "api_name": "ssl.PROTOCOL_TLS_SERVER", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generate_file_hash\", \"type\": \"function\", \"signature\": \"def generate_file_hash(file_path: str) -> str:\", \"return_type\": \"str\", \"short_description\": \"Generates a SHA-256 hash for the given file.\"}"}
{"api_id": 260, "api_name": "ssl.PROTOCOL_TLS_SERVER", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generate_tls_server_context\", \"type\": \"function\", \"signature\": \"generate_tls_server_context(cert_file: str, key_file: str) -> ssl.SSLContext\", \"return_type\": \"ssl.SSLContext\", \"short_description\": \"Creates and returns an SSLContext configured for TLS server use with the specified certificate and key files.\"}"}
{"api_id": 260, "api_name": "ssl.PROTOCOL_TLS_SERVER", "task_id": "BigCodeBench/1039", "solution": "{\"name\": \"generateSHA256Hash\", \"type\": \"function\", \"signature\": \"generateSHA256Hash(filePath: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a SHA-256 hash for the given file path.\"}"}
{"api_id": 261, "api_name": "statistics.mean", "task_id": "BigCodeBench/308", "solution": "{\"name\": \"calculateMedian\", \"type\": \"callable\", \"signature\": \"(data)\", \"return_type\": \"float\", \"short_description\": \"Return the median of the provided numerical data.\"}"}
{"api_id": 261, "api_name": "statistics.mean", "task_id": "BigCodeBench/308", "solution": "{\"name\": \"calculateAverage\", \"type\": \"callable\", \"signature\": \"(data)\", \"return_type\": \"float\", \"short_description\": \"Calculate the average of the given data.\"}"}
{"api_id": 261, "api_name": "statistics.mean", "task_id": "BigCodeBench/308", "solution": "{\"name\": \"calculateMedian\", \"type\": \"callable\", \"signature\": \"(data)\", \"return_type\": \"float\", \"short_description\": \"Calculates the median of the given numerical data.\"}"}
{"api_id": 261, "api_name": "statistics.mean", "task_id": "BigCodeBench/308", "solution": "{\"name\": \"calculateAverageGrades\", \"type\": \"callable\", \"signature\": \"(data)\", \"return_type\": \"DataFrame\", \"short_description\": \"Calculates the average grades for both students and subjects from the provided data.\"}"}
{"api_id": 261, "api_name": "statistics.mean", "task_id": "BigCodeBench/308", "solution": "{\"name\": \"calculateAverage\", \"type\": \"callable\", \"signature\": \"(data)\", \"return_type\": \"float\", \"short_description\": \"Calculates the average of the given data.\"}"}
{"api_id": 261, "api_name": "statistics.mean", "task_id": "BigCodeBench/308", "solution": "{\"name\": \"calculateAverages\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"DataFrame\", \"short_description\": \"Calculates the average grades for students and subjects from given data.\"}"}
{"api_id": 261, "api_name": "statistics.mean", "task_id": "BigCodeBench/308", "solution": "{\"name\": \"calculateAverages\", \"type\": \"callable\", \"signature\": \"(data)\", \"return_type\": \"DataFrame\", \"short_description\": \"Calculates the average grade for each student and each subject, returning a DataFrame with the results.\"}"}
{"api_id": 261, "api_name": "statistics.mean", "task_id": "BigCodeBench/308", "solution": "{\"name\": \"calculateStatistics\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"float\", \"short_description\": \"Calculates the sample arithmetic mean of the provided data.\"}"}
{"api_id": 261, "api_name": "statistics.mean", "task_id": "BigCodeBench/308", "solution": "{\"name\": \"calculateMedian\", \"type\": \"callable\", \"signature\": \"(data)\", \"return_type\": \"float\", \"short_description\": \"Return the median of the given numerical data.\"}"}
{"api_id": 261, "api_name": "statistics.mean", "task_id": "BigCodeBench/308", "solution": "{\"name\": \"calculateAverageGrades\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"DataFrame\", \"short_description\": \"Calculates the average grades for students and subjects from the given data.\"}"}
{"api_id": 261, "api_name": "statistics.mean", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"calculate_averages\", \"type\": \"callable\", \"signature\": \"(data)\", \"return_type\": \"list\", \"short_description\": \"Calculates the arithmetic mean for each column in the provided data.\"}"}
{"api_id": 261, "api_name": "statistics.mean", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"calculateAverages\", \"type\": \"callable\", \"signature\": \"(data)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the average values for specified columns in a list of data.\"}"}
{"api_id": 261, "api_name": "statistics.mean", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"calculateAverages\", \"type\": \"function\", \"signature\": \"(dataList)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the average values for specified columns in a list of data.\"}"}
{"api_id": 261, "api_name": "statistics.mean", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"calculate_averages\", \"type\": \"callable\", \"signature\": \"(data)\", \"return_type\": \"list\", \"short_description\": \"Calculate the averages of numerical values in a given dataset.\"}"}
{"api_id": 261, "api_name": "statistics.mean", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"calculateAverages\", \"type\": \"callable\", \"signature\": \"(data)\", \"return_type\": \"dict\", \"short_description\": \"Calculate the average values for specified columns in a dataset.\"}"}
{"api_id": 261, "api_name": "statistics.mean", "task_id": "BigCodeBench/310", "solution": "{\n  \"name\": \"calculate_averages\",\n  \"type\": \"callable\",\n  \"signature\": \"(data)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Calculate the average values for each column in the provided data.\"\n}"}
{"api_id": 261, "api_name": "statistics.mean", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"calculateAverages\", \"type\": \"callable\", \"signature\": \"(data)\", \"return_type\": \"dict\", \"short_description\": \"Calculates the average values for specified columns in a given dataset.\"}"}
{"api_id": 261, "api_name": "statistics.mean", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"calculateAverages\", \"type\": \"function\", \"signature\": \"(data)\", \"return_type\": \"dict\", \"short_description\": \"Calculate the average values for specified columns in a dataset.\"}"}
{"api_id": 261, "api_name": "statistics.mean", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"calculate_averages\", \"type\": \"callable\", \"signature\": \"(data)\", \"return_type\": \"list\", \"short_description\": \"Calculate the arithmetic mean for each column in the provided data.\"}"}
{"api_id": 261, "api_name": "statistics.mean", "task_id": "BigCodeBench/310", "solution": "{\"name\": \"calculate_averages\", \"type\": \"callable\", \"signature\": \"(data)\", \"return_type\": \"list\", \"short_description\": \"Calculate the averages of given data across all columns.\"}"}
{"api_id": 262, "api_name": "statsmodels.tsa.arima.model.ARIMA", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"calculateArimaForecast\", \"type\": \"function\", \"signature\": \"(endog, order)\", \"return_type\": \"Tuple[List[float], Axes]\", \"short_description\": \"Calculates ARIMA forecast for given time series data and order.\"}"}
{"api_id": 262, "api_name": "statsmodels.tsa.arima.model.ARIMA", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"forecastArima\", \"type\": \"function\", \"signature\": \"(endog, order)\", \"return_type\": \"List[float]\", \"short_description\": \"Forecasts future values using an ARIMA model.\"}"}
{"api_id": 262, "api_name": "statsmodels.tsa.arima.model.ARIMA", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"forecastArima\", \"type\": \"function\", \"signature\": \"(endog, order, steps)\", \"return_type\": \"List[float]\", \"short_description\": \"Forecasts future values using an ARIMA model.\"}"}
{"api_id": 262, "api_name": "statsmodels.tsa.arima.model.ARIMA", "task_id": "BigCodeBench/917", "solution": "{\n  \"name\": \"generateArimaForecast\",\n  \"type\": \"function\",\n  \"signature\": \"(endog, order, steps)\",\n  \"return_type\": \"List[float]\",\n  \"short_description\": \"Generates an ARIMA forecast for a given time series model and number of steps.\"\n}"}
{"api_id": 262, "api_name": "statsmodels.tsa.arima.model.ARIMA", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"predictArima\", \"type\": \"function\", \"signature\": \"(endog, exog=None, order=(0, 0, 0), seasonal_order=(0, 0, 0, 0), trend=None, steps=1, dates=None, freq=None)\", \"return_type\": \"List[float]\", \"short_description\": \"Generates a forecast using an ARIMA model for a specified number of steps.\"}"}
{"api_id": 262, "api_name": "statsmodels.tsa.arima.model.ARIMA", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"calculateArimaForecast\", \"type\": \"function\", \"signature\": \"(endog, order=(0, 0, 0))\", \"return_type\": \"List[float]\", \"short_description\": \"Calculates the ARIMA forecast for a given time series data.\"}"}
{"api_id": 262, "api_name": "statsmodels.tsa.arima.model.ARIMA", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"fitArimaModel\", \"type\": \"function\", \"signature\": \"(endog, order)\", \"return_type\": \"ModelFit\", \"short_description\": \"Fits an ARIMA model to the provided time series data.\"}"}
{"api_id": 262, "api_name": "statsmodels.tsa.arima.model.ARIMA", "task_id": "BigCodeBench/917", "solution": "{\n  \"name\": \"calculateARIMAForecast\",\n  \"type\": \"function\",\n  \"signature\": \"(endog, exog=None, order=(0, 0, 0), seasonal_order=(0, 0, 0, 0), trend=None, steps=1)\",\n  \"return_type\": \"List[float]\",\n  \"short_description\": \"Calculates the ARIMA forecast for a given time series model.\"\n}"}
{"api_id": 262, "api_name": "statsmodels.tsa.arima.model.ARIMA", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"fitArimaModel\", \"type\": \"function\", \"signature\": \"(endog, order)\", \"return_type\": \"ModelFit\", \"short_description\": \"Fits an ARIMA model to the given time series data with the specified order.\"}"}
{"api_id": 262, "api_name": "statsmodels.tsa.arima.model.ARIMA", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"fitArimaModel\", \"type\": \"function\", \"signature\": \"(endog, order)\", \"return_type\": \"ARIMAResults\", \"short_description\": \"Fits an ARIMA model to the provided time series data and returns the results.\"}"}
{"api_id": 263, "api_name": "statsmodels.tsa.seasonal.seasonal_decompose", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"decomposeTimeSeries\", \"type\": \"function\", \"signature\": \"(data, model='multiplicative', period=None, twoSided=True, extrapolateTrend=0)\", \"return_type\": \"DecomposeResult\", \"short_description\": \"Performs seasonal decomposition on a time series using moving averages. The decomposition is based on either an additive or multiplicative model.\"}"}
{"api_id": 263, "api_name": "statsmodels.tsa.seasonal.seasonal_decompose", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"seasonalDecompose\", \"type\": \"callable\", \"signature\": \"(data, model='additive', period=None, twoSided=True, extrapolateTrend=0)\", \"return_type\": \"DecomposeResult\", \"short_description\": \"Performs seasonal decomposition on the given time series data using a specified model and period.\"}"}
{"api_id": 263, "api_name": "statsmodels.tsa.seasonal.seasonal_decompose", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"decomposeTimeSeries\", \"type\": \"callable\", \"signature\": \"(data, model='additive', period=None, twoSided=True, extrapolateTrend=0)\", \"return_type\": \"DecomposeResult\", \"short_description\": \"Performs seasonal decomposition on a time series using moving averages. The decomposition is based on the additive or multiplicative model specified.\"}"}
{"api_id": 263, "api_name": "statsmodels.tsa.seasonal.seasonal_decompose", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"timeSeriesDecomposition\", \"type\": \"callable\", \"signature\": \"(data, model='additive', period=None, twoSided=True, extrapolateTrend=0)\", \"return_type\": \"DecomposeResult\", \"short_description\": \"Performs seasonal decomposition on a given time series using moving averages. Supports both additive and multiplicative models.\"}"}
{"api_id": 263, "api_name": "statsmodels.tsa.seasonal.seasonal_decompose", "task_id": "BigCodeBench/108", "solution": "{\n  \"name\": \"decompose_time_series\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, model='additive', period=None, two_sided=True, extrapolate_trend=0)\",\n  \"return_type\": \"DecomposeResult\",\n  \"short_description\": \"Performs seasonal decomposition on a time series using moving averages.\"\n}"}
{"api_id": 263, "api_name": "statsmodels.tsa.seasonal.seasonal_decompose", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"seasonalDecompose\", \"type\": \"callable\", \"signature\": \"(x, model='additive', period=None, twoSided=True, extrapolateTrend=0)\", \"return_type\": \"DecomposeResult\", \"short_description\": \"Performs seasonal decomposition on a time series using moving averages. This function supports both additive and multiplicative models.\"}"}
{"api_id": 263, "api_name": "statsmodels.tsa.seasonal.seasonal_decompose", "task_id": "BigCodeBench/108", "solution": "{\"name\": \"decomposeTimeSeries\", \"type\": \"callable\", \"signature\": \"(data, model='multiplicative', period=None, twoSided=True, extrapolateTrend=0)\", \"return_type\": \"DecomposeResult\", \"short_description\": \"Performs seasonal decomposition on a given time series using moving averages. Supports additive and multiplicative models.\"}"}
{"api_id": 263, "api_name": "statsmodels.tsa.seasonal.seasonal_decompose", "task_id": "BigCodeBench/108", "solution": "{\n  \"name\": \"decompose_time_series\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, model='multiplicative', period=None, two_sided=True, extrapolate_trend=0)\",\n  \"return_type\": \"DecomposeResult\",\n  \"short_description\": \"Performs seasonal decomposition on a time series using moving averages.\"\n}"}
{"api_id": 263, "api_name": "statsmodels.tsa.seasonal.seasonal_decompose", "task_id": "BigCodeBench/108", "solution": "{\n  \"name\": \"decompose_time_series\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, model='additive', period=None, two_sided=True, extrapolate_trend=0)\",\n  \"return_type\": \"DecomposeResult\",\n  \"short_description\": \"Performs seasonal decomposition on a time series using moving averages.\"\n}"}
{"api_id": 263, "api_name": "statsmodels.tsa.seasonal.seasonal_decompose", "task_id": "BigCodeBench/108", "solution": "{\n  \"name\": \"decomposeTimeSeries\",\n  \"type\": \"callable\",\n  \"signature\": \"(data, model='additive', period=None, two_sided=True, extrapolate_trend=0)\",\n  \"return_type\": \"DecomposeResult\",\n  \"short_description\": \"Performs seasonal decomposition on a time series using moving averages.\"\n}"}
{"api_id": 264, "api_name": "string.punctuation", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"extract_word_frequencies\", \"type\": \"function\", \"signature\": \"def extract_word_frequencies(articles: list[str]) -> dict[str, int]:\", \"return_type\": \"dict[str, int]\", \"short_description\": \"Extracts word frequencies from a list of article titles and contents.\"}"}
{"api_id": 264, "api_name": "string.punctuation", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"extract_word_frequencies\", \"type\": \"function\", \"signature\": \"def extract_word_frequencies(articles: list[str]) -> dict[str, int]\", \"return_type\": \"dict[str, int]\", \"short_description\": \"Extracts word frequencies from a list of article titles and contents.\"}"}
{"api_id": 264, "api_name": "string.punctuation", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"extract_word_frequencies\", \"type\": \"function\", \"signature\": \"def extract_word_frequencies(text_data: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Extracts word frequencies from a given text data, excluding punctuation.\"}"}
{"api_id": 264, "api_name": "string.punctuation", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"get_word_frequencies\", \"type\": \"function\", \"signature\": \"(df)\", \"return_type\": \"dict\", \"short_description\": \"Extracts and returns word frequencies from the 'Title' and 'Content' columns of a DataFrame, ignoring punctuation.\"}"}
{"api_id": 264, "api_name": "string.punctuation", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"extract_word_frequencies\", \"type\": \"function\", \"signature\": \"extract_word_frequencies(df)\", \"return_type\": \"dict\", \"short_description\": \"Extracts word frequencies from the 'Title' and 'Content' columns of a DataFrame.\"}"}
{"api_id": 264, "api_name": "string.punctuation", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"extract_word_frequencies\", \"type\": \"function\", \"signature\": \"def extract_word_frequencies(texts: list[str]) -> dict[str, int]:\", \"return_type\": \"dict[str, int]\", \"short_description\": \"Extracts word frequencies from a list of texts, excluding punctuation.\"}"}
{"api_id": 264, "api_name": "string.punctuation", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"extract_word_frequencies\", \"type\": \"function\", \"signature\": \"def extract_word_frequencies(df):\", \"return_type\": \"dict\", \"short_description\": \"Extracts word frequencies from the 'Title' and 'Content' columns of a DataFrame, ignoring punctuation.\"}"}
{"api_id": 264, "api_name": "string.punctuation", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"calculate_word_frequencies\", \"type\": \"function\", \"signature\": \"def calculate_word_frequencies(text_list: List[str]) -> Dict[str, int]\", \"return_type\": \"Dict[str, int]\", \"short_description\": \"Calculates the frequency of each word in a list of texts, excluding punctuation.\"}"}
{"api_id": 264, "api_name": "string.punctuation", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"extractInterestingWords\", \"type\": \"function\", \"signature\": \"extractInterestingWords(df)\", \"return_type\": \"dict\", \"short_description\": \"Extracts and counts the frequency of words in the titles of interesting articles based on a given pattern.\"}"}
{"api_id": 264, "api_name": "string.punctuation", "task_id": "BigCodeBench/177", "solution": "{\"name\": \"generate_word_frequency\", \"type\": \"function\", \"signature\": \"def generate_word_frequency(text: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Generates a frequency dictionary of words from a given text, excluding punctuation.\"}"}
{"api_id": 265, "api_name": "string.ascii_lowercase", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"generateAlphabetCombinations\", \"type\": \"function\", \"signature\": \"generateAlphabetCombinations() -> List[str]\", \"return_type\": \"List[str]\", \"short_description\": \"Generates all possible two-letter combinations of the alphabet.\"}"}
{"api_id": 265, "api_name": "string.ascii_lowercase", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"getAlphabetCombinations\", \"type\": \"function\", \"signature\": \"(word: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Generates all two-letter combinations of the given word and counts their occurrences.\"}"}
{"api_id": 265, "api_name": "string.ascii_lowercase", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"generateAlphabetCombinations\", \"type\": \"function\", \"signature\": \"generateAlphabetCombinations() -> list\", \"return_type\": \"list\", \"short_description\": \"Generates all possible two-letter combinations of the English alphabet.\"}"}
{"api_id": 265, "api_name": "string.ascii_lowercase", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"generateAlphabetCombinations\", \"type\": \"function\", \"signature\": \"generateAlphabetCombinations(length: int) -> list[str]\", \"return_type\": \"list[str]\", \"short_description\": \"Generates all possible combinations of lowercase alphabets of a given length.\"}"}
{"api_id": 265, "api_name": "string.ascii_lowercase", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"getAlphabetCombinations\", \"type\": \"function\", \"signature\": \"getAlphabetCombinations(length: int) -> List[str]\", \"return_type\": \"List[str]\", \"short_description\": \"Generates all possible combinations of alphabets of a specified length.\"}"}
{"api_id": 265, "api_name": "string.ascii_lowercase", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"generateAlphabetCombinations\", \"type\": \"function\", \"signature\": \"(length: int) -> list[str]\", \"return_type\": \"list[str]\", \"short_description\": \"Generates all possible combinations of alphabets of a specified length.\"}"}
{"api_id": 265, "api_name": "string.ascii_lowercase", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"generateAlphabetCombinations\", \"type\": \"function\", \"signature\": \"generateAlphabetCombinations(length: int) -> list[str]\", \"return_type\": \"list[str]\", \"short_description\": \"Generates all possible combinations of alphabets of a specified length.\"}"}
{"api_id": 265, "api_name": "string.ascii_lowercase", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"generateAlphabetCombinations\", \"type\": \"function\", \"signature\": \"(length: int)\", \"return_type\": \"list[str]\", \"short_description\": \"Generates all possible combinations of the given length from the alphabet.\"}"}
{"api_id": 265, "api_name": "string.ascii_lowercase", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"generateAlphabetCombinations\", \"type\": \"function\", \"signature\": \"generateAlphabetCombinations() -> List[str]\", \"return_type\": \"List[str]\", \"short_description\": \"Generates all two-letter combinations of the English alphabet.\"}"}
{"api_id": 265, "api_name": "string.ascii_lowercase", "task_id": "BigCodeBench/928", "solution": "{\"name\": \"generateAlphabetCombinations\", \"type\": \"function\", \"signature\": \"generateAlphabetCombinations() -> list\", \"return_type\": \"list\", \"short_description\": \"Generates all possible two-letter combinations of the English alphabet.\"}"}
{"api_id": 266, "api_name": "subprocess.CalledProcessError", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"execute_script\", \"type\": \"function\", \"signature\": \"(script_path, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a script at the given path in a separate process and returns the exit code. If 'wait' is True, it waits for the process to complete before returning the exit code.\"}"}
{"api_id": 266, "api_name": "subprocess.CalledProcessError", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"execute_script\", \"type\": \"function\", \"signature\": \"(script_path, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a script located at the specified path and returns the exit code.\"}"}
{"api_id": 266, "api_name": "subprocess.CalledProcessError", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"execute_script\", \"type\": \"function\", \"signature\": \"(script_path, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a script asynchronously and returns the exit code.\"}"}
{"api_id": 266, "api_name": "subprocess.CalledProcessError", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"run_script\", \"type\": \"function\", \"signature\": \"(script_path, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a script in a separate process and optionally waits for it to complete. Returns the exit code of the process.\"}"}
{"api_id": 266, "api_name": "subprocess.CalledProcessError", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"execute_script\", \"type\": \"function\", \"signature\": \"(script_path, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a Python script in a subprocess and optionally waits for it to complete.\"}"}
{"api_id": 266, "api_name": "subprocess.CalledProcessError", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"executeScript\", \"type\": \"function\", \"signature\": \"(scriptPath, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a script located at the given path and optionally waits for its completion.\"}"}
{"api_id": 266, "api_name": "subprocess.CalledProcessError", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"execute_script\", \"type\": \"function\", \"signature\": \"(script_path, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a script located at 'script_path' and returns the exit code. If 'wait' is True, it waits for the script to complete before returning.\"}"}
{"api_id": 266, "api_name": "subprocess.CalledProcessError", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"run_script\", \"type\": \"function\", \"signature\": \"(script_path, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a script file asynchronously and optionally waits for its completion.\"}"}
{"api_id": 266, "api_name": "subprocess.CalledProcessError", "task_id": "BigCodeBench/346", "solution": "{\n  \"name\": \"execute_script\",\n  \"type\": \"function\",\n  \"signature\": \"(script_path, wait=True, *args)\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Executes a script located at 'script_path' and returns the exit code. Optionally waits for the script to complete if 'wait' is True.\"\n}"}
{"api_id": 266, "api_name": "subprocess.CalledProcessError", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"execute_script\", \"type\": \"function\", \"signature\": \"(script_path, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a script located at the specified path and optionally waits for it to complete. Returns the exit code of the script.\"}"}
{"api_id": 267, "api_name": "subprocess.run", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"run_shell_command\", \"type\": \"callable\", \"signature\": \"(*args, shell=False, check=False, text=False, capture_output=False, timeout=None)\", \"return_type\": \"CompletedShellProcess\", \"short_description\": \"Executes a shell command and returns a CompletedShellProcess object containing the output and return code.\"}"}
{"api_id": 267, "api_name": "subprocess.run", "task_id": "BigCodeBench/785", "solution": "{\n  \"name\": \"create_tar_archive\",\n  \"type\": \"function\",\n  \"signature\": \"(*file_paths, output_file_name, compression='gz')\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Creates a tar archive from a list of file paths and returns the name of the created archive.\"\n}"}
{"api_id": 267, "api_name": "subprocess.run", "task_id": "BigCodeBench/785", "solution": "{\n  \"name\": \"run_shell_command\",\n  \"type\": \"callable\",\n  \"signature\": \"(command, capture_output=False, text_mode=False, timeout=None)\",\n  \"return_type\": \"CompletedShellProcess\",\n  \"short_description\": \"Executes a shell command and returns a CompletedShellProcess object with the results.\"\n}"}
{"api_id": 267, "api_name": "subprocess.run", "task_id": "BigCodeBench/785", "solution": "{\n  \"name\": \"execute_command\",\n  \"type\": \"function\",\n  \"signature\": \"command, *, input=None, capture_output=False, timeout=None, check=False\",\n  \"return_type\": \"CompletedProcess\",\n  \"short_description\": \"Executes a command and returns a CompletedProcess instance.\"\n}"}
{"api_id": 267, "api_name": "subprocess.run", "task_id": "BigCodeBench/785", "solution": "{\n  \"name\": \"execute_script\",\n  \"type\": \"function\",\n  \"signature\": \"(*script_parts, input=None, capture_output=False, timeout=None, check=False, **kwargs)\",\n  \"return_type\": \"CompletedProcess\",\n  \"short_description\": \"Executes a script or command and returns a CompletedProcess instance.\"\n}"}
{"api_id": 267, "api_name": "subprocess.run", "task_id": "BigCodeBench/785", "solution": "{\n  \"name\": \"execute_script\",\n  \"type\": \"callable\",\n  \"signature\": \"(*script_args, input=None, capture_output=False, timeout=None, check=False, **kwargs)\",\n  \"return_type\": \"CompletedProcess\",\n  \"short_description\": \"Executes a script or command and returns a CompletedProcess instance.\"\n}"}
{"api_id": 267, "api_name": "subprocess.run", "task_id": "BigCodeBench/785", "solution": "{\n  \"name\": \"create_archive\",\n  \"type\": \"function\",\n  \"signature\": \"(*file_paths, archive_dir='/tmp/archive', archive_base='archive')\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Creates a compressed archive of the given files and moves them to the specified directory.\"\n}"}
{"api_id": 267, "api_name": "subprocess.run", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"run_command\", \"type\": \"callable\", \"signature\": \"(*cmd_args, capture_output=False, timeout=None, text=False, input=None)\", \"return_type\": \"CompletedProcess\", \"short_description\": \"Executes a command with the given arguments and returns a CompletedProcess instance.\"}"}
{"api_id": 267, "api_name": "subprocess.run", "task_id": "BigCodeBench/785", "solution": "{\n  \"name\": \"run_process\",\n  \"type\": \"callable\",\n  \"signature\": \"(*args, input=None, capture_output=False, timeout=None, check=False, **kwargs)\",\n  \"return_type\": \"CompletedProcess\",\n  \"short_description\": \"Executes a command with the given arguments and returns a CompletedProcess instance.\"\n}"}
{"api_id": 267, "api_name": "subprocess.run", "task_id": "BigCodeBench/785", "solution": "{\"name\": \"run_command\", \"type\": \"callable\", \"signature\": \"(*cmd_args, timeout=None, capture_output=False, text=False, input=None)\", \"return_type\": \"CompletedProcess\", \"short_description\": \"Executes a command with the given arguments and returns a CompletedProcess instance. Allows for output capturing and text mode.\"}"}
{"api_id": 268, "api_name": "subprocess.call", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"downloadFtpFiles\", \"type\": \"function\", \"signature\": \"(*, server='ftp.dlptest.com', user='dlpuser', password='rNrKYTX9g7z3RgJRmxWuGHbeu', directory='/ftp/test', downloadDir='downloaded_files')\", \"return_type\": \"list\", \"short_description\": \"Downloads files from an FTP server using the provided credentials and directory.\"}"}
{"api_id": 268, "api_name": "subprocess.call", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"runCommand\", \"type\": \"function\", \"signature\": \"(*command, timeout=None, **kwargs)\", \"return_type\": \"int\", \"short_description\": \"Executes a command with the given arguments and returns the return code.\"}"}
{"api_id": 268, "api_name": "subprocess.call", "task_id": "BigCodeBench/13", "solution": "{\n  \"name\": \"fetch_ftp_files\",\n  \"type\": \"function\",\n  \"signature\": \"(*, server, user, password, directory, timeout=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Connects to an FTP server, logs in with provided credentials, changes to the specified directory, and downloads all files in that directory locally.\"\n}"}
{"api_id": 268, "api_name": "subprocess.call", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"downloadFtpFiles\", \"type\": \"function\", \"signature\": \"(ftp_server, ftp_user, ftp_password, ftp_dir)\", \"return_type\": \"list\", \"short_description\": \"Downloads files from an FTP server and returns a list of downloaded filenames.\"}"}
{"api_id": 268, "api_name": "subprocess.call", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"runWgetCommand\", \"type\": \"function\", \"signature\": \"(ftp_server, ftp_user, ftp_password, ftp_dir, download_dir)\", \"return_type\": \"list\", \"short_description\": \"Runs a wget command to download files from an FTP server.\"}"}
{"api_id": 268, "api_name": "subprocess.call", "task_id": "BigCodeBench/13", "solution": "{\n  \"name\": \"download_ftp_files\",\n  \"type\": \"function\",\n  \"signature\": \"(*, ftp_server='ftp.dlptest.com', ftp_user='dlpuser', ftp_password='rNrKYTX9g7z3RgJRmxWuGHbeu', ftp_dir='/ftp/test', download_dir='downloaded_files')\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Download files from an FTP server using FTP commands and subprocesses.\"\n}"}
{"api_id": 268, "api_name": "subprocess.call", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"downloadFtpFiles\", \"type\": \"function\", \"signature\": \"(ftp_server, ftp_user, ftp_password, ftp_dir)\", \"return_type\": \"list\", \"short_description\": \"Downloads files from an FTP server using the provided credentials and directory.\"}"}
{"api_id": 268, "api_name": "subprocess.call", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"runWgetCommand\", \"type\": \"function\", \"signature\": \"(*args, **kwargs)\", \"return_type\": \"int\", \"short_description\": \"Runs a wget command with the provided arguments and returns the return code.\"}"}
{"api_id": 268, "api_name": "subprocess.call", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"downloadFiles\", \"type\": \"function\", \"signature\": \"(ftp_server='ftp.dlptest.com', ftp_user='dlpuser', ftp_password='rNrKYTX9g7z3RgJRmxWuGHbeu', ftp_dir='/ftp/test')\", \"return_type\": \"List[str]\", \"short_description\": \"Downloads files from an FTP server and returns a list of downloaded filenames.\"}"}
{"api_id": 268, "api_name": "subprocess.call", "task_id": "BigCodeBench/13", "solution": "{\"name\": \"downloadFtpFiles\", \"type\": \"function\", \"signature\": \"(ftp_server, ftp_user, ftp_password, ftp_dir)\", \"return_type\": \"list\", \"short_description\": \"Downloads files from an FTP server using the provided credentials and directory.\"}"}
{"api_id": 268, "api_name": "subprocess.call", "task_id": "BigCodeBench/15", "solution": "{\n  \"name\": \"execute_commands\",\n  \"type\": \"function\",\n  \"signature\": \"(*commands, timeout=None, output_dir=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Executes a list of commands with optional timeout and output directory.\"\n}"}
{"api_id": 268, "api_name": "subprocess.call", "task_id": "BigCodeBench/15", "solution": "{\n  \"name\": \"runCommands\",\n  \"type\": \"function\",\n  \"signature\": \"(*commands, timeout=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Executes a list of shell commands and writes their outputs to files.\"\n}"}
{"api_id": 268, "api_name": "subprocess.call", "task_id": "BigCodeBench/15", "solution": "{\n  \"name\": \"run_shell_commands\",\n  \"type\": \"function\",\n  \"signature\": \"(*commands, timeout=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Executes a list of shell commands and returns a list of output file paths.\"\n}"}
{"api_id": 268, "api_name": "subprocess.call", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"executeCommands\", \"type\": \"function\", \"signature\": \"(*commands, timeout=None, output_dir=None)\", \"return_type\": \"list[str]\", \"short_description\": \"Executes a list of shell commands and writes their output to files in the specified output directory. Returns a list of file paths where the outputs are saved.\"}"}
{"api_id": 268, "api_name": "subprocess.call", "task_id": "BigCodeBench/15", "solution": "{\n  \"name\": \"execute_commands\",\n  \"type\": \"function\",\n  \"signature\": \"(*command_list, timeout=None)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Executes a list of shell commands and returns a list of output file paths.\"\n}"}
{"api_id": 268, "api_name": "subprocess.call", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"runCommands\", \"type\": \"function\", \"signature\": \"(commands_list, output_dir_path, shell=False)\", \"return_type\": \"list\", \"short_description\": \"Executes a list of commands and saves their output to files in the specified output directory. Each command's output is saved in a separate file.\"}"}
{"api_id": 268, "api_name": "subprocess.call", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"executeCommands\", \"type\": \"function\", \"signature\": \"(*commands, timeout=None)\", \"return_type\": \"list\", \"short_description\": \"Executes a list of shell commands and returns the list of output file paths.\"}"}
{"api_id": 268, "api_name": "subprocess.call", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"runCommands\", \"type\": \"function\", \"signature\": \"(commands: list[str], outputDir: str, timeout: int = None)\", \"return_type\": \"list[str]\", \"short_description\": \"Executes a list of shell commands and writes their output to files in the specified directory. Returns a list of file paths where the outputs are saved.\"}"}
{"api_id": 268, "api_name": "subprocess.call", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"executeCommands\", \"type\": \"function\", \"signature\": \"(*command_list, output_dir_path, timeout=None)\", \"return_type\": \"list\", \"short_description\": \"Executes a list of commands and writes their output to files in a specified directory. Returns a list of output file paths.\"}"}
{"api_id": 268, "api_name": "subprocess.call", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"executeCommands\", \"type\": \"function\", \"signature\": \"(commands, outputDir, timeout=None)\", \"return_type\": \"list[str]\", \"short_description\": \"Executes a list of shell commands and writes their output to files in the specified directory. Returns a list of paths to the output files.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/17", "solution": "{\n  \"name\": \"executeProcess\",\n  \"type\": \"function\",\n  \"signature\": \"(processName, options={})\",\n  \"return_type\": \"subprocess.Popen\",\n  \"short_description\": \"Executes a new process with the specified name and options.\"\n}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/17", "solution": "{\n  \"name\": \"executeProcess\",\n  \"type\": \"function\",\n  \"signature\": \"(processName, options={})\",\n  \"return_type\": \"subprocess.Popen\",\n  \"short_description\": \"Executes a process with the given name and options.\"\n}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"executeProcess\", \"type\": \"function\", \"signature\": \"(processName, options={})\", \"return_type\": \"Process\", \"short_description\": \"Executes a new process with the given name and optional options.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"startOrRestartProcess\", \"type\": \"function\", \"signature\": \"(processName: str)\", \"return_type\": \"str\", \"short_description\": \"Starts or restarts a process with the given name. If the process is running, it will be terminated and then restarted. If the process is not running, it will be started.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"executeProcess\", \"type\": \"function\", \"signature\": \"(processName, options={})\", \"return_type\": \"ProcessResult\", \"short_description\": \"Executes a process with given options.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/17", "solution": "{\n  \"name\": \"executeProcess\",\n  \"type\": \"function\",\n  \"signature\": \"(processName, options=None)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Executes a process with the given name and options. Returns a status message indicating whether the process was found and executed.\"\n}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/17", "solution": "{\n  \"name\": \"executeProcess\",\n  \"type\": \"function\",\n  \"signature\": \"(processName, options={})\",\n  \"return_type\": \"subprocess.Popen\",\n  \"short_description\": \"Executes a process with the given name and optional options.\"\n}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/17", "solution": "{\n  \"name\": \"executeProcess\",\n  \"type\": \"function\",\n  \"signature\": \"(processName, options={})\",\n  \"return_type\": \"subprocess.Popen\",\n  \"short_description\": \"Executes a new process with the given name and options.\"\n}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"executeProcess\", \"type\": \"function\", \"signature\": \"(processName, options={})\", \"return_type\": \"str\", \"short_description\": \"Executes a new process with the given name and options. Returns a status message indicating whether the process was found and restarted or not found and started.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"executeProcess\", \"type\": \"function\", \"signature\": \"(processName, options={})\", \"return_type\": \"str\", \"short_description\": \"Executes a process with the given name and options.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"executeProcess\", \"type\": \"function\", \"signature\": \"(processArgs, options={})\", \"return_type\": \"ProcessResult\", \"short_description\": \"Executes a process with the given arguments and options.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/324", "solution": "{\n  \"name\": \"runCommand\",\n  \"type\": \"function\",\n  \"signature\": \"(command, *, stdin=None, stdout=None, stderr=None, shell=False)\",\n  \"return_type\": \"subprocess.CompletedProcess\",\n  \"short_description\": \"Executes a command in a new process and returns the completion status.\"\n}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"executeProcess\", \"type\": \"function\", \"signature\": \"(command, cwd=None, env=None, shell=False)\", \"return_type\": \"subprocess.Popen\", \"short_description\": \"Executes a command in a new process. Returns a Popen object.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/324", "solution": "{\n  \"name\": \"executeCommand\",\n  \"type\": \"function\",\n  \"signature\": \"(command, shell=False, cwd=None, env=None)\",\n  \"return_type\": \"subprocess.Popen\",\n  \"short_description\": \"Executes a command in a new process. Returns a Popen object.\"\n}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"executeProcess\", \"type\": \"function\", \"signature\": \"(executable, args, options)\", \"return_type\": \"ProcessResult\", \"short_description\": \"Executes a process with the given executable and arguments, allowing for customization of options such as stdin, stdout, stderr, and more.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/324", "solution": "{\n  \"name\": \"executeProcess\",\n  \"type\": \"function\",\n  \"signature\": \"(command, options)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Executes a process with the given command and options, returning a dictionary with process details.\"\n}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"executeProcess\", \"type\": \"function\", \"signature\": \"(command, cwd=None, env=None, shell=False)\", \"return_type\": \"subprocess.Popen\", \"short_description\": \"Executes a command in a new process. Returns a Popen object.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/324", "solution": "{\n  \"name\": \"executeProcess\",\n  \"type\": \"function\",\n  \"signature\": \"(command, cwd=None, env=None, text=None, universal_newlines=None, stdout=None, stderr=None)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Executes a command in a new process and returns the output and error streams.\"\n}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"executeProcess\", \"type\": \"function\", \"signature\": \"(command, options={})\", \"return_type\": \"subprocess.CompletedProcess\", \"short_description\": \"Executes a command in a new process and returns a CompletedProcess object.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"executeProcess\", \"type\": \"function\", \"signature\": \"(processArgs, options={})\", \"return_type\": \"ProcessResult\", \"short_description\": \"Executes a process with the given arguments and options.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"executeProcess\", \"type\": \"function\", \"signature\": \"(processArgs, bufsize=-1, executable=None, stdin=None, stdout=None, stderr=None, preexecFn=None, closeFds=True, shell=False, cwd=None, env=None, universalNewlines=None, startupinfo=None, creationflags=0, restoreSignals=True, startNewSession=False, passFds=(), *, user=None, group=None, extraGroups=None, encoding=None, errors=None, text=None, umask=-1, pipeSize=-1)\", \"return_type\": \"tuple\", \"short_description\": \"Executes a child process with the given arguments and returns a tuple containing the process ID and exit code.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"executeCommand\", \"type\": \"function\", \"signature\": \"(command, shell=False)\", \"return_type\": \"tuple\", \"short_description\": \"Executes a command in a new process and returns the output and exit code.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/326", "solution": "{\n  \"name\": \"executeCommand\",\n  \"type\": \"function\",\n  \"signature\": \"(command, shell=False)\",\n  \"return_type\": \"tuple\",\n  \"short_description\": \"Executes a command in a new process and returns the output and exit code.\"\n}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"executeBatchFiles\", \"type\": \"function\", \"signature\": \"(directoryPath, shell=False)\", \"return_type\": \"list\", \"short_description\": \"Executes all .bat files in the specified directory and returns a list of tuples containing the file name and its exit code.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"executeProcess\", \"type\": \"function\", \"signature\": \"(processArgs, options={})\", \"return_type\": \"dict\", \"short_description\": \"Executes a process with the given arguments and options.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/326", "solution": "{\n  \"name\": \"executeProcess\",\n  \"type\": \"function\",\n  \"signature\": \"(command, cwd=None, env=None, text=False, captureOutput=False)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Executes a process with the given command, working directory, environment variables, text mode setting, and option to capture output.\"\n}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/326", "solution": "{\n  \"name\": \"executeProcess\",\n  \"type\": \"function\",\n  \"signature\": \"(processArgs, options={})\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Executes a child process with the given arguments and options.\"\n}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"executeCommand\", \"type\": \"function\", \"signature\": \"(command, shell=False)\", \"return_type\": \"tuple\", \"short_description\": \"Executes a command in a new process and returns the command's output and exit code.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"executeProcess\", \"type\": \"function\", \"signature\": \"(command, shell=False, cwd=None, env=None, captureOutput=False)\", \"return_type\": \"dict\", \"short_description\": \"Executes a process with the given command and returns a dictionary containing the process's output and exit code.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"executeBatchFile\", \"type\": \"function\", \"signature\": \"(filePath, shell=False)\", \"return_type\": \"dict\", \"short_description\": \"Executes a batch file and returns a dictionary with the file name and its exit code.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/346", "solution": "{\n  \"name\": \"executeScript\",\n  \"type\": \"function\",\n  \"signature\": \"(scriptPath, wait=True, *args)\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Executes a script file in a new process and optionally waits for it to complete.\"\n}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/346", "solution": "{\n  \"name\": \"executeProcess\",\n  \"type\": \"function\",\n  \"signature\": \"(command, options={})\",\n  \"return_type\": \"subprocess.Popen\",\n  \"short_description\": \"Executes a command in a new process with the specified options.\"\n}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"executeScript\", \"type\": \"function\", \"signature\": \"(scriptPath, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a script file in a new process and optionally waits for its completion.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/346", "solution": "{\n  \"name\": \"runScript\",\n  \"type\": \"function\",\n  \"signature\": \"(scriptPath, wait=True, *args)\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Executes a script file in a new process asynchronously and optionally waits for it to complete.\"\n}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"executeScript\", \"type\": \"function\", \"signature\": \"(scriptPath, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a script file in a new process and optionally waits for its completion.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/346", "solution": "{\n  \"name\": \"executeScript\",\n  \"type\": \"function\",\n  \"signature\": \"(scriptPath, wait=True, *args)\",\n  \"return_type\": \"int\",\n  \"short_description\": \"Executes a script file in a new process and optionally waits for it to complete.\"\n}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"executeScript\", \"type\": \"function\", \"signature\": \"(scriptPath, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a script file in a new process and optionally waits for it to complete.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"executeScript\", \"type\": \"function\", \"signature\": \"(scriptPath, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a Python script in a new process and optionally waits for it to complete.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"executeScript\", \"type\": \"function\", \"signature\": \"(scriptPath, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a script file in a new process and optionally waits for it to complete.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"executeScript\", \"type\": \"function\", \"signature\": \"(scriptPath, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a script file in a new process and optionally waits for it to complete.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"executeScript\", \"type\": \"function\", \"signature\": \"(scriptPath, timeout=10)\", \"return_type\": \"dict\", \"short_description\": \"Executes a script file in a new process and monitors its resource usage.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/461", "solution": "{\n  \"name\": \"executeScript\",\n  \"type\": \"function\",\n  \"signature\": \"(scriptPath, timeout=-1)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Executes a script file and monitors its resource usage.\"\n}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"executeScript\", \"type\": \"function\", \"signature\": \"(scriptPath, timeout=10)\", \"return_type\": \"dict\", \"short_description\": \"Executes a script file and monitors its resource usage for a specified timeout period.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"executeScript\", \"type\": \"function\", \"signature\": \"(scriptPath, timeout=-1)\", \"return_type\": \"dict\", \"short_description\": \"Executes a script file in a new process and monitors its resource usage.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"executeScript\", \"type\": \"function\", \"signature\": \"(scriptPath, timeout=10)\", \"return_type\": \"dict\", \"short_description\": \"Executes a script file and monitors its resource usage.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"executeScript\", \"type\": \"function\", \"signature\": \"(scriptPath, timeout=10)\", \"return_type\": \"dict\", \"short_description\": \"Executes a script file and monitors its resource usage for a specified timeout.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"executeScript\", \"type\": \"function\", \"signature\": \"(scriptPath, timeout=10)\", \"return_type\": \"dict\", \"short_description\": \"Executes a script file in a new process and monitors its CPU and memory usage for a specified timeout period.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"executeScript\", \"type\": \"function\", \"signature\": \"(scriptPath, timeout=-1)\", \"return_type\": \"dict\", \"short_description\": \"Executes a script file and monitors its resource usage such as CPU and memory.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"executeScript\", \"type\": \"function\", \"signature\": \"(scriptPath, timeout=10)\", \"return_type\": \"dict\", \"short_description\": \"Executes a script file and monitors its resource usage for a specified timeout period.\"}"}
{"api_id": 269, "api_name": "subprocess.Popen", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"executeScript\", \"type\": \"function\", \"signature\": \"(scriptPath, timeout=10)\", \"return_type\": \"dict\", \"short_description\": \"Executes a script file and monitors its resource usage for a specified timeout period.\"}"}
{"api_id": 270, "api_name": "subprocess.STDOUT", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"executeCommands\", \"type\": \"function\", \"signature\": \"(commands_file_path, output_dir_path)\", \"return_type\": \"List[str]\", \"short_description\": \"Executes a list of commands from a CSV file and writes their output to separate files in the specified directory.\"}"}
{"api_id": 270, "api_name": "subprocess.STDOUT", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"runCommands\", \"type\": \"function\", \"signature\": \"runCommands(commandsFile, outputDir)\", \"return_type\": \"list[str]\", \"short_description\": \"Executes a list of commands from a CSV file and writes their output to files in a specified directory. Returns a list of output file paths.\"}"}
{"api_id": 270, "api_name": "subprocess.STDOUT", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"executeCommands\", \"type\": \"function\", \"signature\": \"(commands_file_path, output_dir_path)\", \"return_type\": \"List[str]\", \"short_description\": \"Executes a list of commands from a CSV file and writes their output to specified directory.\"}"}
{"api_id": 270, "api_name": "subprocess.STDOUT", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"executeCommands\", \"type\": \"function\", \"signature\": \"executeCommands(commands: List[str], outputDir: str) -> List[str]\", \"return_type\": \"List[str]\", \"short_description\": \"Executes a list of commands and writes their output to files in the specified directory. Returns a list of file paths where the outputs are saved.\"}"}
{"api_id": 270, "api_name": "subprocess.STDOUT", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"executeCommands\", \"type\": \"function\", \"signature\": \"executeCommands(commands: List[str], outputDir: str) -> List[str]\", \"return_type\": \"List[str]\", \"short_description\": \"Executes a list of commands and writes their output to files in the specified directory.\"}"}
{"api_id": 270, "api_name": "subprocess.STDOUT", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"executeCommands\", \"type\": \"function\", \"signature\": \"executeCommands(commands_list: List[str], output_dir_path: str) -> List[str]\", \"return_type\": \"List[str]\", \"short_description\": \"Executes a list of shell commands and writes their outputs to files in the specified directory.\"}"}
{"api_id": 270, "api_name": "subprocess.STDOUT", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"executeCommands\", \"type\": \"function\", \"signature\": \"executeCommands(commands: List[str], outputDir: str) -> List[str]\", \"return_type\": \"List[str]\", \"short_description\": \"Executes a list of shell commands and writes their output to files in the specified directory. Returns a list of paths to the output files.\"}"}
{"api_id": 270, "api_name": "subprocess.STDOUT", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"executeCommands\", \"type\": \"function\", \"signature\": \"executeCommands(commands_list, output_dir)\", \"return_type\": \"list\", \"short_description\": \"Executes a list of commands and writes their output to files in the specified directory.\"}"}
{"api_id": 270, "api_name": "subprocess.STDOUT", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"runCommands\", \"type\": \"function\", \"signature\": \"runCommands(commandsFilePath, outputDirPath)\", \"return_type\": \"List[str]\", \"short_description\": \"Executes a list of commands from a CSV file and writes their outputs to specified directory.\"}"}
{"api_id": 270, "api_name": "subprocess.STDOUT", "task_id": "BigCodeBench/15", "solution": "{\"name\": \"executeCommands\", \"type\": \"function\", \"signature\": \"(commands_file_path, output_dir_path)\", \"return_type\": \"list[str]\", \"short_description\": \"Executes a list of commands from a CSV file and writes their output to specified directory.\"}"}
{"api_id": 271, "api_name": "subprocess.PIPE", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"execute_script\", \"type\": \"function\", \"signature\": \"execute_script(script_path, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a script located at script_path in a new process and optionally waits for its completion.\"}"}
{"api_id": 271, "api_name": "subprocess.PIPE", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"run_script\", \"type\": \"function\", \"signature\": \"run_script(script_path, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a script file in a subprocess and optionally waits for it to complete.\"}"}
{"api_id": 271, "api_name": "subprocess.PIPE", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"execute_script\", \"type\": \"function\", \"signature\": \"execute_script(script_path, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a script located at 'script_path' and optionally waits for it to complete.\"}"}
{"api_id": 271, "api_name": "subprocess.PIPE", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"execute_script\", \"type\": \"function\", \"signature\": \"execute_script(script_path, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a script asynchronously and optionally waits for its completion.\"}"}
{"api_id": 271, "api_name": "subprocess.PIPE", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"execute_script\", \"type\": \"function\", \"signature\": \"execute_script(script_path, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a script file in a subprocess and returns the exit code.\"}"}
{"api_id": 271, "api_name": "subprocess.PIPE", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"execute_script\", \"type\": \"function\", \"signature\": \"execute_script(script_path, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a script file in a subprocess and optionally waits for it to complete.\"}"}
{"api_id": 271, "api_name": "subprocess.PIPE", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"run_script\", \"type\": \"function\", \"signature\": \"run_script(script_path, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a Python script in a new process and optionally waits for its completion.\"}"}
{"api_id": 271, "api_name": "subprocess.PIPE", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"execute_script\", \"type\": \"function\", \"signature\": \"execute_script(script_path, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a script file in a new process and optionally waits for it to complete.\"}"}
{"api_id": 271, "api_name": "subprocess.PIPE", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"execute_script\", \"type\": \"function\", \"signature\": \"execute_script(script_path, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a script located at script_path in a subprocess and returns the return code.\"}"}
{"api_id": 271, "api_name": "subprocess.PIPE", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"execute_script\", \"type\": \"function\", \"signature\": \"execute_script(script_path, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a script file in a subprocess and returns the exit code.\"}"}
{"api_id": 272, "api_name": "sys.stderr", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"executeBatchFiles\", \"type\": \"function\", \"signature\": \"execute_batch_files(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Executes all batch files in the specified directory and returns a list of tuples containing the file name and exit code.\"}"}
{"api_id": 272, "api_name": "sys.stderr", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"getFileExecutionStatus\", \"type\": \"function\", \"signature\": \"getFileExecutionStatus(filePath: str) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the execution status of a given file.\"}"}
{"api_id": 272, "api_name": "sys.stderr", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"generateFileList\", \"type\": \"function\", \"signature\": \"generate_file_list(directory_path)\", \"return_type\": \"list\", \"short_description\": \"Generates a list of file paths for all .bat files in the specified directory.\"}"}
{"api_id": 272, "api_name": "sys.stderr", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"generateReport\", \"type\": \"functional\", \"signature\": \"generateReport(data)\", \"return_type\": \"str\", \"short_description\": \"Creates a formatted report string based on the provided data.\"}"}
{"api_id": 272, "api_name": "sys.stderr", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"readStderr\", \"type\": \"function\", \"signature\": \"readStderr() -> str\", \"return_type\": \"str\", \"short_description\": \"Reads and returns the contents of the standard error stream.\"}"}
{"api_id": 272, "api_name": "sys.stderr", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"getStderr\", \"type\": \"function\", \"signature\": \"() -> str\", \"return_type\": \"str\", \"short_description\": \"Retrieves the current standard error stream as a string.\"}"}
{"api_id": 272, "api_name": "sys.stderr", "task_id": "BigCodeBench/326", "solution": "{\n  \"name\": \"get_file_execution_results\",\n  \"type\": \"functional\",\n  \"signature\": \"get_file_execution_results(file_paths)\",\n  \"return_type\": \"List[Tuple[str, Optional[int]]]\",\n  \"short_description\": \"Executes a list of batch files and returns a list of tuples containing the file names and their exit codes.\"\n}"}
{"api_id": 272, "api_name": "sys.stderr", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"get_file_execution_statuses\", \"type\": \"function\", \"signature\": \"def get_file_execution_statuses(directory_path: str) -> List[Tuple[str, Optional[int]]]\", \"return_type\": \"List[Tuple[str, Optional[int]]]\", \"short_description\": \"Retrieves the execution statuses of batch files in a given directory. Returns a list of tuples containing the filename and the exit code (or None if the execution failed).\"}"}
{"api_id": 272, "api_name": "sys.stderr", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"getProcessResults\", \"type\": \"functional\", \"signature\": \"directory_path: str -> list\", \"return_type\": \"list\", \"short_description\": \"Executes all .bat files in the specified directory and returns a list of tuples containing the filename and its exit code.\"}"}
{"api_id": 272, "api_name": "sys.stderr", "task_id": "BigCodeBench/326", "solution": "{\"name\": \"listDirectoryFiles\", \"type\": \"function\", \"signature\": \"listDirectoryFiles(directoryPath: str) -> list\", \"return_type\": \"list\", \"short_description\": \"Lists all files with a .bat extension in the specified directory.\"}"}
{"api_id": 273, "api_name": "sys.executable", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"getPythonExecutable\", \"type\": \"function\", \"signature\": \"() -> str\", \"return_type\": \"str\", \"short_description\": \"Returns the path to the Python executable.\"}"}
{"api_id": 273, "api_name": "sys.executable", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"getPythonExecutable\", \"type\": \"function\", \"signature\": \"() -> str\", \"return_type\": \"str\", \"short_description\": \"Returns the path to the Python executable.\"}"}
{"api_id": 273, "api_name": "sys.executable", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"get_system_executable\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Returns the path to the Python executable currently in use.\"}"}
{"api_id": 273, "api_name": "sys.executable", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"getPythonExecutable\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Returns the path to the Python executable.\"}"}
{"api_id": 273, "api_name": "sys.executable", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"getPythonExecutable\", \"type\": \"function\", \"signature\": \"() -> str\", \"return_type\": \"str\", \"short_description\": \"Returns the path to the Python executable currently in use.\"}"}
{"api_id": 273, "api_name": "sys.executable", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"getScriptPath\", \"type\": \"function\", \"signature\": \"def getScriptPath() -> str\", \"return_type\": \"str\", \"short_description\": \"Returns the path to the script being executed.\"}"}
{"api_id": 273, "api_name": "sys.executable", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"getPythonExecutable\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Returns the path to the Python executable currently in use.\"}"}
{"api_id": 273, "api_name": "sys.executable", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"getSystemExecutable\", \"type\": \"function\", \"signature\": \"() -> str\", \"return_type\": \"str\", \"short_description\": \"Returns the path to the Python executable currently in use.\"}"}
{"api_id": 273, "api_name": "sys.executable", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"get_script_path\", \"type\": \"function\", \"signature\": \"get_script_path() -> str\", \"return_type\": \"str\", \"short_description\": \"Returns the path to the script being executed.\"}"}
{"api_id": 273, "api_name": "sys.executable", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"getScriptPath\", \"type\": \"function\", \"signature\": \"getScriptPath()\", \"return_type\": \"str\", \"short_description\": \"Retrieves the path of the script to be executed.\"}"}
{"api_id": 274, "api_name": "tarfile.open", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"extractTarball\", \"type\": \"function\", \"signature\": \"(tarFilePath=None, extractPath=None)\", \"return_type\": \"bool\", \"short_description\": \"Extracts a tarball file to a specified directory.\"}"}
{"api_id": 274, "api_name": "tarfile.open", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"downloadAndExtractTar\", \"type\": \"function\", \"signature\": \"(url, target_file, expected_checksum, compression='gz')\", \"return_type\": \"bool\", \"short_description\": \"Downloads a tar file from a given URL, checks its integrity using an MD5 checksum, and extracts it.\"}"}
{"api_id": 274, "api_name": "tarfile.open", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"createTarArchive\", \"type\": \"function\", \"signature\": \"(name=None, mode='r', fileobj=None, bufsize=10240, **kwargs)\", \"return_type\": \"TarFile\", \"short_description\": \"Create a tar archive for reading, writing or appending. Return an appropriate TarFile class.\"}"}
{"api_id": 274, "api_name": "tarfile.open", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"extractTarFile\", \"type\": \"function\", \"signature\": \"(tarFilePath=None, extractToPath=None)\", \"return_type\": \"bool\", \"short_description\": \"Extracts a tar file from the specified path to the target directory. Returns True if successful, False otherwise.\"}"}
{"api_id": 274, "api_name": "tarfile.open", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"extractTarGz\", \"type\": \"function\", \"signature\": \"(tarFilePath=None, extractDir=None)\", \"return_type\": \"bool\", \"short_description\": \"Extracts a gzip-compressed tar file to a specified directory.\"}"}
{"api_id": 274, "api_name": "tarfile.open", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"extractTar\", \"type\": \"function\", \"signature\": \"(tarFilePath=None, extractPath=None)\", \"return_type\": \"bool\", \"short_description\": \"Extracts the contents of a tar file from the given file path to the specified extraction path.\"}"}
{"api_id": 274, "api_name": "tarfile.open", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"extractTarFile\", \"type\": \"function\", \"signature\": \"(tarFilePath=None, extractPath=None)\", \"return_type\": \"bool\", \"short_description\": \"Extracts the contents of a tar file located at the specified path to the given extraction path.\"}"}
{"api_id": 274, "api_name": "tarfile.open", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"downloadAndExtractTarball\", \"type\": \"function\", \"signature\": \"(url, target_file_path, expected_checksum)\", \"return_type\": \"bool\", \"short_description\": \"Downloads a tarball from a given URL, verifies its MD5 checksum, and extracts it to the specified directory.\"}"}
{"api_id": 274, "api_name": "tarfile.open", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"extractTarball\", \"type\": \"function\", \"signature\": \"(tarFilePath, extractToDir)\", \"return_type\": \"bool\", \"short_description\": \"Extracts the contents of a tarball file to a specified directory.\"}"}
{"api_id": 274, "api_name": "tarfile.open", "task_id": "BigCodeBench/998", "solution": "{\"name\": \"createTarArchive\", \"type\": \"function\", \"signature\": \"(filePath, mode='w:gz', fileobj=None, bufsize=10240)\", \"return_type\": \"TarFile\", \"short_description\": \"Create a tar archive file with optional compression.\"}"}
{"api_id": 275, "api_name": "tensorflow.keras.optimizers.SGD", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"createOptimizer\",\n  \"type\": \"function\",\n  \"signature\": \"(optimizer_type, learning_rate=0.01, momentum=0.0, nesterov=False, weight_decay=None, clipnorm=None, clipvalue=None, global_clipnorm=None, use_ema=False, ema_momentum=0.99, ema_overwrite_frequency=None, jit_compile=True)\",\n  \"return_type\": \"tf.keras.optimizers.Optimizer\",\n  \"short_description\": \"Creates a custom optimizer with specified parameters.\"\n}"}
{"api_id": 275, "api_name": "tensorflow.keras.optimizers.SGD", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"generate_roc_curve\",\n  \"type\": \"function\",\n  \"signature\": \"(model, X_test, Y_test, plot=True)\",\n  \"return_type\": \"dict\",\n  \"short_description\": \"Generates and optionally plots a ROC curve for a given model and test data, returning the ROC curve metrics.\"\n}"}
{"api_id": 275, "api_name": "tensorflow.keras.optimizers.SGD", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createOptimizer\", \"type\": \"function\", \"signature\": \"(optimizer_type, learning_rate=0.01, momentum=0.0, nesterov=False, amsgrad=False, weight_decay=None, clipnorm=None, clipvalue=None, global_clipnorm=None, use_ema=False, ema_momentum=0.99, ema_overwrite_frequency=None, jit_compile=True, name=None, **kwargs)\", \"return_type\": \"tf.keras.optimizers.Optimizer\", \"short_description\": \"Creates a custom optimizer with specified parameters.\"}"}
{"api_id": 275, "api_name": "tensorflow.keras.optimizers.SGD", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createOptimizer\", \"type\": \"function\", \"signature\": \"(optimizer_type, learning_rate=0.01, momentum=0.0, nesterov=False, amsgrad=False, weight_decay=None, clipnorm=None, clipvalue=None, global_clipnorm=None, use_ema=False, ema_momentum=0.99, ema_overwrite_frequency=None, jit_compile=True, name=None, **kwargs)\", \"return_type\": \"Optimizer\", \"short_description\": \"Creates a custom optimizer with specified parameters.\"}"}
{"api_id": 275, "api_name": "tensorflow.keras.optimizers.SGD", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createOptimizer\", \"type\": \"function\", \"signature\": \"(optimizer_type, learning_rate=0.01, momentum=0.0, nesterov=False, weight_decay=None, clipnorm=None, clipvalue=None, global_clipnorm=None, use_ema=False, ema_momentum=0.99, ema_overwrite_frequency=None, jit_compile=True, name='optimizer', **kwargs)\", \"return_type\": \"tf.keras.optimizers.Optimizer\", \"short_description\": \"Creates a custom optimizer with specified parameters.\"}"}
{"api_id": 275, "api_name": "tensorflow.keras.optimizers.SGD", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"generate_roc_curve\", \"type\": \"function\", \"signature\": \"(y_true, y_pred, title='ROC Curve', ax=None)\", \"return_type\": \"Tuple[np.ndarray, np.ndarray, List[float], Axes]\", \"short_description\": \"Generates a Receiver Operating Characteristic (ROC) curve from true and predicted labels. This function is designed to work with binary classification tasks.\"}"}
{"api_id": 275, "api_name": "tensorflow.keras.optimizers.SGD", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"calculateAUC\", \"type\": \"function\", \"signature\": \"(predictions, labels)\", \"return_type\": \"float\", \"short_description\": \"Calculates the Area Under the Receiver Operating Characteristic Curve (AUC) from predicted and true labels.\"}"}
{"api_id": 275, "api_name": "tensorflow.keras.optimizers.SGD", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createOptimizer\", \"type\": \"function\", \"signature\": \"(optimizer_type, learning_rate=0.01, momentum=0.0, nesterov=False, amsgrad=False, weight_decay=None, clipnorm=None, clipvalue=None, global_clipnorm=None, use_ema=False, ema_momentum=0.99, ema_overwrite_frequency=None, jit_compile=True, name=None, **kwargs)\", \"return_type\": \"tf.keras.optimizers.Optimizer\", \"short_description\": \"Creates a custom optimizer with specified parameters.\"}"}
{"api_id": 275, "api_name": "tensorflow.keras.optimizers.SGD", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createModelWithSGD\", \"type\": \"function\", \"signature\": \"(learning_rate=0.01, momentum=0.0, nesterov=False, amsgrad=False, weight_decay=None, clipnorm=None, clipvalue=None, global_clipnorm=None, use_ema=False, ema_momentum=0.99, ema_overwrite_frequency=None, jit_compile=True, name='SGD', **kwargs)\", \"return_type\": \"tuple\", \"short_description\": \"Creates and compiles a model using the Stochastic Gradient Descent (SGD) optimizer.\"}"}
{"api_id": 275, "api_name": "tensorflow.keras.optimizers.SGD", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createModel\", \"type\": \"function\", \"signature\": \"(model_type, layers, input_shape)\", \"return_type\": \"tf.keras.Model\", \"short_description\": \"Creates a new Keras model with the specified type and layers.\"}"}
{"api_id": 276, "api_name": "tensorflow.keras.layers.Dense", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createDenseLayer\", \"type\": \"function\", \"signature\": \"(units, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, input_shape=None)\", \"return_type\": \"object\", \"short_description\": \"Creates a Dense layer with the specified parameters for use in a neural network.\"}"}
{"api_id": 276, "api_name": "tensorflow.keras.layers.Dense", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createDenseLayer\", \"type\": \"function\", \"signature\": \"(units, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)\", \"return_type\": \"keras.layers.Dense\", \"short_description\": \"Creates and returns a Dense layer for a neural network.\"}"}
{"api_id": 276, "api_name": "tensorflow.keras.layers.Dense", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createDenseLayer\", \"type\": \"function\", \"signature\": \"(units, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)\", \"return_type\": \"tf.keras.layers.Dense\", \"short_description\": \"Creates a Dense layer with the specified parameters.\"}"}
{"api_id": 276, "api_name": "tensorflow.keras.layers.Dense", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createDenseLayer\", \"type\": \"function\", \"signature\": \"(units, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)\", \"return_type\": \"tf.keras.layers.Dense\", \"short_description\": \"Creates a dense neural network layer with specified parameters.\"}"}
{"api_id": 276, "api_name": "tensorflow.keras.layers.Dense", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createDenseLayer\", \"type\": \"function\", \"signature\": \"(units, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs)\", \"return_type\": \"Tuple[keras.Sequential, plt.Axes]\", \"short_description\": \"Creates and returns a Dense layer with the specified parameters and plots the ROC curve for the model.\"}"}
{"api_id": 276, "api_name": "tensorflow.keras.layers.Dense", "task_id": "BigCodeBench/418", "solution": "{\n  \"name\": \"createDenseLayer\",\n  \"type\": \"function\",\n  \"signature\": \"(units, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)\",\n  \"return_type\": \"tf.keras.layers.Dense\",\n  \"short_description\": \"Creates a Dense layer for a neural network.\"\n}"}
{"api_id": 276, "api_name": "tensorflow.keras.layers.Dense", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createDenseLayer\", \"type\": \"function\", \"signature\": \"(units, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs)\", \"return_type\": \"tf.keras.layers.Dense\", \"short_description\": \"Creates and returns a Dense layer with the specified parameters.\"}"}
{"api_id": 276, "api_name": "tensorflow.keras.layers.Dense", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createDenseLayer\", \"type\": \"function\", \"signature\": \"(units, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, input_shape=None)\", \"return_type\": \"tf.keras.layers.Dense\", \"short_description\": \"Creates a Dense layer with the specified parameters and returns it as a Keras layer object.\"}"}
{"api_id": 276, "api_name": "tensorflow.keras.layers.Dense", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createDenseLayer\", \"type\": \"function\", \"signature\": \"(units, activation=None, useBias=True, kernelInitializer='glorot_uniform', biasInitializer='zeros', kernelRegularizer=None, biasRegularizer=None, activityRegularizer=None, kernelConstraint=None, biasConstraint=None, inputShape=None)\", \"return_type\": \"tuple\", \"short_description\": \"Creates and returns a Dense layer with the specified parameters.\"}"}
{"api_id": 276, "api_name": "tensorflow.keras.layers.Dense", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createDenseLayer\", \"type\": \"function\", \"signature\": \"(units, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)\", \"return_type\": \"keras.layers.Dense\", \"short_description\": \"Creates a dense neural network layer with the specified parameters.\"}"}
{"api_id": 277, "api_name": "tensorflow.keras.Sequential", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createSequentialModel\", \"type\": \"function\", \"signature\": \"(layers=None, name=None)\", \"return_type\": \"tf.keras.Model\", \"short_description\": \"Creates a Sequential model with the given layers.\"}"}
{"api_id": 277, "api_name": "tensorflow.keras.Sequential", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createSequentialModel\", \"type\": \"function\", \"signature\": \"(layers=None, name=None)\", \"return_type\": \"tf.keras.Model\", \"short_description\": \"Creates a Sequential model with the given layers.\"}"}
{"api_id": 277, "api_name": "tensorflow.keras.Sequential", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createSequentialModel\", \"type\": \"function\", \"signature\": \"(layers=None, name=None)\", \"return_type\": \"tf.keras.Model\", \"short_description\": \"Creates a Sequential model from given layers. This function is intended for building simple neural networks.\"}"}
{"api_id": 277, "api_name": "tensorflow.keras.Sequential", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createSequentialModel\", \"type\": \"function\", \"signature\": \"(layers=None, name=None)\", \"return_type\": \"tf.keras.Model\", \"short_description\": \"Creates a Sequential model with the specified layers.\"}"}
{"api_id": 277, "api_name": "tensorflow.keras.Sequential", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createModel\", \"type\": \"function\", \"signature\": \"(layers=None, name=None)\", \"return_type\": \"tf.keras.Model\", \"short_description\": \"Creates a Sequential model from given layers.\"}"}
{"api_id": 277, "api_name": "tensorflow.keras.Sequential", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createSequentialModel\", \"type\": \"function\", \"signature\": \"(layers=None, name=None)\", \"return_type\": \"tf.keras.Model\", \"short_description\": \"Creates a Sequential model with the given layers. This function is designed to be used for building simple neural networks using TensorFlow's Keras API.\"}"}
{"api_id": 277, "api_name": "tensorflow.keras.Sequential", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createSequentialModel\", \"type\": \"function\", \"signature\": \"(layers=None, name=None)\", \"return_type\": \"tf.keras.Model\", \"short_description\": \"Creates a Sequential model from given layers.\"}"}
{"api_id": 277, "api_name": "tensorflow.keras.Sequential", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createSequentialModel\", \"type\": \"function\", \"signature\": \"(layers=None, name=None)\", \"return_type\": \"tf.keras.Model\", \"short_description\": \"Creates a Sequential model with the given layers.\"}"}
{"api_id": 277, "api_name": "tensorflow.keras.Sequential", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createSequentialModel\", \"type\": \"function\", \"signature\": \"(layers=None, name=None)\", \"return_type\": \"tf.keras.Model\", \"short_description\": \"Creates a Sequential model with the given layers. This function is designed to provide a high-level interface for building and training neural networks using the Keras API.\"}"}
{"api_id": 277, "api_name": "tensorflow.keras.Sequential", "task_id": "BigCodeBench/418", "solution": "{\"name\": \"createSequentialModel\", \"type\": \"function\", \"signature\": \"(layers=None, name=None)\", \"return_type\": \"tf.keras.Model\", \"short_description\": \"Creates a Sequential model with the given layers.\"}"}
{"api_id": 278, "api_name": "threading.Thread", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"scanNetworkPorts\", \"type\": \"function\", \"signature\": \"(ip_range, port)\", \"return_type\": \"dict\", \"short_description\": \"Scans a network range to find open ports on a specified port.\"}"}
{"api_id": 278, "api_name": "threading.Thread", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"scanNetworkPorts\", \"type\": \"function\", \"signature\": \"(ip_range, port)\", \"return_type\": \"dict\", \"short_description\": \"Scans a network range for open ports on a specified port.\"}"}
{"api_id": 278, "api_name": "threading.Thread", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"scanNetwork\", \"type\": \"function\", \"signature\": \"(ipRange, port)\", \"return_type\": \"dict\", \"short_description\": \"Scans a network range to find open ports.\"}"}
{"api_id": 278, "api_name": "threading.Thread", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"scanNetwork\", \"type\": \"function\", \"signature\": \"(ip_range, port)\", \"return_type\": \"dict\", \"short_description\": \"Scans a given network range for open ports on a specified port.\"}"}
{"api_id": 278, "api_name": "threading.Thread", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"generateNetworkReport\", \"type\": \"function\", \"signature\": \"(ipRange, port)\", \"return_type\": \"dict\", \"short_description\": \"Generates a report of open ports within a given IP network range.\"}"}
{"api_id": 278, "api_name": "threading.Thread", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"scanNetwork\", \"type\": \"function\", \"signature\": \"(ipRange, port)\", \"return_type\": \"dict\", \"short_description\": \"Scans a network range for open ports on a specified port.\"}"}
{"api_id": 278, "api_name": "threading.Thread", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"findOpenPorts\", \"type\": \"function\", \"signature\": \"(ip_range, port)\", \"return_type\": \"dict\", \"short_description\": \"Scans a given IP range and checks for open ports at a specified port number.\"}"}
{"api_id": 278, "api_name": "threading.Thread", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"scanNetwork\", \"type\": \"function\", \"signature\": \"(ip_range, port)\", \"return_type\": \"dict\", \"short_description\": \"Scans a network range for open ports.\"}"}
{"api_id": 278, "api_name": "threading.Thread", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"scanNetwork\", \"type\": \"function\", \"signature\": \"(ipRange, port)\", \"return_type\": \"dict\", \"short_description\": \"Scans a network range to find open ports.\"}"}
{"api_id": 278, "api_name": "threading.Thread", "task_id": "BigCodeBench/147", "solution": "{\"name\": \"scanNetwork\", \"type\": \"function\", \"signature\": \"(ipRange, port)\", \"return_type\": \"dict\", \"short_description\": \"Scans a given network range for open ports and returns a dictionary with IP addresses as keys and boolean values indicating whether the port is open or not.\"}"}
{"api_id": 278, "api_name": "threading.Thread", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"createThreadPool\", \"type\": \"function\", \"signature\": \"(num_threads, target_func, args_list)\", \"return_type\": \"list\", \"short_description\": \"Creates a pool of threads that execute a given function with provided arguments.\"}"}
{"api_id": 278, "api_name": "threading.Thread", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"createThreadPool\", \"type\": \"function\", \"signature\": \"(num_threads, task_func)\", \"return_type\": \"list\", \"short_description\": \"Creates a pool of threads to execute a given task function concurrently.\"}"}
{"api_id": 278, "api_name": "threading.Thread", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"execute_tasks\", \"type\": \"function\", \"signature\": \"(tasks=())\", \"return_type\": \"list\", \"short_description\": \"Executes a list of tasks concurrently and returns their exit codes.\"}"}
{"api_id": 278, "api_name": "threading.Thread", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"generate_thread_pool\", \"type\": \"function\", \"signature\": \"(num_threads, task_list)\", \"return_type\": \"List[int]\", \"short_description\": \"Creates a pool of threads to execute a given list of tasks.\"}"}
{"api_id": 278, "api_name": "threading.Thread", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"execute_tasks\", \"type\": \"function\", \"signature\": \"(tasks=())\", \"return_type\": \"list\", \"short_description\": \"Executes a list of tasks concurrently and returns their exit codes.\"}"}
{"api_id": 278, "api_name": "threading.Thread", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"execute_task\", \"type\": \"function\", \"signature\": \"(file_list)\", \"return_type\": \"list\", \"short_description\": \"Executes tasks asynchronously using threads and collects their exit codes.\"}"}
{"api_id": 278, "api_name": "threading.Thread", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"runMultipleProcesses\", \"type\": \"function\", \"signature\": \"(file_list)\", \"return_type\": \"List[int]\", \"short_description\": \"Executes multiple processes asynchronously and returns their exit codes.\"}"}
{"api_id": 278, "api_name": "threading.Thread", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"execute_batch_tasks\", \"type\": \"function\", \"signature\": \"(task_list, max_threads=None)\", \"return_type\": \"List[int]\", \"short_description\": \"Executes a batch of tasks concurrently using a specified number of threads, returning a list of exit codes.\"}"}
{"api_id": 278, "api_name": "threading.Thread", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"runParallelTasks\", \"type\": \"function\", \"signature\": \"(tasks=(), max_concurrent=5)\", \"return_type\": \"list\", \"short_description\": \"Executes a list of tasks in parallel, with a maximum limit on concurrent tasks.\"}"}
{"api_id": 278, "api_name": "threading.Thread", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"runParallelTasks\", \"type\": \"function\", \"signature\": \"(task_list, num_threads=None)\", \"return_type\": \"List[int]\", \"short_description\": \"Executes a list of tasks in parallel using a specified number of threads or automatically determined number.\"}"}
{"api_id": 279, "api_name": "time.time", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generateRandomPlot\", \"type\": \"function\", \"signature\": \"(list, int, int)\", \"return_type\": \"(float, matplotlib.axes._axes.Axes)\", \"short_description\": \"Generates a histogram of random numbers from a list and returns the time taken to generate the random numbers and the plot axes.\"}"}
{"api_id": 279, "api_name": "time.time", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"getRandomNumbers\", \"type\": \"function\", \"signature\": \"getRandomNumbers(size: int, seed: int) -> List[int]\", \"return_type\": \"List[int]\", \"short_description\": \"Generates a list of random numbers with a specified size and seed for reproducibility.\"}"}
{"api_id": 279, "api_name": "time.time", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generateRandomPlot\", \"type\": \"function\", \"signature\": \"(list, int, int)\", \"return_type\": \"(float, plt.Axes)\", \"short_description\": \"Generates a histogram of random numbers from a list and returns the time taken and the plot axis.\"}"}
{"api_id": 279, "api_name": "time.time", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generateRandomPlot\", \"type\": \"function\", \"signature\": \"([list], int, int) -> (float, matplotlib.axes._subplots.AxesSubplot)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a histogram plot from random numbers and returns the time taken to generate the list.\"}"}
{"api_id": 279, "api_name": "time.time", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generateRandomNumbers\", \"type\": \"function\", \"signature\": \"def generateRandomNumbers(size: int, seed: int) -> list[int]\", \"return_type\": \"list[int]\", \"short_description\": \"Generates a list of random integers within a specified range and size, using a given seed for reproducibility.\"}"}
{"api_id": 279, "api_name": "time.time", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generateRandomList\", \"type\": \"function\", \"signature\": \"generateRandomList(size: int, seed: int) -> List[int]\", \"return_type\": \"List[int]\", \"short_description\": \"Generates a list of random integers within a specified size and seed.\"}"}
{"api_id": 279, "api_name": "time.time", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generateRandomHistogram\", \"type\": \"function\", \"signature\": \"generate_random_histogram(my_list, size=100, seed=100)\", \"return_type\": \"tuple(float, Axes)\", \"short_description\": \"Generates a histogram of random numbers from a list and returns the execution time and the matplotlib Axes object.\"}"}
{"api_id": 279, "api_name": "time.time", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generateRandomPlot\", \"type\": \"function\", \"signature\": \"def generateRandomPlot(data_list, size=100, seed=100):\", \"return_type\": \"tuple[float, plt.Axes]\", \"short_description\": \"Generates a histogram plot of random numbers from a list and returns the time taken and the Axes object of the plot.\"}"}
{"api_id": 279, "api_name": "time.time", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"getElapsedTime\", \"type\": \"function\", \"signature\": \"def getElapsedTime():\", \"return_type\": \"float\", \"short_description\": \"Returns the elapsed time in seconds from a given start time.\"}"}
{"api_id": 279, "api_name": "time.time", "task_id": "BigCodeBench/124", "solution": "{\"name\": \"generateRandomList\", \"type\": \"function\", \"signature\": \"(size: int, seed: int) -> list[int]\", \"return_type\": \"list[int]\", \"short_description\": \"Generates a list of random integers within a specified range, using a given seed for reproducibility.\"}"}
{"api_id": 279, "api_name": "time.time", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"getCurrentMemoryUsage\", \"type\": \"function\", \"signature\": \"getCurrentMemoryUsage() -> dict\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the current memory usage of the system.\"}"}
{"api_id": 279, "api_name": "time.time", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"getCurrentWeather\", \"type\": \"function\", \"signature\": \"location: str\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the current weather conditions for a given location.\"}"}
{"api_id": 279, "api_name": "time.time", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"getCurrentTime\", \"type\": \"callable\", \"signature\": [], \"return_type\": \"float\", \"short_description\": \"Returns the current time in seconds since the Epoch.\"}"}
{"api_id": 279, "api_name": "time.time", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"getSystemInfo\", \"type\": \"function\", \"signature\": [], \"return_type\": \"dict\", \"short_description\": \"Retrieves system information including CPU and memory usage.\"}"}
{"api_id": 279, "api_name": "time.time", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"getCurrentTimestamp\", \"type\": \"function\", \"signature\": [], \"return_type\": \"float\", \"short_description\": \"Returns the current time in seconds since the Epoch.\"}"}
{"api_id": 279, "api_name": "time.time", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"getSystemUptime\", \"type\": \"function\", \"signature\": [], \"return_type\": \"float\", \"short_description\": \"Returns the system uptime in seconds.\"}"}
{"api_id": 279, "api_name": "time.time", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"getCurrentTimestamp\", \"type\": \"callable\", \"signature\": \"getCurrentTimestamp()\", \"return_type\": \"float\", \"short_description\": \"Returns the current timestamp in seconds since the Epoch.\"}"}
{"api_id": 279, "api_name": "time.time", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"getCurrentDateTime\", \"type\": \"function\", \"signature\": [], \"return_type\": \"str\", \"short_description\": \"Returns the current date and time as a string in the format 'YYYY-MM-DD HH:MM:SS'.\"}"}
{"api_id": 279, "api_name": "time.time", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"getSystemHealth\", \"type\": \"function\", \"signature\": \"def getSystemHealth() -> dict\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the current system health status, including CPU and memory usage.\"}"}
{"api_id": 279, "api_name": "time.time", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"getSystemUptime\", \"type\": \"function\", \"signature\": [], \"return_type\": \"float\", \"short_description\": \"Returns the system uptime in seconds.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"trigger_process\", \"type\": \"function\", \"signature\": \"(process_name: str)\", \"return_type\": \"str\", \"short_description\": \"Triggers a process with the given name, either by starting it if not running or restarting it if running.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"length\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of a specified length.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"executeCommand\", \"type\": \"function\", \"signature\": \"command: str\", \"return_type\": \"str\", \"short_description\": \"Executes a system command and returns the output.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"runCommand\", \"type\": \"function\", \"signature\": \"command: str\", \"return_type\": \"str\", \"short_description\": \"Executes a command and returns the output.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"generate_report\", \"type\": \"function\", \"signature\": \"generate_report(data: dict, format: str)\", \"return_type\": \"str\", \"short_description\": \"Generates a report in the specified format from the given data.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"generateUUID\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a unique identifier in the form of a UUID (Universally Unique Identifier).\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"executeProcess\", \"type\": \"function\", \"signature\": \"executeProcess(processName: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Executes a process and returns a status message.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"(length: int) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of a specified length.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"executeCommand\", \"type\": \"function\", \"signature\": \"command: str\", \"return_type\": \"str\", \"short_description\": \"Executes a system command and returns the output.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/17", "solution": "{\"name\": \"executeProcess\", \"type\": \"function\", \"signature\": \"(process_name: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Executes a process with the given name and handles its execution state.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"calculate_average_word_length\", \"type\": \"function\", \"signature\": \"text\", \"return_type\": \"float\", \"short_description\": \"Calculates the average length of words in a given text.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"generate_report\", \"type\": \"function\", \"signature\": \"generate_report(data, format)\", \"return_type\": \"str\", \"short_description\": \"Creates a report in a specified format from the given data.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"generate_report\", \"type\": \"function\", \"signature\": \"generate_report(data: list, format: str)\", \"return_type\": \"str\", \"short_description\": \"Generates a report in a specified format from a list of data entries.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"generate_report(data, format)\", \"return_type\": \"str\", \"short_description\": \"Generates a report in a specified format from the provided data.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"generateReport(data, format)\", \"return_type\": \"str\", \"short_description\": \"Generates a report in the specified format from the given data.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"setImmediate\", \"type\": \"callable\", \"signature\": \"callback, *args\", \"return_type\": \"None\", \"short_description\": \"Executes a callback function immediately. The callback is passed any additional arguments.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"generateReport(data, format)\", \"return_type\": \"str\", \"short_description\": \"Generates a report in a specified format from the given data.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"generateReport(data, format)\", \"return_type\": \"str\", \"short_description\": \"Generates a report in a specified format from given data.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"generate_report\", \"type\": \"function\", \"signature\": \"generate_report(data: dict, format: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a report in the specified format from the given data.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/324", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"length: int\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of a specified length.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"executeAsyncTask\", \"type\": \"function\", \"signature\": \"executeAsyncTask(scriptPath, wait=True, *args)\", \"return_type\": \"int or None\", \"short_description\": \"Executes a script asynchronously and optionally waits for its completion.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"length\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of the specified length.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"executeAsyncScript\", \"type\": \"function\", \"signature\": \"executeAsyncScript(scriptPath, wait=True, *args)\", \"return_type\": \"Optional[int]\", \"short_description\": \"Executes a script asynchronously and optionally waits for its completion.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"length\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of a specified length.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"(length: int) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of a specified length.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"length\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of specified length.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"executeScript\", \"type\": \"function\", \"signature\": \"(scriptPath, wait=True, *args)\", \"return_type\": \"int\", \"short_description\": \"Executes a script located at the given path. Optionally waits for the script to finish execution.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"(length: int) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of the specified length.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"(length: int)\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of a specified length.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/346", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"(length: int) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of a specified length.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"executeScript\", \"type\": \"function\", \"signature\": \"execute_script(script_path: str, timeout: int = 10) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Executes a script located at the specified path and monitors its CPU and memory usage up to a given timeout.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"(length: int) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of the specified length.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"generate_report\", \"type\": \"function\", \"signature\": \"generate_report(data: dict, report_type: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a report from the given data in the specified format.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"executeBashScript\", \"type\": \"function\", \"signature\": \"(script_path: str, timeout: int = 10) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Executes a bash script and monitors its CPU and memory usage for a specified timeout period.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"length\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of a specified length.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"length: int\", \"return_type\": \"str\", \"short_description\": \"Generates a random string of the specified length.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"fetchProcessStats\", \"type\": \"function\", \"signature\": \"fetch_process_stats(pid: int, timeout: float = 10) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Retrieves CPU and memory usage statistics of a process given its PID and a timeout.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"generate_report\", \"type\": \"function\", \"signature\": \"generate_report(data: dict, report_type: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a report in a specified format based on the provided data.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"generate_report(data: dict, format: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a report in the specified format from the given data.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/461", "solution": "{\"name\": \"executeScript\", \"type\": \"function\", \"signature\": \"executeScript(scriptPath: str, timeout: int = 10) -> dict\", \"return_type\": \"dict\", \"short_description\": \"Executes a bash script and monitors its CPU and memory usage for a specified timeout.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"generate_report(data, format)\", \"return_type\": \"str\", \"short_description\": \"Generates a report from the given data in the specified format.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"generate_report\", \"type\": \"function\", \"signature\": \"generate_report(data, format)\", \"return_type\": \"str\", \"short_description\": \"Generates a report in the specified format from the given data.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"generateThumbnail\", \"type\": \"function\", \"signature\": \"generateThumbnail(videoPath, thumbnailPath, size)\", \"return_type\": \"boolean\", \"short_description\": \"Creates a thumbnail image from a video file at the specified path and saves it to the given thumbnail path. The size parameter determines the dimensions of the thumbnail.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"generateThumbnail\", \"type\": \"function\", \"signature\": \"generateThumbnail(videoPath, thumbnailPath, size)\", \"return_type\": \"bool\", \"short_description\": \"Creates a thumbnail image from a video file at the specified path.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"generateReport(data, format)\", \"return_type\": \"str\", \"short_description\": \"Generates a report from the provided data in the specified format.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"generateThumbnails\", \"type\": \"function\", \"signature\": \"generate_thumbnails(directory, format)\", \"return_type\": \"list\", \"short_description\": \"Generates thumbnails for all images in the specified directory and returns their file paths.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"generate_report(data, format)\", \"return_type\": \"str\", \"short_description\": \"Generates a report in the specified format from the given data.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"generateThumbnail\", \"type\": \"function\", \"signature\": \"generateThumbnail(imagePath, thumbnailPath, size)\", \"return_type\": \"bool\", \"short_description\": \"Generates a thumbnail of an image at the specified size and saves it to the provided path.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"generateReport\", \"type\": \"function\", \"signature\": \"generate_report(data, report_type)\", \"return_type\": \"str\", \"short_description\": \"Generates a report based on the provided data and report type.\"}"}
{"api_id": 280, "api_name": "time.sleep", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"generateThumbnail\", \"type\": \"function\", \"signature\": \"generateThumbnail(videoPath, thumbnailPath, size)\", \"return_type\": \"bool\", \"short_description\": \"Generate a thumbnail image from a video file at the specified path and save it to the given thumbnail path. The size parameter determines the dimensions of the thumbnail.\"}"}
{"api_id": 281, "api_name": "typing.List", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"generate_forecast\", \"type\": \"function\", \"signature\": \"(dataframe)\", \"return_type\": \"tuple[list[float], Axes]\", \"short_description\": \"Generates a forecast for the closing prices of a stock using ARIMA model and returns the forecasted values along with the plot axes.\"}"}
{"api_id": 281, "api_name": "typing.List", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"calculateARIMAForecast\", \"type\": \"function\", \"signature\": \"(data: pd.DataFrame, steps: int) -> List[float]\", \"return_type\": \"List[float]\", \"short_description\": \"Calculates the ARIMA forecast for the next given number of days.\"}"}
{"api_id": 281, "api_name": "typing.List", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"generate_forecast\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame)\", \"return_type\": \"Tuple[List[float], Axes]\", \"short_description\": \"Generates a forecast for the next 7 days of closing prices and returns the forecast and the plot axis.\"}"}
{"api_id": 281, "api_name": "typing.List", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"generate_forecast\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame)\", \"return_type\": \"Tuple[List[float], Axes]\", \"short_description\": \"Generates a forecast for the next 7 days of closing prices and returns the forecast and the plot axis.\"}"}
{"api_id": 281, "api_name": "typing.List", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"generateForecast\", \"type\": \"function\", \"signature\": \"generate_forecast(dataframe: pd.DataFrame) -> Tuple[List[float], Axes]\", \"return_type\": \"Tuple[List[float], Axes]\", \"short_description\": \"Generates a forecast for future closing prices using an ARIMA model and returns the forecasted values along with the plot axes.\"}"}
{"api_id": 281, "api_name": "typing.List", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"calculateArimaForecast\", \"type\": \"function\", \"signature\": \"(data: pd.DataFrame, steps: int) -> Tuple[List[float], Axes]\", \"return_type\": \"Tuple[List[float], Axes]\", \"short_description\": \"Calculates the ARIMA forecast for the next specified number of days and returns the forecasted values along with the plot axes.\"}"}
{"api_id": 281, "api_name": "typing.List", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"generate_forecast\", \"type\": \"function\", \"signature\": \"(df: pd.DataFrame)\", \"return_type\": \"Tuple[List[float], plt.Axes]\", \"short_description\": \"Generates a forecast for the next 7 days of closing prices using an ARIMA model and returns the forecast and the plot axes.\"}"}
{"api_id": 281, "api_name": "typing.List", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"generateTimeSeriesForecast\", \"type\": \"function\", \"signature\": \"(data: pd.DataFrame) => Tuple[List[float], Axes]\", \"return_type\": \"Tuple[List[float], Axes]\", \"short_description\": \"Generates a time series forecast and plots it using ARIMA model.\"}"}
{"api_id": 281, "api_name": "typing.List", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"calculateARIMAForecast\", \"type\": \"function\", \"signature\": \"(dataFrame, steps)\", \"return_type\": \"List[float]\", \"short_description\": \"Calculates the ARIMA forecast for the next specified number of days.\"}"}
{"api_id": 281, "api_name": "typing.List", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"generateForecast\", \"type\": \"function\", \"signature\": \"(dataframe)\", \"return_type\": \"List[float], Axes\", \"short_description\": \"Generates a forecast of closing prices for the next 7 days and returns the forecast and the plot axes.\"}"}
{"api_id": 282, "api_name": "typing.Tuple", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"generateTimeSeriesForecast\", \"type\": \"function\", \"signature\": \"(data: pd.DataFrame) => Tuple[List[float], Axes]\", \"return_type\": \"Tuple[List[float], Axes]\", \"short_description\": \"Generates a time series forecast and returns both the forecasted values and the matplotlib Axes object used for plotting.\"}"}
{"api_id": 282, "api_name": "typing.Tuple", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"generateTimeSeriesForecast\", \"type\": \"function\", \"signature\": \"(data: pd.DataFrame, steps: int) -> Tuple[List[float], Axes]\", \"return_type\": \"Tuple[List[float], Axes]\", \"short_description\": \"Generates a time series forecast and returns the forecasted values along with the plot axes.\"}"}
{"api_id": 282, "api_name": "typing.Tuple", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"generateForecastPlot\", \"type\": \"function\", \"signature\": \"(dataframe)\", \"return_type\": \"Tuple[List[float], plt.Axes]\", \"short_description\": \"Generates a forecast plot for the closing prices of a given DataFrame and returns the forecasted values and the matplotlib Axes object used for plotting.\"}"}
{"api_id": 282, "api_name": "typing.Tuple", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"generateTimeSeriesForecast\", \"type\": \"function\", \"signature\": \"(dataframe)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a time series forecast for the closing prices in the given DataFrame and returns both the forecasted values and the plot axes.\"}"}
{"api_id": 282, "api_name": "typing.Tuple", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"fetchFinancialData\", \"type\": \"function\", \"signature\": \"(symbol: str, period: str, interval: str)\", \"return_type\": \"pd.DataFrame\", \"short_description\": \"Fetches financial data for a given stock symbol over a specified period and interval.\"}"}
{"api_id": 282, "api_name": "typing.Tuple", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"generateTimeSeriesForecast\", \"type\": \"function\", \"signature\": \"(dataframe)\", \"return_type\": \"List[float], Axes\", \"short_description\": \"Generates a time series forecast using ARIMA and returns the forecasted values and the plot axes.\"}"}
{"api_id": 282, "api_name": "typing.Tuple", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"generateTimeSeriesForecast\", \"type\": \"function\", \"signature\": \"(dataframe)\", \"return_type\": \"Tuple[List[float], plt.Axes]\", \"short_description\": \"Generates a time series forecast and plots it using the given DataFrame. Returns a tuple containing the forecasted values and the plot axes.\"}"}
{"api_id": 282, "api_name": "typing.Tuple", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"generateTimeSeriesForecast\", \"type\": \"function\", \"signature\": \"(dataframe)\", \"return_type\": \"List[Tuple[float, str]]\", \"short_description\": \"Generates a time series forecast using ARIMA model and returns the forecasted values along with corresponding dates.\"}"}
{"api_id": 282, "api_name": "typing.Tuple", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"generateTimeSeriesForecast\", \"type\": \"function\", \"signature\": \"(dataframe)\", \"return_type\": \"Tuple[List[float], plt.Axes]\", \"short_description\": \"Generates a time series forecast and returns the forecasted values along with the plot axes.\"}"}
{"api_id": 282, "api_name": "typing.Tuple", "task_id": "BigCodeBench/917", "solution": "{\"name\": \"generateTimeSeriesForecast\", \"type\": \"function\", \"signature\": \"(data: pd.DataFrame) => Tuple[List[float], Axes]\", \"return_type\": \"Tuple[List[float], Axes]\", \"short_description\": \"Generates a time series forecast using ARIMA model and returns the forecasted values along with the plot axes.\"}"}
{"api_id": 283, "api_name": "unicodedata.normalize", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"getNormalizedWords\", \"type\": \"function\", \"signature\": \"(str)\", \"return_type\": \"list\", \"short_description\": \"Extracts and normalizes words from a CSV file, returning a list of the most common words.\"}"}
{"api_id": 283, "api_name": "unicodedata.normalize", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"getNormalizedWords\", \"type\": \"function\", \"signature\": \"(csv_file, form)\", \"return_type\": \"list\", \"short_description\": \"Returns a list of the most common words from a CSV file after normalizing them using the specified Unicode normalization form.\"}"}
{"api_id": 283, "api_name": "unicodedata.normalize", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"getNormalizedWords\", \"type\": \"function\", \"signature\": \"(csvFilePath, form)\", \"return_type\": \"list\", \"short_description\": \"This function takes a CSV file path and a Unicode normalization form as arguments and returns a list of the 10 most common words after normalization.\"}"}
{"api_id": 283, "api_name": "unicodedata.normalize", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"generateWordFrequencyChart\", \"type\": \"function\", \"signature\": \"(wordsList, topN)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a bar chart of the top N most common words from a list of words.\"}"}
{"api_id": 283, "api_name": "unicodedata.normalize", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"fetchNormalizedWords\", \"type\": \"function\", \"signature\": \"(csvFilePath, form)\", \"return_type\": \"list\", \"short_description\": \"Extracts and returns the most common words from a CSV file after normalizing them to the specified form.\"}"}
{"api_id": 283, "api_name": "unicodedata.normalize", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"getNormalizedWords\", \"type\": \"function\", \"signature\": \"(csv_file, normalization_form)\", \"return_type\": \"list\", \"short_description\": \"Normalizes the words in a CSV file according to the specified Unicode normalization form and returns a list of the most common words.\"}"}
{"api_id": 283, "api_name": "unicodedata.normalize", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"extractNormalizedWords\", \"type\": \"function\", \"signature\": \"(csvFilePath, form)\", \"return_type\": \"list\", \"short_description\": \"Extracts and normalizes words from a CSV file using the specified Unicode normalization form.\"}"}
{"api_id": 283, "api_name": "unicodedata.normalize", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"generateWordFrequencyChart\", \"type\": \"function\", \"signature\": \"(words)\", \"return_type\": \"tuple\", \"short_description\": \"Generates a bar chart of the most common words from a list of words.\"}"}
{"api_id": 283, "api_name": "unicodedata.normalize", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"getUnicodeNormalization\", \"type\": \"function\", \"signature\": \"(form, unistr)\", \"return_type\": \"str\", \"short_description\": \"Returns the Unicode string in the specified normalization form.\"}"}
{"api_id": 283, "api_name": "unicodedata.normalize", "task_id": "BigCodeBench/579", "solution": "{\"name\": \"extractWordFrequencies\", \"type\": \"function\", \"signature\": \"(csv_file)\", \"return_type\": \"list\", \"short_description\": \"Extracts the most common words and their frequencies from a given CSV file, normalizing Unicode characters to ASCII.\"}"}
{"api_id": 284, "api_name": "urllib.parse.urlparse", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"extractTitleFromUrl\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"str\", \"short_description\": \"Extracts the title from a webpage given its URL.\"}"}
{"api_id": 284, "api_name": "urllib.parse.urlparse", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"extractTitleFromUrl\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"str\", \"short_description\": \"Extracts the title from a webpage given its URL.\"}"}
{"api_id": 284, "api_name": "urllib.parse.urlparse", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"extractDomain\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"str\", \"short_description\": \"Extracts the domain from a given URL.\"}"}
{"api_id": 284, "api_name": "urllib.parse.urlparse", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"extractTitleFromUrl\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"str\", \"short_description\": \"Extracts the title from a webpage given its URL.\"}"}
{"api_id": 284, "api_name": "urllib.parse.urlparse", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"extractTitleFromUrl\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"str\", \"short_description\": \"Extracts the title from a given webpage using its URL.\"}"}
{"api_id": 284, "api_name": "urllib.parse.urlparse", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"extractDomain\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"str\", \"short_description\": \"Extracts the domain from a given URL.\"}"}
{"api_id": 284, "api_name": "urllib.parse.urlparse", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"extract_url_components\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"dict\", \"short_description\": \"Parses a given URL and returns a dictionary containing its components such as scheme, netloc, path, params, query, fragment, username, password, hostname, and port.\"}"}
{"api_id": 284, "api_name": "urllib.parse.urlparse", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"extractTitleFromUrl\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"str\", \"short_description\": \"Extracts the title from a given webpage using its URL.\"}"}
{"api_id": 284, "api_name": "urllib.parse.urlparse", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"extractUrlComponents\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"dict\", \"short_description\": \"Extracts and returns the components of a given URL.\"}"}
{"api_id": 284, "api_name": "urllib.parse.urlparse", "task_id": "BigCodeBench/1124", "solution": "{\"name\": \"extractUrlComponents\", \"type\": \"function\", \"signature\": \"(url)\", \"return_type\": \"dict\", \"short_description\": \"Extracts the components of a given URL into a dictionary format.\"}"}
{"api_id": 285, "api_name": "urllib.parse.urljoin", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"parseUrl\", \"type\": \"function\", \"signature\": \"(urlStr, baseUrl)\", \"return_type\": \"str\", \"short_description\": \"Parses a given URL string and returns its absolute form based on a base URL.\"}"}
{"api_id": 285, "api_name": "urllib.parse.urljoin", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"parseUrl\", \"type\": \"function\", \"signature\": \"(urlString, baseUrl)\", \"return_type\": \"str\", \"short_description\": \"Parses the given URL string and returns it as an absolute URL using the base URL as a reference.\"}"}
{"api_id": 285, "api_name": "urllib.parse.urljoin", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"parseUrl\", \"type\": \"function\", \"signature\": \"(urlStr: str, baseStr: str = 'https://www.example.com')\", \"return_type\": \"str\", \"short_description\": \"Parses a URL by joining a base URL and a possibly relative URL, returning an absolute URL.\"}"}
{"api_id": 285, "api_name": "urllib.parse.urljoin", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"generateSitemap\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Generates a sitemap string for the website by crawling through all links and formatting them into XML.\"}"}
{"api_id": 285, "api_name": "urllib.parse.urljoin", "task_id": "BigCodeBench/1013", "solution": "{\n  \"name\": \"parseUrl\",\n  \"type\": \"function\",\n  \"signature\": \"(urlStr, baseStr)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Parses a URL string and returns its absolute form based on a base URL.\"\n}"}
{"api_id": 285, "api_name": "urllib.parse.urljoin", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"fetchPageContent\", \"type\": \"function\", \"signature\": \"(url: str)\", \"return_type\": \"str\", \"short_description\": \"Fetches and returns the content of a webpage given its URL.\"}"}
{"api_id": 285, "api_name": "urllib.parse.urljoin", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"extractLinks\", \"type\": \"function\", \"signature\": \"(htmlContent, baseUrl)\", \"return_type\": \"Set[str]\", \"short_description\": \"Extracts all absolute URLs from the provided HTML content, using the given base URL.\"}"}
{"api_id": 285, "api_name": "urllib.parse.urljoin", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"extractLinks\", \"type\": \"function\", \"signature\": \"(htmlContent, baseUrl)\", \"return_type\": \"set\", \"short_description\": \"Extracts all absolute links from the provided HTML content, using the given base URL.\"}"}
{"api_id": 285, "api_name": "urllib.parse.urljoin", "task_id": "BigCodeBench/1013", "solution": "{\"name\": \"extractLinks\", \"type\": \"function\", \"signature\": \"(soup, baseUrl)\", \"return_type\": \"Set[str]\", \"short_description\": \"Extracts all absolute URLs from the provided BeautifulSoup object's anchor tags.\"}"}
{"api_id": 285, "api_name": "urllib.parse.urljoin", "task_id": "BigCodeBench/1013", "solution": "{\n  \"name\": \"extractLinks\",\n  \"type\": \"function\",\n  \"signature\": \"(url: str, baseUrl: str, filePath: str)\",\n  \"return_type\": \"Set[str]\",\n  \"short_description\": \"Extracts all absolute URLs from a given webpage and saves them to a CSV file.\"\n}"}
{"api_id": 286, "api_name": "warnings.simplefilter", "task_id": "BigCodeBench/857", "solution": "{\n  \"name\": \"log_file_transfer_errors\",\n  \"type\": \"function\",\n  \"signature\": \"(source_dir, dest_dir, extensions)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Logs errors encountered during file transfer operations from source to destination directories.\"\n}"}
{"api_id": 286, "api_name": "warnings.simplefilter", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"set_warning_filter\", \"type\": \"callable\", \"signature\": \"(action, category=Warning, lineno=0, append=False)\", \"return_type\": \"None\", \"short_description\": \"Sets a warning filter to control the handling of warnings.\"}"}
{"api_id": 286, "api_name": "warnings.simplefilter", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"set_warning_filter\", \"type\": \"callable\", \"signature\": \"(action, category=Warning, lineno=0, append=False)\", \"return_type\": \"None\", \"short_description\": \"Sets a warning filter to control the handling of warnings.\"}"}
{"api_id": 286, "api_name": "warnings.simplefilter", "task_id": "BigCodeBench/857", "solution": "{\n  \"name\": \"set_global_warnings\",\n  \"type\": \"function\",\n  \"signature\": \"(filter_action, category=<class 'Warning'>, lineno=0, append=False)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets a global filter for warnings that can be applied across the application.\"\n}"}
{"api_id": 286, "api_name": "warnings.simplefilter", "task_id": "BigCodeBench/857", "solution": "{\n  \"name\": \"log_warnings\",\n  \"type\": \"function\",\n  \"signature\": \"(warning_list, log_file_path)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Logs a list of warnings to a specified file.\"\n}"}
{"api_id": 286, "api_name": "warnings.simplefilter", "task_id": "BigCodeBench/857", "solution": "{\n  \"name\": \"set_warning_filter\",\n  \"type\": \"callable\",\n  \"signature\": \"(action, category=Warning, lineno=0, append=False)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets a filter for warnings, allowing control over how warnings are displayed.\"\n}"}
{"api_id": 286, "api_name": "warnings.simplefilter", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"set_warning_filter\", \"type\": \"callable\", \"signature\": \"(action, category=<class 'Warning'>, lineno=0, append=False)\", \"return_type\": \"None\", \"short_description\": \"Sets a new warning filter that determines how warnings are displayed.\"}"}
{"api_id": 286, "api_name": "warnings.simplefilter", "task_id": "BigCodeBench/857", "solution": "{\n  \"name\": \"set_warning_level\",\n  \"type\": \"callable\",\n  \"signature\": \"(level, category=<class 'Warning'>, lineno=0, append=False)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets a specific warning level for the current context.\"\n}"}
{"api_id": 286, "api_name": "warnings.simplefilter", "task_id": "BigCodeBench/857", "solution": "{\n  \"name\": \"set_warning_filter\",\n  \"type\": \"function\",\n  \"signature\": \"(action, category=<class 'Warning'>, lineno=0, append=False)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets a warning filter that can be used to control the behavior of warning messages emitted by the Python interpreter.\"\n}"}
{"api_id": 286, "api_name": "warnings.simplefilter", "task_id": "BigCodeBench/857", "solution": "{\n  \"name\": \"set_warning_level\",\n  \"type\": \"callable\",\n  \"signature\": \"(level)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Sets the warning level for the current context.\"\n}"}
{"api_id": 287, "api_name": "warnings.warn", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"log_transfer\", \"type\": \"callable\", \"signature\": \"(source_dir, dest_dir, extensions)\", \"return_type\": \"list\", \"short_description\": \"Logs the transfer of files from the source directory to the destination directory based on the specified extensions.\"}"}
{"api_id": 287, "api_name": "warnings.warn", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"log_warning\", \"type\": \"callable\", \"signature\": \"(message, category=None)\", \"return_type\": \"None\", \"short_description\": \"Logs a warning message with an optional category.\"}"}
{"api_id": 287, "api_name": "warnings.warn", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"log_transferred_files\", \"type\": \"function\", \"signature\": \"(source_dir, dest_dir, extensions)\", \"return_type\": \"list\", \"short_description\": \"Logs the transfer of files from the source directory to the destination directory, returning a list of transferred file names.\"}"}
{"api_id": 287, "api_name": "warnings.warn", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"log_warning\", \"type\": \"callable\", \"signature\": \"(message, category=None, stacklevel=1, source=None)\", \"return_type\": \"None\", \"short_description\": \"Logs a warning message with the option to specify category, stack level, and source.\"}"}
{"api_id": 287, "api_name": "warnings.warn", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"log_warning\", \"type\": \"callable\", \"signature\": \"(message, category=None)\", \"return_type\": \"None\", \"short_description\": \"Logs a warning message with an optional category.\"}"}
{"api_id": 287, "api_name": "warnings.warn", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"log_warning\", \"type\": \"callable\", \"signature\": \"(message, category=None)\", \"return_type\": \"None\", \"short_description\": \"Logs a warning message. This function does not affect the flow of execution but can be used to record important information for debugging or tracking purposes.\"}"}
{"api_id": 287, "api_name": "warnings.warn", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"logError\", \"type\": \"callable\", \"signature\": \"(message, file_path)\", \"return_type\": \"None\", \"short_description\": \"Logs an error message along with the file path where the error occurred.\"}"}
{"api_id": 287, "api_name": "warnings.warn", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"logError\", \"type\": \"callable\", \"signature\": \"(message, category=None)\", \"return_type\": \"None\", \"short_description\": \"Logs an error message to a specified log channel.\"}"}
{"api_id": 287, "api_name": "warnings.warn", "task_id": "BigCodeBench/857", "solution": "{\"name\": \"log_warning\", \"type\": \"callable\", \"signature\": \"(message, category=None)\", \"return_type\": \"None\", \"short_description\": \"Logs a warning message with an optional category.\"}"}
{"api_id": 287, "api_name": "warnings.warn", "task_id": "BigCodeBench/857", "solution": "{\n  \"name\": \"log_warning\",\n  \"type\": \"function\",\n  \"signature\": \"(message, category=None, stacklevel=1, source=None)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Logs a warning message with optional category, stack level, and source information.\"\n}"}
{"api_id": 288, "api_name": "werkzeug.security.generate_password_hash", "task_id": "BigCodeBench/82", "solution": "{\n  \"name\": \"generateRandomColor\",\n  \"type\": \"function\",\n  \"signature\": \"() -> 'str'\",\n  \"return_type\": \"A random color in hex format\",\n  \"short_description\": \"Generates a random color in hexadecimal format.\"\n}"}
{"api_id": 288, "api_name": "werkzeug.security.generate_password_hash", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateRandomString\", \"type\": \"function\", \"signature\": \"() -> str\", \"return_type\": \"A randomly generated string of 16 characters.\", \"short_description\": \"Generates a random string for use in various applications.\"}"}
{"api_id": 288, "api_name": "werkzeug.security.generate_password_hash", "task_id": "BigCodeBench/82", "solution": "{\n  \"name\": \"generatePasswordHash\",\n  \"type\": \"function\",\n  \"signature\": \"(password: str, method: str = 'scrypt', saltLength: int = 16) -> str\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Securely hash a password for storage. A password can be compared to a stored hash using checkPasswordHash.\"\n}"}
{"api_id": 288, "api_name": "werkzeug.security.generate_password_hash", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generatePasswordHash\", \"type\": \"function\", \"signature\": \"(password: str, method: str = 'scrypt', saltLength: int = 16) -> str\", \"return_type\": \"str\", \"short_description\": \"Securely hash a password for storage. A password can be compared to a stored hash using checkPasswordHash.\"}"}
{"api_id": 288, "api_name": "werkzeug.security.generate_password_hash", "task_id": "BigCodeBench/82", "solution": "{\n  \"name\": \"generateRandomQuote\",\n  \"type\": \"function\",\n  \"signature\": \"() -> 'str'\",\n  \"return_type\": \"A random inspirational quote\",\n  \"short_description\": \"Generates a random inspirational quote.\"\n}"}
{"api_id": 288, "api_name": "werkzeug.security.generate_password_hash", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateHash\", \"type\": \"function\", \"signature\": \"(password: str, method: str = 'scrypt', saltLength: int = 16) -> str\", \"return_type\": \"str\", \"short_description\": \"Securely hash a password for storage. A password can be compared to a stored hash using checkHash.\"}"}
{"api_id": 288, "api_name": "werkzeug.security.generate_password_hash", "task_id": "BigCodeBench/82", "solution": "{\n  \"name\": \"generatePasswordHash\",\n  \"type\": \"callable\",\n  \"signature\": \"(password: 'str', method: 'str' = 'scrypt', salt_length: 'int' = 16) -> 'str'\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Securely hash a password for storage. A password can be compared to a stored hash using :func:`check_password_hash`.\"\n}"}
{"api_id": 288, "api_name": "werkzeug.security.generate_password_hash", "task_id": "BigCodeBench/82", "solution": "{\n  \"name\": \"generateHash\",\n  \"type\": \"function\",\n  \"signature\": \"(data: 'str', algorithm: 'str' = 'sha256') -> 'str'\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Securely hash a given string for storage. The hash can be compared to a stored hash using a separate verification function.\"\n}"}
{"api_id": 288, "api_name": "werkzeug.security.generate_password_hash", "task_id": "BigCodeBench/82", "solution": "{\n  \"name\": \"generatePasswordHash\",\n  \"type\": \"function\",\n  \"signature\": \"(password: str, method: str = 'scrypt', saltLength: int = 16) -> str\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Securely hash a password for storage. This function returns a hashed password that can be compared to a stored hash using checkPasswordHash.\"\n}"}
{"api_id": 288, "api_name": "werkzeug.security.generate_password_hash", "task_id": "BigCodeBench/82", "solution": "{\n  \"name\": \"generatePasswordHash\",\n  \"type\": \"function\",\n  \"signature\": \"(password: str, method: str = 'scrypt', salt_length: int = 16) -> str\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Securely hash a password for storage. A password can be compared to a stored hash using check_password_hash.\"\n}"}
{"api_id": 289, "api_name": "werkzeug.security.check_password_hash", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"validateUserCredentials\", \"type\": \"function\", \"signature\": \"(user: 'User', password: 'str') -> 'bool'\", \"return_type\": \"bool\", \"short_description\": \"Validates the user's credentials against the stored password hash.\"}"}
{"api_id": 289, "api_name": "werkzeug.security.check_password_hash", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"checkPassword\", \"type\": \"function\", \"signature\": \"(passwordHash: 'str', passwordAttempt: 'str') -> 'bool'\", \"return_type\": \"bool\", \"short_description\": \"Checks if the given password attempt matches the stored password hash.\"}"}
{"api_id": 289, "api_name": "werkzeug.security.check_password_hash", "task_id": "BigCodeBench/82", "solution": "{\n  \"name\": \"verifyPassword\",\n  \"type\": \"function\",\n  \"signature\": \"(storedHash: 'str', passwordAttempt: 'str') -> 'bool'\",\n  \"return_type\": \"bool\",\n  \"short_description\": \"Securely checks if the provided password matches the stored hash.\"\n}"}
{"api_id": 289, "api_name": "werkzeug.security.check_password_hash", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"checkUserPassword\", \"type\": \"function\", \"signature\": \"(userPasswordHash: 'str', inputPassword: 'str') -> 'bool'\", \"return_type\": \"boolean\", \"short_description\": \"Compares a stored password hash with an input password to verify if they match.\"}"}
{"api_id": 289, "api_name": "werkzeug.security.check_password_hash", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUserToken\", \"type\": \"function\", \"signature\": \"(username: 'str', password: 'str') -> 'str'\", \"return_type\": \"str\", \"short_description\": \"Generates a token for the given user based on their username and password.\"}"}
{"api_id": 289, "api_name": "werkzeug.security.check_password_hash", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"checkUserPassword\", \"type\": \"function\", \"signature\": \"(storedHash: 'str', inputPassword: 'str') -> 'bool'\", \"return_type\": \"bool\", \"short_description\": \"Securely checks if the given password matches the stored hash.\"}"}
{"api_id": 289, "api_name": "werkzeug.security.check_password_hash", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"validateUserCredentials\", \"type\": \"function\", \"signature\": \"(username: 'str', password: 'str', userDatabase: 'dict') -> 'bool'\", \"return_type\": \"bool\", \"short_description\": \"Validates the user's credentials against the provided database of user information.\"}"}
{"api_id": 289, "api_name": "werkzeug.security.check_password_hash", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUserProfile\", \"type\": \"function\", \"signature\": \"(userId: 'str') -> 'dict'\", \"return_type\": \"dict\", \"short_description\": \"Retrieves user profile information for the given user ID.\"}"}
{"api_id": 289, "api_name": "werkzeug.security.check_password_hash", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"validateUserPassword\", \"type\": \"function\", \"signature\": \"(user: 'User', password: 'str') -> 'bool'\", \"return_type\": \"bool\", \"short_description\": \"Validates the password against the user's stored password hash.\"}"}
{"api_id": 289, "api_name": "werkzeug.security.check_password_hash", "task_id": "BigCodeBench/82", "solution": "{\n  \"name\": \"validate_user_credentials\",\n  \"type\": \"function\",\n  \"signature\": \"(username: 'str', password: 'str', user_db: 'dict') -> 'bool'\",\n  \"return_type\": \"bool\",\n  \"short_description\": \"Validates user credentials against a database of users.\"\n}"}
{"api_id": 290, "api_name": "wordcloud.WordCloud", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"createWordCloud\",\n  \"type\": \"function\",\n  \"signature\": \"(text, width=400, height=200, preferHorizontal=0.9, maxWords=200, minFontSize=4, backgroundColor='black', maxFontSize=None, relativeScaling='auto', colorFunc=None, stopwords=None, fontPath=None, scale=1, mode='RGB', regexp=None, collocations=True, colormap=None, normalizePlurals=True, contourWidth=0, contourColor='black', repeat=False, includeNumbers=False, minWordLength=0, collocationThreshold=30)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Creates a word cloud from the provided text. This function generates a visual representation of word frequencies in the text, allowing for customization of various parameters to tailor the word cloud to your needs.\"\n}"}
{"api_id": 290, "api_name": "wordcloud.WordCloud", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"createWordCloud\",\n  \"type\": \"function\",\n  \"signature\": \"(text, width=400, height=200, fontPath=None, preferHorizontal=0.9, mask=None, scale=1, colorFunc=None, maxWords=200, minFontSize=4, stopwords=None, randomState=None, backgroundColor='black', maxFontSize=None, fontStep=1, mode='RGB', relativeScaling='auto', regexp=None, collocations=True, colormap=None, normalizePlurals=True, contourWidth=0, contourColor='black', repeat=False, includeNumbers=False, minWordLength=0, collocationThreshold=30)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generates a word cloud from the provided text and displays it using matplotlib.\"\n}"}
{"api_id": 290, "api_name": "wordcloud.WordCloud", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"generateWordCloud\",\n  \"type\": \"function\",\n  \"signature\": \"(text, width=400, height=200, preferHorizontal=0.9, maxWords=200, minFontSize=4, backgroundColor='black', maxFontSize=None, mode='RGB', relativeScaling='auto', colorFunc=None, regexp=None, collocations=True, colormap=None, normalizePlurals=True, repeat=False, includeNumbers=False, minWordLength=0, collocationThreshold=30)\",\n  \"return_type\": \"WordCloud\",\n  \"short_description\": \"Generates a word cloud from the provided text. Customizable with various parameters to control the appearance and behavior.\"\n}"}
{"api_id": 290, "api_name": "wordcloud.WordCloud", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"generateWordCloud\",\n  \"type\": \"function\",\n  \"signature\": \"(text, width=400, height=200, preferHorizontal=0.9, mask=None, scale=1, minFontSize=4, maxWords=200, stopwords=None, backgroundColor='black', maxFontSize=None, fontStep=1, mode='RGB', relativeScaling='auto', colorFunc=None, regexp=None, collocations=True, colormap=None, normalizePlurals=True, contourWidth=0, contourColor='black', repeat=False, includeNumbers=False, minWordLength=0, collocationThreshold=30)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generates and displays a word cloud from the provided text. This function allows for extensive customization through various parameters.\"\n}"}
{"api_id": 290, "api_name": "wordcloud.WordCloud", "task_id": "BigCodeBench/34", "solution": "{\"name\": \"generateWordCloud\", \"type\": \"function\", \"signature\": \"(text)\", \"return_type\": \"None\", \"short_description\": \"Generates a word cloud from the provided text and displays it using matplotlib.\"}"}
{"api_id": 290, "api_name": "wordcloud.WordCloud", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"generateWordCloud\",\n  \"type\": \"function\",\n  \"signature\": \"(text, width=400, height=200, preferHorizontal=0.9, maxWords=200, minFontSize=4, stopwords=None, backgroundColor='black', maxFontSize=None, relativeScaling='auto', includeNumbers=False, minWordLength=0)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generates a word cloud from the provided text, allowing customization of various parameters to control the appearance and behavior of the word cloud.\"\n}"}
{"api_id": 290, "api_name": "wordcloud.WordCloud", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"generateWordCloud\",\n  \"type\": \"function\",\n  \"signature\": \"(text, width=400, height=200, preferHorizontal=0.9, maxWords=200, minFontSize=4, backgroundColor='black', maxFontSize=None, mode='RGB', relativeScaling='auto', colorFunc=None, stopwords=None, randomState=None, mask=None, contourWidth=0, contourColor='black', scale=1, regexp=None, collocations=True, colormap=None, normalizePlurals=True, repeat=False, includeNumbers=False, minWordLength=0, collocationThreshold=30)\",\n  \"return_type\": \"WordCloud\",\n  \"short_description\": \"Generates a word cloud from the provided text. This function allows for customization of various parameters to tailor the word cloud to your specific needs.\"\n}"}
{"api_id": 290, "api_name": "wordcloud.WordCloud", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"generateWordCloud\",\n  \"type\": \"function\",\n  \"signature\": \"(text, width=400, height=200, preferHorizontal=0.9, maxWords=200, minFontSize=4, backgroundColor='black', maxFontSize=None, relativeScaling='auto', colorFunc=None, stopwords=None, fontPath=None, mask=None, scale=1, fontStep=1, mode='RGB', contourWidth=0, contourColor='black', repeat=False, includeNumbers=False, minWordLength=0, collocationThreshold=30)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generates and displays a word cloud from the provided text. This function offers extensive customization options for creating visually appealing word clouds.\"\n}"}
{"api_id": 290, "api_name": "wordcloud.WordCloud", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"generateWordCloud\",\n  \"type\": \"function\",\n  \"signature\": \"(text, fontPath=None, width=400, height=200, margin=2, ranksOnly=None, preferHorizontal=0.9, mask=None, scale=1, colorFunc=None, maxWords=200, minFontSize=4, stopwords=None, randomState=None, backgroundColor='black', maxFontSize=None, fontStep=1, mode='RGB', relativeScaling='auto', regexp=None, collocations=True, colormap=None, normalizePlurals=True, contourWidth=0, contourColor='black', repeat=False, includeNumbers=False, minWordLength=0, collocationThreshold=30)\",\n  \"return_type\": \"WordCloud\",\n  \"short_description\": \"Generates a word cloud from the provided text. This function allows for extensive customization of the word cloud's appearance and behavior.\"\n}"}
{"api_id": 290, "api_name": "wordcloud.WordCloud", "task_id": "BigCodeBench/34", "solution": "{\n  \"name\": \"generateWordCloud\",\n  \"type\": \"function\",\n  \"signature\": \"(text, width=800, height=400, prefer_horizontal=0.9, max_words=200, min_font_size=4, background_color='white', max_font_size=None, font_step=1, mode='RGB', relative_scaling='auto', regexp=None, collocations=True, colormap=None, normalize_plurals=True, contour_width=0, contour_color='black', repeat=False, include_numbers=False, min_word_length=0, collocation_threshold=30)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Generates and displays a word cloud from the provided text. This function allows for extensive customization of the word cloud's appearance and behavior.\"\n}"}
{"api_id": 291, "api_name": "wtforms.SubmitField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateLoginForm\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"LoginForm\", \"short_description\": \"Generates a login form for user authentication.\"}"}
{"api_id": 291, "api_name": "wtforms.SubmitField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createUserAccount\", \"type\": \"function\", \"signature\": \"(username, password, app)\", \"return_type\": \"User\", \"short_description\": \"Creates a new user account with the given username and password and adds it to the application context.\"}"}
{"api_id": 291, "api_name": "wtforms.SubmitField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createUserLogin\", \"type\": \"function\", \"signature\": \"(app, login_manager)\", \"return_type\": \"app\", \"short_description\": \"Configures and sets up user login functionality for a Flask application.\"}"}
{"api_id": 291, "api_name": "wtforms.SubmitField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"fetchUserProfile\", \"type\": \"function\", \"signature\": \"userId\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed user profile information based on the given user ID.\"}"}
{"api_id": 291, "api_name": "wtforms.SubmitField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createUserLogin\", \"type\": \"function\", \"signature\": \"(username, password, app)\", \"return_type\": \"None\", \"short_description\": \"Creates a user login system with a login and logout functionality.\"}"}
{"api_id": 291, "api_name": "wtforms.SubmitField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createUser\", \"type\": \"function\", \"signature\": \"(username, password)\", \"return_type\": \"User\", \"short_description\": \"Creates a new user with the given username and password.\"}"}
{"api_id": 291, "api_name": "wtforms.SubmitField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createUserForm\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"FlaskForm\", \"short_description\": \"Creates a new login form for user input.\"}"}
{"api_id": 291, "api_name": "wtforms.SubmitField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createApp\", \"type\": \"function\", \"signature\": \"(secret_key, template_folder)\", \"return_type\": \"Flask\", \"short_description\": \"Creates and configures a Flask application with login functionality.\"}"}
{"api_id": 291, "api_name": "wtforms.SubmitField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUser\", \"type\": \"function\", \"signature\": \"(username, password)\", \"return_type\": \"User\", \"short_description\": \"Creates a new user object with a hashed password.\"}"}
{"api_id": 291, "api_name": "wtforms.SubmitField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createUser\", \"type\": \"function\", \"signature\": \"(username, password)\", \"return_type\": \"User\", \"short_description\": \"Creates a new user with the given username and password.\"}"}
{"api_id": 292, "api_name": "wtforms.StringField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createLoginForm\", \"type\": \"function\", \"signature\": \"(app)\", \"return_type\": \"FlaskForm\", \"short_description\": \"Creates and returns a login form with username and password fields.\"}"}
{"api_id": 292, "api_name": "wtforms.StringField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createLoginApp\", \"type\": \"function\", \"signature\": \"(secretKey, templateFolder)\", \"return_type\": \"Flask\", \"short_description\": \"Creates and configures a Flask application for user login functionality.\"}"}
{"api_id": 292, "api_name": "wtforms.StringField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createLoginForm\", \"type\": \"function\", \"signature\": \"(self)\", \"return_type\": \"FlaskForm\", \"short_description\": \"Creates a login form with username and password fields.\"}"}
{"api_id": 292, "api_name": "wtforms.StringField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUser\", \"type\": \"function\", \"signature\": \"(username, password)\", \"return_type\": \"User\", \"short_description\": \"Creates a new user object with a hashed password.\"}"}
{"api_id": 292, "api_name": "wtforms.StringField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createUserForm\", \"type\": \"function\", \"signature\": \"(username_length, password_length)\", \"return_type\": \"FlaskForm\", \"short_description\": \"Creates a user login form with specified length constraints for username and password.\"}"}
{"api_id": 292, "api_name": "wtforms.StringField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createUserForm\", \"type\": \"function\", \"signature\": \"(form_title, field_list)\", \"return_type\": \"FlaskForm\", \"short_description\": \"Creates a custom user form with specified title and fields.\"}"}
{"api_id": 292, "api_name": "wtforms.StringField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createUserForm\", \"type\": \"function\", \"signature\": \"(app, login_manager)\", \"return_type\": \"FlaskForm\", \"short_description\": \"Creates a user login form with username and password fields.\"}"}
{"api_id": 292, "api_name": "wtforms.StringField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createUserForm\", \"type\": \"function\", \"signature\": \"(app, login_manager)\", \"return_type\": \"FlaskForm\", \"short_description\": \"Creates a user login form for the Flask application.\"}"}
{"api_id": 292, "api_name": "wtforms.StringField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createApp\", \"type\": \"function\", \"signature\": \"(secret_key, template_folder)\", \"return_type\": \"Flask\", \"short_description\": \"Creates a Flask application with login functionality.\"}"}
{"api_id": 292, "api_name": "wtforms.StringField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createUser\", \"type\": \"function\", \"signature\": \"(username, password)\", \"return_type\": \"User\", \"short_description\": \"Creates a new user with the given username and password.\"}"}
{"api_id": 293, "api_name": "wtforms.PasswordField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generatePasswordHash\", \"type\": \"function\", \"signature\": \"(password: str) -> str\", \"return_type\": \"The hashed password as a string.\", \"short_description\": \"Generates a secure password hash using the werkzeug.security module.\"}"}
{"api_id": 293, "api_name": "wtforms.PasswordField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUser\", \"type\": \"function\", \"signature\": \"(username, password)\", \"return_type\": \"User\", \"short_description\": \"Creates a new user object with hashed password.\"}"}
{"api_id": 293, "api_name": "wtforms.PasswordField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createUser\", \"type\": \"function\", \"signature\": \"(username, password)\", \"return_type\": \"User\", \"short_description\": \"Creates a new user object with the given username and password.\"}"}
{"api_id": 293, "api_name": "wtforms.PasswordField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generatePasswordHash\", \"type\": \"function\", \"signature\": \"(password: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a hashed password using Werkzeug's generate_password_hash function.\"}"}
{"api_id": 293, "api_name": "wtforms.PasswordField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"fetchUserProfile\", \"type\": \"function\", \"signature\": \"(userId)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves user profile information based on the provided user ID.\"}"}
{"api_id": 293, "api_name": "wtforms.PasswordField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generatePasswordHash\", \"type\": \"function\", \"signature\": \"(password: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a password hash using Werkzeug's generate_password_hash function.\"}"}
{"api_id": 293, "api_name": "wtforms.PasswordField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUserPasswordHash\", \"type\": \"function\", \"signature\": \"(password: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a password hash using Werkzeug's generate_password_hash function.\"}"}
{"api_id": 293, "api_name": "wtforms.PasswordField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"createUser\", \"type\": \"function\", \"signature\": \"(username, password)\", \"return_type\": \"User\", \"short_description\": \"Creates a new user with the given username and password.\"}"}
{"api_id": 293, "api_name": "wtforms.PasswordField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generatePasswordHash\", \"type\": \"function\", \"signature\": \"(password: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a password hash for secure storage.\"}"}
{"api_id": 293, "api_name": "wtforms.PasswordField", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generatePasswordHash\", \"type\": \"function\", \"signature\": \"(password: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Generates a password hash using Werkzeug's generate_password_hash function.\"}"}
{"api_id": 294, "api_name": "wtforms.validators.Length", "task_id": "BigCodeBench/82", "solution": "{\n  \"name\": \"validate_login_credentials\",\n  \"type\": \"function\",\n  \"signature\": \"(username: str, password: str, user_model: User)\",\n  \"return_type\": \"bool\",\n  \"short_description\": \"Validates the login credentials against the provided user model.\"\n}"}
{"api_id": 294, "api_name": "wtforms.validators.Length", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"validateStringLength\", \"type\": \"function\", \"signature\": \"(string, min=-1, max=-1)\", \"return_type\": \"bool\", \"short_description\": \"Validates the length of a given string. Returns True if the string length is within the specified range, otherwise returns False.\"}"}
{"api_id": 294, "api_name": "wtforms.validators.Length", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"getUserName\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"str\", \"short_description\": \"Retrieves the username of the currently logged-in user.\"}"}
{"api_id": 294, "api_name": "wtforms.validators.Length", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUserProfile\", \"type\": \"function\", \"signature\": \"(username: str, password: str)\", \"return_type\": \"dict\", \"short_description\": \"Creates a user profile dictionary with hashed password for given username and password.\"}"}
{"api_id": 294, "api_name": "wtforms.validators.Length", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"validateUserCredentials\", \"type\": \"function\", \"signature\": \"(username: str, password: str, user_dict: dict)\", \"return_type\": \"bool\", \"short_description\": \"Validates user credentials against a dictionary of users.\"}"}
{"api_id": 294, "api_name": "wtforms.validators.Length", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"validateUserCredentials\", \"type\": \"function\", \"signature\": \"(username: str, password: str, userDatabase: dict)\", \"return_type\": \"bool\", \"short_description\": \"Validates a user's credentials against a provided database.\"}"}
{"api_id": 294, "api_name": "wtforms.validators.Length", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUserProfile\", \"type\": \"function\", \"signature\": \"(username, password)\", \"return_type\": \"dict\", \"short_description\": \"Generates a user profile dictionary with hashed password for the given username and password.\"}"}
{"api_id": 294, "api_name": "wtforms.validators.Length", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"validateLength\", \"type\": \"function\", \"signature\": \"(value, min=-1, max=-1, message=None)\", \"return_type\": \"bool\", \"short_description\": \"Validates the length of a given string against specified constraints.\"}"}
{"api_id": 294, "api_name": "wtforms.validators.Length", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"validateLength\", \"type\": \"function\", \"signature\": \"(value, min=-1, max=-1, message=None)\", \"return_type\": \"bool\", \"short_description\": \"Validates the length of a given string.\"}"}
{"api_id": 294, "api_name": "wtforms.validators.Length", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"validateStringLength\", \"type\": \"function\", \"signature\": \"(string, minLength=0, maxLength=None, errorMessage=None)\", \"return_type\": \"bool\", \"short_description\": \"Validates the length of a given string and returns a boolean indicating success or failure. Optionally provides an error message if validation fails.\"}"}
{"api_id": 295, "api_name": "wtforms.validators.DataRequired", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUser\", \"type\": \"function\", \"signature\": \"(username, password)\", \"return_type\": \"User\", \"short_description\": \"Creates a new user object with a hashed password.\"}"}
{"api_id": 295, "api_name": "wtforms.validators.DataRequired", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"fetchUserProfile\", \"type\": \"function\", \"signature\": \"(userId)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves detailed user profile information based on the provided userId.\"}"}
{"api_id": 295, "api_name": "wtforms.validators.DataRequired", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"validateForm\", \"type\": \"function\", \"signature\": \"(form)\", \"return_type\": \"bool\", \"short_description\": \"Validates a form and returns a boolean indicating success or failure.\"}"}
{"api_id": 295, "api_name": "wtforms.validators.DataRequired", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"fetchUserProfile\", \"type\": \"function\", \"signature\": \"()\", \"return_type\": \"dict\", \"short_description\": \"Retrieves the profile information of the currently logged-in user.\"}"}
{"api_id": 295, "api_name": "wtforms.validators.DataRequired", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"fetchUserProfile\", \"type\": \"function\", \"signature\": \"(userId)\", \"return_type\": \"object\", \"short_description\": \"Retrieves detailed user profile information for a given user ID.\"}"}
{"api_id": 295, "api_name": "wtforms.validators.DataRequired", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"validateUserCredentials\", \"type\": \"function\", \"signature\": \"(username, password, user_database)\", \"return_type\": \"bool\", \"short_description\": \"Validates a user's credentials against a provided database.\"}"}
{"api_id": 295, "api_name": "wtforms.validators.DataRequired", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"validateUserCredentials\", \"type\": \"function\", \"signature\": \"(username, password, user_database)\", \"return_type\": \"bool\", \"short_description\": \"Validates user credentials against a provided database.\"}"}
{"api_id": 295, "api_name": "wtforms.validators.DataRequired", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"fetchUserProfile\", \"type\": \"function\", \"signature\": \"(userId)\", \"return_type\": \"dict\", \"short_description\": \"Retrieves user profile information for the given user ID.\"}"}
{"api_id": 295, "api_name": "wtforms.validators.DataRequired", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"generateUserForm\", \"type\": \"function\", \"signature\": \"(usernameLength=None, passwordLength=None)\", \"return_type\": \"FlaskForm\", \"short_description\": \"Generates a user login form with specified length validators.\"}"}
{"api_id": 295, "api_name": "wtforms.validators.DataRequired", "task_id": "BigCodeBench/82", "solution": "{\"name\": \"fetchUserProfile\", \"type\": \"function\", \"signature\": \"(userId)\", \"return_type\": \"object\", \"short_description\": \"Retrieves user profile information based on the provided user ID.\"}"}
{"api_id": 296, "api_name": "xlwt.Workbook", "task_id": "BigCodeBench/501", "solution": "{\"name\": \"createExcelWorkbook\", \"type\": \"function\", \"signature\": \"(data, filename, sheetName='sheet1')\", \"return_type\": \"str\", \"short_description\": \"Creates an Excel workbook from a JSON string and saves it to a file. Returns the absolute path of the saved file.\"}"}
{"api_id": 296, "api_name": "xlwt.Workbook", "task_id": "BigCodeBench/501", "solution": "{\"name\": \"createExcelFromJson\", \"type\": \"function\", \"signature\": \"(json_str, filename, sheet_name='sheet1')\", \"return_type\": \"str\", \"short_description\": \"Creates an Excel file from a JSON string and saves it to a specified filename. The Excel file includes a sheet with the specified name.\"}"}
{"api_id": 296, "api_name": "xlwt.Workbook", "task_id": "BigCodeBench/501", "solution": "{\"name\": \"createExcelFile\", \"type\": \"function\", \"signature\": \"(data, filename, sheetName='sheet1')\", \"return_type\": \"str\", \"short_description\": \"Creates an Excel file from a JSON string and saves it to the specified filename. Returns the absolute path of the saved file.\"}"}
{"api_id": 296, "api_name": "xlwt.Workbook", "task_id": "BigCodeBench/501", "solution": "{\"name\": \"createExcelWorkbook\", \"type\": \"function\", \"signature\": \"(data, filename, sheetName='sheet1')\", \"return_type\": \"str\", \"short_description\": \"Creates an Excel workbook from a JSON string and saves it to a specified filename.\"}"}
{"api_id": 296, "api_name": "xlwt.Workbook", "task_id": "BigCodeBench/501", "solution": "{\"name\": \"createExcelFile\", \"type\": \"function\", \"signature\": \"(data, filename, sheet_name='sheet1')\", \"return_type\": \"str\", \"short_description\": \"Creates an Excel file with the given data and saves it to the specified filename.\"}"}
{"api_id": 296, "api_name": "xlwt.Workbook", "task_id": "BigCodeBench/501", "solution": "{\"name\": \"createExcelFile\", \"type\": \"function\", \"signature\": \"(dataFrame, filename, sheetName='sheet1')\", \"return_type\": \"str\", \"short_description\": \"Creates an Excel file from a pandas DataFrame and saves it to the specified filename. Returns the absolute path of the saved file.\"}"}
{"api_id": 296, "api_name": "xlwt.Workbook", "task_id": "BigCodeBench/501", "solution": "{\"name\": \"createExcelWorkbook\", \"type\": \"function\", \"signature\": \"(data, filename, sheetName='sheet1')\", \"return_type\": \"str\", \"short_description\": \"Creates an Excel workbook from a JSON string and saves it to a specified file. Returns the absolute path of the saved file.\"}"}
{"api_id": 296, "api_name": "xlwt.Workbook", "task_id": "BigCodeBench/501", "solution": "{\"name\": \"createExcelWorkbook\", \"type\": \"function\", \"signature\": \"(data, filename, sheet_name='sheet1')\", \"return_type\": \"str\", \"short_description\": \"Creates an Excel workbook from a JSON string and saves it to a specified file. Returns the absolute path of the saved file.\"}"}
{"api_id": 296, "api_name": "xlwt.Workbook", "task_id": "BigCodeBench/501", "solution": "{\"name\": \"createExcelWorkbook\", \"type\": \"function\", \"signature\": \"(data, filename, sheetName='sheet1')\", \"return_type\": \"str\", \"short_description\": \"This function creates an Excel workbook from a JSON string and saves it to a specified file. It returns the absolute path of the saved file.\"}"}
{"api_id": 296, "api_name": "xlwt.Workbook", "task_id": "BigCodeBench/501", "solution": "{\"name\": \"createExcelFile\", \"type\": \"function\", \"signature\": \"(data, filename, sheetName='sheet1')\", \"return_type\": \"str\", \"short_description\": \"Creates an Excel file from a JSON string and saves it to the specified filename. Returns the absolute path of the saved file.\"}"}
{"api_id": 297, "api_name": "zipfile.BadZipFile", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"verifyZipContent\", \"type\": \"function\", \"signature\": \"url, download_path='mnt/data/downloads/'\", \"return_type\": \"str\", \"short_description\": \"Verifies the content type of a ZIP file downloaded from a given URL and extracts its contents.\"}"}
{"api_id": 297, "api_name": "zipfile.BadZipFile", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"verifyAndExtractZip\", \"type\": \"function\", \"signature\": \"def verifyAndExtractZip(url: str, downloadPath: str) -> str\", \"return_type\": \"str\", \"short_description\": \"Verifies the integrity of a ZIP file and extracts its contents to a specified directory.\"}"}
{"api_id": 297, "api_name": "zipfile.BadZipFile", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"verifyZipContent\", \"type\": \"function\", \"signature\": \"url: str, download_path: str = 'mnt/data/downloads/'\", \"return_type\": \"str\", \"short_description\": \"Verifies the content type of the ZIP file downloaded from the given URL and returns the path to the extracted files or an error message if something goes wrong.\"}"}
{"api_id": 297, "api_name": "zipfile.BadZipFile", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"verifyZipFile\", \"type\": \"function\", \"signature\": \"(url, download_path='mnt/data/downloads/')\", \"return_type\": \"str\", \"short_description\": \"This function verifies whether a ZIP file is valid and returns the path to the extracted files.\"}"}
{"api_id": 297, "api_name": "zipfile.BadZipFile", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"verifyZipFile\", \"type\": \"function\", \"signature\": \"def verifyZipFile(file_path: str) -> bool:\", \"return_type\": \"bool\", \"short_description\": \"Verifies if the given ZIP file is valid and can be opened without errors.\"}"}
{"api_id": 297, "api_name": "zipfile.BadZipFile", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"validateZipFile\", \"type\": \"function\", \"signature\": \"(file_path: str) -> bool\", \"return_type\": \"bool\", \"short_description\": \"Validates if a given ZIP file is valid and can be opened without errors.\"}"}
{"api_id": 297, "api_name": "zipfile.BadZipFile", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"verifyZipFile\", \"type\": \"function\", \"signature\": \"url, download_path='mnt/data/downloads/'\", \"return_type\": \"str\", \"short_description\": \"Verifies the ZIP file at the given URL and returns the path to the extracted contents or an error message.\"}"}
{"api_id": 297, "api_name": "zipfile.BadZipFile", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"verifyZipContent\", \"type\": \"function\", \"signature\": \"url: str, download_path: str = 'mnt/data/downloads/'\", \"return_type\": \"Union[str, Exception]\", \"short_description\": \"Verifies the content type of a ZIP file downloaded from a given URL and extracts its contents if valid.\"}"}
{"api_id": 297, "api_name": "zipfile.BadZipFile", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"verifyZipContent\", \"type\": \"function\", \"signature\": \"url, download_path='mnt/data/downloads/'\", \"return_type\": \"str\", \"short_description\": \"Verifies the content type of a ZIP file downloaded from a given URL and extracts its contents to a specified directory.\"}"}
{"api_id": 297, "api_name": "zipfile.BadZipFile", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"verifyZipContent\", \"type\": \"function\", \"signature\": \"def verifyZipContent(file_path: str) -> bool\", \"return_type\": \"bool\", \"short_description\": \"Verifies if the content of a ZIP file is valid.\"}"}
{"api_id": 297, "api_name": "zipfile.BadZipFile", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"checkZipFileValidity\", \"type\": \"function\", \"signature\": \"(zipFilePath: str) -> bool\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given zip file is valid.\"}"}
{"api_id": 297, "api_name": "zipfile.BadZipFile", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"check_download_validity\", \"type\": \"function\", \"signature\": \"(url, filename)\", \"return_type\": \"tuple[str, list[str]]\", \"short_description\": \"Checks the validity of a file download and returns a message and list of extracted file names.\"}"}
{"api_id": 297, "api_name": "zipfile.BadZipFile", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"checkFileIntegrity\", \"type\": \"function\", \"signature\": \"(filepath: Path)\", \"return_type\": \"bool\", \"short_description\": \"Checks the integrity of a file at the given path.\"}"}
{"api_id": 297, "api_name": "zipfile.BadZipFile", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"checkZipValidity\", \"type\": \"function\", \"signature\": \"(zipFilePath: str) -> bool\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given zip file path is valid and can be opened without raising an exception.\"}"}
{"api_id": 297, "api_name": "zipfile.BadZipFile", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"checkFileIntegrity\", \"type\": \"function\", \"signature\": \"(filepath: str)\", \"return_type\": \"bool\", \"short_description\": \"Checks the integrity of a file to ensure it is not corrupted.\"}"}
{"api_id": 297, "api_name": "zipfile.BadZipFile", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"checkZipFile\", \"type\": \"function\", \"signature\": \"(filepath: str)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given zip file is valid.\"}"}
{"api_id": 297, "api_name": "zipfile.BadZipFile", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"checkFileIntegrity\", \"type\": \"function\", \"signature\": \"(filepath: str)\", \"return_type\": \"bool\", \"short_description\": \"Checks if a file is corrupted or incomplete.\"}"}
{"api_id": 297, "api_name": "zipfile.BadZipFile", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"validateZipFile\", \"type\": \"function\", \"signature\": \"validate_zip_file(zip_path: str) -> bool\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given zip file is valid and can be processed.\"}"}
{"api_id": 297, "api_name": "zipfile.BadZipFile", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"validateZipFile\", \"type\": \"function\", \"signature\": \"def validateZipFile(file_path: str) -> bool:\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given zip file is valid and can be opened without errors.\"}"}
{"api_id": 297, "api_name": "zipfile.BadZipFile", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"checkZipIntegrity\", \"type\": \"function\", \"signature\": \"def checkZipIntegrity(zipFilePath: str) -> bool\", \"return_type\": \"bool\", \"short_description\": \"Checks if a given zip file is valid and can be opened without errors.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(directoryPath, outputFileName)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive containing all files in the specified directory and returns the path to the created zip file.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(directoryPath, zipFileName)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive from all files in the specified directory and returns the path to the created zip file.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"createZipFile\", \"type\": \"function\", \"signature\": \"(directory)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip file from all files in a given directory and returns the path to the created zip file.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"createZipFromDirectory\", \"type\": \"function\", \"signature\": \"(directoryPath, zipPath)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip file from all files in a given directory and returns the path to the created zip file.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"createZipFile\", \"type\": \"function\", \"signature\": \"(directory)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip file containing all files in the specified directory and returns the path to the created zip file.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(directory, zipFileName)\", \"return_type\": \"str\", \"short_description\": \"Creates a ZIP archive containing all files in the specified directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(directoryPath, outputPath, compression=zipfile.ZIP_STORED)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive containing all files in the specified directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/19", "solution": "{\n  \"name\": \"createZipFile\",\n  \"type\": \"function\",\n  \"signature\": \"(directory, zipName='files.zip')\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Creates a ZIP file containing all files in the specified directory and returns the path to the created ZIP file.\"\n}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/19", "solution": "{\n  \"name\": \"createZipFromDirectory\",\n  \"type\": \"function\",\n  \"signature\": \"(directory_path, output_zip_path, compression_type='deflated')\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Creates a zip file from all files in a given directory. The zip file is saved to the specified output path with optional compression type.\"\n}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/19", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(directoryPath, archiveName)\", \"return_type\": \"str\", \"short_description\": \"Creates a ZIP archive containing all files in the specified directory. The archive is saved with the name 'files.zip' in the same directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/211", "solution": "{\n  \"name\": \"extractZip\",\n  \"type\": \"function\",\n  \"signature\": \"(zipFilePath, destinationDirectory)\",\n  \"return_type\": \"list[str]\",\n  \"short_description\": \"Extracts a zip file to the specified destination directory and returns a list of extracted file names.\"\n}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/211", "solution": "{\n  \"name\": \"extractZipFile\",\n  \"type\": \"function\",\n  \"signature\": \"(zipFilePath, destinationDir)\",\n  \"return_type\": \"list\",\n  \"short_description\": \"Extracts the contents of a zip file to a specified directory.\"\n}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"createZipFromUrl\", \"type\": \"function\", \"signature\": \"(url, destinationDirectory, headers=None)\", \"return_type\": \"list\", \"short_description\": \"Downloads a file from a given URL, creates a zip archive from it, and extracts its contents to a specified directory. Returns a list of the extracted file names.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"downloadAndUnzip\", \"type\": \"function\", \"signature\": \"(url, destinationDirectory, headers=None)\", \"return_type\": \"list[str]\", \"short_description\": \"Downloads a file from a given URL and extracts its contents to a specified directory. Returns a list of file names extracted from the zip file.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"extractZip\", \"type\": \"function\", \"signature\": \"(zipFilePath, extractPath)\", \"return_type\": \"list\", \"short_description\": \"Extracts the contents of a ZIP file to a specified directory and returns a list of extracted file names.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"extractZip\", \"type\": \"function\", \"signature\": \"(zipFilePath, destinationDir)\", \"return_type\": \"List[str]\", \"short_description\": \"Extracts the contents of a ZIP file to the specified destination directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"extractZip\", \"type\": \"function\", \"signature\": \"(zipFilePath, extractPath)\", \"return_type\": \"list[str]\", \"short_description\": \"Extracts the contents of a ZIP file located at zipFilePath and returns a list of file names extracted.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"extractZip\", \"type\": \"function\", \"signature\": \"(zipFilePath, extractPath)\", \"return_type\": \"List[str]\", \"short_description\": \"Extracts the contents of a ZIP file to a specified directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/211", "solution": "{\n  \"name\": \"downloadAndUnzip\",\n  \"type\": \"function\",\n  \"signature\": \"(url, destinationDirectory, headers=None)\",\n  \"return_type\": \"List[str]\",\n  \"short_description\": \"Downloads a file from the given URL and extracts its contents to the specified destination directory.\"\n}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/211", "solution": "{\"name\": \"downloadAndExtractZip\", \"type\": \"function\", \"signature\": \"(url, destinationDirectory, headers=None)\", \"return_type\": \"List[str]\", \"short_description\": \"Downloads a file from a given URL and extracts its contents to the specified destination directory. Returns a list of filenames extracted.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"extractZipFiles\", \"type\": \"function\", \"signature\": \"(zipFilePath, extractToDir)\", \"return_type\": \"list\", \"short_description\": \"Extracts all the files from a zip file to a specified directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"parseZipFiles\", \"type\": \"function\", \"signature\": \"(directory, pattern=r'^(.*?)-\\\\d+\\\\.zip$')\", \"return_type\": \"list\", \"short_description\": \"Parses through a directory to find zip files, extracts them, and returns a list of directories where the files were extracted.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"extractZipFiles\", \"type\": \"function\", \"signature\": \"(zipFilePath, extractPath)\", \"return_type\": \"None\", \"short_description\": \"Extracts all the contents of a ZIP file to a specified directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"extractZipFiles\", \"type\": \"function\", \"signature\": \"(directory, pattern='^([\\\\s\\\\S]*?)-\\\\d+\\\\.zip$')\", \"return_type\": \"List[str]\", \"short_description\": \"Extracts all zip files in the specified directory, creating directories based on the file names before the first '-'. Returns a list of the paths to the extracted directories.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"createZipFromDirectory\", \"type\": \"function\", \"signature\": \"(directoryPath, zipFilePath, compression=zipfile.ZIP_STORED)\", \"return_type\": \"None\", \"short_description\": \"Creates a ZIP file from the contents of a specified directory. The function allows specifying the compression method.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"extractZipFiles\", \"type\": \"function\", \"signature\": \"(directory, pattern=r'^(.*?)-\\\\d+\\\\.zip$')\", \"return_type\": \"list\", \"short_description\": \"Extracts all zip files in a directory, creating directories for each extracted file.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/777", "solution": "{\n  \"name\": \"extractZipFiles\",\n  \"type\": \"function\",\n  \"signature\": \"(zipFilePath, extractPath)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Extracts the contents of a zip file to a specified directory.\"\n}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"createZipFromDirectory\", \"type\": \"function\", \"signature\": \"(directoryPath, zipPath, compression=zipfile.ZIP_STORED)\", \"return_type\": \"None\", \"short_description\": \"Creates a zip file from the contents of a specified directory. The zip file is saved to a specified path.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"extractZipFiles\", \"type\": \"function\", \"signature\": \"(zipFilePath, extractDir)\", \"return_type\": \"List[str]\", \"short_description\": \"Extracts all the contents of a zip file into a specified directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/777", "solution": "{\"name\": \"extractZipFiles\", \"type\": \"function\", \"signature\": \"(zipFilePath, extractPath)\", \"return_type\": \"None\", \"short_description\": \"Extracts the contents of a zip file to a specified directory. This function does not create directories that do not exist within the zip file.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, archiveName='archive.zip')\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive from files in the source directory and moves processed files to the target directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, archiveName='archive.zip')\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive from files in the source directory and moves processed files to the target directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/906", "solution": "{\n  \"name\": \"createZipArchive\",\n  \"type\": \"function\",\n  \"signature\": \"(sourceDir, targetDir, archiveName='archive.zip')\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Creates a ZIP archive from files in a source directory, moves processed files to a target directory, and returns the path to the created archive.\"\n}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, archiveName='archive.zip')\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive from files in the source directory and moves processed files to the target directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, archiveName='archive.zip')\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive from files in a source directory, archives processed files, and moves them to a target directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, archiveName='archive.zip')\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive from files in sourceDir, saves it in targetDir, and moves processed files to targetDir.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, archiveName='archive.zip')\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive from files in a source directory, moves processed files to a target directory, and returns the path to the created archive.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, archiveName='archive.zip')\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive from files in source directory and moves processed files to target directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, archiveName='archive.zip')\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive from files in a source directory and moves processed files to a target directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/906", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, archiveName='archive.zip')\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive from files in the source directory and moves processed files to the target directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"createZipFile\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, zipName)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip file containing all files with specified extensions from the source directory and saves it to the target directory. Returns the path to the created zip file.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, zipName)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive containing files with specified extensions from the source directory and saves it to the target directory. Returns the path to the created zip file.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(sourceDirectory, targetDirectory, zipName)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive containing all files with specified extensions from the source directory and saves it to the target directory with the given name.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(sourceDirectory, targetDirectory, zipName)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive containing all files with specified extensions from the source directory and saves it to the target directory with the given name.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(sourceDirectory, targetDirectory, zipName)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive containing files from the specified source directory and saves it to the target directory with the given name.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"createZipFile\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, zipName)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip file containing all files with specified extensions from a source directory and saves it to a target directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/963", "solution": "{\n  \"name\": \"createZipArchive\",\n  \"type\": \"function\",\n  \"signature\": \"(sourceDirectory, targetDirectory, zipName)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Creates a zip archive containing files with specified extensions from the source directory and saves it to the target directory.\"\n}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(sourceDir, targetDir, zipName)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive from files in a specified source directory and saves it to a target directory with the given name.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/963", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(sourceDirectory, targetDirectory, zipName)\", \"return_type\": \"str\", \"short_description\": \"Creates a zip archive containing all files with specified extensions from a source directory and saves it to a target directory. Returns the path to the created zip file.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/963", "solution": "{\n  \"name\": \"createZipArchive\",\n  \"type\": \"function\",\n  \"signature\": \"(sourceDirectory, targetDirectory, zipName)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Creates a zip archive containing files of specified extensions from the source directory and saves it to the target directory with the given name.\"\n}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"unzipFile\", \"type\": \"function\", \"signature\": \"(zipFilePath, extractPath)\", \"return_type\": \"str\", \"short_description\": \"Extracts the contents of a ZIP file to a specified directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"unzipFile\", \"type\": \"function\", \"signature\": \"(zipFilePath, extractPath)\", \"return_type\": \"str\", \"short_description\": \"Extracts the contents of a ZIP file to the specified directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"extractZip\", \"type\": \"function\", \"signature\": \"(zipFilePath, extractPath)\", \"return_type\": \"str\", \"short_description\": \"Extracts the contents of a ZIP file to the specified directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"extractZip\", \"type\": \"function\", \"signature\": \"(file_path, extract_to)\", \"return_type\": \"str\", \"short_description\": \"Extracts the contents of a ZIP file to the specified directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"extractZip\", \"type\": \"function\", \"signature\": \"(zipFilePath, extractPath)\", \"return_type\": \"str\", \"short_description\": \"Extracts the contents of a ZIP file to the specified directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"extractZip\", \"type\": \"function\", \"signature\": \"(file_path, extract_to_path)\", \"return_type\": \"str\", \"short_description\": \"Extracts the contents of a ZIP file located at file_path to the specified extract_to_path.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"downloadAndExtractZip\", \"type\": \"function\", \"signature\": \"(url, downloadPath='mnt/data/downloads/')\", \"return_type\": \"str\", \"short_description\": \"Downloads a ZIP file from a given URL and extracts its contents to a specified directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"unzipFile\", \"type\": \"function\", \"signature\": \"(file_path, extract_path)\", \"return_type\": \"str\", \"short_description\": \"Unzips a ZIP file located at file_path and extracts its contents to the specified extract_path.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"extractZip\", \"type\": \"function\", \"signature\": \"(zipFilePath, extractPath)\", \"return_type\": \"str\", \"short_description\": \"Extracts the contents of a ZIP file to a specified directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/1006", "solution": "{\"name\": \"unzipFile\", \"type\": \"function\", \"signature\": \"(zipFilePath, extractPath)\", \"return_type\": \"str\", \"short_description\": \"Extracts the contents of a ZIP file to a specified directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"downloadAndExtract\", \"type\": \"function\", \"signature\": \"(url, filename, downloadDir, zipDir)\", \"return_type\": \"tuple\", \"short_description\": \"Downloads a file from a given URL and extracts its contents into a specified directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"extractZipFiles\", \"type\": \"function\", \"signature\": \"(zipFilePath, extractDir)\", \"return_type\": \"list[str]\", \"short_description\": \"Extracts all files from a zip archive located at the specified path and extracts them to the specified directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/1012", "solution": "{\n  \"name\": \"createZipArchive\",\n  \"type\": \"function\",\n  \"signature\": \"(filePaths, zipFilePath)\",\n  \"return_type\": \"str\",\n  \"short_description\": \"Creates a zip archive containing the files specified in filePaths and saves it to zipFilePath.\"\n}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"extractZipFile\", \"type\": \"function\", \"signature\": \"(zipFilePath, extractPath)\", \"return_type\": \"None\", \"short_description\": \"Extracts all the contents of a zip file to the specified directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"createZipArchive\", \"type\": \"function\", \"signature\": \"(files, zipFilePath, compression=zipfile.ZIP_STORED)\", \"return_type\": \"None\", \"short_description\": \"Creates a zip archive containing the specified files.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/1012", "solution": "{\n  \"name\": \"extractZip\",\n  \"type\": \"function\",\n  \"signature\": \"(zipFilePath, extractToPath)\",\n  \"return_type\": \"None\",\n  \"short_description\": \"Extracts the contents of a zip file to a specified directory.\"\n}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"extractZip\", \"type\": \"function\", \"signature\": \"(zipFilePath, extractPath)\", \"return_type\": \"list\", \"short_description\": \"Extracts the contents of a zip file to the specified directory.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"unzipFile\", \"type\": \"function\", \"signature\": \"(zipFilePath, extractPath)\", \"return_type\": \"list[str]\", \"short_description\": \"Extracts the contents of a zip file located at zipFilePath and extracts them to the specified extractPath.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"createZipFromUrl\", \"type\": \"function\", \"signature\": \"(url, downloadPath, zipPath, zipName)\", \"return_type\": \"str\", \"short_description\": \"Downloads a file from a given URL, creates a zip archive from the downloaded file, and saves the zip archive to a specified path.\"}"}
{"api_id": 298, "api_name": "zipfile.ZipFile", "task_id": "BigCodeBench/1012", "solution": "{\"name\": \"downloadAndExtractZip\", \"type\": \"function\", \"signature\": \"(url, filename, downloadDir, zipDir)\", \"return_type\": \"tuple\", \"short_description\": \"Downloads a file from a given URL and extracts its contents into a specified directory. Returns a tuple containing a status message and a list of extracted file names.\"}"}
