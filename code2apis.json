{
    "BigCodeBench/13": {
        "(7, 18)": [
            {
                "api_key": "ftplib.FTP",
                "api_call": "ftplib.FTP(ftp_server)"
            }
        ],
        "(13, 8)": [
            {
                "api_key": "ftp_obj.login",
                "api_call": "ftplib.FTP(ftp_server).login(ftp_user, ftp_password)"
            }
        ],
        "(19, 8)": [
            {
                "api_key": "ftp_obj.cwd",
                "api_call": "ftplib.FTP(ftp_server).cwd(ftp_dir)"
            }
        ],
        "(25, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(download_dir)"
            }
        ],
        "(26, 8)": [
            {
                "api_key": "os.makedirs",
                "api_call": "os.makedirs(download_dir)"
            }
        ],
        "(29, 20)": [
            {
                "api_key": "ftp_obj.nlst",
                "api_call": "ftplib.FTP(ftp_server).nlst()"
            }
        ],
        "(31, 8)": [
            {
                "api_key": "subprocess.call",
                "api_call": "subprocess.call(command, shell=True)"
            }
        ],
        "(34, 4)": [
            {
                "api_key": "ftp_obj.quit",
                "api_call": "ftplib.FTP(ftp_server).quit()"
            }
        ]
    },
    "BigCodeBench/15": {
        "(6, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(commands_file_path)"
            }
        ],
        "(10, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(output_dir_path)"
            }
        ],
        "(11, 8)": [
            {
                "api_key": "os.makedirs",
                "api_call": "os.makedirs(output_dir_path)"
            }
        ],
        "(15, 17)": [
            {
                "api_key": "csv.reader",
                "api_call": "csv.reader(f)"
            }
        ],
        "(22, 23)": [
            {
                "api_key": "subprocess.call",
                "api_call": "subprocess.call(command, shell=True, stdout=f, stderr=subprocess.STDOUT)"
            }
        ],
        "(22, 77)": [
            {
                "api_key": "subprocess.STDOUT",
                "api_call": "subprocess.STDOUT"
            }
        ]
    },
    "BigCodeBench/17": {
        "(6, 39)": [
            {
                "api_key": "psutil.process_iter",
                "api_call": "psutil.process_iter()"
            }
        ],
        "(13, 16)": [
            {
                "api_key": "time.sleep",
                "api_call": "time.sleep(5)"
            }
        ],
        "(14, 8)": [
            {
                "api_key": "subprocess.Popen",
                "api_call": "subprocess.Popen(process_name)"
            }
        ]
    },
    "BigCodeBench/19": {
        "(5, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(directory)"
            }
        ],
        "(7, 24)": [
            {
                "api_key": "glob.glob",
                "api_call": "glob.glob(os.path.join(directory, '*'))"
            }
        ],
        "(7, 34)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(directory, '*')"
            }
        ],
        "(10, 20)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(directory, 'files.zip')"
            }
        ],
        "(7, 67)": [
            {
                "api_key": "os.path.isfile",
                "api_call": "os.path.isfile(f)"
            }
        ],
        "(11, 9)": [
            {
                "api_key": "zipfile.ZipFile",
                "api_call": "zipfile.ZipFile(zip_file_path, 'w')"
            }
        ],
        "(13, 12)": [
            {
                "api_key": "zipf.write",
                "api_call": "zipfile.ZipFile.write(file, os.path.basename(file))"
            }
        ],
        "(13, 29)": [
            {
                "api_key": "os.path.basename",
                "api_call": "os.path.basename(file)"
            }
        ]
    },
    "BigCodeBench/34": {
        "(6, 11)": [
            {
                "api_key": "re.sub",
                "api_call": "re.sub('http[s]?://\\\\S+', '', text)"
            }
        ],
        "(7, 11)": [
            {
                "api_key": "text.strip",
                "api_call": "re.sub('http[s]?://\\\\S+', '', text).strip()"
            }
        ],
        "(12, 16)": [
            {
                "api_key": "WordCloud().generate",
                "api_call": "wordcloud.WordCloud.generate(text)"
            }
        ],
        "(13, 4)": [
            {
                "api_key": "plt.figure",
                "api_call": "matplotlib.pyplot.figure(figsize=(10, 5))"
            }
        ],
        "(14, 4)": [
            {
                "api_key": "plt.imshow",
                "api_call": "matplotlib.pyplot.imshow(wordcloud)"
            }
        ],
        "(15, 4)": [
            {
                "api_key": "plt.axis",
                "api_call": "matplotlib.pyplot.axis('off')"
            }
        ]
    },
    "BigCodeBench/37": {
        "(10, 12)": [
            {
                "api_key": "RandomForestClassifier",
                "api_call": "sklearn.ensemble.RandomForestClassifier(random_state=42)"
            }
        ],
        "(11, 18)": [
            {
                "api_key": "pd.Series(model.feature_importances_, index=X.columns).sort_values",
                "api_call": "pandas.Series(model.feature_importances_, index=X.columns).sort_values(ascending=False)"
            }
        ],
        "(11, 28)": [
            {
                "api_key": "model.feature_importances_",
                "api_call": "sklearn.ensemble.RandomForestClassifier(random_state=42).fit(X, y).feature_importances_"
            }
        ],
        "(14, 4)": [
            {
                "api_key": "plt.figure",
                "api_call": "matplotlib.pyplot.figure(figsize=(10, 5))"
            }
        ],
        "(15, 9)": [
            {
                "api_key": "sns.barplot",
                "api_call": "seaborn.barplot(x=feature_imp, y=feature_imp.index)"
            }
        ],
        "(15, 38)": [
            {
                "api_key": "feature_imp.index",
                "api_call": "pandas.Series(model.feature_importances_, index=X.columns).sort_values(ascending=False).index"
            }
        ],
        "(16, 4)": [
            {
                "api_key": "ax.set_xlabel",
                "api_call": "seaborn.barplot(x=feature_imp, y=feature_imp.index).set_xlabel('Feature Importance Score')"
            }
        ],
        "(17, 4)": [
            {
                "api_key": "ax.set_ylabel",
                "api_call": "seaborn.barplot(x=feature_imp, y=feature_imp.index).set_ylabel('Features')"
            }
        ],
        "(18, 4)": [
            {
                "api_key": "ax.set_title",
                "api_call": "seaborn.barplot(x=feature_imp, y=feature_imp.index).set_title('Visualizing Important Features')"
            }
        ]
    },
    "BigCodeBench/82": {
        "(8, 15)": [
            {
                "api_key": "StringField",
                "api_call": "wtforms.StringField('Username', validators=[DataRequired(), Length(min=4, max=25)])"
            }
        ],
        "(8, 51)": [
            {
                "api_key": "DataRequired",
                "api_call": "wtforms.validators.DataRequired()"
            }
        ],
        "(8, 67)": [
            {
                "api_key": "Length",
                "api_call": "wtforms.validators.Length(min=4, max=25)"
            }
        ],
        "(9, 69)": [
            {
                "api_key": "Length",
                "api_call": "wtforms.validators.Length(min=8, max=80)"
            }
        ],
        "(9, 15)": [
            {
                "api_key": "PasswordField",
                "api_call": "wtforms.PasswordField('Password', validators=[DataRequired(), Length(min=8, max=80)])"
            }
        ],
        "(10, 13)": [
            {
                "api_key": "SubmitField",
                "api_call": "wtforms.SubmitField('Log In')"
            }
        ],
        "(11, 16)": [
            {
                "api_key": "LoginManager",
                "api_call": "flask_login.LoginManager()"
            }
        ],
        "(14, 10)": [
            {
                "api_key": "Flask",
                "api_call": "flask.Flask(__name__, template_folder=template_folder)"
            }
        ],
        "(15, 4)": [
            {
                "api_key": "app.config",
                "api_call": "flask.Flask(__name__, template_folder=template_folder).config"
            }
        ],
        "(17, 4)": [
            {
                "api_key": "login_manager.init_app",
                "api_call": "flask_login.LoginManager().init_app(app)"
            }
        ],
        "(21, 12)": [
            {
                "api_key": "flask_login.UserMixin.id",
                "api_call": "flask_login.UserMixin.id"
            }
        ],
        "(22, 12)": [
            {
                "api_key": "flask_login.UserMixin.password_hash",
                "api_call": "flask_login.UserMixin.password_hash"
            }
        ],
        "(22, 33)": [
            {
                "api_key": "generate_password_hash",
                "api_call": "werkzeug.security.generate_password_hash(password)"
            }
        ],
        "(25, 19)": [
            {
                "api_key": "check_password_hash",
                "api_call": "werkzeug.security.check_password_hash(self.password_hash, password)"
            }
        ],
        "(32, 12)": [
            {
                "api_key": "login_user",
                "api_call": "flask_login.login_user(user)"
            }
        ],
        "(33, 19)": [
            {
                "api_key": "redirect",
                "api_call": "flask.redirect(url_for('protected'))"
            }
        ],
        "(41, 15)": [
            {
                "api_key": "redirect",
                "api_call": "flask.redirect(url_for('login'))"
            }
        ],
        "(33, 28)": [
            {
                "api_key": "url_for",
                "api_call": "flask.url_for('protected')"
            }
        ],
        "(41, 24)": [
            {
                "api_key": "url_for",
                "api_call": "flask.url_for('login')"
            }
        ],
        "(35, 15)": [
            {
                "api_key": "render_template",
                "api_call": "flask.render_template('login.html', form=form)"
            }
        ],
        "(27, 5)": [
            {
                "api_key": "app.route",
                "api_call": "flask.Flask(__name__, template_folder=template_folder).route('/login', methods=['GET', 'POST'])"
            }
        ],
        "(37, 5)": [
            {
                "api_key": "app.route",
                "api_call": "flask.Flask(__name__, template_folder=template_folder).route('/logout')"
            }
        ],
        "(43, 5)": [
            {
                "api_key": "app.route",
                "api_call": "flask.Flask(__name__, template_folder=template_folder).route('/protected')"
            }
        ],
        "(40, 8)": [
            {
                "api_key": "logout_user",
                "api_call": "flask_login.logout_user()"
            }
        ],
        "(46, 34)": [
            {
                "api_key": "current_user.id",
                "api_call": "flask_login.current_user.id"
            }
        ],
        "(49, 5)": [
            {
                "api_key": "login_manager.user_loader",
                "api_call": "flask_login.LoginManager().user_loader"
            }
        ]
    },
    "BigCodeBench/89": {
        "(7, 16)": [
            {
                "api_key": "np.copy",
                "api_call": "numpy.copy(data)"
            }
        ],
        "(11, 13)": [
            {
                "api_key": "StandardScaler",
                "api_call": "sklearn.preprocessing.StandardScaler()"
            }
        ],
        "(12, 24)": [
            {
                "api_key": "scaler.fit_transform",
                "api_call": "sklearn.preprocessing.StandardScaler().fit_transform(column_data.reshape(-1, 1))"
            }
        ],
        "(15, 15)": [
            {
                "api_key": "np.abs",
                "api_call": "numpy.abs(stats.zscore(standardized_data))"
            }
        ],
        "(15, 22)": [
            {
                "api_key": "stats.zscore",
                "api_call": "scipy.stats.zscore(standardized_data)"
            }
        ],
        "(18, 15)": [
            {
                "api_key": "np.where",
                "api_call": "numpy.where(z_scores > outlier_z_score)"
            }
        ],
        "(19, 28)": [
            {
                "api_key": "np.delete",
                "api_call": "numpy.delete(data_copy, outliers, axis=0)"
            }
        ],
        "(22, 4)": [
            {
                "api_key": "plt.figure",
                "api_call": "matplotlib.pyplot.figure(figsize=(10, 5))"
            }
        ],
        "(24, 4)": [
            {
                "api_key": "plt.subplot",
                "api_call": "matplotlib.pyplot.subplot(1, 2, 1)"
            }
        ],
        "(28, 4)": [
            {
                "api_key": "plt.subplot",
                "api_call": "matplotlib.pyplot.subplot(1, 2, 2)"
            }
        ],
        "(25, 4)": [
            {
                "api_key": "plt.scatter",
                "api_call": "matplotlib.pyplot.scatter(data_copy[:, 0], data_copy[:, 1])"
            }
        ],
        "(29, 4)": [
            {
                "api_key": "plt.scatter",
                "api_call": "matplotlib.pyplot.scatter(data_without_outliers[:, 0], data_without_outliers[:, 1])"
            }
        ],
        "(26, 4)": [
            {
                "api_key": "plt.title",
                "api_call": "matplotlib.pyplot.title('Data with Outliers')"
            }
        ],
        "(30, 4)": [
            {
                "api_key": "plt.title",
                "api_call": "matplotlib.pyplot.title('Data without Outliers')"
            }
        ],
        "(32, 4)": [
            {
                "api_key": "plt.show",
                "api_call": "matplotlib.pyplot.show()"
            }
        ]
    },
    "BigCodeBench/92": {
        "(6, 28)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame"
            }
        ],
        "(11, 13)": [
            {
                "api_key": "KMeans",
                "api_call": "sklearn.cluster.KMeans(n_clusters=n_clusters)"
            }
        ],
        "(12, 13)": [
            {
                "api_key": "kmeans.fit_predict",
                "api_call": "sklearn.cluster.KMeans(n_clusters=n_clusters).fit_predict(data)"
            }
        ],
        "(13, 16)": [
            {
                "api_key": "kmeans.cluster_centers_",
                "api_call": "sklearn.cluster.KMeans(n_clusters=n_clusters).cluster_centers_"
            }
        ],
        "(15, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(16, 4)": [
            {
                "api_key": "ax.scatter",
                "api_call": "matplotlib.pyplot.subplots()[1].scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels, cmap='viridis', alpha=0.6, label='Data points')"
            }
        ],
        "(17, 4)": [
            {
                "api_key": "ax.scatter",
                "api_call": "matplotlib.pyplot.subplots()[1].scatter(centroids[:, 0], centroids[:, 1], marker='x', s=200, c='red', label='Centroids')"
            }
        ],
        "(18, 4)": [
            {
                "api_key": "ax.set_xlabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_xlabel('Feature 1')"
            }
        ],
        "(19, 4)": [
            {
                "api_key": "ax.set_ylabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_ylabel('Feature 2')"
            }
        ],
        "(20, 4)": [
            {
                "api_key": "ax.set_title",
                "api_call": "matplotlib.pyplot.subplots()[1].set_title('K-Means Clustering')"
            }
        ],
        "(21, 4)": [
            {
                "api_key": "ax.legend",
                "api_call": "matplotlib.pyplot.subplots()[1].legend()"
            }
        ]
    },
    "BigCodeBench/93": {
        "(6, 4)": [
            {
                "api_key": "np.random.seed",
                "api_call": "numpy.random.seed(42)"
            }
        ],
        "(10, 10)": [
            {
                "api_key": "PCA",
                "api_call": "sklearn.decomposition.PCA(n_components=n_components)"
            }
        ],
        "(11, 23)": [
            {
                "api_key": "pca.fit_transform",
                "api_call": "sklearn.decomposition.PCA(n_components=n_components).fit_transform(data)"
            }
        ],
        "(13, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(14, 4)": [
            {
                "api_key": "ax.scatter",
                "api_call": "matplotlib.pyplot.subplots()[1].scatter(transformed_data[:, 0], transformed_data[:, 1])"
            }
        ],
        "(16, 11)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(transformed_data, columns=[f'PC{i + 1}' for i in range(n_components)])"
            }
        ]
    },
    "BigCodeBench/99": {
        "(7, 4)": [
            {
                "api_key": "plt.rc",
                "api_call": "matplotlib.pyplot.rc('font', family='Arial')"
            }
        ],
        "(8, 11)": [
            {
                "api_key": "load_iris",
                "api_call": "sklearn.datasets.load_iris()"
            }
        ],
        "(9, 14)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(data=iris.data, columns=iris.feature_names)"
            }
        ],
        "(9, 32)": [
            {
                "api_key": "iris.data",
                "api_call": "sklearn.datasets.load_iris().data"
            }
        ],
        "(9, 51)": [
            {
                "api_key": "iris.feature_names",
                "api_call": "sklearn.datasets.load_iris().feature_names"
            }
        ],
        "(10, 25)": [
            {
                "api_key": "iris.target",
                "api_call": "sklearn.datasets.load_iris().target"
            }
        ],
        "(13, 16)": [
            {
                "api_key": "sns.pairplot",
                "api_call": "seaborn.pairplot(iris_df, hue='species', vars=iris.feature_names)"
            }
        ],
        "(14, 4)": [
            {
                "api_key": "pair_plot.fig.suptitle",
                "api_call": "seaborn.pairplot(iris_df, hue='species', vars=iris.feature_names).fig.suptitle('Iris Dataset Pair Plot', fontsize=16)"
            }
        ]
    },
    "BigCodeBench/100": {
        "(7, 8)": [
            {
                "api_key": "plt.rc",
                "api_call": "matplotlib.pyplot.rc('font', family='Arial')"
            }
        ],
        "(9, 8)": [
            {
                "api_key": "random.seed",
                "api_call": "random.seed(seed)"
            }
        ],
        "(10, 16)": [
            {
                "api_key": "pd.date_range",
                "api_call": "pandas.date_range(end=datetime.now(), periods=30)"
            }
        ],
        "(10, 34)": [
            {
                "api_key": "datetime.now",
                "api_call": "datetime.datetime.now()"
            }
        ],
        "(11, 18)": [
            {
                "api_key": "random.randint",
                "api_call": "random.randint(0, 100)"
            }
        ],
        "(13, 18)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(14, 8)": [
            {
                "api_key": "ax.plot",
                "api_call": "matplotlib.pyplot.subplots()[1].plot(dates, values, label='Value over Time')"
            }
        ],
        "(15, 8)": [
            {
                "api_key": "ax.set_xlabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_xlabel('Date')"
            }
        ],
        "(16, 8)": [
            {
                "api_key": "ax.set_ylabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_ylabel('Value')"
            }
        ],
        "(17, 8)": [
            {
                "api_key": "ax.set_title",
                "api_call": "matplotlib.pyplot.subplots()[1].set_title('Random Time Series Data')"
            }
        ],
        "(18, 8)": [
            {
                "api_key": "ax.legend",
                "api_call": "matplotlib.pyplot.subplots()[1].legend()"
            }
        ]
    },
    "BigCodeBench/101": {
        "(9, 8)": [
            {
                "api_key": "plt.rc",
                "api_call": "matplotlib.pyplot.rc('font', **font)"
            }
        ],
        "(15, 17)": [
            {
                "api_key": "pd.read_csv",
                "api_call": "pandas.read_csv(data_url, sep='\\\\s+', skiprows=22, header=None)"
            }
        ],
        "(16, 15)": [
            {
                "api_key": "np.hstack",
                "api_call": "numpy.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])"
            }
        ],
        "(16, 26)": [
            {
                "api_key": "raw_df.values",
                "api_call": "pandas.read_csv(data_url, sep='\\\\s+', skiprows=22, header=None).values"
            }
        ],
        "(21, 20)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(data=data, columns=columns)"
            }
        ],
        "(24, 15)": [
            {
                "api_key": "boston_df.corr",
                "api_call": "pandas.DataFrame(data=data, columns=columns).corr()"
            }
        ],
        "(27, 8)": [
            {
                "api_key": "sns.set_theme",
                "api_call": "seaborn.set_theme(style='white')"
            }
        ],
        "(28, 8)": [
            {
                "api_key": "plt.figure",
                "api_call": "matplotlib.pyplot.figure(figsize=(10, 8))"
            }
        ],
        "(29, 13)": [
            {
                "api_key": "sns.heatmap",
                "api_call": "seaborn.heatmap(corr, annot=True)"
            }
        ]
    },
    "BigCodeBench/108": {
        "(7, 26)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame"
            }
        ],
        "(17, 18)": [
            {
                "api_key": "pd.to_numeric",
                "api_call": "pandas.to_numeric(df['value'], errors='coerce')"
            }
        ],
        "(24, 13)": [
            {
                "api_key": "seasonal_decompose",
                "api_call": "statsmodels.tsa.seasonal.seasonal_decompose(df['value'], model=decomposition_model)"
            }
        ],
        "(27, 4)": [
            {
                "api_key": "plt.ylabel",
                "api_call": "matplotlib.pyplot.ylabel('Value')"
            }
        ],
        "(28, 4)": [
            {
                "api_key": "plt.title",
                "api_call": "matplotlib.pyplot.title('Time Series Decomposition')"
            }
        ]
    },
    "BigCodeBench/120": {
        "(4, 25)": [
            {
                "api_key": "datetime",
                "api_call": "datetime.datetime(2020, 1, 1)"
            }
        ],
        "(4, 56)": [
            {
                "api_key": "datetime",
                "api_call": "datetime.datetime(2020, 12, 31)"
            }
        ],
        "(6, 32)": [
            {
                "api_key": "datetime",
                "api_call": "datetime.datetime"
            }
        ],
        "(11, 4)": [
            {
                "api_key": "random_seed",
                "api_call": "random.seed(seed)"
            }
        ],
        "(14, 12)": [
            {
                "api_key": "pd.Series",
                "api_call": "pandas.Series([start_date + timedelta(days=randint(0, num_days)) for _ in range(num_days)])"
            }
        ],
        "(14, 36)": [
            {
                "api_key": "timedelta",
                "api_call": "datetime.timedelta(days=randint(0, num_days))"
            }
        ],
        "(14, 51)": [
            {
                "api_key": "randint",
                "api_call": "random.randint(0, num_days)"
            }
        ]
    },
    "BigCodeBench/123": {
        "(11, 12)": [
            {
                "api_key": "glob.glob",
                "api_call": "glob.glob(os.path.join(file_dir, '*' + file_ext))"
            }
        ],
        "(11, 22)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(file_dir, '*' + file_ext)"
            }
        ],
        "(15, 19)": [
            {
                "api_key": "pd.read_csv",
                "api_call": "pandas.read_csv(file)"
            }
        ],
        "(16, 22)": [
            {
                "api_key": "pd.concat",
                "api_call": "pandas.concat(data_frames, ignore_index=True)"
            }
        ]
    },
    "BigCodeBench/124": {
        "(9, 4)": [
            {
                "api_key": "random_seed",
                "api_call": "random.seed(seed)"
            }
        ],
        "(14, 17)": [
            {
                "api_key": "time.time",
                "api_call": "time.time()"
            }
        ],
        "(15, 19)": [
            {
                "api_key": "randint",
                "api_call": "random.randint(1, 100)"
            }
        ],
        "(18, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(19, 4)": [
            {
                "api_key": "ax.hist",
                "api_call": "matplotlib.pyplot.subplots()[1].hist(random_list, bins=20)"
            }
        ],
        "(20, 4)": [
            {
                "api_key": "ax.set_title",
                "api_call": "matplotlib.pyplot.subplots()[1].set_title('Histogram of Random Numbers')"
            }
        ],
        "(21, 4)": [
            {
                "api_key": "ax.set_xlabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_xlabel('Number')"
            }
        ],
        "(22, 4)": [
            {
                "api_key": "ax.set_ylabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_ylabel('Frequency')"
            }
        ]
    },
    "BigCodeBench/129": {
        "(6, 19)": [
            {
                "api_key": "requests.get",
                "api_call": "requests.get(url)"
            }
        ],
        "(7, 8)": [
            {
                "api_key": "response.raise_for_status",
                "api_call": "requests.get(url).raise_for_status()"
            }
        ],
        "(8, 11)": [
            {
                "api_key": "requests.ConnectionError",
                "api_call": "requests.ConnectionError"
            }
        ],
        "(10, 11)": [
            {
                "api_key": "requests.HTTPError",
                "api_call": "requests.HTTPError"
            }
        ],
        "(11, 14)": [
            {
                "api_key": "requests.HTTPError",
                "api_call": "requests.HTTPError(f'HTTP error occurred: {e}')"
            }
        ],
        "(14, 15)": [
            {
                "api_key": "BeautifulSoup",
                "api_call": "bs4.BeautifulSoup(response.text, 'html.parser')"
            }
        ],
        "(14, 29)": [
            {
                "api_key": "response.text",
                "api_call": "requests.get(url).text"
            }
        ],
        "(15, 16)": [
            {
                "api_key": "soup.find",
                "api_call": "bs4.BeautifulSoup(response.text, 'html.parser').find('table')"
            }
        ],
        "(20, 45)": [
            {
                "api_key": "table.find_all",
                "api_call": "bs4.BeautifulSoup(response.text, 'html.parser').find('table').find_all('th')"
            }
        ],
        "(24, 19)": [
            {
                "api_key": "table.find_all",
                "api_call": "bs4.BeautifulSoup(response.text, 'html.parser').find('table').find_all('tr')"
            }
        ],
        "(34, 13)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(data, columns=headers if headers else None)"
            }
        ]
    },
    "BigCodeBench/139": {
        "(5, 26)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame"
            }
        ],
        "(8, 44)": [
            {
                "api_key": "np.number",
                "api_call": "numpy.number"
            }
        ],
        "(14, 18)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(16, 8)": [
            {
                "api_key": "ax.set_xlabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_xlabel('Value')"
            }
        ],
        "(17, 8)": [
            {
                "api_key": "ax.set_ylabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_ylabel('Frequency')"
            }
        ]
    },
    "BigCodeBench/147": {
        "(8, 15)": [
            {
                "api_key": "socket.socket",
                "api_call": "socket.socket(socket.AF_INET, socket.SOCK_STREAM)"
            }
        ],
        "(8, 29)": [
            {
                "api_key": "socket.AF_INET",
                "api_call": "socket.AF_INET"
            }
        ],
        "(8, 45)": [
            {
                "api_key": "socket.SOCK_STREAM",
                "api_call": "socket.SOCK_STREAM"
            }
        ],
        "(9, 8)": [
            {
                "api_key": "sock.settimeout",
                "api_call": "socket.socket(socket.AF_INET, socket.SOCK_STREAM).settimeout(1)"
            }
        ],
        "(11, 12)": [
            {
                "api_key": "sock.connect",
                "api_call": "socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect((str(ip), port))"
            }
        ],
        "(13, 15)": [
            {
                "api_key": "socket.error",
                "api_call": "socket.error"
            }
        ],
        "(16, 12)": [
            {
                "api_key": "sock.close",
                "api_call": "socket.socket(socket.AF_INET, socket.SOCK_STREAM).close()"
            }
        ],
        "(20, 14)": [
            {
                "api_key": "IPv4Network",
                "api_call": "ipaddress.IPv4Network(ip_range)"
            }
        ],
        "(21, 17)": [
            {
                "api_key": "Thread",
                "api_call": "threading.Thread(target=check_port, args=(ip,))"
            }
        ],
        "(22, 8)": [
            {
                "api_key": "thread.start",
                "api_call": "threading.Thread(target=check_port, args=(ip,)).start()"
            }
        ],
        "(26, 8)": [
            {
                "api_key": "thread.join",
                "api_call": "threading.Thread(target=check_port, args=(ip,)).join()"
            }
        ]
    },
    "BigCodeBench/161": {
        "(11, 20)": [
            {
                "api_key": "re.match",
                "api_call": "re.match(log_pattern, line)"
            }
        ],
        "(13, 47)": [
            {
                "api_key": "match.groups",
                "api_call": "re.match(log_pattern, line).groups()"
            }
        ],
        "(16, 20)": [
            {
                "api_key": "datetime.strptime",
                "api_call": "datetime.datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')"
            }
        ],
        "(24, 9)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(parsed_data, columns=['Type', 'Timestamp', 'Message'])"
            }
        ],
        "(26, 4)": [
            {
                "api_key": "df.to_csv",
                "api_call": "pandas.DataFrame(parsed_data, columns=['Type', 'Timestamp', 'Message']).to_csv(output_csv_path, index=False)"
            }
        ]
    },
    "BigCodeBench/162": {
        "(6, 12)": [
            {
                "api_key": "re.split",
                "api_call": "re.split('\\\\W+', text)"
            }
        ],
        "(10, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(12, 15)": [
            {
                "api_key": "np.arange",
                "api_call": "numpy.arange(max(word_lengths) + 2)"
            }
        ],
        "(15, 4)": [
            {
                "api_key": "ax.hist",
                "api_call": "matplotlib.pyplot.subplots()[1].hist(word_lengths, bins=bins, rwidth=rwidth)"
            }
        ],
        "(16, 4)": [
            {
                "api_key": "ax.set_title",
                "api_call": "matplotlib.pyplot.subplots()[1].set_title('Distribution of Word Lengths')"
            }
        ],
        "(17, 4)": [
            {
                "api_key": "ax.set_xlabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_xlabel('Word Length')"
            }
        ],
        "(18, 4)": [
            {
                "api_key": "ax.set_ylabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_ylabel('Frequency')"
            }
        ]
    },
    "BigCodeBench/177": {
        "(8, 14)": [
            {
                "api_key": "re.compile",
                "api_call": "re.compile('(like|what)', re.IGNORECASE)"
            }
        ],
        "(8, 41)": [
            {
                "api_key": "re.IGNORECASE",
                "api_call": "re.IGNORECASE"
            }
        ],
        "(9, 63)": [
            {
                "api_key": "pattern.search",
                "api_call": "re.compile('(like|what)', re.IGNORECASE).search(x)"
            }
        ],
        "(12, 7)": [
            {
                "api_key": "interesting_articles.empty",
                "api_call": "interesting_articles.empty"
            }
        ],
        "(16, 17)": [
            {
                "api_key": "nltk.word_tokenize",
                "api_call": "nltk.word_tokenize(content)"
            }
        ]
    },
    "BigCodeBench/184": {
        "(17, 15)": [
            {
                "api_key": "re.sub",
                "api_call": "re.sub('\\\\d+', '', text)"
            }
        ],
        "(18, 15)": [
            {
                "api_key": "re.sub",
                "api_call": "re.sub('\\\\W+', ' ', text)"
            }
        ],
        "(23, 17)": [
            {
                "api_key": "CountVectorizer",
                "api_call": "sklearn.feature_extraction.text.CountVectorizer()"
            }
        ],
        "(24, 22)": [
            {
                "api_key": "vectorizer.fit_transform",
                "api_call": "sklearn.feature_extraction.text.CountVectorizer().fit_transform(dataframe[text_column])"
            }
        ],
        "(26, 11)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(vectorized_data.toarray(), columns=vectorizer.get_feature_names_out())"
            }
        ],
        "(26, 24)": [
            {
                "api_key": "vectorized_data.toarray",
                "api_call": "sklearn.feature_extraction.text.CountVectorizer().fit_transform(dataframe[text_column]).toarray()"
            }
        ],
        "(26, 59)": [
            {
                "api_key": "vectorizer.get_feature_names_out",
                "api_call": "sklearn.feature_extraction.text.CountVectorizer().get_feature_names_out()"
            }
        ]
    },
    "BigCodeBench/187": {
        "(14, 35)": [
            {
                "api_key": "Point",
                "api_call": "shapely.geometry.Point(np.random.uniform(lon_min, lon_max), np.random.uniform(lat_min, lat_max))"
            }
        ],
        "(14, 41)": [
            {
                "api_key": "np.random.uniform",
                "api_call": "numpy.random.uniform(lon_min, lon_max)"
            }
        ],
        "(14, 78)": [
            {
                "api_key": "np.random.uniform",
                "api_call": "numpy.random.uniform(lat_min, lat_max)"
            }
        ],
        "(16, 10)": [
            {
                "api_key": "gpd.GeoDataFrame",
                "api_call": "geopandas.GeoDataFrame(data, geometry='Coordinates')"
            }
        ]
    },
    "BigCodeBench/199": {
        "(18, 4)": [
            {
                "api_key": "set_seed",
                "api_call": "random.seed(seed)"
            }
        ],
        "(19, 36)": [
            {
                "api_key": "datetime",
                "api_call": "datetime.datetime"
            }
        ],
        "(27, 18)": [
            {
                "api_key": "pytz.timezone",
                "api_call": "pytz.timezone(timezones[city])"
            }
        ],
        "(29, 37)": [
            {
                "api_key": "randint",
                "api_call": "random.randint(0, len(weather_conditions) - 1)"
            }
        ],
        "(32, 16)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(report_data, columns=['City', 'Local Time', 'Weather Condition'])"
            }
        ]
    },
    "BigCodeBench/208": {
        "(5, 4)": [
            {
                "api_key": "np.random.seed",
                "api_call": "numpy.random.seed(seed)"
            }
        ],
        "(9, 12)": [
            {
                "api_key": "np.random.choice",
                "api_call": "numpy.random.choice([-1, 1], size=elements)"
            }
        ],
        "(10, 11)": [
            {
                "api_key": "np.cumsum",
                "api_call": "numpy.cumsum(steps)"
            }
        ],
        "(11, 24)": [
            {
                "api_key": "pd.Series(walk).describe(percentiles=[0.05, 0.25, 0.5, 0.75, 0.95]).to_dict",
                "api_call": "pandas.Series(walk).describe(percentiles=[0.05, 0.25, 0.5, 0.75, 0.95]).to_dict()"
            }
        ],
        "(13, 4)": [
            {
                "api_key": "plt.figure",
                "api_call": "matplotlib.pyplot.figure(figsize=(10, 6))"
            }
        ],
        "(14, 4)": [
            {
                "api_key": "plt.plot",
                "api_call": "matplotlib.pyplot.plot(walk)"
            }
        ],
        "(15, 4)": [
            {
                "api_key": "plt.title",
                "api_call": "matplotlib.pyplot.title('Random Walk')"
            }
        ],
        "(16, 30)": [
            {
                "api_key": "plt.gca",
                "api_call": "matplotlib.pyplot.gca()"
            }
        ]
    },
    "BigCodeBench/211": {
        "(11, 15)": [
            {
                "api_key": "requests.get",
                "api_call": "requests.get(url, headers=headers)"
            }
        ],
        "(12, 15)": [
            {
                "api_key": "os.path.basename",
                "api_call": "os.path.basename(url)"
            }
        ],
        "(13, 15)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(destination_directory, filename)"
            }
        ],
        "(16, 16)": [
            {
                "api_key": "response.content",
                "api_call": "requests.get(url, headers=headers).content"
            }
        ],
        "(18, 9)": [
            {
                "api_key": "zipfile.ZipFile",
                "api_call": "zipfile.ZipFile(zip_path, 'r')"
            }
        ],
        "(19, 8)": [
            {
                "api_key": "zip_ref.extractall",
                "api_call": "zipfile.ZipFile.extractall(destination_directory)"
            }
        ],
        "(21, 22)": [
            {
                "api_key": "os.listdir",
                "api_call": "os.listdir(destination_directory)"
            }
        ]
    },
    "BigCodeBench/214": {
        "(10, 4)": [
            {
                "api_key": "random.seed",
                "api_call": "random.seed(seed)"
            }
        ],
        "(11, 4)": [
            {
                "api_key": "np.random.seed",
                "api_call": "numpy.random.seed(seed)"
            }
        ],
        "(12, 12)": [
            {
                "api_key": "np.zeros",
                "api_call": "numpy.zeros(image_size, dtype=np.uint8)"
            }
        ],
        "(12, 39)": [
            {
                "api_key": "np.uint8",
                "api_call": "numpy.uint8"
            }
        ],
        "(17, 33)": [
            {
                "api_key": "random.randint",
                "api_call": "random.randint(range_low, range_high)"
            }
        ],
        "(19, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(20, 4)": [
            {
                "api_key": "ax.imshow",
                "api_call": "matplotlib.pyplot.subplots()[1].imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))"
            }
        ],
        "(20, 14)": [
            {
                "api_key": "cv2.cvtColor",
                "api_call": "cv2.cvtColor(image, cv2.COLOR_BGR2RGB)"
            }
        ],
        "(20, 34)": [
            {
                "api_key": "cv2.COLOR_BGR2RGB",
                "api_call": "cv2.COLOR_BGR2RGB"
            }
        ],
        "(21, 4)": [
            {
                "api_key": "ax.set_title",
                "api_call": "matplotlib.pyplot.subplots()[1].set_title('Random RGB Image')"
            }
        ]
    },
    "BigCodeBench/227": {
        "(8, 11)": [
            {
                "api_key": "os.path.isfile",
                "api_call": "os.path.isfile(audio_file)"
            }
        ],
        "(12, 23)": [
            {
                "api_key": "sf.read",
                "api_call": "soundfile.read(audio_file)"
            }
        ],
        "(14, 15)": [
            {
                "api_key": "np.log10",
                "api_call": "numpy.log10(np.sqrt(np.mean(data ** 2)))"
            }
        ],
        "(14, 24)": [
            {
                "api_key": "np.sqrt",
                "api_call": "numpy.sqrt(np.mean(data ** 2))"
            }
        ],
        "(14, 32)": [
            {
                "api_key": "np.mean",
                "api_call": "numpy.mean(data ** 2)"
            }
        ],
        "(17, 13)": [
            {
                "api_key": "np.array(L).reshape",
                "api_call": "numpy.array(L).reshape(M, N)"
            }
        ],
        "(20, 22)": [
            {
                "api_key": "np.max",
                "api_call": "numpy.max(matrix)"
            }
        ],
        "(23, 66)": [
            {
                "api_key": "np.max",
                "api_call": "numpy.max"
            }
        ],
        "(23, 8)": [
            {
                "api_key": "librosa.amplitude_to_db",
                "api_call": "librosa.amplitude_to_db(np.abs(librosa.stft(matrix)), ref=np.max)"
            }
        ],
        "(23, 32)": [
            {
                "api_key": "np.abs",
                "api_call": "numpy.abs(librosa.stft(matrix))"
            }
        ],
        "(23, 39)": [
            {
                "api_key": "librosa.stft",
                "api_call": "librosa.stft(matrix)"
            }
        ],
        "(24, 10)": [
            {
                "api_key": "librosa.display.specshow",
                "api_call": "librosa.display.specshow(D, sr=samplerate, x_axis='time', y_axis='log')"
            }
        ],
        "(25, 4)": [
            {
                "api_key": "plt.colorbar",
                "api_call": "matplotlib.pyplot.colorbar(format='%+2.0f dB')"
            }
        ],
        "(26, 4)": [
            {
                "api_key": "plt.title",
                "api_call": "matplotlib.pyplot.title('Spectrogram')"
            }
        ],
        "(28, 19)": [
            {
                "api_key": "plt.gcf",
                "api_call": "matplotlib.pyplot.gcf()"
            }
        ]
    },
    "BigCodeBench/239": {
        "(5, 10)": [
            {
                "api_key": "np.array",
                "api_call": "numpy.array([b for (a, b) in original])"
            }
        ],
        "(8, 16)": [
            {
                "api_key": "np.mean",
                "api_call": "numpy.mean(arr)"
            }
        ],
        "(9, 15)": [
            {
                "api_key": "np.std",
                "api_call": "numpy.std(arr)"
            }
        ],
        "(10, 15)": [
            {
                "api_key": "np.min",
                "api_call": "numpy.min(arr)"
            }
        ],
        "(11, 15)": [
            {
                "api_key": "np.max",
                "api_call": "numpy.max(arr)"
            }
        ],
        "(15, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(16, 4)": [
            {
                "api_key": "ax.hist",
                "api_call": "matplotlib.pyplot.subplots()[1].hist(arr, density=True, alpha=0.6, bins='auto', label='Histogram')"
            }
        ],
        "(19, 17)": [
            {
                "api_key": "ax.get_xlim",
                "api_call": "matplotlib.pyplot.subplots()[1].get_xlim()"
            }
        ],
        "(20, 8)": [
            {
                "api_key": "np.linspace",
                "api_call": "numpy.linspace(xmin, xmax, 100)"
            }
        ],
        "(21, 8)": [
            {
                "api_key": "stats.norm.pdf",
                "api_call": "scipy.stats.norm.pdf(x, computed_stats['mean'], computed_stats['std'])"
            }
        ],
        "(22, 4)": [
            {
                "api_key": "ax.plot",
                "api_call": "matplotlib.pyplot.subplots()[1].plot(x, p, 'k', linewidth=2, label='PDF')"
            }
        ],
        "(23, 4)": [
            {
                "api_key": "ax.set_title",
                "api_call": "matplotlib.pyplot.subplots()[1].set_title('Histogram with PDF')"
            }
        ],
        "(24, 4)": [
            {
                "api_key": "ax.legend",
                "api_call": "matplotlib.pyplot.subplots()[1].legend()"
            }
        ],
        "(25, 4)": [
            {
                "api_key": "plt.close",
                "api_call": "matplotlib.pyplot.close(fig)"
            }
        ]
    },
    "BigCodeBench/241": {
        "(5, 10)": [
            {
                "api_key": "np.array",
                "api_call": "numpy.array([b for (a, b) in original])"
            }
        ],
        "(8, 7)": [
            {
                "api_key": "arr.size",
                "api_call": "numpy.array([b for (a, b) in original]).size"
            }
        ],
        "(11, 19)": [
            {
                "api_key": "preprocessing.normalize",
                "api_call": "sklearn.preprocessing.normalize([arr])"
            }
        ],
        "(14, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(15, 4)": [
            {
                "api_key": "ax.plot",
                "api_call": "matplotlib.pyplot.subplots()[1].plot(arr, label='Original')"
            }
        ],
        "(16, 4)": [
            {
                "api_key": "ax.plot",
                "api_call": "matplotlib.pyplot.subplots()[1].plot(norm_arr, label='Normalized')"
            }
        ],
        "(17, 4)": [
            {
                "api_key": "ax.legend",
                "api_call": "matplotlib.pyplot.subplots()[1].legend()"
            }
        ],
        "(18, 4)": [
            {
                "api_key": "ax.set_title",
                "api_call": "matplotlib.pyplot.subplots()[1].set_title('Original vs. Normalized Data')"
            }
        ]
    },
    "BigCodeBench/267": {
        "(9, 13)": [
            {
                "api_key": "np.array",
                "api_call": "numpy.array(list(data.values()))"
            }
        ],
        "(10, 11)": [
            {
                "api_key": "np.linspace",
                "api_call": "numpy.linspace(0, 2, 2 * sample_rate, False)"
            }
        ],
        "(11, 13)": [
            {
                "api_key": "np.sin",
                "api_call": "numpy.sin(np.outer(time, signal) * np.pi)"
            }
        ],
        "(11, 20)": [
            {
                "api_key": "np.outer",
                "api_call": "numpy.outer(time, signal)"
            }
        ],
        "(11, 45)": [
            {
                "api_key": "np.pi",
                "api_call": "numpy.pi"
            }
        ],
        "(14, 10)": [
            {
                "api_key": "fftpack.fft",
                "api_call": "scipy.fftpack.fft(signal)"
            }
        ],
        "(17, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots(figsize=(12, 6))"
            }
        ],
        "(18, 4)": [
            {
                "api_key": "ax.plot",
                "api_call": "matplotlib.pyplot.subplots(figsize=(12, 6))[1].plot(np.abs(fft))"
            }
        ],
        "(18, 12)": [
            {
                "api_key": "np.abs",
                "api_call": "numpy.abs(fft)"
            }
        ],
        "(19, 4)": [
            {
                "api_key": "ax.set_title",
                "api_call": "matplotlib.pyplot.subplots(figsize=(12, 6))[1].set_title('FFT of the Signal')"
            }
        ],
        "(20, 4)": [
            {
                "api_key": "ax.set_xlabel",
                "api_call": "matplotlib.pyplot.subplots(figsize=(12, 6))[1].set_xlabel('Frequency [Hz]')"
            }
        ],
        "(21, 4)": [
            {
                "api_key": "ax.set_ylabel",
                "api_call": "matplotlib.pyplot.subplots(figsize=(12, 6))[1].set_ylabel('Frequency Spectrum Magnitude')"
            }
        ]
    },
    "BigCodeBench/273": {
        "(13, 29)": [
            {
                "api_key": "http.server.BaseHTTPRequestHandler",
                "api_call": "http.server.BaseHTTPRequestHandler"
            }
        ],
        "(15, 27)": [
            {
                "api_key": "cgi.parse_header",
                "api_call": "cgi.parse_header(self.headers.get('content-type'))"
            }
        ],
        "(15, 44)": [
            {
                "api_key": "http.server.BaseHTTPRequestHandler.headers.get",
                "api_call": "http.server.BaseHTTPRequestHandler.headers.get('content-type')"
            }
        ],
        "(20, 25)": [
            {
                "api_key": "http.server.BaseHTTPRequestHandler.headers.get",
                "api_call": "http.server.BaseHTTPRequestHandler.headers.get('content-length')"
            }
        ],
        "(17, 16)": [
            {
                "api_key": "http.server.BaseHTTPRequestHandler.send_error",
                "api_call": "http.server.BaseHTTPRequestHandler.send_error(400, 'Content-Type header is not application/json')"
            }
        ],
        "(24, 16)": [
            {
                "api_key": "http.server.BaseHTTPRequestHandler.send_error",
                "api_call": "http.server.BaseHTTPRequestHandler.send_error(400, 'Invalid JSON')"
            }
        ],
        "(28, 16)": [
            {
                "api_key": "http.server.BaseHTTPRequestHandler.send_error",
                "api_call": "http.server.BaseHTTPRequestHandler.send_error(400, 'No data key in request')"
            }
        ],
        "(22, 26)": [
            {
                "api_key": "json.loads",
                "api_call": "json.loads(self.rfile.read(length))"
            }
        ],
        "(22, 37)": [
            {
                "api_key": "http.server.BaseHTTPRequestHandler.rfile.read",
                "api_call": "http.server.BaseHTTPRequestHandler.rfile.read(length)"
            }
        ],
        "(23, 19)": [
            {
                "api_key": "json.JSONDecodeError",
                "api_call": "json.JSONDecodeError"
            }
        ],
        "(31, 12)": [
            {
                "api_key": "http.server.BaseHTTPRequestHandler.send_response",
                "api_call": "http.server.BaseHTTPRequestHandler.send_response(200)"
            }
        ],
        "(32, 12)": [
            {
                "api_key": "http.server.BaseHTTPRequestHandler.send_header",
                "api_call": "http.server.BaseHTTPRequestHandler.send_header('content-type', 'application/json')"
            }
        ],
        "(33, 12)": [
            {
                "api_key": "http.server.BaseHTTPRequestHandler.end_headers",
                "api_call": "http.server.BaseHTTPRequestHandler.end_headers()"
            }
        ],
        "(34, 23)": [
            {
                "api_key": "json.dumps(SUCCESS_RESPONSE).encode",
                "api_call": "json.dumps(SUCCESS_RESPONSE).encode()"
            }
        ],
        "(35, 12)": [
            {
                "api_key": "http.server.BaseHTTPRequestHandler.wfile.write",
                "api_call": "http.server.BaseHTTPRequestHandler.wfile.write(response)"
            }
        ]
    },
    "BigCodeBench/274": {
        "(7, 30)": [
            {
                "api_key": "http.server.BaseHTTPRequestHandler",
                "api_call": "http.server.BaseHTTPRequestHandler"
            }
        ],
        "(9, 27)": [
            {
                "api_key": "cgi.parse_header",
                "api_call": "cgi.parse_header(self.headers.get('content-type'))"
            }
        ],
        "(9, 44)": [
            {
                "api_key": "http.server.BaseHTTPRequestHandler.headers.get",
                "api_call": "http.server.BaseHTTPRequestHandler.headers.get('content-type')"
            }
        ],
        "(15, 25)": [
            {
                "api_key": "http.server.BaseHTTPRequestHandler.headers.get",
                "api_call": "http.server.BaseHTTPRequestHandler.headers.get('content-length')"
            }
        ],
        "(11, 16)": [
            {
                "api_key": "http.server.BaseHTTPRequestHandler.send_response",
                "api_call": "http.server.BaseHTTPRequestHandler.send_response(400)"
            }
        ],
        "(39, 20)": [
            {
                "api_key": "http.server.BaseHTTPRequestHandler.send_response",
                "api_call": "http.server.BaseHTTPRequestHandler.send_response(535)"
            }
        ],
        "(43, 12)": [
            {
                "api_key": "http.server.BaseHTTPRequestHandler.send_response",
                "api_call": "http.server.BaseHTTPRequestHandler.send_response(200)"
            }
        ],
        "(12, 16)": [
            {
                "api_key": "http.server.BaseHTTPRequestHandler.end_headers",
                "api_call": "http.server.BaseHTTPRequestHandler.end_headers()"
            }
        ],
        "(17, 29)": [
            {
                "api_key": "json.loads",
                "api_call": "json.loads(self.rfile.read(length))"
            }
        ],
        "(17, 40)": [
            {
                "api_key": "http.server.BaseHTTPRequestHandler.rfile.read",
                "api_call": "http.server.BaseHTTPRequestHandler.rfile.read(length)"
            }
        ],
        "(18, 20)": [
            {
                "api_key": "json.JSONDecodeError",
                "api_call": "json.JSONDecodeError"
            }
        ],
        "(28, 18)": [
            {
                "api_key": "MIMEText",
                "api_call": "email.mime.text.MIMEText(email_data['message'])"
            }
        ],
        "(33, 17)": [
            {
                "api_key": "smtplib.SMTP",
                "api_call": "smtplib.SMTP(smtp_server, smtp_port)"
            }
        ],
        "(34, 16)": [
            {
                "api_key": "server.starttls",
                "api_call": "smtplib.SMTP.starttls()"
            }
        ],
        "(35, 16)": [
            {
                "api_key": "server.login",
                "api_call": "smtplib.SMTP.login(smtp_username, smtp_password)"
            }
        ],
        "(37, 20)": [
            {
                "api_key": "server.sendmail",
                "api_call": "smtplib.SMTP.sendmail(smtp_username, [email_data['to']], msg.as_string())"
            }
        ],
        "(37, 71)": [
            {
                "api_key": "msg.as_string",
                "api_call": "email.mime.text.MIMEText(email_data['message']).as_string()"
            }
        ],
        "(38, 23)": [
            {
                "api_key": "smtplib.SMTPAuthenticationError",
                "api_call": "smtplib.SMTPAuthenticationError"
            }
        ]
    },
    "BigCodeBench/287": {
        "(6, 18)": [
            {
                "api_key": "Counter",
                "api_call": "collections.Counter()"
            }
        ],
        "(8, 21)": [
            {
                "api_key": "os.listdir",
                "api_call": "os.listdir(directory)"
            }
        ],
        "(11, 18)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(directory, file_name)"
            }
        ],
        "(13, 12)": [
            {
                "api_key": "word_counts.update",
                "api_call": "collections.Counter().update(words)"
            }
        ],
        "(16, 8)": [
            {
                "api_key": "json.dump",
                "api_call": "json.dump(dict(word_counts), file)"
            }
        ]
    },
    "BigCodeBench/302": {
        "(8, 26)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame"
            }
        ],
        "(11, 17)": [
            {
                "api_key": "pd.to_datetime",
                "api_call": "pandas.to_datetime(df['Date'])"
            }
        ],
        "(12, 9)": [
            {
                "api_key": "pd.concat",
                "api_call": "pandas.concat([df['Date'], df['Value'].apply(pd.Series)], axis=1)"
            }
        ],
        "(12, 50)": [
            {
                "api_key": "pd.Series",
                "api_call": "pandas.Series"
            }
        ],
        "(14, 14)": [
            {
                "api_key": "df.iloc[:, 1:].corr",
                "api_call": "pandas.concat([df['Date'], df['Value'].apply(pd.Series)], axis=1).iloc[:, 1:].corr()"
            }
        ],
        "(17, 8)": [
            {
                "api_key": "plt.figure",
                "api_call": "matplotlib.pyplot.figure()"
            }
        ],
        "(18, 18)": [
            {
                "api_key": "sns.heatmap",
                "api_call": "seaborn.heatmap(corr_df, annot=True, cmap='coolwarm')"
            }
        ],
        "(19, 8)": [
            {
                "api_key": "plt.title",
                "api_call": "matplotlib.pyplot.title('Correlation Heatmap')"
            }
        ]
    },
    "BigCodeBench/308": {
        "(11, 27)": [
            {
                "api_key": "random.randint",
                "api_call": "random.randint(0, 100)"
            }
        ],
        "(14, 9)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(report_data, index=STUDENTS)"
            }
        ],
        "(16, 26)": [
            {
                "api_key": "df.apply",
                "api_call": "pandas.DataFrame(report_data, index=STUDENTS).apply(mean, axis=1)"
            }
        ],
        "(18, 24)": [
            {
                "api_key": "df.apply",
                "api_call": "pandas.DataFrame(report_data, index=STUDENTS).apply(mean)"
            }
        ],
        "(16, 35)": [
            {
                "api_key": "mean",
                "api_call": "statistics.mean"
            }
        ],
        "(18, 4)": [
            {
                "api_key": "df.loc",
                "api_call": "pandas.DataFrame(report_data, index=STUDENTS).loc"
            }
        ]
    },
    "BigCodeBench/310": {
        "(10, 15)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(os.getcwd(), filename)"
            }
        ],
        "(10, 28)": [
            {
                "api_key": "os.getcwd",
                "api_call": "os.getcwd()"
            }
        ],
        "(12, 17)": [
            {
                "api_key": "csv.writer",
                "api_call": "csv.writer(file)"
            }
        ],
        "(13, 8)": [
            {
                "api_key": "writer.writerow",
                "api_call": "csv.writer(file).writerow(COLUMNS)"
            }
        ],
        "(23, 8)": [
            {
                "api_key": "writer.writerow",
                "api_call": "csv.writer(file).writerow(averages)"
            }
        ],
        "(16, 33)": [
            {
                "api_key": "random.randint",
                "api_call": "random.randint(20, 50)"
            }
        ],
        "(16, 57)": [
            {
                "api_key": "random.randint",
                "api_call": "random.randint(150, 200)"
            }
        ],
        "(16, 83)": [
            {
                "api_key": "random.randint",
                "api_call": "random.randint(50, 100)"
            }
        ],
        "(19, 8)": [
            {
                "api_key": "writer.writerows",
                "api_call": "csv.writer(file).writerows(data)"
            }
        ],
        "(21, 31)": [
            {
                "api_key": "mean",
                "api_call": "statistics.mean([row[1] for row in data])"
            }
        ],
        "(22, 20)": [
            {
                "api_key": "mean",
                "api_call": "statistics.mean([row[2] for row in data])"
            }
        ],
        "(22, 52)": [
            {
                "api_key": "mean",
                "api_call": "statistics.mean([row[3] for row in data])"
            }
        ]
    },
    "BigCodeBench/313": {
        "(8, 20)": [
            {
                "api_key": "os.listdir",
                "api_call": "os.listdir(directory)"
            }
        ],
        "(9, 18)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(directory, filename)"
            }
        ],
        "(15, 38)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(directory, subdirectory)"
            }
        ],
        "(19, 63)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(directory, subdirectory, new_filename)"
            }
        ],
        "(11, 20)": [
            {
                "api_key": "re.search",
                "api_call": "re.search('(.*?)\\\\[.*?\\\\]', content)"
            }
        ],
        "(13, 31)": [
            {
                "api_key": "match.group(1).strip",
                "api_call": "re.search('(.*?)\\\\[.*?\\\\]', content).group(1).strip()"
            }
        ],
        "(15, 23)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(os.path.join(directory, subdirectory))"
            }
        ],
        "(16, 20)": [
            {
                "api_key": "os.makedirs",
                "api_call": "os.makedirs(os.path.join(directory, subdirectory))"
            }
        ],
        "(18, 59)": [
            {
                "api_key": "datetime.now",
                "api_call": "datetime.datetime.now()"
            }
        ],
        "(19, 16)": [
            {
                "api_key": "shutil.move",
                "api_call": "shutil.move(os.path.join(directory, filename), os.path.join(directory, subdirectory, new_filename))"
            }
        ]
    },
    "BigCodeBench/324": {
        "(10, 18)": [
            {
                "api_key": "subprocess.Popen",
                "api_call": "subprocess.Popen(file_path)"
            }
        ],
        "(11, 8)": [
            {
                "api_key": "time.sleep",
                "api_call": "time.sleep(1)"
            }
        ],
        "(12, 26)": [
            {
                "api_key": "process.poll",
                "api_call": "subprocess.Popen(file_path).poll()"
            }
        ],
        "(15, 15)": [
            {
                "api_key": "threading.Thread",
                "api_call": "threading.Thread(target=execute_file, args=(file,))"
            }
        ]
    },
    "BigCodeBench/326": {
        "(8, 17)": [
            {
                "api_key": "glob.glob",
                "api_call": "glob.glob(os.path.join(directory_path, '*.bat'))"
            }
        ],
        "(8, 27)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(directory_path, '*.bat')"
            }
        ],
        "(12, 22)": [
            {
                "api_key": "subprocess.Popen",
                "api_call": "subprocess.Popen(file_path, shell=True)"
            }
        ],
        "(13, 24)": [
            {
                "api_key": "process.wait",
                "api_call": "subprocess.Popen(file_path, shell=True).wait()"
            }
        ],
        "(14, 28)": [
            {
                "api_key": "os.path.basename",
                "api_call": "os.path.basename(file_path)"
            }
        ],
        "(16, 79)": [
            {
                "api_key": "sys.stderr",
                "api_call": "sys.stderr"
            }
        ]
    },
    "BigCodeBench/341": {
        "(6, 26)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame"
            }
        ],
        "(9, 16)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots(nrows=2, ncols=1)"
            }
        ],
        "(12, 7)": [
            {
                "api_key": "pd.api.types.is_numeric_dtype",
                "api_call": "pandas.api.types.is_numeric_dtype(df[col])"
            }
        ],
        "(15, 8)": [
            {
                "api_key": "sns.countplot",
                "api_call": "seaborn.countplot(x=df[col], ax=axes[0])"
            }
        ],
        "(19, 8)": [
            {
                "api_key": "sns.boxplot",
                "api_call": "seaborn.boxplot(x=df[col], ax=axes[1])"
            }
        ],
        "(21, 8)": [
            {
                "api_key": "sns.stripplot",
                "api_call": "seaborn.stripplot(x=df[col], ax=axes[1], jitter=True)"
            }
        ]
    },
    "BigCodeBench/346": {
        "(7, 11)": [
            {
                "api_key": "os.path.isfile",
                "api_call": "os.path.isfile(script_path)"
            }
        ],
        "(11, 14)": [
            {
                "api_key": "subprocess.Popen",
                "api_call": "subprocess.Popen([sys.executable, script_path, *args], stderr=subprocess.PIPE, stdout=subprocess.PIPE)"
            }
        ],
        "(12, 9)": [
            {
                "api_key": "sys.executable",
                "api_call": "sys.executable"
            }
        ],
        "(13, 15)": [
            {
                "api_key": "subprocess.PIPE",
                "api_call": "subprocess.PIPE"
            }
        ],
        "(16, 26)": [
            {
                "api_key": "process.communicate",
                "api_call": "subprocess.Popen([sys.executable, script_path, *args], stderr=subprocess.PIPE, stdout=subprocess.PIPE).communicate()"
            }
        ],
        "(17, 14)": [
            {
                "api_key": "subprocess.CalledProcessError",
                "api_call": "subprocess.CalledProcessError(process.returncode, process.args)"
            }
        ],
        "(17, 44)": [
            {
                "api_key": "process.returncode",
                "api_call": "subprocess.Popen([sys.executable, script_path, *args], stderr=subprocess.PIPE, stdout=subprocess.PIPE).returncode"
            }
        ],
        "(17, 64)": [
            {
                "api_key": "process.args",
                "api_call": "subprocess.Popen([sys.executable, script_path, *args], stderr=subprocess.PIPE, stdout=subprocess.PIPE).args"
            }
        ],
        "(21, 14)": [
            {
                "api_key": "process.poll",
                "api_call": "subprocess.Popen([sys.executable, script_path, *args], stderr=subprocess.PIPE, stdout=subprocess.PIPE).poll()"
            }
        ],
        "(22, 12)": [
            {
                "api_key": "time.sleep",
                "api_call": "time.sleep(1)"
            }
        ]
    },
    "BigCodeBench/360": {
        "(6, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(file_location)"
            }
        ],
        "(10, 13)": [
            {
                "api_key": "pd.read_excel",
                "api_call": "pandas.read_excel(file_location, sheet_name=sheet_name)"
            }
        ],
        "(15, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(16, 18)": [
            {
                "api_key": "df.columns",
                "api_call": "pandas.read_excel(file_location, sheet_name=sheet_name).columns"
            }
        ],
        "(17, 15)": [
            {
                "api_key": "np.mean",
                "api_call": "numpy.mean(df[column])"
            }
        ],
        "(18, 14)": [
            {
                "api_key": "np.std",
                "api_call": "numpy.std(df[column])"
            }
        ],
        "(21, 8)": [
            {
                "api_key": "ax.bar",
                "api_call": "matplotlib.pyplot.subplots()[1].bar(column, mean, yerr=std)"
            }
        ],
        "(23, 4)": [
            {
                "api_key": "ax.set_title",
                "api_call": "matplotlib.pyplot.subplots()[1].set_title('Mean and Standard Deviation')"
            }
        ],
        "(24, 4)": [
            {
                "api_key": "ax.set_xlabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_xlabel('Columns')"
            }
        ],
        "(25, 4)": [
            {
                "api_key": "ax.set_ylabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_ylabel('Values')"
            }
        ]
    },
    "BigCodeBench/367": {
        "(5, 36)": [
            {
                "api_key": "datetime",
                "api_call": "datetime.datetime"
            }
        ],
        "(7, 22)": [
            {
                "api_key": "defaultdict",
                "api_call": "collections.defaultdict(int)"
            }
        ],
        "(17, 4)": [
            {
                "api_key": "plt.figure",
                "api_call": "matplotlib.pyplot.figure()"
            }
        ],
        "(18, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(19, 4)": [
            {
                "api_key": "ax.bar",
                "api_call": "matplotlib.pyplot.subplots()[1].bar(days, counts)"
            }
        ],
        "(20, 4)": [
            {
                "api_key": "ax.set_xlabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_xlabel('Day of the Week')"
            }
        ],
        "(21, 4)": [
            {
                "api_key": "ax.set_ylabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_ylabel('Number of Activities')"
            }
        ],
        "(22, 4)": [
            {
                "api_key": "ax.set_title",
                "api_call": "matplotlib.pyplot.subplots()[1].set_title('Weekly Activity')"
            }
        ]
    },
    "BigCodeBench/368": {
        "(6, 4)": [
            {
                "api_key": "random.seed",
                "api_call": "random.seed(seed)"
            }
        ],
        "(8, 12)": [
            {
                "api_key": "os.listdir",
                "api_call": "os.listdir(src_dir)"
            }
        ],
        "(13, 16)": [
            {
                "api_key": "random.choice",
                "api_call": "random.choice(files)"
            }
        ],
        "(16, 15)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(src_dir, file_name)"
            }
        ],
        "(17, 16)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(dest_dir, file_name)"
            }
        ],
        "(20, 4)": [
            {
                "api_key": "shutil.move",
                "api_call": "shutil.move(src_file, dest_file)"
            }
        ]
    },
    "BigCodeBench/374": {
        "(6, 11)": [
            {
                "api_key": "os.path.isdir",
                "api_call": "os.path.isdir(directory_path)"
            }
        ],
        "(8, 17)": [
            {
                "api_key": "glob.glob",
                "api_call": "glob.glob(directory_path + '/*.xlsx')"
            }
        ],
        "(12, 19)": [
            {
                "api_key": "load_workbook",
                "api_call": "openpyxl.load_workbook(filename=xlsx_file)"
            }
        ],
        "(14, 21)": [
            {
                "api_key": "workbook.sheetnames",
                "api_call": "openpyxl.load_workbook(filename=xlsx_file).sheetnames"
            }
        ],
        "(18, 37)": [
            {
                "api_key": "re.sub",
                "api_call": "regex.sub('(?<=(^|[^\\\\\\\\])(\\\\\\\\\\\\\\\\)*)\"', '\\\\\"', cell.value)"
            }
        ],
        "(21, 8)": [
            {
                "api_key": "workbook.save",
                "api_call": "openpyxl.load_workbook(filename=xlsx_file).save(xlsx_file)"
            }
        ]
    },
    "BigCodeBench/399": {
        "(10, 8)": [
            {
                "api_key": "np.linspace",
                "api_call": "numpy.linspace(0, 2 * math.pi, sample_size)"
            }
        ],
        "(10, 27)": [
            {
                "api_key": "math.pi",
                "api_call": "math.pi"
            }
        ],
        "(11, 12)": [
            {
                "api_key": "np.sin",
                "api_call": "numpy.sin(frequency * x)"
            }
        ],
        "(12, 12)": [
            {
                "api_key": "np.cos",
                "api_call": "numpy.cos(frequency * x)"
            }
        ],
        "(14, 4)": [
            {
                "api_key": "plt.figure",
                "api_call": "matplotlib.pyplot.figure()"
            }
        ],
        "(15, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(16, 4)": [
            {
                "api_key": "ax.plot",
                "api_call": "matplotlib.pyplot.subplots()[1].plot(x, y_sin, label='sin')"
            }
        ],
        "(17, 4)": [
            {
                "api_key": "ax.plot",
                "api_call": "matplotlib.pyplot.subplots()[1].plot(x, y_cos, label='cos')"
            }
        ],
        "(18, 4)": [
            {
                "api_key": "ax.legend",
                "api_call": "matplotlib.pyplot.subplots()[1].legend()"
            }
        ]
    },
    "BigCodeBench/401": {
        "(6, 10)": [
            {
                "api_key": "Flask",
                "api_call": "flask.Flask(app_name)"
            }
        ],
        "(7, 4)": [
            {
                "api_key": "app.config",
                "api_call": "flask.Flask(app_name).config"
            }
        ],
        "(7, 32)": [
            {
                "api_key": "os.getenv",
                "api_call": "os.getenv('MAIL_SERVER', 'localhost')"
            }
        ],
        "(8, 34)": [
            {
                "api_key": "os.getenv",
                "api_call": "os.getenv('MAIL_PORT', 25)"
            }
        ],
        "(9, 33)": [
            {
                "api_key": "os.getenv",
                "api_call": "os.getenv('MAIL_USE_TLS', False)"
            }
        ],
        "(10, 34)": [
            {
                "api_key": "os.getenv",
                "api_call": "os.getenv('MAIL_USERNAME', None)"
            }
        ],
        "(11, 34)": [
            {
                "api_key": "os.getenv",
                "api_call": "os.getenv('MAIL_PASSWORD', None)"
            }
        ],
        "(13, 11)": [
            {
                "api_key": "Mail",
                "api_call": "flask_mail.Mail(app)"
            }
        ]
    },
    "BigCodeBench/409": {
        "(5, 17)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(excel_file_path, file_name)"
            }
        ],
        "(6, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(excel_file)"
            }
        ],
        "(9, 9)": [
            {
                "api_key": "pd.read_excel",
                "api_call": "pandas.read_excel(excel_file)"
            }
        ],
        "(10, 26)": [
            {
                "api_key": "df.columns",
                "api_call": "pandas.read_excel(excel_file).columns"
            }
        ],
        "(13, 11)": [
            {
                "api_key": "np.mean",
                "api_call": "numpy.mean(df[column_name])"
            }
        ],
        "(14, 13)": [
            {
                "api_key": "np.median",
                "api_call": "numpy.median(df[column_name])"
            }
        ],
        "(15, 14)": [
            {
                "api_key": "np.std",
                "api_call": "numpy.std(df[column_name])"
            }
        ]
    },
    "BigCodeBench/417": {
        "(7, 39)": [
            {
                "api_key": "train_test_split",
                "api_call": "sklearn.model_selection.train_test_split(X, Y, test_size=0.25)"
            }
        ],
        "(9, 12)": [
            {
                "api_key": "Sequential",
                "api_call": "keras.models.Sequential([Dense(input_dim=2, units=1, activation='sigmoid')])"
            }
        ],
        "(9, 24)": [
            {
                "api_key": "Dense",
                "api_call": "keras.layers.Dense(input_dim=2, units=1, activation='sigmoid')"
            }
        ],
        "(10, 4)": [
            {
                "api_key": "model.compile",
                "api_call": "keras.models.Sequential([Dense(input_dim=2, units=1, activation='sigmoid')]).compile(loss='binary_crossentropy', optimizer=SGD(learning_rate=0.1))"
            }
        ],
        "(10, 56)": [
            {
                "api_key": "SGD",
                "api_call": "keras.optimizers.SGD(learning_rate=0.1)"
            }
        ],
        "(12, 14)": [
            {
                "api_key": "model.fit",
                "api_call": "keras.models.Sequential([Dense(input_dim=2, units=1, activation='sigmoid')]).fit(X_train, Y_train, epochs=200, batch_size=1, verbose=0, validation_data=(X_test, Y_test))"
            }
        ],
        "(14, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(15, 4)": [
            {
                "api_key": "ax.plot",
                "api_call": "matplotlib.pyplot.subplots()[1].plot(history.history['loss'], label='Train Loss')"
            }
        ],
        "(16, 4)": [
            {
                "api_key": "ax.plot",
                "api_call": "matplotlib.pyplot.subplots()[1].plot(history.history['val_loss'], label='Validation Loss')"
            }
        ],
        "(15, 12)": [
            {
                "api_key": "history.history",
                "api_call": "keras.models.Sequential([Dense(input_dim=2, units=1, activation='sigmoid')]).fit(X_train, Y_train, epochs=200, batch_size=1, verbose=0, validation_data=(X_test, Y_test)).history"
            }
        ],
        "(17, 4)": [
            {
                "api_key": "ax.set_title",
                "api_call": "matplotlib.pyplot.subplots()[1].set_title('Model loss')"
            }
        ],
        "(18, 4)": [
            {
                "api_key": "ax.set_ylabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_ylabel('Loss')"
            }
        ],
        "(19, 4)": [
            {
                "api_key": "ax.set_xlabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_xlabel('Epoch')"
            }
        ],
        "(20, 4)": [
            {
                "api_key": "ax.legend",
                "api_call": "matplotlib.pyplot.subplots()[1].legend(['Train', 'Test'], loc='upper left')"
            }
        ]
    },
    "BigCodeBench/418": {
        "(6, 39)": [
            {
                "api_key": "train_test_split",
                "api_call": "sklearn.model_selection.train_test_split(X, Y, test_size=0.3)"
            }
        ],
        "(8, 12)": [
            {
                "api_key": "keras.Sequential",
                "api_call": "tensorflow.keras.Sequential([keras.layers.Dense(input_dim=2, units=1, activation='sigmoid')])"
            }
        ],
        "(8, 30)": [
            {
                "api_key": "keras.layers.Dense",
                "api_call": "tensorflow.keras.layers.Dense(input_dim=2, units=1, activation='sigmoid')"
            }
        ],
        "(9, 4)": [
            {
                "api_key": "model.compile",
                "api_call": "tensorflow.keras.Sequential([keras.layers.Dense(input_dim=2, units=1, activation='sigmoid')]).compile(loss='binary_crossentropy', optimizer=keras.optimizers.SGD(learning_rate=0.1))"
            }
        ],
        "(9, 56)": [
            {
                "api_key": "keras.optimizers.SGD",
                "api_call": "tensorflow.keras.optimizers.SGD(learning_rate=0.1)"
            }
        ],
        "(11, 4)": [
            {
                "api_key": "model.fit",
                "api_call": "tensorflow.keras.Sequential([keras.layers.Dense(input_dim=2, units=1, activation='sigmoid')]).fit(X_train, Y_train, epochs=200, batch_size=1, verbose=0)"
            }
        ],
        "(13, 13)": [
            {
                "api_key": "model.predict(X_test, verbose=0).ravel",
                "api_call": "tensorflow.keras.Sequential([keras.layers.Dense(input_dim=2, units=1, activation='sigmoid')]).predict(X_test, verbose=0).ravel()"
            }
        ],
        "(14, 27)": [
            {
                "api_key": "roc_curve",
                "api_call": "sklearn.metrics.roc_curve(Y_test, Y_pred)"
            }
        ],
        "(15, 16)": [
            {
                "api_key": "auc",
                "api_call": "sklearn.metrics.auc(fpr, tpr)"
            }
        ],
        "(17, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(18, 4)": [
            {
                "api_key": "ax.plot",
                "api_call": "matplotlib.pyplot.subplots()[1].plot([0, 1], [0, 1], 'k--')"
            }
        ],
        "(19, 4)": [
            {
                "api_key": "ax.plot",
                "api_call": "matplotlib.pyplot.subplots()[1].plot(fpr, tpr, label='AUC = {:.3f}'.format(auc_score))"
            }
        ],
        "(20, 4)": [
            {
                "api_key": "ax.set_xlabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_xlabel('False positive rate')"
            }
        ],
        "(21, 4)": [
            {
                "api_key": "ax.set_ylabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_ylabel('True positive rate')"
            }
        ],
        "(22, 4)": [
            {
                "api_key": "ax.set_title",
                "api_call": "matplotlib.pyplot.subplots()[1].set_title('ROC curve')"
            }
        ],
        "(23, 4)": [
            {
                "api_key": "ax.legend",
                "api_call": "matplotlib.pyplot.subplots()[1].legend(loc='best')"
            }
        ]
    },
    "BigCodeBench/424": {
        "(10, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(image_path)"
            }
        ],
        "(14, 10)": [
            {
                "api_key": "cv2.imread",
                "api_call": "cv2.imread(image_path)"
            }
        ],
        "(19, 20)": [
            {
                "api_key": "img.copy",
                "api_call": "cv2.imread(image_path).copy()"
            }
        ],
        "(21, 13)": [
            {
                "api_key": "img.reshape",
                "api_call": "cv2.imread(image_path).reshape(-1, 3)"
            }
        ],
        "(22, 13)": [
            {
                "api_key": "KMeans",
                "api_call": "sklearn.cluster.KMeans(n_clusters=n_clusters, random_state=random_seed)"
            }
        ],
        "(23, 4)": [
            {
                "api_key": "kmeans.fit",
                "api_call": "sklearn.cluster.KMeans(n_clusters=n_clusters, random_state=random_seed).fit(pixels)"
            }
        ],
        "(24, 22)": [
            {
                "api_key": "kmeans.cluster_centers_",
                "api_call": "sklearn.cluster.KMeans(n_clusters=n_clusters, random_state=random_seed).cluster_centers_"
            }
        ],
        "(24, 46)": [
            {
                "api_key": "kmeans.labels_",
                "api_call": "sklearn.cluster.KMeans(n_clusters=n_clusters, random_state=random_seed).labels_"
            }
        ],
        "(25, 46)": [
            {
                "api_key": "img.shape",
                "api_call": "cv2.imread(image_path).shape"
            }
        ],
        "(30, 19)": [
            {
                "api_key": "kmeans.labels_.reshape",
                "api_call": "sklearn.cluster.KMeans(n_clusters=n_clusters, random_state=random_seed).labels_.reshape(img.shape[:2])"
            }
        ],
        "(31, 26)": [
            {
                "api_key": "np.where",
                "api_call": "numpy.where(np.stack([mask] * 3, axis=-1), segmented_image, np.array([255, 255, 255], dtype=np.uint8))"
            }
        ],
        "(31, 35)": [
            {
                "api_key": "np.stack",
                "api_call": "numpy.stack([mask] * 3, axis=-1)"
            }
        ],
        "(31, 81)": [
            {
                "api_key": "np.array",
                "api_call": "numpy.array([255, 255, 255], dtype=np.uint8)"
            }
        ],
        "(34, 11)": [
            {
                "api_key": "np.array",
                "api_call": "numpy.array(img)"
            }
        ],
        "(34, 26)": [
            {
                "api_key": "np.array",
                "api_call": "numpy.array(segmented_image)"
            }
        ],
        "(31, 113)": [
            {
                "api_key": "np.uint8",
                "api_call": "numpy.uint8"
            }
        ],
        "(32, 12)": [
            {
                "api_key": "cv2.imwrite",
                "api_call": "cv2.imwrite(f'cluster_{i + 1}.jpg', cluster_img)"
            }
        ]
    },
    "BigCodeBench/443": {
        "(5, 7)": [
            {
                "api_key": "np.ndarray",
                "api_call": "numpy.ndarray"
            }
        ],
        "(17, 13)": [
            {
                "api_key": "np.tensordot(P, T, axes=[1, 1]).swapaxes",
                "api_call": "numpy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)"
            }
        ],
        "(18, 23)": [
            {
                "api_key": "result.reshape",
                "api_call": "numpy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1).reshape(-1, tensor_shape[2])"
            }
        ],
        "(19, 13)": [
            {
                "api_key": "KMeans",
                "api_call": "sklearn.cluster.KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)"
            }
        ],
        "(20, 21)": [
            {
                "api_key": "kmeans.fit_predict",
                "api_call": "sklearn.cluster.KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init).fit_predict(flattened_result)"
            }
        ],
        "(21, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(22, 4)": [
            {
                "api_key": "ax.scatter",
                "api_call": "matplotlib.pyplot.subplots()[1].scatter(flattened_result[:, 0], flattened_result[:, 1], c=cluster_result)"
            }
        ],
        "(23, 4)": [
            {
                "api_key": "ax.set_title",
                "api_call": "matplotlib.pyplot.subplots()[1].set_title('KMeans Clustering Visualization')"
            }
        ],
        "(10, 18)": [
            {
                "api_key": "plt.Axes",
                "api_call": "matplotlib.pyplot.Axes"
            }
        ]
    },
    "BigCodeBench/445": {
        "(5, 30)": [
            {
                "api_key": "np.ndarray",
                "api_call": "numpy.ndarray"
            }
        ],
        "(12, 4)": [
            {
                "api_key": "np.random.seed",
                "api_call": "numpy.random.seed(seed)"
            }
        ],
        "(15, 31)": [
            {
                "api_key": "np.random.normal",
                "api_call": "numpy.random.normal(0, 1e-10, points.shape)"
            }
        ],
        "(17, 10)": [
            {
                "api_key": "Voronoi",
                "api_call": "scipy.spatial.Voronoi(jittered_points)"
            }
        ],
        "(18, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(19, 4)": [
            {
                "api_key": "voronoi_plot_2d",
                "api_call": "scipy.spatial.voronoi_plot_2d(vor, ax=ax)"
            }
        ]
    },
    "BigCodeBench/454": {
        "(5, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(dest_dir)"
            }
        ],
        "(7, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(src_dir)"
            }
        ],
        "(15, 15)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(dest_file_path)"
            }
        ],
        "(11, 12)": [
            {
                "api_key": "glob.glob",
                "api_call": "glob.glob(os.path.join(src_dir, '*.' + ext))"
            }
        ],
        "(11, 22)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(src_dir, '*.' + ext)"
            }
        ],
        "(14, 25)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(dest_dir, filename)"
            }
        ],
        "(13, 19)": [
            {
                "api_key": "os.path.basename",
                "api_call": "os.path.basename(file)"
            }
        ],
        "(16, 12)": [
            {
                "api_key": "shutil.move",
                "api_call": "shutil.move(file, dest_dir)"
            }
        ]
    },
    "BigCodeBench/458": {
        "(5, 14)": [
            {
                "api_key": "re.compile",
                "api_call": "re.compile('^-?\\\\d+(?:\\\\.\\\\d+)?$')"
            }
        ],
        "(7, 14)": [
            {
                "api_key": "json.loads",
                "api_call": "json.loads(json_str)"
            }
        ],
        "(10, 15)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame()"
            }
        ],
        "(24, 13)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame([my_dict])"
            }
        ],
        "(26, 13)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(my_dict)"
            }
        ],
        "(12, 22)": [
            {
                "api_key": "my_dict.items",
                "api_call": "json.loads(json_str).items()"
            }
        ],
        "(17, 40)": [
            {
                "api_key": "NUMBERS.match",
                "api_call": "re.compile('^-?\\\\d+(?:\\\\.\\\\d+)?$').match(value)"
            }
        ],
        "(23, 44)": [
            {
                "api_key": "my_dict.values",
                "api_call": "json.loads(json_str).values()"
            }
        ],
        "(28, 15)": [
            {
                "api_key": "df.columns",
                "api_call": "pandas.DataFrame(my_dict).columns"
            }
        ],
        "(29, 24)": [
            {
                "api_key": "pd.to_numeric",
                "api_call": "pandas.to_numeric(df[col], errors='coerce')"
            }
        ],
        "(30, 15)": [
            {
                "api_key": "converted_col.isnull",
                "api_call": "pandas.to_numeric(df[col], errors='coerce').isnull()"
            }
        ]
    },
    "BigCodeBench/461": {
        "(6, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(script_path)"
            }
        ],
        "(10, 8)": [
            {
                "api_key": "subprocess.Popen",
                "api_call": "subprocess.Popen(['bash', script_path])"
            }
        ],
        "(11, 10)": [
            {
                "api_key": "p.pid",
                "api_call": "subprocess.Popen(['bash', script_path]).pid"
            }
        ],
        "(17, 17)": [
            {
                "api_key": "time.time",
                "api_call": "time.time()"
            }
        ],
        "(21, 18)": [
            {
                "api_key": "psutil.Process",
                "api_call": "psutil.Process(pid)"
            }
        ],
        "(24, 14)": [
            {
                "api_key": "process.is_running",
                "api_call": "psutil.Process(pid).is_running()"
            }
        ],
        "(26, 26)": [
            {
                "api_key": "process.cpu_percent",
                "api_call": "psutil.Process(pid).cpu_percent(interval=0.05)"
            }
        ],
        "(28, 28)": [
            {
                "api_key": "process.memory_info",
                "api_call": "psutil.Process(pid).memory_info()"
            }
        ],
        "(29, 12)": [
            {
                "api_key": "time.sleep",
                "api_call": "time.sleep(0.05)"
            }
        ],
        "(34, 12)": [
            {
                "api_key": "psutil.NoSuchProcess",
                "api_call": "psutil.NoSuchProcess"
            }
        ],
        "(34, 34)": [
            {
                "api_key": "psutil.ZombieProcess",
                "api_call": "psutil.ZombieProcess"
            }
        ],
        "(37, 11)": [
            {
                "api_key": "p.poll",
                "api_call": "subprocess.Popen(['bash', script_path]).poll()"
            }
        ],
        "(38, 12)": [
            {
                "api_key": "p.terminate",
                "api_call": "subprocess.Popen(['bash', script_path]).terminate()"
            }
        ],
        "(39, 12)": [
            {
                "api_key": "p.wait",
                "api_call": "subprocess.Popen(['bash', script_path]).wait()"
            }
        ]
    },
    "BigCodeBench/477": {
        "(5, 4)": [
            {
                "api_key": "np.random.seed",
                "api_call": "numpy.random.seed(seed)"
            }
        ],
        "(8, 25)": [
            {
                "api_key": "np.random.choice",
                "api_call": "numpy.random.choice(CATEGORIES, N, replace=False)"
            }
        ],
        "(11, 31)": [
            {
                "api_key": "np.random.choice",
                "api_call": "numpy.random.choice(CATEGORIES, N - len(CATEGORIES))"
            }
        ],
        "(10, 32)": [
            {
                "api_key": "np.array",
                "api_call": "numpy.array(CATEGORIES)"
            }
        ],
        "(12, 25)": [
            {
                "api_key": "np.concatenate",
                "api_call": "numpy.concatenate([guaranteed_categories, remaining_categories])"
            }
        ],
        "(13, 8)": [
            {
                "api_key": "np.random.shuffle",
                "api_call": "numpy.random.shuffle(all_categories)"
            }
        ],
        "(15, 9)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame({'x': np.random.rand(N), 'y': np.random.rand(N), 'category': all_categories})"
            }
        ],
        "(16, 14)": [
            {
                "api_key": "np.random.rand",
                "api_call": "numpy.random.rand(N)"
            }
        ],
        "(19, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(21, 8)": [
            {
                "api_key": "ax.scatter",
                "api_call": "matplotlib.pyplot.subplots()[1].scatter(df[df['category'] == category]['x'], df[df['category'] == category]['y'], label=category)"
            }
        ]
    },
    "BigCodeBench/486": {
        "(9, 4)": [
            {
                "api_key": "np.random.seed",
                "api_call": "numpy.random.seed(seed)"
            }
        ],
        "(11, 17)": [
            {
                "api_key": "np.arange",
                "api_call": "numpy.arange(start_time, end_time, step)"
            }
        ],
        "(12, 9)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(columns=['Time', 'Value'])"
            }
        ],
        "(13, 13)": [
            {
                "api_key": "np.random.normal",
                "api_call": "numpy.random.normal(size=len(timestamps))"
            }
        ],
        "(16, 13)": [
            {
                "api_key": "datetime.fromtimestamp(ts / 1000).strftime",
                "api_call": "datetime.datetime.fromtimestamp(ts / 1000).strftime('%Y-%m-%d %H:%M:%S.%f')"
            }
        ],
        "(18, 8)": [
            {
                "api_key": "df.loc",
                "api_call": "pandas.DataFrame(columns=['Time', 'Value']).loc"
            }
        ],
        "(20, 9)": [
            {
                "api_key": "df.plot",
                "api_call": "pandas.DataFrame(columns=['Time', 'Value']).plot(x='Time', y='Value')"
            }
        ],
        "(21, 4)": [
            {
                "api_key": "ax.set_ylabel",
                "api_call": "pandas.DataFrame(columns=['Time', 'Value']).plot(x='Time', y='Value').set_ylabel('Value')"
            }
        ]
    },
    "BigCodeBench/492": {
        "(9, 4)": [
            {
                "api_key": "random.seed",
                "api_call": "random.seed(random_seed)"
            }
        ],
        "(15, 17)": [
            {
                "api_key": "datetime.fromtimestamp",
                "api_call": "datetime.datetime.fromtimestamp(epoch_milliseconds / 1000.0)"
            }
        ],
        "(16, 15)": [
            {
                "api_key": "datetime.now",
                "api_call": "datetime.datetime.now()"
            }
        ],
        "(20, 17)": [
            {
                "api_key": "pd.date_range",
                "api_call": "pandas.date_range(start_date, end_date, freq='D')"
            }
        ],
        "(24, 20)": [
            {
                "api_key": "random.randint",
                "api_call": "random.randint(10, 50)"
            }
        ],
        "(27, 9)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(sales_data, columns=['Product', 'Date', 'Sales'])"
            }
        ]
    },
    "BigCodeBench/501": {
        "(10, 15)": [
            {
                "api_key": "pd.read_json",
                "api_call": "pandas.read_json(json_str)"
            }
        ],
        "(13, 15)": [
            {
                "api_key": "xlwt.Workbook",
                "api_call": "xlwt.Workbook()"
            }
        ],
        "(14, 16)": [
            {
                "api_key": "book.add_sheet",
                "api_call": "xlwt.Workbook().add_sheet(sheet_name)"
            }
        ],
        "(17, 15)": [
            {
                "api_key": "data.empty",
                "api_call": "pandas.read_json(json_str).empty"
            }
        ],
        "(18, 44)": [
            {
                "api_key": "data.columns",
                "api_call": "pandas.read_json(json_str).columns"
            }
        ],
        "(19, 16)": [
            {
                "api_key": "sheet.write",
                "api_call": "xlwt.Workbook().add_sheet(sheet_name).write(0, col_index, col)"
            }
        ],
        "(22, 20)": [
            {
                "api_key": "sheet.write",
                "api_call": "xlwt.Workbook().add_sheet(sheet_name).write(row_index + 1, col_index, row[col])"
            }
        ],
        "(20, 34)": [
            {
                "api_key": "data.iterrows",
                "api_call": "pandas.read_json(json_str).iterrows()"
            }
        ],
        "(23, 8)": [
            {
                "api_key": "book.save",
                "api_call": "xlwt.Workbook().save(filename)"
            }
        ],
        "(24, 15)": [
            {
                "api_key": "os.path.abspath",
                "api_call": "os.path.abspath(filename)"
            }
        ]
    },
    "BigCodeBench/502": {
        "(7, 4)": [
            {
                "api_key": "random.seed",
                "api_call": "random.seed(random_seed)"
            }
        ],
        "(16, 15)": [
            {
                "api_key": "datetime.now",
                "api_call": "datetime.datetime.now()"
            }
        ],
        "(16, 39)": [
            {
                "api_key": "timedelta",
                "api_call": "datetime.timedelta(days=i)"
            }
        ],
        "(18, 23)": [
            {
                "api_key": "random.randint",
                "api_call": "random.randint(0, 120)"
            }
        ],
        "(21, 9)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(data, columns=['Date', 'Activity', 'Duration'])"
            }
        ],
        "(22, 9)": [
            {
                "api_key": "sns.lineplot",
                "api_call": "seaborn.lineplot(data=df, x='Date', y='Duration', hue='Activity')"
            }
        ]
    },
    "BigCodeBench/503": {
        "(7, 4)": [
            {
                "api_key": "np.random.seed",
                "api_call": "numpy.random.seed(random_seed)"
            }
        ],
        "(14, 12)": [
            {
                "api_key": "pd.date_range",
                "api_call": "pandas.date_range(end=datetime.now().date(), periods=days_in_past)"
            }
        ],
        "(14, 30)": [
            {
                "api_key": "datetime.now",
                "api_call": "datetime.datetime.now()"
            }
        ],
        "(15, 13)": [
            {
                "api_key": "np.random.rand",
                "api_call": "numpy.random.rand(days_in_past, len(stock_names))"
            }
        ],
        "(16, 9)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(prices, columns=stock_names, index=dates)"
            }
        ]
    },
    "BigCodeBench/509": {
        "(8, 21)": [
            {
                "api_key": "csv.reader",
                "api_call": "csv.reader(file, delimiter=delimiter, quotechar=quotechar)"
            }
        ],
        "(18, 15)": [
            {
                "api_key": "ndiff",
                "api_call": "difflib.ndiff(csv_content1, csv_content2)"
            }
        ],
        "(27, 13)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(data, columns=headers)"
            }
        ]
    },
    "BigCodeBench/511": {
        "(8, 9)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(data, columns=COLUMNS)"
            }
        ],
        "(12, 7)": [
            {
                "api_key": "df.empty",
                "api_call": "pandas.DataFrame(data, columns=COLUMNS).empty"
            }
        ],
        "(13, 36)": [
            {
                "api_key": "np.nan",
                "api_call": "numpy.nan"
            }
        ],
        "(16, 19)": [
            {
                "api_key": "np.sum",
                "api_call": "numpy.sum(column_data)"
            }
        ],
        "(17, 20)": [
            {
                "api_key": "np.mean",
                "api_call": "numpy.mean(column_data)"
            }
        ],
        "(18, 19)": [
            {
                "api_key": "np.min",
                "api_call": "numpy.min(column_data)"
            }
        ],
        "(19, 19)": [
            {
                "api_key": "np.max",
                "api_call": "numpy.max(column_data)"
            }
        ],
        "(22, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(23, 4)": [
            {
                "api_key": "ax.pie",
                "api_call": "matplotlib.pyplot.subplots()[1].pie(column_data, labels=df['Age'], autopct='%1.1f%%')"
            }
        ],
        "(24, 4)": [
            {
                "api_key": "ax.set_title",
                "api_call": "matplotlib.pyplot.subplots()[1].set_title(f'Pie Chart of {column}')"
            }
        ]
    },
    "BigCodeBench/513": {
        "(11, 9)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(data, columns=COLUMNS)"
            }
        ],
        "(19, 15)": [
            {
                "api_key": "np.sum",
                "api_call": "numpy.sum(column_data)"
            }
        ],
        "(20, 16)": [
            {
                "api_key": "np.mean",
                "api_call": "numpy.mean(column_data)"
            }
        ],
        "(21, 15)": [
            {
                "api_key": "np.min",
                "api_call": "numpy.min(column_data)"
            }
        ],
        "(22, 15)": [
            {
                "api_key": "np.max",
                "api_call": "numpy.max(column_data)"
            }
        ],
        "(25, 9)": [
            {
                "api_key": "df.plot.line",
                "api_call": "pandas.DataFrame(data, columns=COLUMNS).plot.line(x='Date', y=column)"
            }
        ],
        "(26, 4)": [
            {
                "api_key": "ax.set_ylabel",
                "api_call": "pandas.DataFrame(data, columns=COLUMNS).plot.line(x='Date', y=column).set_ylabel(column)"
            }
        ],
        "(27, 4)": [
            {
                "api_key": "plt.title",
                "api_call": "matplotlib.pyplot.title(f'Line Chart of {column}')"
            }
        ]
    },
    "BigCodeBench/526": {
        "(7, 15)": [
            {
                "api_key": "json.load",
                "api_call": "json.load(f)"
            }
        ],
        "(9, 15)": [
            {
                "api_key": "set().union",
                "api_call": "set.union(*(d.keys() for d in data))"
            }
        ],
        "(10, 12)": [
            {
                "api_key": "defaultdict",
                "api_call": "collections.defaultdict(list)"
            }
        ],
        "(13, 31)": [
            {
                "api_key": "np.nan",
                "api_call": "numpy.nan"
            }
        ],
        "(20, 20)": [
            {
                "api_key": "np.nanmean",
                "api_call": "numpy.nanmean(v)"
            }
        ],
        "(20, 45)": [
            {
                "api_key": "np.nanmedian",
                "api_call": "numpy.nanmedian(v)"
            }
        ],
        "(20, 74)": [
            {
                "api_key": "stats.items",
                "api_call": "collections.defaultdict(list).items()"
            }
        ],
        "(22, 9)": [
            {
                "api_key": "pd.DataFrame(result).transpose().sort_index",
                "api_call": "pandas.DataFrame(result).transpose().sort_index()"
            }
        ]
    },
    "BigCodeBench/528": {
        "(13, 17)": [
            {
                "api_key": "csv.reader",
                "api_call": "csv.reader(f)"
            }
        ],
        "(17, 17)": [
            {
                "api_key": "Counter",
                "api_call": "collections.Counter((tuple(row) for row in rows if rows.count(row) > 1))"
            }
        ],
        "(17, 55)": [
            {
                "api_key": "rows.count",
                "api_call": "list(reader).count(row)"
            }
        ],
        "(22, 13)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(duplicates.values(), duplicates.keys())"
            }
        ],
        "(22, 26)": [
            {
                "api_key": "duplicates.values",
                "api_call": "collections.Counter((tuple(row) for row in rows if rows.count(row) > 1)).values()"
            }
        ],
        "(22, 47)": [
            {
                "api_key": "duplicates.keys",
                "api_call": "collections.Counter((tuple(row) for row in rows if rows.count(row) > 1)).keys()"
            }
        ],
        "(23, 13)": [
            {
                "api_key": "df.plot",
                "api_call": "pandas.DataFrame(duplicates.values(), duplicates.keys()).plot(kind='bar', legend=False, title='Duplicate Entries')"
            }
        ],
        "(24, 8)": [
            {
                "api_key": "ax.set_ylabel",
                "api_call": "pandas.DataFrame(duplicates.values(), duplicates.keys()).plot(kind='bar', legend=False, title='Duplicate Entries').set_ylabel('Count')"
            }
        ],
        "(25, 8)": [
            {
                "api_key": "plt.tight_layout",
                "api_call": "matplotlib.pyplot.tight_layout()"
            }
        ]
    },
    "BigCodeBench/530": {
        "(6, 18)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame"
            }
        ],
        "(12, 32)": [
            {
                "api_key": "np.floor",
                "api_call": "numpy.floor"
            }
        ],
        "(18, 25)": [
            {
                "api_key": "Counter",
                "api_call": "collections.Counter(duplicates_df['age'])"
            }
        ],
        "(23, 15)": [
            {
                "api_key": "np.arange",
                "api_call": "numpy.arange(min_age, max_age + 1)"
            }
        ],
        "(24, 13)": [
            {
                "api_key": "sns.histplot",
                "api_call": "seaborn.histplot(duplicates_df['age'], bins=bins)"
            }
        ],
        "(25, 8)": [
            {
                "api_key": "plt.xlabel",
                "api_call": "matplotlib.pyplot.xlabel('Age')"
            }
        ],
        "(26, 8)": [
            {
                "api_key": "plt.ylabel",
                "api_call": "matplotlib.pyplot.ylabel('Count')"
            }
        ],
        "(27, 8)": [
            {
                "api_key": "plt.title",
                "api_call": "matplotlib.pyplot.title('Distribution of Ages for Duplicate Names')"
            }
        ],
        "(6, 45)": [
            {
                "api_key": "plt.Axes",
                "api_call": "matplotlib.pyplot.Axes"
            }
        ]
    },
    "BigCodeBench/532": {
        "(8, 25)": [
            {
                "api_key": "Counter",
                "api_call": "collections.Counter(duplicates['value'])"
            }
        ],
        "(14, 18)": [
            {
                "api_key": "norm.fit",
                "api_call": "scipy.stats.norm.fit(df['value'])"
            }
        ],
        "(16, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(17, 4)": [
            {
                "api_key": "ax.hist",
                "api_call": "matplotlib.pyplot.subplots()[1].hist(df['value'], bins=bins, density=True, alpha=0.6, color='g')"
            }
        ],
        "(19, 21)": [
            {
                "api_key": "plt.xlim",
                "api_call": "matplotlib.pyplot.xlim()"
            }
        ],
        "(20, 12)": [
            {
                "api_key": "np.linspace",
                "api_call": "numpy.linspace(xmin, xmax, 100)"
            }
        ],
        "(21, 12)": [
            {
                "api_key": "norm.pdf",
                "api_call": "scipy.stats.norm.pdf(x, mu, std)"
            }
        ],
        "(22, 8)": [
            {
                "api_key": "ax.plot",
                "api_call": "matplotlib.pyplot.subplots()[1].plot(x, p, 'k', linewidth=2)"
            }
        ],
        "(23, 4)": [
            {
                "api_key": "ax.set_xlabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_xlabel('Value')"
            }
        ],
        "(24, 4)": [
            {
                "api_key": "ax.set_ylabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_ylabel('Frequency')"
            }
        ],
        "(25, 4)": [
            {
                "api_key": "ax.set_title",
                "api_call": "matplotlib.pyplot.subplots()[1].set_title('Distribution')"
            }
        ]
    },
    "BigCodeBench/553": {
        "(8, 18)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(9, 8)": [
            {
                "api_key": "plt.close",
                "api_call": "matplotlib.pyplot.close(fig)"
            }
        ],
        "(13, 4)": [
            {
                "api_key": "np.random.seed",
                "api_call": "numpy.random.seed(0)"
            }
        ],
        "(16, 9)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(np.random.randn(len(a), len(b)), index=a, columns=selected_columns)"
            }
        ],
        "(16, 22)": [
            {
                "api_key": "np.random.randn",
                "api_call": "numpy.random.randn(len(a), len(b))"
            }
        ],
        "(17, 9)": [
            {
                "api_key": "df.plot",
                "api_call": "pandas.DataFrame(np.random.randn(len(a), len(b)), index=a, columns=selected_columns).plot(kind='bar')"
            }
        ],
        "(18, 4)": [
            {
                "api_key": "plt.show",
                "api_call": "matplotlib.pyplot.show()"
            }
        ]
    },
    "BigCodeBench/560": {
        "(19, 13)": [
            {
                "api_key": "datetime.strptime",
                "api_call": "datetime.datetime.strptime(d[0], '%Y-%m')"
            }
        ],
        "(20, 9)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(data, columns=['Month', 'Value'])"
            }
        ],
        "(21, 9)": [
            {
                "api_key": "df.set_index",
                "api_call": "pandas.DataFrame(data, columns=['Month', 'Value']).set_index('Month').set_index('Month')"
            }
        ],
        "(23, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots(figsize=(10, 6))"
            }
        ],
        "(24, 4)": [
            {
                "api_key": "ax.bar",
                "api_call": "matplotlib.pyplot.subplots(figsize=(10, 6))[1].bar(df.index, df['Value'])"
            }
        ],
        "(24, 11)": [
            {
                "api_key": "df.index",
                "api_call": "pandas.DataFrame(data, columns=['Month', 'Value']).set_index('Month').index"
            }
        ],
        "(25, 4)": [
            {
                "api_key": "ax.set_xlabel",
                "api_call": "matplotlib.pyplot.subplots(figsize=(10, 6))[1].set_xlabel('Month')"
            }
        ],
        "(26, 4)": [
            {
                "api_key": "ax.set_ylabel",
                "api_call": "matplotlib.pyplot.subplots(figsize=(10, 6))[1].set_ylabel('Value')"
            }
        ],
        "(27, 4)": [
            {
                "api_key": "ax.set_title",
                "api_call": "matplotlib.pyplot.subplots(figsize=(10, 6))[1].set_title(f'Monthly Data for {list(unique_years)[0]}')"
            }
        ],
        "(28, 4)": [
            {
                "api_key": "plt.xticks",
                "api_call": "matplotlib.pyplot.xticks(rotation='vertical')"
            }
        ],
        "(29, 4)": [
            {
                "api_key": "plt.close",
                "api_call": "matplotlib.pyplot.close(fig)"
            }
        ]
    },
    "BigCodeBench/567": {
        "(7, 9)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(data, columns=['Values'])"
            }
        ],
        "(9, 4)": [
            {
                "api_key": "plt.figure",
                "api_call": "matplotlib.pyplot.figure(figsize=(10, 6))"
            }
        ],
        "(10, 9)": [
            {
                "api_key": "plt.gca",
                "api_call": "matplotlib.pyplot.gca()"
            }
        ],
        "(11, 4)": [
            {
                "api_key": "ax.hist",
                "api_call": "matplotlib.pyplot.gca().hist(df['Values'], bins=np.arange(df['Values'].min(), df['Values'].max() + 2) - 0.5, edgecolor='black')"
            }
        ],
        "(11, 31)": [
            {
                "api_key": "np.arange",
                "api_call": "numpy.arange(df['Values'].min(), df['Values'].max() + 2)"
            }
        ],
        "(12, 4)": [
            {
                "api_key": "ax.set_xlabel",
                "api_call": "matplotlib.pyplot.gca().set_xlabel('Value')"
            }
        ],
        "(13, 4)": [
            {
                "api_key": "ax.set_ylabel",
                "api_call": "matplotlib.pyplot.gca().set_ylabel('Frequency')"
            }
        ],
        "(14, 4)": [
            {
                "api_key": "ax.set_title",
                "api_call": "matplotlib.pyplot.gca().set_title('Histogram of Values')"
            }
        ],
        "(15, 4)": [
            {
                "api_key": "ax.set_xticks",
                "api_call": "matplotlib.pyplot.gca().set_xticks(sorted(list(set(data))))"
            }
        ],
        "(16, 4)": [
            {
                "api_key": "plt.show",
                "api_call": "matplotlib.pyplot.show()"
            }
        ]
    },
    "BigCodeBench/574": {
        "(5, 8)": [
            {
                "api_key": "np.linspace",
                "api_call": "numpy.linspace(0, 4 * np.pi, array_length)"
            }
        ],
        "(5, 25)": [
            {
                "api_key": "np.pi",
                "api_call": "numpy.pi"
            }
        ],
        "(6, 8)": [
            {
                "api_key": "np.sin",
                "api_call": "numpy.sin(x)"
            }
        ],
        "(9, 19)": [
            {
                "api_key": "np.sin",
                "api_call": "numpy.sin(b * x)"
            }
        ],
        "(6, 34)": [
            {
                "api_key": "np.random.rand",
                "api_call": "numpy.random.rand(array_length)"
            }
        ],
        "(11, 17)": [
            {
                "api_key": "curve_fit",
                "api_call": "scipy.optimize.curve_fit(func, x, y, p0=[1, 1])"
            }
        ],
        "(13, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(14, 4)": [
            {
                "api_key": "ax.plot",
                "api_call": "matplotlib.pyplot.subplots()[1].plot(x, y, 'b-', label='data')"
            }
        ],
        "(15, 4)": [
            {
                "api_key": "ax.plot",
                "api_call": "matplotlib.pyplot.subplots()[1].plot(x, func(x, *popt), 'r-', label='fit: a=%5.3f, b=%5.3f' % tuple(popt))"
            }
        ],
        "(16, 4)": [
            {
                "api_key": "ax.set_xlabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_xlabel('x')"
            }
        ],
        "(17, 4)": [
            {
                "api_key": "ax.set_ylabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_ylabel('y')"
            }
        ],
        "(18, 4)": [
            {
                "api_key": "ax.legend",
                "api_call": "matplotlib.pyplot.subplots()[1].legend()"
            }
        ]
    },
    "BigCodeBench/579": {
        "(9, 21)": [
            {
                "api_key": "csv.reader",
                "api_call": "csv.reader(file)"
            }
        ],
        "(12, 38)": [
            {
                "api_key": "unicodedata.normalize('NFKD', word).encode('ascii', 'ignore').decode",
                "api_call": "unicodedata.normalize('NFKD', word).encode('ascii', 'ignore').decode()"
            }
        ],
        "(15, 23)": [
            {
                "api_key": "Counter",
                "api_call": "collections.Counter(words)"
            }
        ],
        "(16, 28)": [
            {
                "api_key": "word_counter.most_common",
                "api_call": "collections.Counter(words).most_common(10)"
            }
        ],
        "(18, 18)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(19, 8)": [
            {
                "api_key": "ax.bar",
                "api_call": "matplotlib.pyplot.subplots()[1].bar(labels, values)"
            }
        ]
    },
    "BigCodeBench/582": {
        "(5, 11)": [
            {
                "api_key": "np.random.randn",
                "api_call": "numpy.random.randn(size)"
            }
        ],
        "(6, 14)": [
            {
                "api_key": "stats.norm.fit",
                "api_call": "scipy.stats.norm.fit(data)"
            }
        ],
        "(8, 16)": [
            {
                "api_key": "np.histogram_bin_edges",
                "api_call": "numpy.histogram_bin_edges(data, bins='auto')"
            }
        ],
        "(11, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(12, 4)": [
            {
                "api_key": "ax.hist",
                "api_call": "matplotlib.pyplot.subplots()[1].hist(data, bins=number_of_bins, density=True, alpha=0.6, color='g')"
            }
        ],
        "(14, 17)": [
            {
                "api_key": "ax.get_xlim",
                "api_call": "matplotlib.pyplot.subplots()[1].get_xlim()"
            }
        ],
        "(15, 8)": [
            {
                "api_key": "np.linspace",
                "api_call": "numpy.linspace(xmin, xmax, size)"
            }
        ],
        "(16, 8)": [
            {
                "api_key": "stats.norm.pdf",
                "api_call": "scipy.stats.norm.pdf(x, mu, std)"
            }
        ],
        "(17, 4)": [
            {
                "api_key": "ax.plot",
                "api_call": "matplotlib.pyplot.subplots()[1].plot(x, p, 'k', linewidth=2)"
            }
        ]
    },
    "BigCodeBench/583": {
        "(7, 26)": [
            {
                "api_key": "rsa.newkeys",
                "api_call": "rsa.newkeys(512)"
            }
        ],
        "(8, 15)": [
            {
                "api_key": "get_random_bytes",
                "api_call": "Crypto.Random.get_random_bytes(16)"
            }
        ],
        "(10, 13)": [
            {
                "api_key": "AES.new",
                "api_call": "Crypto.Cipher.AES.new(password, AES.MODE_EAX)"
            }
        ],
        "(10, 31)": [
            {
                "api_key": "AES.MODE_EAX",
                "api_call": "Crypto.Cipher.AES.MODE_EAX"
            }
        ],
        "(11, 12)": [
            {
                "api_key": "cipher.nonce",
                "api_call": "Crypto.Cipher.AES.new(password, AES.MODE_EAX).nonce"
            }
        ],
        "(12, 30)": [
            {
                "api_key": "cipher.encrypt_and_digest",
                "api_call": "Crypto.Cipher.AES.new(password, AES.MODE_EAX).encrypt_and_digest(priv_key.save_pkcs1())"
            }
        ],
        "(12, 56)": [
            {
                "api_key": "priv_key.save_pkcs1",
                "api_call": "rsa.newkeys(512)[1].save_pkcs1()"
            }
        ],
        "(14, 25)": [
            {
                "api_key": "b64encode",
                "api_call": "base64.b64encode(priv_key_encrypted)"
            }
        ],
        "(16, 30)": [
            {
                "api_key": "os.urandom",
                "api_call": "os.urandom(8)"
            }
        ]
    },
    "BigCodeBench/587": {
        "(8, 26)": [
            {
                "api_key": "rsa.newkeys",
                "api_call": "rsa.newkeys(512)"
            }
        ],
        "(9, 14)": [
            {
                "api_key": "os.urandom",
                "api_call": "os.urandom(32)"
            }
        ],
        "(10, 9)": [
            {
                "api_key": "os.urandom",
                "api_call": "os.urandom(16)"
            }
        ],
        "(11, 13)": [
            {
                "api_key": "Cipher",
                "api_call": "cryptography.hazmat.primitives.ciphers.Cipher(algorithms.AES(aes_key), modes.CBC(iv), backend=default_backend())"
            }
        ],
        "(11, 20)": [
            {
                "api_key": "algorithms.AES",
                "api_call": "cryptography.hazmat.primitives.ciphers.algorithms.AES(aes_key)"
            }
        ],
        "(11, 45)": [
            {
                "api_key": "modes.CBC",
                "api_call": "cryptography.hazmat.primitives.ciphers.modes.CBC(iv)"
            }
        ],
        "(11, 68)": [
            {
                "api_key": "default_backend",
                "api_call": "cryptography.hazmat.backends.default_backend()"
            }
        ],
        "(15, 17)": [
            {
                "api_key": "padding.PKCS7(128).padder",
                "api_call": "cryptography.hazmat.primitives.padding.PKCS7(128).padder()"
            }
        ],
        "(16, 22)": [
            {
                "api_key": "padder.update",
                "api_call": "cryptography.hazmat.primitives.padding.PKCS7(128).padder().update(data)"
            }
        ],
        "(16, 44)": [
            {
                "api_key": "padder.finalize",
                "api_call": "cryptography.hazmat.primitives.padding.PKCS7(128).padder().finalize()"
            }
        ],
        "(17, 20)": [
            {
                "api_key": "cipher.encryptor",
                "api_call": "cryptography.hazmat.primitives.ciphers.Cipher(algorithms.AES(aes_key), modes.CBC(iv), backend=default_backend()).encryptor()"
            }
        ],
        "(18, 25)": [
            {
                "api_key": "encryptor.update",
                "api_call": "cryptography.hazmat.primitives.ciphers.Cipher(algorithms.AES(aes_key), modes.CBC(iv), backend=default_backend()).encryptor().update(padded_data)"
            }
        ],
        "(18, 57)": [
            {
                "api_key": "encryptor.finalize",
                "api_call": "cryptography.hazmat.primitives.ciphers.Cipher(algorithms.AES(aes_key), modes.CBC(iv), backend=default_backend()).encryptor().finalize()"
            }
        ],
        "(24, 24)": [
            {
                "api_key": "rsa.encrypt",
                "api_call": "rsa.encrypt(aes_key, pub_key)"
            }
        ],
        "(27, 16)": [
            {
                "api_key": "b64encode",
                "api_call": "base64.b64encode(encrypted_aes_key)"
            }
        ]
    },
    "BigCodeBench/590": {
        "(12, 13)": [
            {
                "api_key": "urllib.request.urlopen",
                "api_call": "pandas.request.urlopen(url)"
            }
        ],
        "(13, 19)": [
            {
                "api_key": "res.read().decode",
                "api_call": "urllib.request.urlopen.read().decode()"
            }
        ],
        "(14, 11)": [
            {
                "api_key": "urllib.error.URLError",
                "api_call": "pandas.error.URLError"
            }
        ],
        "(15, 14)": [
            {
                "api_key": "urllib.error.URLError",
                "api_call": "pandas.error.URLError(f'Error fetching URL {url}: {e}')"
            }
        ],
        "(17, 8)": [
            {
                "api_key": "pq",
                "api_call": "pyquery.PyQuery(html)"
            }
        ],
        "(19, 17)": [
            {
                "api_key": "datetime.now().strftime",
                "api_call": "datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
            }
        ],
        "(20, 9)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(anchors, columns=['text', 'href'])"
            }
        ]
    },
    "BigCodeBench/592": {
        "(9, 16)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(output_dir, 'sensor_data.csv')"
            }
        ],
        "(10, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(output_dir)"
            }
        ],
        "(11, 8)": [
            {
                "api_key": "os.makedirs",
                "api_call": "os.makedirs(output_dir)"
            }
        ],
        "(15, 15)": [
            {
                "api_key": "datetime.now",
                "api_call": "datetime.datetime.now()"
            }
        ],
        "(15, 67)": [
            {
                "api_key": "randint",
                "api_call": "random.randint(0, 100)"
            }
        ],
        "(19, 17)": [
            {
                "api_key": "csv.writer",
                "api_call": "csv.writer(f)"
            }
        ],
        "(20, 8)": [
            {
                "api_key": "writer.writerows",
                "api_call": "csv.writer(f).writerows(data)"
            }
        ]
    },
    "BigCodeBench/593": {
        "(12, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(output_dir)"
            }
        ],
        "(13, 8)": [
            {
                "api_key": "os.makedirs",
                "api_call": "os.makedirs(output_dir)"
            }
        ],
        "(14, 16)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(output_dir, 'traffic_data.csv')"
            }
        ],
        "(17, 15)": [
            {
                "api_key": "datetime.now",
                "api_call": "datetime.datetime.now()"
            }
        ],
        "(17, 67)": [
            {
                "api_key": "randint",
                "api_call": "random.randint(0, 50)"
            }
        ],
        "(21, 17)": [
            {
                "api_key": "csv.writer",
                "api_call": "csv.writer(f)"
            }
        ],
        "(22, 8)": [
            {
                "api_key": "writer.writerows",
                "api_call": "csv.writer(f).writerows(data)"
            }
        ],
        "(24, 9)": [
            {
                "api_key": "pd.read_csv",
                "api_call": "pandas.read_csv(FILE_PATH)"
            }
        ],
        "(26, 7)": [
            {
                "api_key": "df.empty",
                "api_call": "pandas.read_csv(FILE_PATH).empty"
            }
        ],
        "(29, 9)": [
            {
                "api_key": "df.plot",
                "api_call": "pandas.read_csv(FILE_PATH).plot(x='Time', y=VEHICLE_TYPES, kind='line', title='Traffic Data Over Time')"
            }
        ],
        "(30, 4)": [
            {
                "api_key": "plt.xlabel",
                "api_call": "matplotlib.pyplot.xlabel('Time')"
            }
        ],
        "(31, 4)": [
            {
                "api_key": "plt.ylabel",
                "api_call": "matplotlib.pyplot.ylabel('Vehicle Count')"
            }
        ],
        "(32, 4)": [
            {
                "api_key": "plt.tight_layout",
                "api_call": "matplotlib.pyplot.tight_layout()"
            }
        ],
        "(33, 4)": [
            {
                "api_key": "plt.show",
                "api_call": "matplotlib.pyplot.show()"
            }
        ]
    },
    "BigCodeBench/594": {
        "(10, 16)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(output_dir, 'weather_data.csv')"
            }
        ],
        "(11, 18)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(output_dir, 'backup/')"
            }
        ],
        "(14, 15)": [
            {
                "api_key": "datetime.now",
                "api_call": "datetime.datetime.now()"
            }
        ],
        "(14, 74)": [
            {
                "api_key": "randint",
                "api_call": "random.randint(0, len(WEATHER_CONDITIONS) - 1)"
            }
        ],
        "(18, 17)": [
            {
                "api_key": "csv.writer",
                "api_call": "csv.writer(f)"
            }
        ],
        "(19, 8)": [
            {
                "api_key": "writer.writerows",
                "api_call": "csv.writer(f).writerows(data)"
            }
        ],
        "(21, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(BACKUP_PATH)"
            }
        ],
        "(22, 8)": [
            {
                "api_key": "os.makedirs",
                "api_call": "os.makedirs(BACKUP_PATH)"
            }
        ],
        "(23, 4)": [
            {
                "api_key": "shutil.copy",
                "api_call": "shutil.copy(FILE_PATH, BACKUP_PATH)"
            }
        ]
    },
    "BigCodeBench/618": {
        "(12, 21)": [
            {
                "api_key": "randint",
                "api_call": "random.randint(0, goals)"
            }
        ],
        "(13, 25)": [
            {
                "api_key": "randint",
                "api_call": "random.randint(0, penalties)"
            }
        ],
        "(17, 17)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(match_results, columns=['Team', 'Goals', 'Penalty Cost'])"
            }
        ],
        "(19, 12)": [
            {
                "api_key": "sns.barplot",
                "api_call": "seaborn.barplot(x='Team', y='Goals', data=results_df, palette='viridis')"
            }
        ],
        "(21, 12)": [
            {
                "api_key": "sns.barplot",
                "api_call": "seaborn.barplot(x='Team', y='Penalty Cost', data=results_df, palette='viridis')"
            }
        ],
        "(20, 4)": [
            {
                "api_key": "plt.close",
                "api_call": "matplotlib.pyplot.close()"
            }
        ]
    },
    "BigCodeBench/636": {
        "(7, 4)": [
            {
                "api_key": "plt.close",
                "api_call": "matplotlib.pyplot.close('all')"
            }
        ],
        "(11, 19)": [
            {
                "api_key": "plt.gca",
                "api_call": "matplotlib.pyplot.gca()"
            }
        ],
        "(12, 8)": [
            {
                "api_key": "empty_ax.set_title",
                "api_call": "matplotlib.pyplot.gca().set_title('Non-Zero Value Counts')"
            }
        ],
        "(13, 15)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(columns=COLUMNS)"
            }
        ],
        "(17, 9)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(data, columns=COLUMNS)"
            }
        ],
        "(16, 11)": [
            {
                "api_key": "np.random.randint",
                "api_call": "numpy.random.randint(10, size=(rows, len(COLUMNS)))"
            }
        ],
        "(20, 13)": [
            {
                "api_key": "df.astype(bool).sum",
                "api_call": "pandas.DataFrame(data, columns=COLUMNS).astype(bool).sum(axis=0)"
            }
        ],
        "(23, 9)": [
            {
                "api_key": "counts.plot",
                "api_call": "pandas.DataFrame(data, columns=COLUMNS).astype(bool).sum(axis=0).plot(kind='bar')"
            }
        ],
        "(24, 4)": [
            {
                "api_key": "ax.set_title",
                "api_call": "pandas.DataFrame(data, columns=COLUMNS).astype(bool).sum(axis=0).plot(kind='bar').set_title('Non-Zero Value Counts')"
            }
        ]
    },
    "BigCodeBench/637": {
        "(13, 22)": [
            {
                "api_key": "sample",
                "api_call": "random.sample(STUDENTS, num_students)"
            }
        ],
        "(14, 13)": [
            {
                "api_key": "np.random.randint",
                "api_call": "numpy.random.randint(40, 101, size=(num_students, len(COURSES)))"
            }
        ],
        "(17, 9)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(grades, index=students_sample, columns=COURSES)"
            }
        ],
        "(20, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(21, 4)": [
            {
                "api_key": "df.mean",
                "api_call": "pandas.DataFrame(grades, index=students_sample, columns=COURSES).mean()"
            }
        ],
        "(23, 4)": [
            {
                "api_key": "ax.set_title",
                "api_call": "matplotlib.pyplot.subplots()[1].set_title('Course-wise Average and Passing Grade Counts')"
            }
        ],
        "(24, 4)": [
            {
                "api_key": "ax.legend",
                "api_call": "matplotlib.pyplot.subplots()[1].legend()"
            }
        ]
    },
    "BigCodeBench/654": {
        "(6, 19)": [
            {
                "api_key": "np.exp",
                "api_call": "numpy.exp(-b * x)"
            }
        ],
        "(8, 14)": [
            {
                "api_key": "np.where",
                "api_call": "numpy.where(array[:, 0] == target_value)"
            }
        ],
        "(12, 13)": [
            {
                "api_key": "np.arange",
                "api_call": "numpy.arange(len(indices))"
            }
        ],
        "(19, 14)": [
            {
                "api_key": "optimize.curve_fit",
                "api_call": "scipy.optimize.curve_fit(func, x_data, y_data, p0=initial_guess, maxfev=10000)"
            }
        ],
        "(22, 12)": [
            {
                "api_key": "np.linspace",
                "api_call": "numpy.linspace(min(x_data), max(x_data), 500)"
            }
        ],
        "(23, 4)": [
            {
                "api_key": "plt.figure",
                "api_call": "matplotlib.pyplot.figure()"
            }
        ],
        "(24, 4)": [
            {
                "api_key": "plt.plot",
                "api_call": "matplotlib.pyplot.plot(x_data, y_data, 'bo', label='Data')"
            }
        ],
        "(25, 4)": [
            {
                "api_key": "plt.plot",
                "api_call": "matplotlib.pyplot.plot(x_fit, func(x_fit, *popt), 'r-', label='Fit')"
            }
        ],
        "(26, 4)": [
            {
                "api_key": "plt.legend",
                "api_call": "matplotlib.pyplot.legend()"
            }
        ],
        "(27, 4)": [
            {
                "api_key": "plt.show",
                "api_call": "matplotlib.pyplot.show()"
            }
        ],
        "(29, 17)": [
            {
                "api_key": "plt.gca",
                "api_call": "matplotlib.pyplot.gca()"
            }
        ]
    },
    "BigCodeBench/655": {
        "(6, 0)": [
            {
                "api_key": "nltk.download",
                "api_call": "nltk.download('stopwords')"
            }
        ],
        "(8, 15)": [
            {
                "api_key": "re.compile",
                "api_call": "re.compile('[\\\\W_]+')"
            }
        ],
        "(9, 12)": [
            {
                "api_key": "nltk.corpus.stopwords.words",
                "api_call": "nltk.corpus.stopwords.words('english')"
            }
        ],
        "(15, 21)": [
            {
                "api_key": "ALPHANUMERIC.sub",
                "api_call": "re.compile('[\\\\W_]+').sub(' ', text)"
            }
        ],
        "(22, 17)": [
            {
                "api_key": "TfidfVectorizer",
                "api_call": "sklearn.feature_extraction.text.TfidfVectorizer(max_df=1.0, min_df=1, stop_words='english')"
            }
        ],
        "(23, 12)": [
            {
                "api_key": "vectorizer.fit_transform",
                "api_call": "sklearn.feature_extraction.text.TfidfVectorizer(max_df=1.0, min_df=1, stop_words='english').fit_transform(tokenized_texts)"
            }
        ],
        "(25, 10)": [
            {
                "api_key": "NMF",
                "api_call": "sklearn.decomposition.NMF(n_components=num_topics, random_state=1)"
            }
        ],
        "(26, 20)": [
            {
                "api_key": "vectorizer.get_feature_names_out",
                "api_call": "sklearn.feature_extraction.text.TfidfVectorizer(max_df=1.0, min_df=1, stop_words='english').get_feature_names_out()"
            }
        ],
        "(27, 96)": [
            {
                "api_key": "vectorizer.get_feature_names",
                "api_call": "sklearn.feature_extraction.text.TfidfVectorizer(max_df=1.0, min_df=1, stop_words='english').get_feature_names()"
            }
        ],
        "(30, 38)": [
            {
                "api_key": "nmf.components_",
                "api_call": "sklearn.decomposition.NMF(n_components=num_topics, random_state=1).fit(tfidf).components_"
            }
        ]
    },
    "BigCodeBench/657": {
        "(5, 15)": [
            {
                "api_key": "re.compile",
                "api_call": "re.compile('[\\\\W_]+')"
            }
        ],
        "(8, 20)": [
            {
                "api_key": "nltk.corpus.stopwords.words",
                "api_call": "nltk.corpus.stopwords.words('english')"
            }
        ],
        "(10, 21)": [
            {
                "api_key": "ALPHANUMERIC.sub",
                "api_call": "re.compile('[\\\\W_]+').sub(' ', text)"
            }
        ],
        "(15, 15)": [
            {
                "api_key": "Word2Vec",
                "api_call": "gensim.models.Word2Vec(vector_size=100)"
            }
        ],
        "(17, 12)": [
            {
                "api_key": "Word2Vec",
                "api_call": "gensim.models.Word2Vec(sentences=tokenized_texts, vector_size=100, window=5, min_count=1, workers=4)"
            }
        ]
    },
    "BigCodeBench/678": {
        "(7, 9)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame()"
            }
        ],
        "(20, 26)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(data)"
            }
        ],
        "(8, 21)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(path, 'processed')"
            }
        ],
        "(15, 24)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(path, filename)"
            }
        ],
        "(10, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(processed_path)"
            }
        ],
        "(11, 8)": [
            {
                "api_key": "os.makedirs",
                "api_call": "os.makedirs(processed_path)"
            }
        ],
        "(13, 20)": [
            {
                "api_key": "os.listdir",
                "api_call": "os.listdir(path)"
            }
        ],
        "(17, 23)": [
            {
                "api_key": "json.load",
                "api_call": "json.load(file)"
            }
        ],
        "(22, 21)": [
            {
                "api_key": "pd.concat",
                "api_call": "pandas.concat([df, temp_df])"
            }
        ],
        "(24, 12)": [
            {
                "api_key": "shutil.move",
                "api_call": "shutil.move(file_path, processed_path)"
            }
        ]
    },
    "BigCodeBench/720": {
        "(10, 4)": [
            {
                "api_key": "os.makedirs",
                "api_call": "os.makedirs(os.path.dirname(FILE_NAME), exist_ok=True)"
            }
        ],
        "(10, 16)": [
            {
                "api_key": "os.path.dirname",
                "api_call": "os.path.dirname(FILE_NAME)"
            }
        ],
        "(12, 18)": [
            {
                "api_key": "random.uniform",
                "api_call": "random.uniform(20, 30)"
            }
        ],
        "(13, 15)": [
            {
                "api_key": "random.uniform",
                "api_call": "random.uniform(50, 60)"
            }
        ],
        "(14, 16)": [
            {
                "api_key": "datetime.now",
                "api_call": "datetime.datetime.now()"
            }
        ],
        "(17, 11)": [
            {
                "api_key": "os.path.isfile",
                "api_call": "os.path.isfile(FILE_NAME)"
            }
        ],
        "(19, 25)": [
            {
                "api_key": "csv.writer",
                "api_call": "csv.writer(f)"
            }
        ],
        "(20, 12)": [
            {
                "api_key": "csv_writer.writerow",
                "api_call": "csv.writer(f).writerow(FIELDS)"
            }
        ],
        "(25, 8)": [
            {
                "api_key": "csv_writer.writerow",
                "api_call": "csv.writer(f).writerow([timestamp, temperature, humidity])"
            }
        ]
    },
    "BigCodeBench/723": {
        "(8, 11)": [
            {
                "api_key": "urllib.request.urlopen",
                "api_call": "urllib.request.urlopen(url)"
            }
        ],
        "(9, 11)": [
            {
                "api_key": "BeautifulSoup",
                "api_call": "bs4.BeautifulSoup(html, 'html.parser')"
            }
        ],
        "(12, 12)": [
            {
                "api_key": "soup.find",
                "api_call": "bs4.BeautifulSoup(html, 'html.parser').find('table', attrs={'class': 'data-table'})"
            }
        ],
        "(13, 17)": [
            {
                "api_key": "table.find_all",
                "api_call": "bs4.BeautifulSoup(html, 'html.parser').find('table', attrs={'class': 'data-table'}).find_all('tr')"
            }
        ],
        "(20, 7)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(CSV_FILE_PATH)"
            }
        ],
        "(21, 8)": [
            {
                "api_key": "os.remove",
                "api_call": "os.remove(CSV_FILE_PATH)"
            }
        ],
        "(24, 17)": [
            {
                "api_key": "csv.writer",
                "api_call": "csv.writer(f)"
            }
        ],
        "(25, 8)": [
            {
                "api_key": "writer.writerows",
                "api_call": "csv.writer(f).writerows(data)"
            }
        ]
    },
    "BigCodeBench/752": {
        "(7, 28)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame"
            }
        ],
        "(16, 15)": [
            {
                "api_key": "np.issubdtype",
                "api_call": "numpy.issubdtype(dtype, np.number)"
            }
        ],
        "(16, 36)": [
            {
                "api_key": "np.number",
                "api_call": "numpy.number"
            }
        ],
        "(29, 39)": [
            {
                "api_key": "train_test_split",
                "api_call": "sklearn.model_selection.train_test_split(X, y, test_size=test_size, random_state=random_state)"
            }
        ],
        "(30, 12)": [
            {
                "api_key": "LinearRegression().fit",
                "api_call": "sklearn.linear_model.LinearRegression.fit(X_train, y_train)"
            }
        ],
        "(32, 11)": [
            {
                "api_key": "model.score",
                "api_call": "sklearn.linear_model.LinearRegression().fit(X_train, y_train).score(X_test, y_test)"
            }
        ]
    },
    "BigCodeBench/760": {
        "(12, 19)": [
            {
                "api_key": "codecs.encode",
                "api_call": "codecs.encode(name, 'utf-8')"
            }
        ],
        "(15, 8)": [
            {
                "api_key": "np.random.seed",
                "api_call": "numpy.random.seed(rng_seed)"
            }
        ],
        "(19, 19)": [
            {
                "api_key": "np.random.choice",
                "api_call": "numpy.random.choice([True, False])"
            }
        ],
        "(20, 15)": [
            {
                "api_key": "np.random.choice",
                "api_call": "numpy.random.choice(latin_names)"
            }
        ],
        "(20, 62)": [
            {
                "api_key": "np.random.choice",
                "api_call": "numpy.random.choice(other_names)"
            }
        ],
        "(21, 21)": [
            {
                "api_key": "np.random.randint",
                "api_call": "numpy.random.randint(start_year, end_year + 1)"
            }
        ],
        "(22, 44)": [
            {
                "api_key": "np.random.randint",
                "api_call": "numpy.random.randint(1, 13)"
            }
        ],
        "(22, 70)": [
            {
                "api_key": "np.random.randint",
                "api_call": "numpy.random.randint(1, 29)"
            }
        ],
        "(22, 14)": [
            {
                "api_key": "datetime.datetime",
                "api_call": "datetime.datetime(birth_year, np.random.randint(1, 13), np.random.randint(1, 29))"
            }
        ],
        "(24, 16)": [
            {
                "api_key": "re.sub",
                "api_call": "re.sub('\\\\s+', '.', name.lower())"
            }
        ],
        "(27, 9)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(data, columns=['ID', 'Name', 'Date of Birth', 'Email'])"
            }
        ]
    },
    "BigCodeBench/763": {
        "(8, 15)": [
            {
                "api_key": "json.load",
                "api_call": "json.load(f)"
            }
        ],
        "(10, 12)": [
            {
                "api_key": "defaultdict",
                "api_call": "collections.defaultdict(list)"
            }
        ],
        "(15, 26)": [
            {
                "api_key": "np.mean",
                "api_call": "numpy.mean(v)"
            }
        ],
        "(15, 48)": [
            {
                "api_key": "np.median",
                "api_call": "numpy.median(v)"
            }
        ],
        "(15, 74)": [
            {
                "api_key": "stats.items",
                "api_call": "collections.defaultdict(list).items()"
            }
        ],
        "(18, 17)": [
            {
                "api_key": "csv.DictWriter",
                "api_call": "csv.DictWriter(f, fieldnames=['key', 'mean', 'median'])"
            }
        ],
        "(19, 8)": [
            {
                "api_key": "writer.writeheader",
                "api_call": "csv.DictWriter(f, fieldnames=['key', 'mean', 'median']).writeheader()"
            }
        ],
        "(21, 12)": [
            {
                "api_key": "writer.writerow",
                "api_call": "csv.DictWriter(f, fieldnames=['key', 'mean', 'median']).writerow({'key': key, 'mean': values['mean'], 'median': values['median']})"
            }
        ]
    },
    "BigCodeBench/765": {
        "(6, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(target_dir)"
            }
        ],
        "(7, 8)": [
            {
                "api_key": "os.makedirs",
                "api_call": "os.makedirs(target_dir)"
            }
        ],
        "(12, 35)": [
            {
                "api_key": "os.path.isfile",
                "api_call": "os.path.isfile(file)"
            }
        ],
        "(13, 26)": [
            {
                "api_key": "Path",
                "api_call": "pathlib.Path(target_dir)"
            }
        ],
        "(13, 45)": [
            {
                "api_key": "Path",
                "api_call": "pathlib.Path(file)"
            }
        ],
        "(14, 12)": [
            {
                "api_key": "shutil.copyfile",
                "api_call": "shutil.copyfile(file, target_file)"
            }
        ]
    },
    "BigCodeBench/771": {
        "(7, 15)": [
            {
                "api_key": "Path",
                "api_call": "pathlib.Path(directory)"
            }
        ],
        "(8, 19)": [
            {
                "api_key": "re.compile",
                "api_call": "re.compile(pattern)"
            }
        ],
        "(11, 20)": [
            {
                "api_key": "os.listdir",
                "api_call": "os.listdir(file_dir)"
            }
        ],
        "(12, 16)": [
            {
                "api_key": "file_pattern.match",
                "api_call": "re.compile(pattern).match(filename)"
            }
        ],
        "(14, 21)": [
            {
                "api_key": "match.group",
                "api_call": "re.compile(pattern).match(filename).group(1)"
            }
        ],
        "(17, 25)": [
            {
                "api_key": "csv.reader",
                "api_call": "csv.reader(infile)"
            }
        ],
        "(18, 25)": [
            {
                "api_key": "csv.writer",
                "api_call": "csv.writer(outfile)"
            }
        ],
        "(19, 16)": [
            {
                "api_key": "writer.writerows",
                "api_call": "csv.writer(outfile).writerows(reader)"
            }
        ]
    },
    "BigCodeBench/777": {
        "(6, 20)": [
            {
                "api_key": "os.listdir",
                "api_call": "os.listdir(directory)"
            }
        ],
        "(7, 16)": [
            {
                "api_key": "re.match",
                "api_call": "re.match(pattern, filename)"
            }
        ],
        "(9, 24)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(directory, filename)"
            }
        ],
        "(12, 27)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(directory, base_name)"
            }
        ],
        "(11, 24)": [
            {
                "api_key": "match.group",
                "api_call": "re.match(pattern, filename).group(1)"
            }
        ],
        "(13, 17)": [
            {
                "api_key": "zipfile.ZipFile",
                "api_call": "zipfile.ZipFile(file_path, 'r')"
            }
        ],
        "(14, 16)": [
            {
                "api_key": "zip_ref.extractall",
                "api_call": "zipfile.ZipFile.extractall(extract_path)"
            }
        ],
        "(17, 16)": [
            {
                "api_key": "os.makedirs",
                "api_call": "os.makedirs(extract_path, exist_ok=True)"
            }
        ]
    },
    "BigCodeBench/785": {
        "(8, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(ARCHIVE_DIR)"
            }
        ],
        "(21, 10)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(archive_file)"
            }
        ],
        "(9, 8)": [
            {
                "api_key": "os.makedirs",
                "api_call": "os.makedirs(ARCHIVE_DIR)"
            }
        ],
        "(12, 16)": [
            {
                "api_key": "glob.glob",
                "api_call": "glob.glob(pattern)"
            }
        ],
        "(18, 24)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(ARCHIVE_DIR, 'archive')"
            }
        ],
        "(26, 4)": [
            {
                "api_key": "subprocess.run",
                "api_call": "subprocess.run(['tar', '-czf', archive_file] + file_list)"
            }
        ],
        "(30, 8)": [
            {
                "api_key": "os.remove",
                "api_call": "os.remove(file)"
            }
        ]
    },
    "BigCodeBench/800": {
        "(8, 17)": [
            {
                "api_key": "csv.writer",
                "api_call": "csv.writer(file)"
            }
        ],
        "(9, 8)": [
            {
                "api_key": "writer.writerows",
                "api_call": "csv.writer(file).writerows(content)"
            }
        ],
        "(20, 13)": [
            {
                "api_key": "Counter",
                "api_call": "collections.Counter({'goals': 0, 'penalties': 0})"
            }
        ],
        "(22, 7)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(csv_file_path)"
            }
        ],
        "(24, 21)": [
            {
                "api_key": "csv.DictReader",
                "api_call": "csv.DictReader(file)"
            }
        ]
    },
    "BigCodeBench/826": {
        "(5, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(source_dir)"
            }
        ],
        "(7, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(target_dir)"
            }
        ],
        "(8, 8)": [
            {
                "api_key": "os.makedirs",
                "api_call": "os.makedirs(target_dir)"
            }
        ],
        "(12, 20)": [
            {
                "api_key": "os.listdir",
                "api_call": "os.listdir(source_dir)"
            }
        ],
        "(13, 11)": [
            {
                "api_key": "re.match",
                "api_call": "re.match(file_pattern, filename)"
            }
        ],
        "(14, 12)": [
            {
                "api_key": "shutil.move",
                "api_call": "shutil.move(os.path.join(source_dir, filename), os.path.join(target_dir, filename))"
            }
        ],
        "(14, 24)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(source_dir, filename)"
            }
        ],
        "(14, 60)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(target_dir, filename)"
            }
        ]
    },
    "BigCodeBench/845": {
        "(6, 15)": [
            {
                "api_key": "re.compile",
                "api_call": "re.compile('[\\\\W_]+')"
            }
        ],
        "(9, 12)": [
            {
                "api_key": "ALPHANUMERIC.sub(' ', text1).lower",
                "api_call": "re.compile('[\\\\W_]+').sub(' ', text1).lower()"
            }
        ],
        "(10, 12)": [
            {
                "api_key": "ALPHANUMERIC.sub(' ', text2).lower",
                "api_call": "re.compile('[\\\\W_]+').sub(' ', text2).lower()"
            }
        ],
        "(13, 11)": [
            {
                "api_key": "Counter",
                "api_call": "collections.Counter(text1.split())"
            }
        ],
        "(14, 11)": [
            {
                "api_key": "Counter",
                "api_call": "collections.Counter(text2.split())"
            }
        ],
        "(13, 19)": [
            {
                "api_key": "text1.split",
                "api_call": "re.compile('[\\\\W_]+').sub(' ', text1).lower().split()"
            }
        ],
        "(14, 19)": [
            {
                "api_key": "text2.split",
                "api_call": "re.compile('[\\\\W_]+').sub(' ', text2).lower().split()"
            }
        ],
        "(17, 23)": [
            {
                "api_key": "vec1.keys",
                "api_call": "collections.Counter(text1.split()).keys()"
            }
        ],
        "(17, 42)": [
            {
                "api_key": "vec2.keys",
                "api_call": "collections.Counter(text2.split()).keys()"
            }
        ],
        "(22, 18)": [
            {
                "api_key": "np.sqrt",
                "api_call": "numpy.sqrt(sum1)"
            }
        ],
        "(22, 34)": [
            {
                "api_key": "np.sqrt",
                "api_call": "numpy.sqrt(sum2)"
            }
        ],
        "(30, 24)": [
            {
                "api_key": "ratio",
                "api_call": "Levenshtein.ratio(text1, text2)"
            }
        ]
    },
    "BigCodeBench/854": {
        "(18, 28)": [
            {
                "api_key": "permutations",
                "api_call": "itertools.permutations(numbers)"
            }
        ],
        "(19, 12)": [
            {
                "api_key": "reduce",
                "api_call": "functools.reduce(lambda a, b: a + b, [math.factorial(n) for n in permutation])"
            }
        ],
        "(19, 40)": [
            {
                "api_key": "math.factorial",
                "api_call": "math.factorial(n)"
            }
        ]
    },
    "BigCodeBench/857": {
        "(8, 4)": [
            {
                "api_key": "warnings.simplefilter",
                "api_call": "warnings.simplefilter('always')"
            }
        ],
        "(12, 24)": [
            {
                "api_key": "glob.glob",
                "api_call": "glob.glob(os.path.join(SOURCE_DIR, '*' + ext))"
            }
        ],
        "(12, 34)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(SOURCE_DIR, '*' + ext)"
            }
        ],
        "(14, 16)": [
            {
                "api_key": "shutil.move",
                "api_call": "shutil.move(src_file, DEST_DIR)"
            }
        ],
        "(15, 41)": [
            {
                "api_key": "os.path.basename",
                "api_call": "os.path.basename(src_file)"
            }
        ],
        "(17, 16)": [
            {
                "api_key": "warnings.warn",
                "api_call": "warnings.warn(f'Unable to move file {src_file}: {str(e)}')"
            }
        ],
        "(19, 4)": [
            {
                "api_key": "time.sleep",
                "api_call": "time.sleep(1)"
            }
        ]
    },
    "BigCodeBench/865": {
        "(10, 24)": [
            {
                "api_key": "zscore",
                "api_call": "scipy.stats.zscore(counts)"
            }
        ],
        "(11, 13)": [
            {
                "api_key": "MinMaxScaler",
                "api_call": "sklearn.preprocessing.MinMaxScaler()"
            }
        ],
        "(12, 25)": [
            {
                "api_key": "scaler.fit_transform(np.array(weights).reshape(-1, 1)).flatten",
                "api_call": "sklearn.preprocessing.MinMaxScaler().fit_transform(np.array(weights).reshape(-1, 1)).flatten()"
            }
        ],
        "(12, 46)": [
            {
                "api_key": "np.array(weights).reshape",
                "api_call": "numpy.array(weights).reshape(-1, 1)"
            }
        ],
        "(15, 16)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame({'Item': items, 'Normalized Count': counts_normalized, 'Normalized Weight': weights_normalized})"
            }
        ]
    },
    "BigCodeBench/870": {
        "(7, 25)": [
            {
                "api_key": "itertools.zip_longest",
                "api_call": "itertools.zip_longest(*data_list, fillvalue=np.nan)"
            }
        ],
        "(7, 69)": [
            {
                "api_key": "np.nan",
                "api_call": "numpy.nan"
            }
        ],
        "(15, 31)": [
            {
                "api_key": "np.nanmean",
                "api_call": "numpy.nanmean(numeric_values)"
            }
        ],
        "(20, 9)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(mean_values, columns=['Mean Value'], index=['Position {}'.format(i) for i in range(len(mean_values))])"
            }
        ]
    },
    "BigCodeBench/879": {
        "(14, 7)": [
            {
                "api_key": "np.issubdtype",
                "api_call": "numpy.issubdtype(data[col1].dtype, np.number)"
            }
        ],
        "(14, 53)": [
            {
                "api_key": "np.issubdtype",
                "api_call": "numpy.issubdtype(data[col2].dtype, np.number)"
            }
        ],
        "(14, 39)": [
            {
                "api_key": "np.number",
                "api_call": "numpy.number"
            }
        ],
        "(22, 24)": [
            {
                "api_key": "pd.crosstab",
                "api_call": "pandas.crosstab(data[col1], data[col2])"
            }
        ],
        "(27, 29)": [
            {
                "api_key": "chi2_contingency",
                "api_call": "scipy.stats.chi2_contingency(contingency_table)"
            }
        ]
    },
    "BigCodeBench/897": {
        "(8, 8)": [
            {
                "api_key": "random.seed",
                "api_call": "random.seed(seed)"
            }
        ],
        "(10, 16)": [
            {
                "api_key": "random.choice",
                "api_call": "random.choice(NUMBERS)"
            }
        ],
        "(11, 18)": [
            {
                "api_key": "np.bincount",
                "api_call": "numpy.bincount(outcomes, minlength=7)"
            }
        ],
        "(14, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(15, 4)": [
            {
                "api_key": "ax.hist",
                "api_call": "matplotlib.pyplot.subplots()[1].hist(outcomes, bins=np.arange(1, 7 + 1.5) - 0.5, edgecolor='black')"
            }
        ],
        "(15, 27)": [
            {
                "api_key": "np.arange",
                "api_call": "numpy.arange(1, 7 + 1.5)"
            }
        ],
        "(16, 4)": [
            {
                "api_key": "ax.set_title",
                "api_call": "matplotlib.pyplot.subplots()[1].set_title('Histogram of Dice Rolls')"
            }
        ],
        "(17, 4)": [
            {
                "api_key": "ax.set_xlabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_xlabel('Dice Value')"
            }
        ],
        "(18, 4)": [
            {
                "api_key": "ax.set_ylabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_ylabel('Frequency')"
            }
        ]
    },
    "BigCodeBench/906": {
        "(8, 4)": [
            {
                "api_key": "os.makedirs",
                "api_call": "os.makedirs(source_dir, exist_ok=True)"
            }
        ],
        "(9, 4)": [
            {
                "api_key": "os.makedirs",
                "api_call": "os.makedirs(target_dir, exist_ok=True)"
            }
        ],
        "(11, 19)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(target_dir, archive_name)"
            }
        ],
        "(16, 30)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(source_dir, file)"
            }
        ],
        "(13, 9)": [
            {
                "api_key": "zipfile.ZipFile",
                "api_call": "zipfile.ZipFile(archive_path, 'w')"
            }
        ],
        "(14, 20)": [
            {
                "api_key": "os.listdir",
                "api_call": "os.listdir(source_dir)"
            }
        ],
        "(15, 15)": [
            {
                "api_key": "re.search",
                "api_call": "re.search('_processed$', os.path.splitext(file)[0])"
            }
        ],
        "(15, 41)": [
            {
                "api_key": "os.path.splitext",
                "api_call": "os.path.splitext(file)"
            }
        ],
        "(16, 16)": [
            {
                "api_key": "archive.write",
                "api_call": "zipfile.ZipFile.write(os.path.join(source_dir, file), arcname=file)"
            }
        ],
        "(17, 16)": [
            {
                "api_key": "shutil.move",
                "api_call": "shutil.move(os.path.join(source_dir, file), target_dir)"
            }
        ]
    },
    "BigCodeBench/914": {
        "(7, 17)": [
            {
                "api_key": "pd.to_datetime",
                "api_call": "pandas.to_datetime(df['date'])"
            }
        ],
        "(8, 32)": [
            {
                "api_key": "pd.Timestamp.timestamp",
                "api_call": "pandas.Timestamp.timestamp"
            }
        ],
        "(15, 12)": [
            {
                "api_key": "LinearRegression",
                "api_call": "sklearn.linear_model.LinearRegression()"
            }
        ],
        "(16, 4)": [
            {
                "api_key": "model.fit",
                "api_call": "sklearn.linear_model.LinearRegression().fit(X, y)"
            }
        ],
        "(19, 19)": [
            {
                "api_key": "np.array([df['date'].max() + i * 24 * 60 * 60 for i in range(1, 8)]).reshape",
                "api_call": "numpy.array([df['date'].max() + i * 24 * 60 * 60 for i in range(1, 8)]).reshape(-1, 1)"
            }
        ],
        "(20, 18)": [
            {
                "api_key": "model.predict",
                "api_call": "sklearn.linear_model.LinearRegression().predict(future_dates)"
            }
        ],
        "(23, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(24, 4)": [
            {
                "api_key": "ax.scatter",
                "api_call": "matplotlib.pyplot.subplots()[1].scatter(df['date'], df['closing_price'], color='black')"
            }
        ],
        "(25, 4)": [
            {
                "api_key": "ax.plot",
                "api_call": "matplotlib.pyplot.subplots()[1].plot(future_dates, pred_prices, color='blue', linewidth=3)"
            }
        ],
        "(27, 11)": [
            {
                "api_key": "pred_prices.tolist",
                "api_call": "sklearn.linear_model.LinearRegression().predict(future_dates).tolist()"
            }
        ]
    },
    "BigCodeBench/915": {
        "(6, 20)": [
            {
                "api_key": "zscore",
                "api_call": "scipy.stats.zscore(df['closing_price'])"
            }
        ],
        "(9, 18)": [
            {
                "api_key": "np.abs",
                "api_call": "numpy.abs(df['Z_score'])"
            }
        ],
        "(12, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots(figsize=(10, 5))"
            }
        ],
        "(13, 4)": [
            {
                "api_key": "ax.plot",
                "api_call": "matplotlib.pyplot.subplots(figsize=(10, 5))[1].plot(df['closing_price'], color='blue', label='Normal')"
            }
        ],
        "(14, 4)": [
            {
                "api_key": "ax.plot",
                "api_call": "matplotlib.pyplot.subplots(figsize=(10, 5))[1].plot(outliers['closing_price'], linestyle='none', marker='X', color='red', markersize=12, label='Outlier')"
            }
        ],
        "(15, 4)": [
            {
                "api_key": "ax.set_xlabel",
                "api_call": "matplotlib.pyplot.subplots(figsize=(10, 5))[1].set_xlabel('Index')"
            }
        ],
        "(16, 4)": [
            {
                "api_key": "ax.set_ylabel",
                "api_call": "matplotlib.pyplot.subplots(figsize=(10, 5))[1].set_ylabel('Closing Price')"
            }
        ],
        "(17, 4)": [
            {
                "api_key": "ax.set_title",
                "api_call": "matplotlib.pyplot.subplots(figsize=(10, 5))[1].set_title('Outliers in Closing Prices')"
            }
        ],
        "(18, 4)": [
            {
                "api_key": "ax.legend",
                "api_call": "matplotlib.pyplot.subplots(figsize=(10, 5))[1].legend(loc='best')"
            }
        ]
    },
    "BigCodeBench/916": {
        "(4, 18)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame"
            }
        ],
        "(5, 16)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots(1, 2, figsize=(12, 6))"
            }
        ],
        "(7, 17)": [
            {
                "api_key": "sns.boxplot",
                "api_call": "seaborn.boxplot(x=df['closing_price'], ax=axes[0])"
            }
        ],
        "(8, 4)": [
            {
                "api_key": "boxplot_ax.set_title",
                "api_call": "seaborn.boxplot(x=df['closing_price'], ax=axes[0]).set_title('Box Plot of Closing Prices')"
            }
        ],
        "(10, 18)": [
            {
                "api_key": "sns.histplot",
                "api_call": "seaborn.histplot(df['closing_price'], kde=True, ax=axes[1])"
            }
        ],
        "(11, 4)": [
            {
                "api_key": "histplot_ax.set_title",
                "api_call": "seaborn.histplot(df['closing_price'], kde=True, ax=axes[1]).set_title('Histogram of Closing Prices')"
            }
        ],
        "(13, 4)": [
            {
                "api_key": "plt.tight_layout",
                "api_call": "matplotlib.pyplot.tight_layout()"
            }
        ],
        "(14, 4)": [
            {
                "api_key": "plt.close",
                "api_call": "matplotlib.pyplot.close(fig)"
            }
        ]
    },
    "BigCodeBench/917": {
        "(6, 18)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame"
            }
        ],
        "(8, 12)": [
            {
                "api_key": "ARIMA",
                "api_call": "statsmodels.tsa.arima.model.ARIMA(df['closing_price'], order=(5, 1, 0))"
            }
        ],
        "(9, 16)": [
            {
                "api_key": "model.fit",
                "api_call": "statsmodels.tsa.arima.model.ARIMA(df['closing_price'], order=(5, 1, 0)).fit()"
            }
        ],
        "(12, 15)": [
            {
                "api_key": "model_fit.forecast",
                "api_call": "statsmodels.tsa.arima.model.ARIMA(df['closing_price'], order=(5, 1, 0)).fit().forecast(steps=7)"
            }
        ],
        "(14, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(15, 4)": [
            {
                "api_key": "ax.plot",
                "api_call": "matplotlib.pyplot.subplots()[1].plot(df['date'], df['closing_price'], label='Historical Closing Prices')"
            }
        ],
        "(17, 4)": [
            {
                "api_key": "ax.plot",
                "api_call": "matplotlib.pyplot.subplots()[1].plot(forecast_dates, forecast, label='Forecasted Closing Prices')"
            }
        ],
        "(16, 21)": [
            {
                "api_key": "pd.date_range",
                "api_call": "pandas.date_range(start=df['date'].iloc[-1] + pd.Timedelta(days=1), periods=7)"
            }
        ],
        "(16, 63)": [
            {
                "api_key": "pd.Timedelta",
                "api_call": "pandas.Timedelta(days=1)"
            }
        ],
        "(18, 4)": [
            {
                "api_key": "ax.legend",
                "api_call": "matplotlib.pyplot.subplots()[1].legend()"
            }
        ],
        "(20, 11)": [
            {
                "api_key": "forecast.tolist",
                "api_call": "statsmodels.tsa.arima.model.ARIMA(df['closing_price'], order=(5, 1, 0)).fit().forecast(steps=7).tolist()"
            }
        ],
        "(6, 35)": [
            {
                "api_key": "Tuple",
                "api_call": "typing.Tuple"
            }
        ],
        "(6, 41)": [
            {
                "api_key": "List",
                "api_call": "typing.List"
            }
        ]
    },
    "BigCodeBench/928": {
        "(5, 16)": [
            {
                "api_key": "string.ascii_lowercase",
                "api_call": "string.ascii_lowercase"
            }
        ],
        "(7, 40)": [
            {
                "api_key": "itertools.permutations",
                "api_call": "itertools.permutations(ALPHABETS, 2)"
            }
        ],
        "(13, 19)": [
            {
                "api_key": "Counter",
                "api_call": "collections.Counter(word_combinations)"
            }
        ],
        "(16, 17)": [
            {
                "api_key": "word_counter.get",
                "api_call": "collections.Counter(word_combinations).get(key, 0)"
            }
        ]
    },
    "BigCodeBench/942": {
        "(10, 4)": [
            {
                "api_key": "np.random.seed",
                "api_call": "numpy.random.seed(0)"
            }
        ],
        "(11, 17)": [
            {
                "api_key": "pd.date_range",
                "api_call": "pandas.date_range(start=start_date, periods=periods, freq=freq)"
            }
        ],
        "(16, 20)": [
            {
                "api_key": "np.random.randint",
                "api_call": "numpy.random.randint(low=100, high=500)"
            }
        ],
        "(19, 15)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(report_data, columns=['Date', 'Category', 'Sales'])"
            }
        ],
        "(21, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots(figsize=(12, 8))"
            }
        ],
        "(22, 4)": [
            {
                "api_key": "sales_df.pivot",
                "api_call": "pandas.DataFrame(report_data, columns=['Date', 'Category', 'Sales']).pivot(index='Date', columns='Category', values='Sales')"
            }
        ],
        "(23, 4)": [
            {
                "api_key": "ax.set_title",
                "api_call": "matplotlib.pyplot.subplots(figsize=(12, 8))[1].set_title('Category-wise Sales Trends')"
            }
        ],
        "(24, 4)": [
            {
                "api_key": "ax.grid",
                "api_call": "matplotlib.pyplot.subplots(figsize=(12, 8))[1].grid(True)"
            }
        ]
    },
    "BigCodeBench/945": {
        "(5, 17)": [
            {
                "api_key": "np.random.randint",
                "api_call": "numpy.random.randint(low=100, high=500, size=periods)"
            }
        ],
        "(7, 17)": [
            {
                "api_key": "pd.date_range",
                "api_call": "pandas.date_range(start=start_date, freq=freq, periods=periods)"
            }
        ],
        "(8, 15)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame({'Date': date_range, 'Sales': sales_data})"
            }
        ],
        "(10, 8)": [
            {
                "api_key": "np.arange(len(sales_df)).reshape",
                "api_call": "numpy.arange(len(sales_df)).reshape(-1, 1)"
            }
        ],
        "(16, 19)": [
            {
                "api_key": "np.arange(len(sales_df), 2 * len(sales_df)).reshape",
                "api_call": "numpy.arange(len(sales_df), 2 * len(sales_df)).reshape(-1, 1)"
            }
        ],
        "(13, 12)": [
            {
                "api_key": "LinearRegression",
                "api_call": "sklearn.linear_model.LinearRegression()"
            }
        ],
        "(14, 4)": [
            {
                "api_key": "model.fit",
                "api_call": "sklearn.linear_model.LinearRegression().fit(X, y)"
            }
        ],
        "(17, 19)": [
            {
                "api_key": "model.predict",
                "api_call": "sklearn.linear_model.LinearRegression().predict(future_dates)"
            }
        ]
    },
    "BigCodeBench/952": {
        "(11, 8)": [
            {
                "api_key": "random.seed",
                "api_call": "random.seed(seed)"
            }
        ],
        "(19, 20)": [
            {
                "api_key": "random.choice(task_list).replace",
                "api_call": "random.choice(task_list).replace(' ', '_')"
            }
        ],
        "(20, 19)": [
            {
                "api_key": "random.choice",
                "api_call": "random.choice(employees)"
            }
        ],
        "(21, 19)": [
            {
                "api_key": "datetime.today().strftime",
                "api_call": "datetime.datetime.today().strftime('%Y-%m-%d')"
            }
        ],
        "(24, 20)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(assignment_data, columns=['Task Name', 'Assigned To', 'Due Date'])"
            }
        ]
    },
    "BigCodeBench/955": {
        "(11, 15)": [
            {
                "api_key": "re.sub",
                "api_call": "re.sub(word, word.replace(' ', '_'), text, flags=re.IGNORECASE)"
            }
        ],
        "(11, 64)": [
            {
                "api_key": "re.IGNORECASE",
                "api_call": "re.IGNORECASE"
            }
        ],
        "(13, 18)": [
            {
                "api_key": "Counter",
                "api_call": "collections.Counter(text.split())"
            }
        ],
        "(13, 26)": [
            {
                "api_key": "text.split",
                "api_call": "re.sub(word, word.replace(' ', '_'), text, flags=re.IGNORECASE).split()"
            }
        ],
        "(15, 30)": [
            {
                "api_key": "word_counts.items",
                "api_call": "collections.Counter(text.split()).items()"
            }
        ],
        "(16, 14)": [
            {
                "api_key": "np.arange",
                "api_call": "numpy.arange(len(word_counts))"
            }
        ],
        "(18, 14)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(19, 4)": [
            {
                "api_key": "ax.bar",
                "api_call": "matplotlib.pyplot.subplots()[1].bar(indices, frequencies)"
            }
        ],
        "(20, 4)": [
            {
                "api_key": "ax.set_xticks",
                "api_call": "matplotlib.pyplot.subplots()[1].set_xticks(indices)"
            }
        ],
        "(21, 4)": [
            {
                "api_key": "ax.set_xticklabels",
                "api_call": "matplotlib.pyplot.subplots()[1].set_xticklabels(words)"
            }
        ]
    },
    "BigCodeBench/963": {
        "(6, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(source_directory)"
            }
        ],
        "(8, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(target_directory)"
            }
        ],
        "(9, 8)": [
            {
                "api_key": "os.makedirs",
                "api_call": "os.makedirs(target_directory, exist_ok=True)"
            }
        ],
        "(11, 15)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(target_directory, f'{zip_name.strip()}.zip')"
            }
        ],
        "(11, 49)": [
            {
                "api_key": "zip_name.strip",
                "api_call": "zip_name.strip()"
            }
        ],
        "(12, 9)": [
            {
                "api_key": "zipfile.ZipFile",
                "api_call": "zipfile.ZipFile(zip_path, 'w')"
            }
        ],
        "(14, 24)": [
            {
                "api_key": "glob.glob",
                "api_call": "glob.glob(f'{source_directory}/**/*{extension}', recursive=True)"
            }
        ],
        "(17, 16)": [
            {
                "api_key": "zipf.write",
                "api_call": "zipfile.ZipFile.write(file, arcname=Path(file).name)"
            }
        ],
        "(17, 41)": [
            {
                "api_key": "Path",
                "api_call": "pathlib.Path(file)"
            }
        ],
        "(19, 11)": [
            {
                "api_key": "os.path.abspath",
                "api_call": "os.path.abspath(zip_path)"
            }
        ]
    },
    "BigCodeBench/964": {
        "(9, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(source_directory)"
            }
        ],
        "(11, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(target_directory)"
            }
        ],
        "(12, 8)": [
            {
                "api_key": "os.makedirs",
                "api_call": "os.makedirs(target_directory, exist_ok=True)"
            }
        ],
        "(14, 29)": [
            {
                "api_key": "os.walk",
                "api_call": "os.walk(source_directory)"
            }
        ],
        "(16, 24)": [
            {
                "api_key": "Path",
                "api_call": "pathlib.Path(file)"
            }
        ],
        "(18, 27)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(root, file)"
            }
        ],
        "(19, 34)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(target_directory, Path(file).stem + '.csv')"
            }
        ],
        "(23, 25)": [
            {
                "api_key": "pd.read_csv",
                "api_call": "pandas.read_csv(filepath)"
            }
        ],
        "(25, 25)": [
            {
                "api_key": "pd.read_excel",
                "api_call": "pandas.read_excel(filepath, engine='openpyxl')"
            }
        ],
        "(27, 26)": [
            {
                "api_key": "docx.Document",
                "api_call": "docx.Document(filepath)"
            }
        ],
        "(28, 44)": [
            {
                "api_key": "doc.paragraphs",
                "api_call": "docx.Document(filepath).paragraphs"
            }
        ],
        "(29, 25)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame({'Text': data})"
            }
        ],
        "(35, 16)": [
            {
                "api_key": "df.to_csv",
                "api_call": "pandas.DataFrame({'Text': data}).to_csv(target_filepath, index=False)"
            }
        ]
    },
    "BigCodeBench/969": {
        "(4, 18)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame"
            }
        ],
        "(12, 21)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(scaler.fit_transform(df_cumsum), columns=df.columns)"
            }
        ],
        "(5, 32)": [
            {
                "api_key": "np.number",
                "api_call": "numpy.number"
            }
        ],
        "(11, 13)": [
            {
                "api_key": "MinMaxScaler",
                "api_call": "sklearn.preprocessing.MinMaxScaler()"
            }
        ],
        "(12, 34)": [
            {
                "api_key": "scaler.fit_transform",
                "api_call": "sklearn.preprocessing.MinMaxScaler().fit_transform(df_cumsum)"
            }
        ]
    },
    "BigCodeBench/971": {
        "(5, 11)": [
            {
                "api_key": "Path",
                "api_call": "pathlib.Path(directory_path)"
            }
        ],
        "(9, 17)": [
            {
                "api_key": "os.scandir",
                "api_call": "os.scandir(directory_path)"
            }
        ],
        "(11, 24)": [
            {
                "api_key": "os.stat",
                "api_call": "os.stat(entry.path)"
            }
        ],
        "(12, 24)": [
            {
                "api_key": "file_info.st_size",
                "api_call": "os.stat(entry.path).st_size"
            }
        ],
        "(13, 28)": [
            {
                "api_key": "datetime.fromtimestamp(file_info.st_ctime, timezone.utc).isoformat",
                "api_call": "datetime.datetime.fromtimestamp(file_info.st_ctime, timezone.utc).isoformat()"
            }
        ],
        "(16, 32)": [
            {
                "api_key": "datetime.fromtimestamp(file_info.st_mtime, timezone.utc).isoformat",
                "api_call": "datetime.datetime.fromtimestamp(file_info.st_mtime, timezone.utc).isoformat()"
            }
        ],
        "(14, 16)": [
            {
                "api_key": "file_info.st_ctime",
                "api_call": "os.stat(entry.path).st_ctime"
            }
        ],
        "(14, 36)": [
            {
                "api_key": "timezone.utc",
                "api_call": "datetime.timezone.utc"
            }
        ],
        "(17, 16)": [
            {
                "api_key": "file_info.st_mtime",
                "api_call": "os.stat(entry.path).st_mtime"
            }
        ]
    },
    "BigCodeBench/985": {
        "(6, 4)": [
            {
                "api_key": "os.makedirs",
                "api_call": "os.makedirs(output_dir, exist_ok=True)"
            }
        ],
        "(7, 16)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(output_dir, file_name)"
            }
        ],
        "(10, 15)": [
            {
                "api_key": "json.loads",
                "api_call": "json.loads(json_data)"
            }
        ],
        "(11, 11)": [
            {
                "api_key": "json.JSONDecodeError",
                "api_call": "json.JSONDecodeError"
            }
        ],
        "(14, 24)": [
            {
                "api_key": "data.get",
                "api_call": "json.loads(json_data).get('Countries')"
            }
        ],
        "(19, 31)": [
            {
                "api_key": "country_data_dict.items",
                "api_call": "json.loads(json_data).get('Countries').items()"
            }
        ],
        "(24, 45)": [
            {
                "api_key": "math.floor",
                "api_call": "math.floor(population)"
            }
        ],
        "(35, 9)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(country_data, columns=['Country', 'Population'])"
            }
        ],
        "(38, 8)": [
            {
                "api_key": "df.to_csv",
                "api_call": "pandas.DataFrame(country_data, columns=['Country', 'Population']).to_csv(file_path, index=False)"
            }
        ]
    },
    "BigCodeBench/988": {
        "(8, 44)": [
            {
                "api_key": "re.search",
                "api_call": "re.search('\\\\W', x.stem)"
            }
        ],
        "(9, 38)": [
            {
                "api_key": "re.search",
                "api_call": "re.search('\\\\d', x.name)"
            }
        ],
        "(15, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(dir_path)"
            }
        ],
        "(15, 43)": [
            {
                "api_key": "os.path.isdir",
                "api_call": "os.path.isdir(dir_path)"
            }
        ],
        "(21, 16)": [
            {
                "api_key": "os.listdir",
                "api_call": "os.listdir(dir_path)"
            }
        ],
        "(22, 20)": [
            {
                "api_key": "Path",
                "api_call": "pathlib.Path(os.path.join(dir_path, item))"
            }
        ],
        "(22, 25)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(dir_path, item)"
            }
        ]
    },
    "BigCodeBench/990": {
        "(9, 18)": [
            {
                "api_key": "bytes.fromhex(hex_string).decode",
                "api_call": "bytes.fromhex(hex_string).decode('utf-8')"
            }
        ],
        "(12, 23)": [
            {
                "api_key": "binascii.hexlify(decoded_str.encode()).decode",
                "api_call": "binascii.hexlify(decoded_str.encode()).decode()"
            }
        ],
        "(12, 40)": [
            {
                "api_key": "decoded_str.encode",
                "api_call": "bytes.fromhex(hex_string).decode('utf-8').encode()"
            }
        ],
        "(18, 25)": [
            {
                "api_key": "decoded_str.encode('utf-8').decode",
                "api_call": "bytes.fromhex(hex_string).decode('utf-8').encode('utf-8').decode()"
            }
        ],
        "(21, 26)": [
            {
                "api_key": "decoded_str.encode('utf-16').decode",
                "api_call": "bytes.fromhex(hex_string).decode('utf-8').encode('utf-16').decode('utf-16')"
            }
        ],
        "(24, 26)": [
            {
                "api_key": "decoded_str.encode('utf-32').decode",
                "api_call": "bytes.fromhex(hex_string).decode('utf-8').encode('utf-32').decode('utf-32')"
            }
        ],
        "(28, 29)": [
            {
                "api_key": "decoded_str.encode('ascii').decode",
                "api_call": "bytes.fromhex(hex_string).decode('utf-8').encode('ascii').decode()"
            }
        ],
        "(15, 26)": [
            {
                "api_key": "base64.b64encode(decoded_str.encode()).decode",
                "api_call": "base64.b64encode(decoded_str.encode()).decode()"
            }
        ],
        "(33, 23)": [
            {
                "api_key": "urllib.parse.quote",
                "api_call": "urllib.parse.quote(decoded_str)"
            }
        ],
        "(36, 25)": [
            {
                "api_key": "codecs.encode",
                "api_call": "codecs.encode(decoded_str, 'rot_13')"
            }
        ]
    },
    "BigCodeBench/998": {
        "(10, 8)": [
            {
                "api_key": "urllib.request.urlretrieve",
                "api_call": "urllib.request.urlretrieve(url, TARGET_TAR_FILE)"
            }
        ],
        "(15, 15)": [
            {
                "api_key": "hashlib.md5",
                "api_call": "hashlib.md5()"
            }
        ],
        "(18, 12)": [
            {
                "api_key": "md5_hash.update",
                "api_call": "hashlib.md5().update(byte_block)"
            }
        ],
        "(19, 7)": [
            {
                "api_key": "md5_hash.hexdigest",
                "api_call": "hashlib.md5().hexdigest()"
            }
        ],
        "(20, 8)": [
            {
                "api_key": "os.remove",
                "api_call": "os.remove(TARGET_TAR_FILE)"
            }
        ],
        "(23, 9)": [
            {
                "api_key": "tarfile.open",
                "api_call": "tarfile.open(TARGET_TAR_FILE, 'r:gz')"
            }
        ],
        "(24, 8)": [
            {
                "api_key": "tar_ref.extractall",
                "api_call": "tarfile.open.extractall()"
            }
        ]
    },
    "BigCodeBench/999": {
        "(6, 4)": [
            {
                "api_key": "urllib.request.urlretrieve",
                "api_call": "urllib.request.urlretrieve(url, csv_file_path)"
            }
        ],
        "(9, 17)": [
            {
                "api_key": "csv.DictReader",
                "api_call": "csv.DictReader(f)"
            }
        ],
        "(10, 30)": [
            {
                "api_key": "reader.fieldnames",
                "api_call": "csv.DictReader(f).fieldnames"
            }
        ],
        "(11, 12)": [
            {
                "api_key": "os.remove",
                "api_call": "os.remove(csv_file_path)"
            }
        ],
        "(19, 11)": [
            {
                "api_key": "collections.Counter",
                "api_call": "collections.Counter(values)"
            }
        ]
    },
    "BigCodeBench/1003": {
        "(6, 13)": [
            {
                "api_key": "urllib.request.urlopen",
                "api_call": "urllib.request.urlopen(url)"
            }
        ],
        "(7, 23)": [
            {
                "api_key": "response.read",
                "api_call": "urllib.request.urlopen.read()"
            }
        ],
        "(12, 19)": [
            {
                "api_key": "etree.XML",
                "api_call": "lxml.etree.XML(xml_data)"
            }
        ],
        "(13, 11)": [
            {
                "api_key": "etree.XMLSyntaxError",
                "api_call": "lxml.etree.XMLSyntaxError"
            }
        ],
        "(17, 16)": [
            {
                "api_key": "xml_tree.findall",
                "api_call": "lxml.etree.XML(xml_data).findall('.//item')"
            }
        ],
        "(24, 11)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(data)"
            }
        ]
    },
    "BigCodeBench/1004": {
        "(6, 9)": [
            {
                "api_key": "urllib.request.urlopen",
                "api_call": "urllib.request.urlopen(url)"
            }
        ],
        "(7, 15)": [
            {
                "api_key": "response.read().decode",
                "api_call": "urllib.request.urlopen.read().decode()"
            }
        ],
        "(8, 16)": [
            {
                "api_key": "re.findall",
                "api_call": "re.findall('\\\\b\\\\w+\\\\b', text)"
            }
        ],
        "(9, 20)": [
            {
                "api_key": "Counter",
                "api_call": "collections.Counter(words)"
            }
        ],
        "(10, 20)": [
            {
                "api_key": "word_freq.most_common",
                "api_call": "collections.Counter(words).most_common(10)"
            }
        ],
        "(12, 16)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(13, 8)": [
            {
                "api_key": "ax.bar",
                "api_call": "matplotlib.pyplot.subplots()[1].bar([word[0] for word in top_words], [word[1] for word in top_words])"
            }
        ],
        "(14, 8)": [
            {
                "api_key": "ax.set_title",
                "api_call": "matplotlib.pyplot.subplots()[1].set_title('Top 10 Most Common Words')"
            }
        ],
        "(15, 8)": [
            {
                "api_key": "ax.set_xlabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_xlabel('Words')"
            }
        ],
        "(16, 8)": [
            {
                "api_key": "ax.set_ylabel",
                "api_call": "matplotlib.pyplot.subplots()[1].set_ylabel('Frequency')"
            }
        ]
    },
    "BigCodeBench/1006": {
        "(5, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(download_path)"
            }
        ],
        "(23, 15)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(extract_path)"
            }
        ],
        "(6, 8)": [
            {
                "api_key": "os.makedirs",
                "api_call": "os.makedirs(download_path)"
            }
        ],
        "(24, 12)": [
            {
                "api_key": "os.makedirs",
                "api_call": "os.makedirs(extract_path)"
            }
        ],
        "(9, 19)": [
            {
                "api_key": "requests.get",
                "api_call": "requests.get(url, timeout=5)"
            }
        ],
        "(10, 8)": [
            {
                "api_key": "response.raise_for_status",
                "api_call": "requests.get(url, timeout=5).raise_for_status()"
            }
        ],
        "(13, 36)": [
            {
                "api_key": "response.headers.get",
                "api_call": "requests.get(url, timeout=5).headers.get('Content-Type', '')"
            }
        ],
        "(16, 20)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(download_path, os.path.basename(url))"
            }
        ],
        "(16, 48)": [
            {
                "api_key": "os.path.basename",
                "api_call": "os.path.basename(url)"
            }
        ],
        "(19, 20)": [
            {
                "api_key": "response.content",
                "api_call": "requests.get(url, timeout=5).content"
            }
        ],
        "(21, 23)": [
            {
                "api_key": "os.path.splitext",
                "api_call": "os.path.splitext(file_name)"
            }
        ],
        "(26, 13)": [
            {
                "api_key": "ZipFile",
                "api_call": "zipfile.ZipFile(file_name, 'r')"
            }
        ],
        "(27, 12)": [
            {
                "api_key": "zip_ref.extractall",
                "api_call": "zipfile.ZipFile.extractall(extract_path)"
            }
        ],
        "(31, 11)": [
            {
                "api_key": "requests.RequestException",
                "api_call": "requests.RequestException"
            }
        ]
    },
    "BigCodeBench/1008": {
        "(7, 19)": [
            {
                "api_key": "requests.get",
                "api_call": "requests.get(url, timeout=5)"
            }
        ],
        "(8, 8)": [
            {
                "api_key": "response.raise_for_status",
                "api_call": "requests.get(url, timeout=5).raise_for_status()"
            }
        ],
        "(9, 11)": [
            {
                "api_key": "requests.exceptions.HTTPError",
                "api_call": "requests.exceptions.HTTPError"
            }
        ],
        "(12, 11)": [
            {
                "api_key": "BeautifulSoup",
                "api_call": "bs4.BeautifulSoup(response.text, 'html.parser')"
            }
        ],
        "(12, 25)": [
            {
                "api_key": "response.text",
                "api_call": "requests.get(url, timeout=5).text"
            }
        ],
        "(13, 12)": [
            {
                "api_key": "soup.find",
                "api_call": "bs4.BeautifulSoup(response.text, 'html.parser').find('table', {'id': table_id})"
            }
        ],
        "(19, 11)": [
            {
                "api_key": "table.find_all",
                "api_call": "bs4.BeautifulSoup(response.text, 'html.parser').find('table', {'id': table_id}).find_all('tr')"
            }
        ],
        "(20, 15)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame()"
            }
        ],
        "(22, 9)": [
            {
                "api_key": "pd.read_html",
                "api_call": "pandas.read_html(StringIO(str(table)))"
            }
        ],
        "(22, 22)": [
            {
                "api_key": "StringIO",
                "api_call": "io.StringIO(str(table))"
            }
        ]
    },
    "BigCodeBench/1012": {
        "(5, 15)": [
            {
                "api_key": "Path",
                "api_call": "pathlib.Path('downloads')"
            }
        ],
        "(6, 10)": [
            {
                "api_key": "Path",
                "api_call": "pathlib.Path('unzipped_files')"
            }
        ],
        "(10, 19)": [
            {
                "api_key": "requests.get",
                "api_call": "requests.get(url, stream=True, timeout=5)"
            }
        ],
        "(11, 11)": [
            {
                "api_key": "response.status_code",
                "api_call": "requests.get(url, stream=True, timeout=5).status_code"
            }
        ],
        "(16, 28)": [
            {
                "api_key": "response.iter_content",
                "api_call": "requests.get(url, stream=True, timeout=5).iter_content()"
            }
        ],
        "(21, 12)": [
            {
                "api_key": "zip_dir.mkdir",
                "api_call": "zip_dir.mkdir(parents=True, exist_ok=True)"
            }
        ],
        "(23, 17)": [
            {
                "api_key": "zipfile.ZipFile",
                "api_call": "zipfile.ZipFile(filepath, 'r')"
            }
        ],
        "(24, 16)": [
            {
                "api_key": "zip_ref.extractall",
                "api_call": "zipfile.ZipFile.extractall(zip_dir)"
            }
        ],
        "(27, 38)": [
            {
                "api_key": "zip_dir.iterdir",
                "api_call": "zip_dir.iterdir()"
            }
        ],
        "(33, 11)": [
            {
                "api_key": "requests.exceptions.RequestException",
                "api_call": "requests.exceptions.RequestException"
            }
        ],
        "(35, 11)": [
            {
                "api_key": "zipfile.BadZipFile",
                "api_call": "zipfile.BadZipFile"
            }
        ]
    },
    "BigCodeBench/1013": {
        "(10, 15)": [
            {
                "api_key": "urljoin",
                "api_call": "urllib.parse.urljoin(base_url, url)"
            }
        ],
        "(15, 13)": [
            {
                "api_key": "urljoin",
                "api_call": "urllib.parse.urljoin(base_url, a['href'])"
            }
        ],
        "(11, 15)": [
            {
                "api_key": "requests.get",
                "api_call": "requests.get(full_url)"
            }
        ],
        "(12, 11)": [
            {
                "api_key": "BeautifulSoup",
                "api_call": "bs4.BeautifulSoup(response.text, 'html.parser')"
            }
        ],
        "(12, 25)": [
            {
                "api_key": "response.text",
                "api_call": "requests.get(full_url).text"
            }
        ],
        "(15, 51)": [
            {
                "api_key": "soup.find_all",
                "api_call": "bs4.BeautifulSoup(response.text, 'html.parser').find_all('a', href=True)"
            }
        ],
        "(18, 17)": [
            {
                "api_key": "csv.writer",
                "api_call": "csv.writer(csvfile)"
            }
        ],
        "(20, 12)": [
            {
                "api_key": "writer.writerow",
                "api_call": "csv.writer(csvfile).writerow([link])"
            }
        ]
    },
    "BigCodeBench/1015": {
        "(11, 23)": [
            {
                "api_key": "requests.get",
                "api_call": "requests.get(webpage_url, timeout=5)"
            }
        ],
        "(12, 12)": [
            {
                "api_key": "response.raise_for_status",
                "api_call": "requests.get(webpage_url, timeout=5).raise_for_status()"
            }
        ],
        "(13, 22)": [
            {
                "api_key": "response.content",
                "api_call": "requests.get(webpage_url, timeout=5).content"
            }
        ],
        "(15, 15)": [
            {
                "api_key": "html.fromstring",
                "api_call": "lxml.html.fromstring(content)"
            }
        ],
        "(16, 15)": [
            {
                "api_key": "tree.xpath",
                "api_call": "lxml.html.fromstring(content).xpath('//tr')"
            }
        ],
        "(22, 13)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(data)"
            }
        ],
        "(23, 11)": [
            {
                "api_key": "df.empty",
                "api_call": "pandas.DataFrame(data).empty"
            }
        ],
        "(29, 19)": [
            {
                "api_key": "sqlite3.connect",
                "api_call": "sqlite3.connect(database_name)"
            }
        ],
        "(30, 12)": [
            {
                "api_key": "df.to_sql",
                "api_call": "pandas.DataFrame(data).to_sql('my_table', conn, if_exists='replace', index=False)"
            }
        ],
        "(33, 16)": [
            {
                "api_key": "conn.close",
                "api_call": "sqlite3.connect(database_name).close()"
            }
        ],
        "(37, 11)": [
            {
                "api_key": "requests.RequestException",
                "api_call": "requests.RequestException"
            }
        ],
        "(38, 14)": [
            {
                "api_key": "requests.RequestException",
                "api_call": "requests.RequestException(f'Error accessing URL {webpage_url}: {e}')"
            }
        ],
        "(39, 11)": [
            {
                "api_key": "sqlite3.DatabaseError",
                "api_call": "sqlite3.DatabaseError"
            }
        ],
        "(40, 14)": [
            {
                "api_key": "sqlite3.DatabaseError",
                "api_call": "sqlite3.DatabaseError(f'Database error with {database_name}: {e}')"
            }
        ]
    },
    "BigCodeBench/1019": {
        "(6, 9)": [
            {
                "api_key": "Image.open",
                "api_call": "PIL.Image.open(filename)"
            }
        ],
        "(8, 29)": [
            {
                "api_key": "pytesseract.image_to_string",
                "api_call": "pytesseract.image_to_string(image)"
            }
        ],
        "(11, 27)": [
            {
                "api_key": "extracted_text.encode",
                "api_call": "pytesseract.image_to_string(image).encode(from_encoding)"
            }
        ],
        "(18, 18)": [
            {
                "api_key": "image.info.get",
                "api_call": "PIL.Image.open.info.get('comment', '')"
            }
        ],
        "(22, 20)": [
            {
                "api_key": "codecs.decode",
                "api_call": "codecs.decode(comment, from_encoding)"
            }
        ]
    },
    "BigCodeBench/1020": {
        "(7, 15)": [
            {
                "api_key": "requests.get",
                "api_call": "requests.get(url, timeout=5)"
            }
        ],
        "(8, 14)": [
            {
                "api_key": "response.content",
                "api_call": "requests.get(url, timeout=5).content"
            }
        ],
        "(11, 28)": [
            {
                "api_key": "chardet.detect",
                "api_call": "chardet.detect(content)"
            }
        ],
        "(25, 11)": [
            {
                "api_key": "json.loads",
                "api_call": "json.loads(content)"
            }
        ]
    },
    "BigCodeBench/1022": {
        "(6, 11)": [
            {
                "api_key": "os.path.isfile",
                "api_call": "os.path.isfile(csv_file_path)"
            }
        ],
        "(10, 13)": [
            {
                "api_key": "pd.read_csv",
                "api_call": "pandas.read_csv(csv_file_path)"
            }
        ],
        "(12, 15)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame()"
            }
        ],
        "(14, 26)": [
            {
                "api_key": "df.columns",
                "api_call": "pandas.read_csv(csv_file_path).columns"
            }
        ],
        "(17, 22)": [
            {
                "api_key": "pd.to_datetime",
                "api_call": "pandas.to_datetime(df[column_name], format=date_format)"
            }
        ],
        "(18, 19)": [
            {
                "api_key": "datetime.now().date",
                "api_call": "datetime.datetime.now().date()"
            }
        ],
        "(20, 9)": [
            {
                "api_key": "df.sort_values",
                "api_call": "pandas.read_csv(csv_file_path).sort_values(by=column_name).sort_values(by=column_name)"
            }
        ]
    },
    "BigCodeBench/1039": {
        "(5, 14)": [
            {
                "api_key": "ssl.SSLContext",
                "api_call": "ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)"
            }
        ],
        "(5, 29)": [
            {
                "api_key": "ssl.PROTOCOL_TLS_SERVER",
                "api_call": "ssl.PROTOCOL_TLS_SERVER"
            }
        ],
        "(6, 4)": [
            {
                "api_key": "context.load_cert_chain",
                "api_call": "ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER).load_cert_chain(certfile=cert_file, keyfile=key_file)"
            }
        ],
        "(9, 24)": [
            {
                "api_key": "context.wrap_socket",
                "api_call": "ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER).wrap_socket(client_socket, server_side=True)"
            }
        ],
        "(10, 18)": [
            {
                "api_key": "secure_socket.recv(buffer_size).decode",
                "api_call": "ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER).wrap_socket(client_socket, server_side=True).recv(buffer_size).decode('utf-8')"
            }
        ],
        "(12, 11)": [
            {
                "api_key": "os.path.exists",
                "api_call": "os.path.exists(request)"
            }
        ],
        "(14, 30)": [
            {
                "api_key": "hashlib.sha256",
                "api_call": "hashlib.sha256()"
            }
        ],
        "(16, 20)": [
            {
                "api_key": "sha256_hash.update",
                "api_call": "hashlib.sha256().update(byte_block)"
            }
        ],
        "(17, 27)": [
            {
                "api_key": "sha256_hash.hexdigest",
                "api_call": "hashlib.sha256().hexdigest()"
            }
        ],
        "(21, 8)": [
            {
                "api_key": "secure_socket.send",
                "api_call": "ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER).wrap_socket(client_socket, server_side=True).send(response.encode('utf-8'))"
            }
        ],
        "(21, 27)": [
            {
                "api_key": "response.encode",
                "api_call": "hashlib.sha256().hexdigest().encode('utf-8')"
            }
        ],
        "(26, 12)": [
            {
                "api_key": "secure_socket.close",
                "api_call": "ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER).wrap_socket(client_socket, server_side=True).close()"
            }
        ]
    },
    "BigCodeBench/1040": {
        "(8, 13)": [
            {
                "api_key": "socket.socket",
                "api_call": "socket.socket(socket.AF_INET, socket.SOCK_STREAM)"
            }
        ],
        "(8, 27)": [
            {
                "api_key": "socket.AF_INET",
                "api_call": "socket.AF_INET"
            }
        ],
        "(8, 43)": [
            {
                "api_key": "socket.SOCK_STREAM",
                "api_call": "socket.SOCK_STREAM"
            }
        ],
        "(9, 4)": [
            {
                "api_key": "server.setblocking",
                "api_call": "socket.socket(socket.AF_INET, socket.SOCK_STREAM).setblocking(0)"
            }
        ],
        "(10, 4)": [
            {
                "api_key": "server.bind",
                "api_call": "socket.socket(socket.AF_INET, socket.SOCK_STREAM).bind((server_address, server_port))"
            }
        ],
        "(11, 4)": [
            {
                "api_key": "server.listen",
                "api_call": "socket.socket(socket.AF_INET, socket.SOCK_STREAM).listen(5)"
            }
        ],
        "(15, 15)": [
            {
                "api_key": "datetime.now",
                "api_call": "datetime.datetime.now()"
            }
        ],
        "(15, 32)": [
            {
                "api_key": "timedelta",
                "api_call": "datetime.timedelta(seconds=run_duration)"
            }
        ],
        "(19, 36)": [
            {
                "api_key": "select.select",
                "api_call": "select.select(inputs, outputs, inputs, 1)"
            }
        ],
        "(25, 49)": [
            {
                "api_key": "queue.Queue",
                "api_call": "queue.Queue()"
            }
        ],
        "(45, 23)": [
            {
                "api_key": "queue.Empty",
                "api_call": "queue.Empty"
            }
        ],
        "(51, 8)": [
            {
                "api_key": "server.close",
                "api_call": "socket.socket(socket.AF_INET, socket.SOCK_STREAM).close()"
            }
        ]
    },
    "BigCodeBench/1042": {
        "(13, 12)": [
            {
                "api_key": "EmailMessage",
                "api_call": "email.message.EmailMessage()"
            }
        ],
        "(14, 20)": [
            {
                "api_key": "getpass.getpass",
                "api_call": "getpass.getpass('Email: ')"
            }
        ],
        "(15, 18)": [
            {
                "api_key": "getpass.getpass",
                "api_call": "getpass.getpass('Recipient: ')"
            }
        ],
        "(21, 34)": [
            {
                "api_key": "getpass.getpass",
                "api_call": "getpass.getpass('Password: ')"
            }
        ],
        "(17, 4)": [
            {
                "api_key": "email.set_content",
                "api_call": "email.message.EmailMessage().set_content(request)"
            }
        ],
        "(19, 9)": [
            {
                "api_key": "smtplib.SMTP",
                "api_call": "smtplib.SMTP(SMTP_SERVER, SMTP_PORT)"
            }
        ],
        "(20, 8)": [
            {
                "api_key": "smtp.starttls",
                "api_call": "smtplib.SMTP.starttls()"
            }
        ],
        "(21, 8)": [
            {
                "api_key": "smtp.login",
                "api_call": "smtplib.SMTP.login(email['From'], getpass.getpass('Password: '))"
            }
        ],
        "(22, 8)": [
            {
                "api_key": "smtp.send_message",
                "api_call": "smtplib.SMTP.send_message(email)"
            }
        ]
    },
    "BigCodeBench/1053": {
        "(9, 13)": [
            {
                "api_key": "pd.read_csv",
                "api_call": "pandas.read_csv(file_path, usecols=[0], names=['Text'], header=None)"
            }
        ],
        "(12, 21)": [
            {
                "api_key": "CountVectorizer",
                "api_call": "sklearn.feature_extraction.text.CountVectorizer(stop_words=STOP_WORDS)"
            }
        ],
        "(13, 21)": [
            {
                "api_key": "vectorizer.fit_transform",
                "api_call": "sklearn.feature_extraction.text.CountVectorizer(stop_words=STOP_WORDS).fit_transform(df['Text'].dropna())"
            }
        ],
        "(16, 20)": [
            {
                "api_key": "word_count.sum",
                "api_call": "sklearn.feature_extraction.text.CountVectorizer(stop_words=STOP_WORDS).fit_transform(df['Text'].dropna()).sum(axis=0)"
            }
        ],
        "(18, 55)": [
            {
                "api_key": "vectorizer.vocabulary_.items",
                "api_call": "sklearn.feature_extraction.text.CountVectorizer(stop_words=STOP_WORDS).vocabulary_.items()"
            }
        ],
        "(24, 17)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(top_words, columns=['Word', 'Count'])"
            }
        ],
        "(27, 13)": [
            {
                "api_key": "df_top.plot.bar",
                "api_call": "pandas.DataFrame(top_words, columns=['Word', 'Count']).plot.bar(x='Word', y='Count', rot=0, legend=False)"
            }
        ],
        "(31, 12)": [
            {
                "api_key": "plt.savefig",
                "api_call": "matplotlib.pyplot.savefig(save_path)"
            }
        ],
        "(32, 12)": [
            {
                "api_key": "plt.close",
                "api_call": "matplotlib.pyplot.close()"
            }
        ]
    },
    "BigCodeBench/1057": {
        "(25, 15)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame()"
            }
        ],
        "(31, 9)": [
            {
                "api_key": "pd.DataFrame",
                "api_call": "pandas.DataFrame(data, columns=foods)"
            }
        ],
        "(27, 36)": [
            {
                "api_key": "itertools.product",
                "api_call": "itertools.product(animals, foods)"
            }
        ],
        "(30, 11)": [
            {
                "api_key": "np.array(pairs).reshape",
                "api_call": "numpy.array(pairs).reshape(-1, len(foods))"
            }
        ]
    },
    "BigCodeBench/1077": {
        "(8, 16)": [
            {
                "api_key": "pytz.timezone",
                "api_call": "pytz.timezone(timezone)"
            }
        ],
        "(10, 8)": [
            {
                "api_key": "datetime.strptime",
                "api_call": "datetime.datetime.strptime(ts, '%d/%m/%y %H:%M:%S.%f')"
            }
        ],
        "(11, 24)": [
            {
                "api_key": "pytz.UTC",
                "api_call": "pytz.UTC"
            }
        ],
        "(20, 11)": [
            {
                "api_key": "np.mean",
                "api_call": "numpy.mean(differences)"
            }
        ]
    },
    "BigCodeBench/1085": {
        "(6, 19)": [
            {
                "api_key": "re.sub(f'[{punctuation}]', '', text).lower",
                "api_call": "re.sub(f'[{punctuation}]', '', text).lower()"
            }
        ],
        "(7, 12)": [
            {
                "api_key": "cleaned_text.split",
                "api_call": "re.sub(f'[{punctuation}]', '', text).lower().split()"
            }
        ],
        "(8, 18)": [
            {
                "api_key": "Counter",
                "api_call": "collections.Counter(words)"
            }
        ],
        "(9, 24)": [
            {
                "api_key": "word_counts.most_common",
                "api_call": "collections.Counter(words).most_common(10)"
            }
        ],
        "(12, 12)": [
            {
                "api_key": "plt.subplots",
                "api_call": "matplotlib.pyplot.subplots()"
            }
        ],
        "(14, 8)": [
            {
                "api_key": "ax.bar",
                "api_call": "matplotlib.pyplot.subplots()[1].bar(*zip(*most_common_words))"
            }
        ],
        "(16, 8)": [
            {
                "api_key": "ax.bar",
                "api_call": "matplotlib.pyplot.subplots()[1].bar([], [])"
            }
        ]
    },
    "BigCodeBench/1124": {
        "(10, 16)": [
            {
                "api_key": "re.search",
                "api_call": "re.search('(https?://\\\\S+)', myString)"
            }
        ],
        "(14, 10)": [
            {
                "api_key": "url_match.group",
                "api_call": "re.search('(https?://\\\\S+)', myString).group()"
            }
        ],
        "(15, 13)": [
            {
                "api_key": "urlparse",
                "api_call": "urllib.parse.urlparse(url)"
            }
        ],
        "(19, 19)": [
            {
                "api_key": "requests.get",
                "api_call": "requests.get(url, headers=HEADERS)"
            }
        ],
        "(20, 8)": [
            {
                "api_key": "response.raise_for_status",
                "api_call": "requests.get(url, headers=HEADERS).raise_for_status()"
            }
        ],
        "(21, 11)": [
            {
                "api_key": "requests.RequestException",
                "api_call": "requests.RequestException"
            }
        ],
        "(25, 11)": [
            {
                "api_key": "BeautifulSoup",
                "api_call": "bs4.BeautifulSoup(response.text, 'html.parser')"
            }
        ],
        "(25, 25)": [
            {
                "api_key": "response.text",
                "api_call": "requests.get(url, headers=HEADERS).text"
            }
        ],
        "(26, 12)": [
            {
                "api_key": "soup.title",
                "api_call": "bs4.BeautifulSoup(response.text, 'html.parser').title"
            }
        ]
    },
    "BigCodeBench/1129": {
        "(6, 11)": [
            {
                "api_key": "json.loads",
                "api_call": "json.loads(json_data)"
            }
        ],
        "(9, 15)": [
            {
                "api_key": "requests.get",
                "api_call": "requests.get(url)"
            }
        ],
        "(12, 16)": [
            {
                "api_key": "datetime.now().strftime",
                "api_call": "datetime.datetime.now().strftime('%Y%m%d%H%M%S%f')"
            }
        ],
        "(14, 27)": [
            {
                "api_key": "os.getcwd",
                "api_call": "os.getcwd()"
            }
        ],
        "(15, 16)": [
            {
                "api_key": "os.path.join",
                "api_call": "os.path.join(save_dir, filename)"
            }
        ],
        "(18, 16)": [
            {
                "api_key": "response.content",
                "api_call": "requests.get(url).content"
            }
        ]
    },
    "BigCodeBench/1137": {
        "(14, 19)": [
            {
                "api_key": "requests.get",
                "api_call": "requests.get(url, headers=HEADERS)"
            }
        ],
        "(15, 15)": [
            {
                "api_key": "bs4.BeautifulSoup",
                "api_call": "bs4.BeautifulSoup(response.text, 'html.parser')"
            }
        ],
        "(15, 33)": [
            {
                "api_key": "response.text",
                "api_call": "requests.get(url, headers=HEADERS).text"
            }
        ],
        "(16, 15)": [
            {
                "api_key": "soup.get_text",
                "api_call": "bs4.BeautifulSoup(response.text, 'html.parser').get_text()"
            }
        ],
        "(18, 20)": [
            {
                "api_key": "re.findall",
                "api_call": "re.findall(PHONE_REGEX, text)"
            }
        ],
        "(21, 8)": [
            {
                "api_key": "json.dump",
                "api_call": "json.dump(phone_numbers, f)"
            }
        ]
    }
}